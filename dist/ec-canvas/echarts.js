"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e(t.echarts = {});
}(undefined, function (t) {
  "use strict";
  function e(t) {
    var e = {},
        n = {},
        i = t.match(/Firefox\/([\d.]+)/),
        r = t.match(/MSIE\s([\d.]+)/) || t.match(/Trident\/.+?rv:(([\d.]+))/),
        a = t.match(/Edge\/([\d.]+)/),
        o = /micromessenger/i.test(t);return i && (n.firefox = !0, n.version = i[1]), r && (n.ie = !0, n.version = r[1]), a && (n.edge = !0, n.version = a[1]), o && (n.weChat = !0), { browser: n, os: e, node: !1, canvasSupported: !!document.createElement("canvas").getContext, svgSupported: "undefined" != typeof SVGRect, touchEventsSupported: "ontouchstart" in window && !n.ie && !n.edge, pointerEventsSupported: "onpointerdown" in window && (n.edge || n.ie && n.version >= 11) };
  }function n(t, e) {
    "createCanvas" === t && (Rc = null), Lc[t] = e;
  }function i(t) {
    if (null == t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) return t;var e = t,
        n = Cc.call(t);if ("[object Array]" === n) {
      if (!B(t)) {
        e = [];for (var r = 0, a = t.length; a > r; r++) {
          e[r] = i(t[r]);
        }
      }
    } else if (Sc[n]) {
      if (!B(t)) {
        var o = t.constructor;if (t.constructor.from) e = o.from(t);else {
          e = new o(t.length);for (var r = 0, a = t.length; a > r; r++) {
            e[r] = i(t[r]);
          }
        }
      }
    } else if (!Mc[n] && !B(t) && !I(t)) {
      e = {};for (var s in t) {
        t.hasOwnProperty(s) && (e[s] = i(t[s]));
      }
    }return e;
  }function r(t, e, n) {
    if (!M(e) || !M(t)) return n ? i(e) : t;for (var a in e) {
      if (e.hasOwnProperty(a)) {
        var o = t[a],
            s = e[a];!M(s) || !M(o) || x(s) || x(o) || I(s) || I(o) || S(s) || S(o) || B(s) || B(o) ? !n && a in t || (t[a] = i(e[a], !0)) : r(o, s, n);
      }
    }return t;
  }function a(t, e) {
    for (var n = t[0], i = 1, a = t.length; a > i; i++) {
      n = r(n, t[i], e);
    }return n;
  }function o(t, e) {
    for (var n in e) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }return t;
  }function s(t, e, n) {
    for (var i in e) {
      e.hasOwnProperty(i) && (n ? null != e[i] : null == t[i]) && (t[i] = e[i]);
    }return t;
  }function l() {
    return Rc || (Rc = Oc().getContext("2d")), Rc;
  }function u(t, e) {
    if (t) {
      if (t.indexOf) return t.indexOf(e);for (var n = 0, i = t.length; i > n; n++) {
        if (t[n] === e) return n;
      }
    }return -1;
  }function h(t, e) {
    function n() {}var i = t.prototype;n.prototype = e.prototype, t.prototype = new n();for (var r in i) {
      t.prototype[r] = i[r];
    }t.prototype.constructor = t, t.superClass = e;
  }function c(t, e, n) {
    t = "prototype" in t ? t.prototype : t, e = "prototype" in e ? e.prototype : e, s(t, e, n);
  }function d(t) {
    return t ? "string" == typeof t ? !1 : "number" == typeof t.length : void 0;
  }function f(t, e, n) {
    if (t && e) if (t.forEach && t.forEach === Tc) t.forEach(e, n);else if (t.length === +t.length) for (var i = 0, r = t.length; r > i; i++) {
      e.call(n, t[i], i, t);
    } else for (var a in t) {
      t.hasOwnProperty(a) && e.call(n, t[a], a, t);
    }
  }function p(t, e, n) {
    if (t && e) {
      if (t.map && t.map === Ac) return t.map(e, n);for (var i = [], r = 0, a = t.length; a > r; r++) {
        i.push(e.call(n, t[r], r, t));
      }return i;
    }
  }function g(t, e, n, i) {
    if (t && e) {
      if (t.reduce && t.reduce === Pc) return t.reduce(e, n, i);for (var r = 0, a = t.length; a > r; r++) {
        n = e.call(i, n, t[r], r, t);
      }return n;
    }
  }function v(t, e, n) {
    if (t && e) {
      if (t.filter && t.filter === kc) return t.filter(e, n);for (var i = [], r = 0, a = t.length; a > r; r++) {
        e.call(n, t[r], r, t) && i.push(t[r]);
      }return i;
    }
  }function m(t, e, n) {
    if (t && e) for (var i = 0, r = t.length; r > i; i++) {
      if (e.call(n, t[i], i, t)) return t[i];
    }
  }function y(t, e) {
    var n = Dc.call(arguments, 2);return function () {
      return t.apply(e, n.concat(Dc.call(arguments)));
    };
  }function _(t) {
    var e = Dc.call(arguments, 1);return function () {
      return t.apply(this, e.concat(Dc.call(arguments)));
    };
  }function x(t) {
    return "[object Array]" === Cc.call(t);
  }function w(t) {
    return "function" == typeof t;
  }function b(t) {
    return "[object String]" === Cc.call(t);
  }function M(t) {
    var e = typeof t === "undefined" ? "undefined" : _typeof(t);return "function" === e || !!t && "object" == e;
  }function S(t) {
    return !!Mc[Cc.call(t)];
  }function C(t) {
    return !!Sc[Cc.call(t)];
  }function I(t) {
    return "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && "number" == typeof t.nodeType && "object" == _typeof(t.ownerDocument);
  }function T(t) {
    return t !== t;
  }function k() {
    for (var t = 0, e = arguments.length; e > t; t++) {
      if (null != arguments[t]) return arguments[t];
    }
  }function D(t, e) {
    return null != t ? t : e;
  }function A(t, e, n) {
    return null != t ? t : null != e ? e : n;
  }function P() {
    return Function.call.apply(Dc, arguments);
  }function L(t) {
    if ("number" == typeof t) return [t, t, t, t];var e = t.length;return 2 === e ? [t[0], t[1], t[0], t[1]] : 3 === e ? [t[0], t[1], t[2], t[1]] : t;
  }function O(t, e) {
    if (!t) throw new Error(e);
  }function R(t) {
    return null == t ? null : "function" == typeof t.trim ? t.trim() : t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  }function E(t) {
    t[Ec] = !0;
  }function B(t) {
    return t[Ec];
  }function z(t) {
    function e(t, e) {
      n ? i.set(t, e) : i.set(e, t);
    }var n = x(t),
        i = this;t instanceof z ? t.each(e) : t && f(t, e);
  }function N(t) {
    return new z(t);
  }function F(t, e) {
    for (var n = new t.constructor(t.length + e.length), i = 0; i < t.length; i++) {
      n[i] = t[i];
    }var r = t.length;for (i = 0; i < e.length; i++) {
      n[i + r] = e[i];
    }return n;
  }function V() {}function G(t, e) {
    var n = new zc(2);return null == t && (t = 0), null == e && (e = 0), n[0] = t, n[1] = e, n;
  }function H(t, e) {
    return t[0] = e[0], t[1] = e[1], t;
  }function W(t) {
    var e = new zc(2);return e[0] = t[0], e[1] = t[1], e;
  }function j(t, e, n) {
    return t[0] = e, t[1] = n, t;
  }function q(t, e, n) {
    return t[0] = e[0] + n[0], t[1] = e[1] + n[1], t;
  }function U(t, e, n, i) {
    return t[0] = e[0] + n[0] * i, t[1] = e[1] + n[1] * i, t;
  }function X(t, e, n) {
    return t[0] = e[0] - n[0], t[1] = e[1] - n[1], t;
  }function Y(t) {
    return Math.sqrt(Z(t));
  }function Z(t) {
    return t[0] * t[0] + t[1] * t[1];
  }function $(t, e, n) {
    return t[0] = e[0] * n[0], t[1] = e[1] * n[1], t;
  }function K(t, e, n) {
    return t[0] = e[0] / n[0], t[1] = e[1] / n[1], t;
  }function Q(t, e) {
    return t[0] * e[0] + t[1] * e[1];
  }function J(t, e, n) {
    return t[0] = e[0] * n, t[1] = e[1] * n, t;
  }function te(t, e) {
    var n = Y(e);return 0 === n ? (t[0] = 0, t[1] = 0) : (t[0] = e[0] / n, t[1] = e[1] / n), t;
  }function ee(t, e) {
    return Math.sqrt((t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]));
  }function ne(t, e) {
    return (t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]);
  }function ie(t, e) {
    return t[0] = -e[0], t[1] = -e[1], t;
  }function re(t, e, n, i) {
    return t[0] = e[0] + i * (n[0] - e[0]), t[1] = e[1] + i * (n[1] - e[1]), t;
  }function ae(t, e, n) {
    var i = e[0],
        r = e[1];return t[0] = n[0] * i + n[2] * r + n[4], t[1] = n[1] * i + n[3] * r + n[5], t;
  }function oe(t, e, n) {
    return t[0] = Math.min(e[0], n[0]), t[1] = Math.min(e[1], n[1]), t;
  }function se(t, e, n) {
    return t[0] = Math.max(e[0], n[0]), t[1] = Math.max(e[1], n[1]), t;
  }function le() {
    this.on("mousedown", this._dragStart, this), this.on("mousemove", this._drag, this), this.on("mouseup", this._dragEnd, this), this.on("globalout", this._dragEnd, this);
  }function ue(t, e) {
    return { target: t, topTarget: e && e.topTarget };
  }function he(t, e, n) {
    return { type: t, event: n, target: e.target, topTarget: e.topTarget, cancelBubble: !1, offsetX: n.zrX, offsetY: n.zrY, gestureEvent: n.gestureEvent, pinchX: n.pinchX, pinchY: n.pinchY, pinchScale: n.pinchScale, wheelDelta: n.zrDelta, zrByTouch: n.zrByTouch, which: n.which };
  }function ce() {}function de(t, e, n) {
    if (t[t.rectHover ? "rectContain" : "contain"](e, n)) {
      for (var i, r = t; r;) {
        if (r.clipPath && !r.clipPath.contain(e, n)) return !1;r.silent && (i = !0), r = r.parent;
      }return i ? qc : !0;
    }return !1;
  }function fe() {
    var t = new Yc(6);return pe(t), t;
  }function pe(t) {
    return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t[4] = 0, t[5] = 0, t;
  }function ge(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5], t;
  }function ve(t, e, n) {
    var i = e[0] * n[0] + e[2] * n[1],
        r = e[1] * n[0] + e[3] * n[1],
        a = e[0] * n[2] + e[2] * n[3],
        o = e[1] * n[2] + e[3] * n[3],
        s = e[0] * n[4] + e[2] * n[5] + e[4],
        l = e[1] * n[4] + e[3] * n[5] + e[5];return t[0] = i, t[1] = r, t[2] = a, t[3] = o, t[4] = s, t[5] = l, t;
  }function me(t, e, n) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4] + n[0], t[5] = e[5] + n[1], t;
  }function ye(t, e, n) {
    var i = e[0],
        r = e[2],
        a = e[4],
        o = e[1],
        s = e[3],
        l = e[5],
        u = Math.sin(n),
        h = Math.cos(n);return t[0] = i * h + o * u, t[1] = -i * u + o * h, t[2] = r * h + s * u, t[3] = -r * u + h * s, t[4] = h * a + u * l, t[5] = h * l - u * a, t;
  }function _e(t, e, n) {
    var i = n[0],
        r = n[1];return t[0] = e[0] * i, t[1] = e[1] * r, t[2] = e[2] * i, t[3] = e[3] * r, t[4] = e[4] * i, t[5] = e[5] * r, t;
  }function xe(t, e) {
    var n = e[0],
        i = e[2],
        r = e[4],
        a = e[1],
        o = e[3],
        s = e[5],
        l = n * o - a * i;return l ? (l = 1 / l, t[0] = o * l, t[1] = -a * l, t[2] = -i * l, t[3] = n * l, t[4] = (i * s - o * r) * l, t[5] = (a * r - n * s) * l, t) : null;
  }function we(t) {
    var e = fe();return ge(e, t), e;
  }function be(t) {
    return t > Kc || -Kc > t;
  }function Me(t) {
    this._target = t.target, this._life = t.life || 1e3, this._delay = t.delay || 0, this._initialized = !1, this.loop = null == t.loop ? !1 : t.loop, this.gap = t.gap || 0, this.easing = t.easing || "Linear", this.onframe = t.onframe, this.ondestroy = t.ondestroy, this.onrestart = t.onrestart, this._pausedTime = 0, this._paused = !1;
  }function Se(t) {
    return t = Math.round(t), 0 > t ? 0 : t > 255 ? 255 : t;
  }function Ce(t) {
    return t = Math.round(t), 0 > t ? 0 : t > 360 ? 360 : t;
  }function Ie(t) {
    return 0 > t ? 0 : t > 1 ? 1 : t;
  }function Te(t) {
    return Se(t.length && "%" === t.charAt(t.length - 1) ? parseFloat(t) / 100 * 255 : parseInt(t, 10));
  }function ke(t) {
    return Ie(t.length && "%" === t.charAt(t.length - 1) ? parseFloat(t) / 100 : parseFloat(t));
  }function De(t, e, n) {
    return 0 > n ? n += 1 : n > 1 && (n -= 1), 1 > 6 * n ? t + (e - t) * n * 6 : 1 > 2 * n ? e : 2 > 3 * n ? t + (e - t) * (2 / 3 - n) * 6 : t;
  }function Ae(t, e, n) {
    return t + (e - t) * n;
  }function Pe(t, e, n, i, r) {
    return t[0] = e, t[1] = n, t[2] = i, t[3] = r, t;
  }function Le(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t;
  }function Oe(t, e) {
    ud && Le(ud, e), ud = ld.put(t, ud || e.slice());
  }function Re(t, e) {
    if (t) {
      e = e || [];var n = ld.get(t);if (n) return Le(e, n);t += "";var i = t.replace(/ /g, "").toLowerCase();if (i in sd) return Le(e, sd[i]), Oe(t, e), e;if ("#" !== i.charAt(0)) {
        var r = i.indexOf("("),
            a = i.indexOf(")");if (-1 !== r && a + 1 === i.length) {
          var o = i.substr(0, r),
              s = i.substr(r + 1, a - (r + 1)).split(","),
              l = 1;switch (o) {case "rgba":
              if (4 !== s.length) return void Pe(e, 0, 0, 0, 1);l = ke(s.pop());case "rgb":
              return 3 !== s.length ? void Pe(e, 0, 0, 0, 1) : (Pe(e, Te(s[0]), Te(s[1]), Te(s[2]), l), Oe(t, e), e);case "hsla":
              return 4 !== s.length ? void Pe(e, 0, 0, 0, 1) : (s[3] = ke(s[3]), Ee(s, e), Oe(t, e), e);case "hsl":
              return 3 !== s.length ? void Pe(e, 0, 0, 0, 1) : (Ee(s, e), Oe(t, e), e);default:
              return;}
        }Pe(e, 0, 0, 0, 1);
      } else {
        if (4 === i.length) {
          var u = parseInt(i.substr(1), 16);return u >= 0 && 4095 >= u ? (Pe(e, (3840 & u) >> 4 | (3840 & u) >> 8, 240 & u | (240 & u) >> 4, 15 & u | (15 & u) << 4, 1), Oe(t, e), e) : void Pe(e, 0, 0, 0, 1);
        }if (7 === i.length) {
          var u = parseInt(i.substr(1), 16);return u >= 0 && 16777215 >= u ? (Pe(e, (16711680 & u) >> 16, (65280 & u) >> 8, 255 & u, 1), Oe(t, e), e) : void Pe(e, 0, 0, 0, 1);
        }
      }
    }
  }function Ee(t, e) {
    var n = (parseFloat(t[0]) % 360 + 360) % 360 / 360,
        i = ke(t[1]),
        r = ke(t[2]),
        a = .5 >= r ? r * (i + 1) : r + i - r * i,
        o = 2 * r - a;return e = e || [], Pe(e, Se(255 * De(o, a, n + 1 / 3)), Se(255 * De(o, a, n)), Se(255 * De(o, a, n - 1 / 3)), 1), 4 === t.length && (e[3] = t[3]), e;
  }function Be(t) {
    if (t) {
      var e,
          n,
          i = t[0] / 255,
          r = t[1] / 255,
          a = t[2] / 255,
          o = Math.min(i, r, a),
          s = Math.max(i, r, a),
          l = s - o,
          u = (s + o) / 2;if (0 === l) e = 0, n = 0;else {
        n = .5 > u ? l / (s + o) : l / (2 - s - o);var h = ((s - i) / 6 + l / 2) / l,
            c = ((s - r) / 6 + l / 2) / l,
            d = ((s - a) / 6 + l / 2) / l;i === s ? e = d - c : r === s ? e = 1 / 3 + h - d : a === s && (e = 2 / 3 + c - h), 0 > e && (e += 1), e > 1 && (e -= 1);
      }var f = [360 * e, n, u];return null != t[3] && f.push(t[3]), f;
    }
  }function ze(t, e) {
    var n = Re(t);if (n) {
      for (var i = 0; 3 > i; i++) {
        n[i] = 0 > e ? n[i] * (1 - e) | 0 : (255 - n[i]) * e + n[i] | 0, n[i] > 255 ? n[i] = 255 : t[i] < 0 && (n[i] = 0);
      }return We(n, 4 === n.length ? "rgba" : "rgb");
    }
  }function Ne(t) {
    var e = Re(t);return e ? ((1 << 24) + (e[0] << 16) + (e[1] << 8) + +e[2]).toString(16).slice(1) : void 0;
  }function Fe(t, e, n) {
    if (e && e.length && t >= 0 && 1 >= t) {
      n = n || [];var i = t * (e.length - 1),
          r = Math.floor(i),
          a = Math.ceil(i),
          o = e[r],
          s = e[a],
          l = i - r;return n[0] = Se(Ae(o[0], s[0], l)), n[1] = Se(Ae(o[1], s[1], l)), n[2] = Se(Ae(o[2], s[2], l)), n[3] = Ie(Ae(o[3], s[3], l)), n;
    }
  }function Ve(t, e, n) {
    if (e && e.length && t >= 0 && 1 >= t) {
      var i = t * (e.length - 1),
          r = Math.floor(i),
          a = Math.ceil(i),
          o = Re(e[r]),
          s = Re(e[a]),
          l = i - r,
          u = We([Se(Ae(o[0], s[0], l)), Se(Ae(o[1], s[1], l)), Se(Ae(o[2], s[2], l)), Ie(Ae(o[3], s[3], l))], "rgba");return n ? { color: u, leftIndex: r, rightIndex: a, value: i } : u;
    }
  }function Ge(t, e, n, i) {
    return t = Re(t), t ? (t = Be(t), null != e && (t[0] = Ce(e)), null != n && (t[1] = ke(n)), null != i && (t[2] = ke(i)), We(Ee(t), "rgba")) : void 0;
  }function He(t, e) {
    return t = Re(t), t && null != e ? (t[3] = Ie(e), We(t, "rgba")) : void 0;
  }function We(t, e) {
    if (t && t.length) {
      var n = t[0] + "," + t[1] + "," + t[2];return ("rgba" === e || "hsva" === e || "hsla" === e) && (n += "," + t[3]), e + "(" + n + ")";
    }
  }function je(t, e) {
    return t[e];
  }function qe(t, e, n) {
    t[e] = n;
  }function Ue(t, e, n) {
    return (e - t) * n + t;
  }function Xe(t, e, n) {
    return n > .5 ? e : t;
  }function Ye(t, e, n, i, r) {
    var a = t.length;if (1 == r) for (var o = 0; a > o; o++) {
      i[o] = Ue(t[o], e[o], n);
    } else for (var s = a && t[0].length, o = 0; a > o; o++) {
      for (var l = 0; s > l; l++) {
        i[o][l] = Ue(t[o][l], e[o][l], n);
      }
    }
  }function Ze(t, e, n) {
    var i = t.length,
        r = e.length;if (i !== r) {
      var a = i > r;if (a) t.length = r;else for (var o = i; r > o; o++) {
        t.push(1 === n ? e[o] : fd.call(e[o]));
      }
    }for (var s = t[0] && t[0].length, o = 0; o < t.length; o++) {
      if (1 === n) isNaN(t[o]) && (t[o] = e[o]);else for (var l = 0; s > l; l++) {
        isNaN(t[o][l]) && (t[o][l] = e[o][l]);
      }
    }
  }function $e(t, e, n) {
    if (t === e) return !0;var i = t.length;if (i !== e.length) return !1;if (1 === n) {
      for (var r = 0; i > r; r++) {
        if (t[r] !== e[r]) return !1;
      }
    } else for (var a = t[0].length, r = 0; i > r; r++) {
      for (var o = 0; a > o; o++) {
        if (t[r][o] !== e[r][o]) return !1;
      }
    }return !0;
  }function Ke(t, e, n, i, r, a, o, s, l) {
    var u = t.length;if (1 == l) for (var h = 0; u > h; h++) {
      s[h] = Qe(t[h], e[h], n[h], i[h], r, a, o);
    } else for (var c = t[0].length, h = 0; u > h; h++) {
      for (var d = 0; c > d; d++) {
        s[h][d] = Qe(t[h][d], e[h][d], n[h][d], i[h][d], r, a, o);
      }
    }
  }function Qe(t, e, n, i, r, a, o) {
    var s = .5 * (n - t),
        l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;
  }function Je(t) {
    if (d(t)) {
      var e = t.length;if (d(t[0])) {
        for (var n = [], i = 0; e > i; i++) {
          n.push(fd.call(t[i]));
        }return n;
      }return fd.call(t);
    }return t;
  }function tn(t) {
    return t[0] = Math.floor(t[0]), t[1] = Math.floor(t[1]), t[2] = Math.floor(t[2]), "rgba(" + t.join(",") + ")";
  }function en(t) {
    var e = t[t.length - 1].value;return d(e && e[0]) ? 2 : 1;
  }function nn(t, e, n, i, r, a) {
    var o = t._getter,
        s = t._setter,
        l = "spline" === e,
        u = i.length;if (u) {
      var h,
          c = i[0].value,
          f = d(c),
          p = !1,
          g = !1,
          v = f ? en(i) : 0;i.sort(function (t, e) {
        return t.time - e.time;
      }), h = i[u - 1].time;for (var m = [], y = [], _ = i[0].value, x = !0, w = 0; u > w; w++) {
        m.push(i[w].time / h);var b = i[w].value;if (f && $e(b, _, v) || !f && b === _ || (x = !1), _ = b, "string" == typeof b) {
          var M = Re(b);M ? (b = M, p = !0) : g = !0;
        }y.push(b);
      }if (a || !x) {
        for (var S = y[u - 1], w = 0; u - 1 > w; w++) {
          f ? Ze(y[w], S, v) : !isNaN(y[w]) || isNaN(S) || g || p || (y[w] = S);
        }f && Ze(o(t._target, r), S, v);var C,
            I,
            T,
            k,
            D,
            A,
            P = 0,
            L = 0;if (p) var O = [0, 0, 0, 0];var R = function R(t, e) {
          var n;if (0 > e) n = 0;else if (L > e) {
            for (C = Math.min(P + 1, u - 1), n = C; n >= 0 && !(m[n] <= e); n--) {}n = Math.min(n, u - 2);
          } else {
            for (n = P; u > n && !(m[n] > e); n++) {}n = Math.min(n - 1, u - 2);
          }P = n, L = e;var i = m[n + 1] - m[n];if (0 !== i) if (I = (e - m[n]) / i, l) {
            if (k = y[n], T = y[0 === n ? n : n - 1], D = y[n > u - 2 ? u - 1 : n + 1], A = y[n > u - 3 ? u - 1 : n + 2], f) Ke(T, k, D, A, I, I * I, I * I * I, o(t, r), v);else {
              var a;if (p) a = Ke(T, k, D, A, I, I * I, I * I * I, O, 1), a = tn(O);else {
                if (g) return Xe(k, D, I);a = Qe(T, k, D, A, I, I * I, I * I * I);
              }s(t, r, a);
            }
          } else if (f) Ye(y[n], y[n + 1], I, o(t, r), v);else {
            var a;if (p) Ye(y[n], y[n + 1], I, O, 1), a = tn(O);else {
              if (g) return Xe(y[n], y[n + 1], I);a = Ue(y[n], y[n + 1], I);
            }s(t, r, a);
          }
        },
            E = new Me({ target: t._target, life: h, loop: t._loop, delay: t._delay, onframe: R, ondestroy: n });return e && "spline" !== e && (E.easing = e), E;
      }
    }
  }function rn(t, e, n, i) {
    0 > n && (t += n, n = -n), 0 > i && (e += i, i = -i), this.x = t, this.y = e, this.width = n, this.height = i;
  }function an(t) {
    for (var e = 0; t >= Id;) {
      e |= 1 & t, t >>= 1;
    }return t + e;
  }function on(t, e, n, i) {
    var r = e + 1;if (r === n) return 1;if (i(t[r++], t[e]) < 0) {
      for (; n > r && i(t[r], t[r - 1]) < 0;) {
        r++;
      }sn(t, e, r);
    } else for (; n > r && i(t[r], t[r - 1]) >= 0;) {
      r++;
    }return r - e;
  }function sn(t, e, n) {
    for (n--; n > e;) {
      var i = t[e];t[e++] = t[n], t[n--] = i;
    }
  }function ln(t, e, n, i, r) {
    for (i === e && i++; n > i; i++) {
      for (var a, o = t[i], s = e, l = i; l > s;) {
        a = s + l >>> 1, r(o, t[a]) < 0 ? l = a : s = a + 1;
      }var u = i - s;switch (u) {case 3:
          t[s + 3] = t[s + 2];case 2:
          t[s + 2] = t[s + 1];case 1:
          t[s + 1] = t[s];break;default:
          for (; u > 0;) {
            t[s + u] = t[s + u - 1], u--;
          }}t[s] = o;
    }
  }function un(t, e, n, i, r, a) {
    var o = 0,
        s = 0,
        l = 1;if (a(t, e[n + r]) > 0) {
      for (s = i - r; s > l && a(t, e[n + r + l]) > 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s), o += r, l += r;
    } else {
      for (s = r + 1; s > l && a(t, e[n + r - l]) <= 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s);var u = o;o = r - l, l = r - u;
    }for (o++; l > o;) {
      var h = o + (l - o >>> 1);a(t, e[n + h]) > 0 ? o = h + 1 : l = h;
    }return l;
  }function hn(t, e, n, i, r, a) {
    var o = 0,
        s = 0,
        l = 1;if (a(t, e[n + r]) < 0) {
      for (s = r + 1; s > l && a(t, e[n + r - l]) < 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s);var u = o;o = r - l, l = r - u;
    } else {
      for (s = i - r; s > l && a(t, e[n + r + l]) >= 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s), o += r, l += r;
    }for (o++; l > o;) {
      var h = o + (l - o >>> 1);a(t, e[n + h]) < 0 ? l = h : o = h + 1;
    }return l;
  }function cn(t, e) {
    function n(t, e) {
      l[c] = t, u[c] = e, c += 1;
    }function i() {
      for (; c > 1;) {
        var t = c - 2;if (t >= 1 && u[t - 1] <= u[t] + u[t + 1] || t >= 2 && u[t - 2] <= u[t] + u[t - 1]) u[t - 1] < u[t + 1] && t--;else if (u[t] > u[t + 1]) break;a(t);
      }
    }function r() {
      for (; c > 1;) {
        var t = c - 2;t > 0 && u[t - 1] < u[t + 1] && t--, a(t);
      }
    }function a(n) {
      var i = l[n],
          r = u[n],
          a = l[n + 1],
          h = u[n + 1];u[n] = r + h, n === c - 3 && (l[n + 1] = l[n + 2], u[n + 1] = u[n + 2]), c--;var d = hn(t[a], t, i, r, 0, e);i += d, r -= d, 0 !== r && (h = un(t[i + r - 1], t, a, h, h - 1, e), 0 !== h && (h >= r ? o(i, r, a, h) : s(i, r, a, h)));
    }function o(n, i, r, a) {
      var o = 0;for (o = 0; i > o; o++) {
        d[o] = t[n + o];
      }var s = 0,
          l = r,
          u = n;if (t[u++] = t[l++], 0 !== --a) {
        if (1 === i) {
          for (o = 0; a > o; o++) {
            t[u + o] = t[l + o];
          }return void (t[u + a] = d[s]);
        }for (var c, f, p, g = h;;) {
          c = 0, f = 0, p = !1;do {
            if (e(t[l], d[s]) < 0) {
              if (t[u++] = t[l++], f++, c = 0, 0 === --a) {
                p = !0;break;
              }
            } else if (t[u++] = d[s++], c++, f = 0, 1 === --i) {
              p = !0;break;
            }
          } while (g > (c | f));if (p) break;do {
            if (c = hn(t[l], d, s, i, 0, e), 0 !== c) {
              for (o = 0; c > o; o++) {
                t[u + o] = d[s + o];
              }if (u += c, s += c, i -= c, 1 >= i) {
                p = !0;break;
              }
            }if (t[u++] = t[l++], 0 === --a) {
              p = !0;break;
            }if (f = un(d[s], t, l, a, 0, e), 0 !== f) {
              for (o = 0; f > o; o++) {
                t[u + o] = t[l + o];
              }if (u += f, l += f, a -= f, 0 === a) {
                p = !0;break;
              }
            }if (t[u++] = d[s++], 1 === --i) {
              p = !0;break;
            }g--;
          } while (c >= Td || f >= Td);if (p) break;0 > g && (g = 0), g += 2;
        }if (h = g, 1 > h && (h = 1), 1 === i) {
          for (o = 0; a > o; o++) {
            t[u + o] = t[l + o];
          }t[u + a] = d[s];
        } else {
          if (0 === i) throw new Error();for (o = 0; i > o; o++) {
            t[u + o] = d[s + o];
          }
        }
      } else for (o = 0; i > o; o++) {
        t[u + o] = d[s + o];
      }
    }function s(n, i, r, a) {
      var o = 0;for (o = 0; a > o; o++) {
        d[o] = t[r + o];
      }var s = n + i - 1,
          l = a - 1,
          u = r + a - 1,
          c = 0,
          f = 0;if (t[u--] = t[s--], 0 !== --i) {
        if (1 === a) {
          for (u -= i, s -= i, f = u + 1, c = s + 1, o = i - 1; o >= 0; o--) {
            t[f + o] = t[c + o];
          }return void (t[u] = d[l]);
        }for (var p = h;;) {
          var g = 0,
              v = 0,
              m = !1;do {
            if (e(d[l], t[s]) < 0) {
              if (t[u--] = t[s--], g++, v = 0, 0 === --i) {
                m = !0;break;
              }
            } else if (t[u--] = d[l--], v++, g = 0, 1 === --a) {
              m = !0;break;
            }
          } while (p > (g | v));if (m) break;do {
            if (g = i - hn(d[l], t, n, i, i - 1, e), 0 !== g) {
              for (u -= g, s -= g, i -= g, f = u + 1, c = s + 1, o = g - 1; o >= 0; o--) {
                t[f + o] = t[c + o];
              }if (0 === i) {
                m = !0;break;
              }
            }if (t[u--] = d[l--], 1 === --a) {
              m = !0;break;
            }if (v = a - un(t[s], d, 0, a, a - 1, e), 0 !== v) {
              for (u -= v, l -= v, a -= v, f = u + 1, c = l + 1, o = 0; v > o; o++) {
                t[f + o] = d[c + o];
              }if (1 >= a) {
                m = !0;break;
              }
            }if (t[u--] = t[s--], 0 === --i) {
              m = !0;break;
            }p--;
          } while (g >= Td || v >= Td);if (m) break;0 > p && (p = 0), p += 2;
        }if (h = p, 1 > h && (h = 1), 1 === a) {
          for (u -= i, s -= i, f = u + 1, c = s + 1, o = i - 1; o >= 0; o--) {
            t[f + o] = t[c + o];
          }t[u] = d[l];
        } else {
          if (0 === a) throw new Error();for (c = u - (a - 1), o = 0; a > o; o++) {
            t[c + o] = d[o];
          }
        }
      } else for (c = u - (a - 1), o = 0; a > o; o++) {
        t[c + o] = d[o];
      }
    }var l,
        u,
        h = Td,
        c = 0,
        d = [];l = [], u = [], this.mergeRuns = i, this.forceMergeRuns = r, this.pushRun = n;
  }function dn(t, e, n, i) {
    n || (n = 0), i || (i = t.length);var r = i - n;if (!(2 > r)) {
      var a = 0;if (Id > r) return a = on(t, n, i, e), void ln(t, n, i, n + a, e);var o = new cn(t, e),
          s = an(r);do {
        if (a = on(t, n, i, e), s > a) {
          var l = r;l > s && (l = s), ln(t, n, n + l, n + a, e), a = l;
        }o.pushRun(n, a), o.mergeRuns(), r -= a, n += a;
      } while (0 !== r);o.forceMergeRuns();
    }
  }function fn(t, e) {
    return t.zlevel === e.zlevel ? t.z === e.z ? t.z2 - e.z2 : t.z - e.z : t.zlevel - e.zlevel;
  }function pn(t, e, n) {
    var i = null == e.x ? 0 : e.x,
        r = null == e.x2 ? 1 : e.x2,
        a = null == e.y ? 0 : e.y,
        o = null == e.y2 ? 0 : e.y2;e.global || (i = i * n.width + n.x, r = r * n.width + n.x, a = a * n.height + n.y, o = o * n.height + n.y), i = isNaN(i) ? 0 : i, r = isNaN(r) ? 1 : r, a = isNaN(a) ? 0 : a, o = isNaN(o) ? 0 : o;var s = t.createLinearGradient(i, a, r, o);return s;
  }function gn(t, e, n) {
    var i = n.width,
        r = n.height,
        a = Math.min(i, r),
        o = null == e.x ? .5 : e.x,
        s = null == e.y ? .5 : e.y,
        l = null == e.r ? .5 : e.r;e.global || (o = o * i + n.x, s = s * r + n.y, l *= a);var u = t.createRadialGradient(o, s, 0, o, s, l);return u;
  }function vn() {
    return !1;
  }function mn(t, e, n) {
    var i = Oc(),
        r = e.getWidth(),
        a = e.getHeight(),
        o = i.style;return o && (o.position = "absolute", o.left = 0, o.top = 0, o.width = r + "px", o.height = a + "px", i.setAttribute("data-zr-dom-id", t)), i.width = r * n, i.height = a * n, i;
  }function yn(t) {
    if ("string" == typeof t) {
      var e = Fd.get(t);return e && e.image;
    }return t;
  }function _n(t, e, n, i, r) {
    if (t) {
      if ("string" == typeof t) {
        if (e && e.__zrImageSrc === t || !n) return e;var a = Fd.get(t),
            o = { hostEl: n, cb: i, cbPayload: r };return a ? (e = a.image, !wn(e) && a.pending.push(o)) : (!e && (e = new Image()), e.onload = xn, Fd.put(t, e.__cachedImgObj = { image: e, pending: [o] }), e.src = e.__zrImageSrc = t), e;
      }return t;
    }return e;
  }function xn() {
    var t = this.__cachedImgObj;this.onload = this.__cachedImgObj = null;for (var e = 0; e < t.pending.length; e++) {
      var n = t.pending[e],
          i = n.cb;i && i(this, n.cbPayload), n.hostEl.dirty();
    }t.pending.length = 0;
  }function wn(t) {
    return t && t.width && t.height;
  }function bn(t, e) {
    e = e || jd;var n = t + ":" + e;if (Vd[n]) return Vd[n];for (var i = (t + "").split("\n"), r = 0, a = 0, o = i.length; o > a; a++) {
      r = Math.max(Rn(i[a], e).width, r);
    }return Gd > Hd && (Gd = 0, Vd = {}), Gd++, Vd[n] = r, r;
  }function Mn(t, e, n, i, r, a, o) {
    return a ? Cn(t, e, n, i, r, a, o) : Sn(t, e, n, i, r, o);
  }function Sn(t, e, n, i, r, a) {
    var o = En(t, e, r, a),
        s = bn(t, e);r && (s += r[1] + r[3]);var l = o.outerHeight,
        u = In(0, s, n),
        h = Tn(0, l, i),
        c = new rn(u, h, s, l);return c.lineHeight = o.lineHeight, c;
  }function Cn(t, e, n, i, r, a, o) {
    var s = Bn(t, { rich: a, truncate: o, font: e, textAlign: n, textPadding: r }),
        l = s.outerWidth,
        u = s.outerHeight,
        h = In(0, l, n),
        c = Tn(0, u, i);return new rn(h, c, l, u);
  }function In(t, e, n) {
    return "right" === n ? t -= e : "center" === n && (t -= e / 2), t;
  }function Tn(t, e, n) {
    return "middle" === n ? t -= e / 2 : "bottom" === n && (t -= e), t;
  }function kn(t, e, n) {
    var i = e.x,
        r = e.y,
        a = e.height,
        o = e.width,
        s = a / 2,
        l = "left",
        u = "top";switch (t) {case "left":
        i -= n, r += s, l = "right", u = "middle";break;case "right":
        i += n + o, r += s, u = "middle";break;case "top":
        i += o / 2, r -= n, l = "center", u = "bottom";break;case "bottom":
        i += o / 2, r += a + n, l = "center";break;case "inside":
        i += o / 2, r += s, l = "center", u = "middle";break;case "insideLeft":
        i += n, r += s, u = "middle";break;case "insideRight":
        i += o - n, r += s, l = "right", u = "middle";break;case "insideTop":
        i += o / 2, r += n, l = "center";break;case "insideBottom":
        i += o / 2, r += a - n, l = "center", u = "bottom";break;case "insideTopLeft":
        i += n, r += n;break;case "insideTopRight":
        i += o - n, r += n, l = "right";break;case "insideBottomLeft":
        i += n, r += a - n, u = "bottom";break;case "insideBottomRight":
        i += o - n, r += a - n, l = "right", u = "bottom";}return { x: i, y: r, textAlign: l, textVerticalAlign: u };
  }function Dn(t, e, n, i, r) {
    if (!e) return "";var a = (t + "").split("\n");r = An(e, n, i, r);for (var o = 0, s = a.length; s > o; o++) {
      a[o] = Pn(a[o], r);
    }return a.join("\n");
  }function An(t, e, n, i) {
    i = o({}, i), i.font = e;var n = D(n, "...");i.maxIterations = D(i.maxIterations, 2);var r = i.minChar = D(i.minChar, 0);i.cnCharWidth = bn("国", e);var a = i.ascCharWidth = bn("a", e);i.placeholder = D(i.placeholder, "");for (var s = t = Math.max(0, t - 1), l = 0; r > l && s >= a; l++) {
      s -= a;
    }var u = bn(n);return u > s && (n = "", u = 0), s = t - u, i.ellipsis = n, i.ellipsisWidth = u, i.contentWidth = s, i.containerWidth = t, i;
  }function Pn(t, e) {
    var n = e.containerWidth,
        i = e.font,
        r = e.contentWidth;if (!n) return "";var a = bn(t, i);if (n >= a) return t;for (var o = 0;; o++) {
      if (r >= a || o >= e.maxIterations) {
        t += e.ellipsis;break;
      }var s = 0 === o ? Ln(t, r, e.ascCharWidth, e.cnCharWidth) : a > 0 ? Math.floor(t.length * r / a) : 0;t = t.substr(0, s), a = bn(t, i);
    }return "" === t && (t = e.placeholder), t;
  }function Ln(t, e, n, i) {
    for (var r = 0, a = 0, o = t.length; o > a && e > r; a++) {
      var s = t.charCodeAt(a);r += s >= 0 && 127 >= s ? n : i;
    }return a;
  }function On(t) {
    return bn("国", t);
  }function Rn(t, e) {
    return qd.measureText(t, e);
  }function En(t, e, n, i) {
    null != t && (t += "");var r = On(e),
        a = t ? t.split("\n") : [],
        o = a.length * r,
        s = o;if (n && (s += n[0] + n[2]), t && i) {
      var l = i.outerHeight,
          u = i.outerWidth;if (null != l && s > l) t = "", a = [];else if (null != u) for (var h = An(u - (n ? n[1] + n[3] : 0), e, i.ellipsis, { minChar: i.minChar, placeholder: i.placeholder }), c = 0, d = a.length; d > c; c++) {
        a[c] = Pn(a[c], h);
      }
    }return { lines: a, height: o, outerHeight: s, lineHeight: r };
  }function Bn(t, e) {
    var n = { lines: [], width: 0, height: 0 };if (null != t && (t += ""), !t) return n;for (var i, r = Wd.lastIndex = 0; null != (i = Wd.exec(t));) {
      var a = i.index;a > r && zn(n, t.substring(r, a)), zn(n, i[2], i[1]), r = Wd.lastIndex;
    }r < t.length && zn(n, t.substring(r, t.length));var o = n.lines,
        s = 0,
        l = 0,
        u = [],
        h = e.textPadding,
        c = e.truncate,
        d = c && c.outerWidth,
        f = c && c.outerHeight;h && (null != d && (d -= h[1] + h[3]), null != f && (f -= h[0] + h[2]));for (var p = 0; p < o.length; p++) {
      for (var g = o[p], v = 0, m = 0, y = 0; y < g.tokens.length; y++) {
        var _ = g.tokens[y],
            x = _.styleName && e.rich[_.styleName] || {},
            w = _.textPadding = x.textPadding,
            b = _.font = x.font || e.font,
            M = _.textHeight = D(x.textHeight, On(b));if (w && (M += w[0] + w[2]), _.height = M, _.lineHeight = A(x.textLineHeight, e.textLineHeight, M), _.textAlign = x && x.textAlign || e.textAlign, _.textVerticalAlign = x && x.textVerticalAlign || "middle", null != f && s + _.lineHeight > f) return { lines: [], width: 0, height: 0 };_.textWidth = bn(_.text, b);var S = x.textWidth,
            C = null == S || "auto" === S;if ("string" == typeof S && "%" === S.charAt(S.length - 1)) _.percentWidth = S, u.push(_), S = 0;else {
          if (C) {
            S = _.textWidth;var I = x.textBackgroundColor,
                T = I && I.image;T && (T = yn(T), wn(T) && (S = Math.max(S, T.width * M / T.height)));
          }var k = w ? w[1] + w[3] : 0;S += k;var P = null != d ? d - m : null;null != P && S > P && (!C || k > P ? (_.text = "", _.textWidth = S = 0) : (_.text = Dn(_.text, P - k, b, c.ellipsis, { minChar: c.minChar }), _.textWidth = bn(_.text, b), S = _.textWidth + k));
        }m += _.width = S, x && (v = Math.max(v, _.lineHeight));
      }g.width = m, g.lineHeight = v, s += v, l = Math.max(l, m);
    }n.outerWidth = n.width = D(e.textWidth, l), n.outerHeight = n.height = D(e.textHeight, s), h && (n.outerWidth += h[1] + h[3], n.outerHeight += h[0] + h[2]);for (var p = 0; p < u.length; p++) {
      var _ = u[p],
          L = _.percentWidth;_.width = parseInt(L, 10) / 100 * l;
    }return n;
  }function zn(t, e, n) {
    for (var i = "" === e, r = e.split("\n"), a = t.lines, o = 0; o < r.length; o++) {
      var s = r[o],
          l = { styleName: n, text: s, isLineHolder: !s && !i };if (o) a.push({ tokens: [l] });else {
        var u = (a[a.length - 1] || (a[0] = { tokens: [] })).tokens,
            h = u.length;1 === h && u[0].isLineHolder ? u[0] = l : (s || !h || i) && u.push(l);
      }
    }
  }function Nn(t) {
    var e = (t.fontSize || t.fontFamily) && [t.fontStyle, t.fontWeight, (t.fontSize || 12) + "px", t.fontFamily || "sans-serif"].join(" ");return e && R(e) || t.textFont || t.font;
  }function Fn(t, e) {
    var n,
        i,
        r,
        a,
        o = e.x,
        s = e.y,
        l = e.width,
        u = e.height,
        h = e.r;0 > l && (o += l, l = -l), 0 > u && (s += u, u = -u), "number" == typeof h ? n = i = r = a = h : h instanceof Array ? 1 === h.length ? n = i = r = a = h[0] : 2 === h.length ? (n = r = h[0], i = a = h[1]) : 3 === h.length ? (n = h[0], i = a = h[1], r = h[2]) : (n = h[0], i = h[1], r = h[2], a = h[3]) : n = i = r = a = 0;var c;n + i > l && (c = n + i, n *= l / c, i *= l / c), r + a > l && (c = r + a, r *= l / c, a *= l / c), i + r > u && (c = i + r, i *= u / c, r *= u / c), n + a > u && (c = n + a, n *= u / c, a *= u / c), t.moveTo(o + n, s), t.lineTo(o + l - i, s), 0 !== i && t.arc(o + l - i, s + i, i, -Math.PI / 2, 0), t.lineTo(o + l, s + u - r), 0 !== r && t.arc(o + l - r, s + u - r, r, 0, Math.PI / 2), t.lineTo(o + a, s + u), 0 !== a && t.arc(o + a, s + u - a, a, Math.PI / 2, Math.PI), t.lineTo(o, s + n), 0 !== n && t.arc(o + n, s + n, n, Math.PI, 1.5 * Math.PI);
  }function Vn(t) {
    return Gn(t), f(t.rich, Gn), t;
  }function Gn(t) {
    if (t) {
      t.font = Nn(t);var e = t.textAlign;"middle" === e && (e = "center"), t.textAlign = null == e || Ud[e] ? e : "left";var n = t.textVerticalAlign || t.textBaseline;"center" === n && (n = "middle"), t.textVerticalAlign = null == n || Xd[n] ? n : "top";var i = t.textPadding;i && (t.textPadding = L(t.textPadding));
    }
  }function Hn(t, e, n, i, r) {
    i.rich ? jn(t, e, n, i, r) : Wn(t, e, n, i, r);
  }function Wn(t, e, n, i, r) {
    var a = Qn(e, "font", i.font || jd),
        o = i.textPadding,
        s = t.__textCotentBlock;(!s || t.__dirty) && (s = t.__textCotentBlock = En(n, a, o, i.truncate));var l = s.outerHeight,
        u = s.lines,
        h = s.lineHeight,
        c = Kn(l, i, r),
        d = c.baseX,
        f = c.baseY,
        p = c.textAlign,
        g = c.textVerticalAlign;Un(e, i, r, d, f);var v = Tn(f, l, g),
        m = d,
        y = v,
        _ = Yn(i);if (_ || o) {
      var x = bn(n, a),
          w = x;o && (w += o[1] + o[3]);var b = In(d, w, p);_ && Zn(t, e, i, b, v, w, l), o && (m = ni(d, p, o), y += o[0]);
    }Qn(e, "textAlign", p || "left"), Qn(e, "textBaseline", "middle"), Qn(e, "shadowBlur", i.textShadowBlur || 0), Qn(e, "shadowColor", i.textShadowColor || "transparent"), Qn(e, "shadowOffsetX", i.textShadowOffsetX || 0), Qn(e, "shadowOffsetY", i.textShadowOffsetY || 0), y += h / 2;var M = i.textStrokeWidth,
        S = Jn(i.textStroke, M),
        C = ti(i.textFill);S && (Qn(e, "lineWidth", M), Qn(e, "strokeStyle", S)), C && Qn(e, "fillStyle", C);for (var I = 0; I < u.length; I++) {
      S && e.strokeText(u[I], m, y), C && e.fillText(u[I], m, y), y += h;
    }
  }function jn(t, e, n, i, r) {
    var a = t.__textCotentBlock;(!a || t.__dirty) && (a = t.__textCotentBlock = Bn(n, i)), qn(t, e, a, i, r);
  }function qn(t, e, n, i, r) {
    var a = n.width,
        o = n.outerWidth,
        s = n.outerHeight,
        l = i.textPadding,
        u = Kn(s, i, r),
        h = u.baseX,
        c = u.baseY,
        d = u.textAlign,
        f = u.textVerticalAlign;Un(e, i, r, h, c);var p = In(h, o, d),
        g = Tn(c, s, f),
        v = p,
        m = g;l && (v += l[3], m += l[0]);var y = v + a;Yn(i) && Zn(t, e, i, p, g, o, s);for (var _ = 0; _ < n.lines.length; _++) {
      for (var x, w = n.lines[_], b = w.tokens, M = b.length, S = w.lineHeight, C = w.width, I = 0, T = v, k = y, D = M - 1; M > I && (x = b[I], !x.textAlign || "left" === x.textAlign);) {
        Xn(t, e, x, i, S, m, T, "left"), C -= x.width, T += x.width, I++;
      }for (; D >= 0 && (x = b[D], "right" === x.textAlign);) {
        Xn(t, e, x, i, S, m, k, "right"), C -= x.width, k -= x.width, D--;
      }for (T += (a - (T - v) - (y - k) - C) / 2; D >= I;) {
        x = b[I], Xn(t, e, x, i, S, m, T + x.width / 2, "center"), T += x.width, I++;
      }m += S;
    }
  }function Un(t, e, n, i, r) {
    if (n && e.textRotation) {
      var a = e.textOrigin;"center" === a ? (i = n.width / 2 + n.x, r = n.height / 2 + n.y) : a && (i = a[0] + n.x, r = a[1] + n.y), t.translate(i, r), t.rotate(-e.textRotation), t.translate(-i, -r);
    }
  }function Xn(t, e, n, i, r, a, o, s) {
    var l = i.rich[n.styleName] || {},
        u = n.textVerticalAlign,
        h = a + r / 2;"top" === u ? h = a + n.height / 2 : "bottom" === u && (h = a + r - n.height / 2), !n.isLineHolder && Yn(l) && Zn(t, e, l, "right" === s ? o - n.width : "center" === s ? o - n.width / 2 : o, h - n.height / 2, n.width, n.height);var c = n.textPadding;c && (o = ni(o, s, c), h -= n.height / 2 - c[2] - n.textHeight / 2), Qn(e, "shadowBlur", A(l.textShadowBlur, i.textShadowBlur, 0)), Qn(e, "shadowColor", l.textShadowColor || i.textShadowColor || "transparent"), Qn(e, "shadowOffsetX", A(l.textShadowOffsetX, i.textShadowOffsetX, 0)), Qn(e, "shadowOffsetY", A(l.textShadowOffsetY, i.textShadowOffsetY, 0)), Qn(e, "textAlign", s), Qn(e, "textBaseline", "middle"), Qn(e, "font", n.font || jd);var d = Jn(l.textStroke || i.textStroke, p),
        f = ti(l.textFill || i.textFill),
        p = D(l.textStrokeWidth, i.textStrokeWidth);d && (Qn(e, "lineWidth", p), Qn(e, "strokeStyle", d), e.strokeText(n.text, o, h)), f && (Qn(e, "fillStyle", f), e.fillText(n.text, o, h));
  }function Yn(t) {
    return t.textBackgroundColor || t.textBorderWidth && t.textBorderColor;
  }function Zn(t, e, n, i, r, a, o) {
    var s = n.textBackgroundColor,
        l = n.textBorderWidth,
        u = n.textBorderColor,
        h = b(s);if (Qn(e, "shadowBlur", n.textBoxShadowBlur || 0), Qn(e, "shadowColor", n.textBoxShadowColor || "transparent"), Qn(e, "shadowOffsetX", n.textBoxShadowOffsetX || 0), Qn(e, "shadowOffsetY", n.textBoxShadowOffsetY || 0), h || l && u) {
      e.beginPath();var c = n.textBorderRadius;c ? Fn(e, { x: i, y: r, width: a, height: o, r: c }) : e.rect(i, r, a, o), e.closePath();
    }if (h) Qn(e, "fillStyle", s), e.fill();else if (M(s)) {
      var d = s.image;d = _n(d, null, t, $n, s), d && wn(d) && e.drawImage(d, i, r, a, o);
    }l && u && (Qn(e, "lineWidth", l), Qn(e, "strokeStyle", u), e.stroke());
  }function $n(t, e) {
    e.image = t;
  }function Kn(t, e, n) {
    var i = e.x || 0,
        r = e.y || 0,
        a = e.textAlign,
        o = e.textVerticalAlign;if (n) {
      var s = e.textPosition;if (s instanceof Array) i = n.x + ei(s[0], n.width), r = n.y + ei(s[1], n.height);else {
        var l = kn(s, n, e.textDistance);i = l.x, r = l.y, a = a || l.textAlign, o = o || l.textVerticalAlign;
      }var u = e.textOffset;u && (i += u[0], r += u[1]);
    }return { baseX: i, baseY: r, textAlign: a, textVerticalAlign: o };
  }function Qn(t, e, n) {
    return t[e] = Ad(t, e, n), t[e];
  }function Jn(t, e) {
    return null == t || 0 >= e || "transparent" === t || "none" === t ? null : t.image || t.colorStops ? "#000" : t;
  }function ti(t) {
    return null == t || "none" === t ? null : t.image || t.colorStops ? "#000" : t;
  }function ei(t, e) {
    return "string" == typeof t ? t.lastIndexOf("%") >= 0 ? parseFloat(t) / 100 * e : parseFloat(t) : t;
  }function ni(t, e, n) {
    return "right" === e ? t - n[1] : "center" === e ? t + n[3] / 2 - n[1] / 2 : t + n[3];
  }function ii(t, e) {
    return null != t && (t || e.textBackgroundColor || e.textBorderWidth && e.textBorderColor || e.textPadding);
  }function ri(t) {
    t = t || {}, wd.call(this, t);for (var e in t) {
      t.hasOwnProperty(e) && "style" !== e && (this[e] = t[e]);
    }this.style = new Ld(t.style, this), this._rect = null, this.__clipPaths = [];
  }function ai(t) {
    ri.call(this, t);
  }function oi(t) {
    return parseInt(t, 10);
  }function si(t) {
    return t ? t.__builtin__ ? !0 : "function" != typeof t.resize || "function" != typeof t.refresh ? !1 : !0 : !1;
  }function li(t, e, n) {
    return tf.copy(t.getBoundingRect()), t.transform && tf.applyTransform(t.transform), ef.width = e, ef.height = n, !tf.intersect(ef);
  }function ui(t, e) {
    if (t == e) return !1;if (!t || !e || t.length !== e.length) return !0;for (var n = 0; n < t.length; n++) {
      if (t[n] !== e[n]) return !0;
    }
  }function hi(t, e) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];i.setTransform(e), e.beginPath(), i.buildPath(e, i.shape), e.clip(), i.restoreTransform(e);
    }
  }function ci(t, e) {
    var n = document.createElement("div");return n.style.cssText = ["position:relative", "overflow:hidden", "width:" + t + "px", "height:" + e + "px", "padding:0", "margin:0", "border-width:0"].join(";") + ";", n;
  }function di(t) {
    return t.getBoundingClientRect ? t.getBoundingClientRect() : { left: 0, top: 0 };
  }function fi(t, e, n, i) {
    return n = n || {}, i || !bc.canvasSupported ? pi(t, e, n) : bc.browser.firefox && null != e.layerX && e.layerX !== e.offsetX ? (n.zrX = e.layerX, n.zrY = e.layerY) : null != e.offsetX ? (n.zrX = e.offsetX, n.zrY = e.offsetY) : pi(t, e, n), n;
  }function pi(t, e, n) {
    var i = di(t);n.zrX = e.clientX - i.left, n.zrY = e.clientY - i.top;
  }function gi(t, e, n) {
    if (e = e || window.event, null != e.zrX) return e;var i = e.type,
        r = i && i.indexOf("touch") >= 0;if (r) {
      var a = "touchend" != i ? e.targetTouches[0] : e.changedTouches[0];a && fi(t, a, e, n);
    } else fi(t, e, e, n), e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;var o = e.button;return null == e.which && void 0 !== o && af.test(e.type) && (e.which = 1 & o ? 1 : 2 & o ? 3 : 4 & o ? 2 : 0), e;
  }function vi(t, e, n) {
    rf ? t.addEventListener(e, n) : t.attachEvent("on" + e, n);
  }function mi(t, e, n) {
    rf ? t.removeEventListener(e, n) : t.detachEvent("on" + e, n);
  }function yi(t) {
    var e = t[1][0] - t[0][0],
        n = t[1][1] - t[0][1];return Math.sqrt(e * e + n * n);
  }function _i(t) {
    return [(t[0][0] + t[1][0]) / 2, (t[0][1] + t[1][1]) / 2];
  }function xi(t) {
    return "mousewheel" === t && bc.browser.firefox ? "DOMMouseScroll" : t;
  }function wi(t, e, n) {
    var i = t._gestureMgr;"start" === n && i.clear();var r = i.recognize(e, t.handler.findHover(e.zrX, e.zrY, null).target, t.dom);if ("end" === n && i.clear(), r) {
      var a = r.type;e.gestureEvent = a, t.handler.dispatchToElement({ target: r.target }, a, r.event);
    }
  }function bi(t) {
    t._touching = !0, clearTimeout(t._touchTimer), t._touchTimer = setTimeout(function () {
      t._touching = !1;
    }, 700);
  }function Mi(t) {
    var e = t.pointerType;return "pen" === e || "touch" === e;
  }function Si(t) {
    function e(t, e) {
      return function () {
        return e._touching ? void 0 : t.apply(e, arguments);
      };
    }f(cf, function (e) {
      t._handlers[e] = y(pf[e], t);
    }), f(ff, function (e) {
      t._handlers[e] = y(pf[e], t);
    }), f(hf, function (n) {
      t._handlers[n] = e(pf[n], t);
    });
  }function Ci(t) {
    function e(e, n) {
      f(e, function (e) {
        vi(t, xi(e), n._handlers[e]);
      }, n);
    }jc.call(this), this.dom = t, this._touching = !1, this._touchTimer, this._gestureMgr = new sf(), this._handlers = {}, Si(this), bc.pointerEventsSupported ? e(ff, this) : (bc.touchEventsSupported && e(cf, this), e(hf, this));
  }function Ii(t, e) {
    var n = new xf(xc(), t, e);return yf[n.id] = n, n;
  }function Ti(t) {
    if (t) t.dispose();else {
      for (var e in yf) {
        yf.hasOwnProperty(e) && yf[e].dispose();
      }yf = {};
    }return this;
  }function ki(t) {
    return yf[t];
  }function Di(t, e) {
    mf[t] = e;
  }function Ai(t) {
    delete yf[t];
  }function Pi(t) {
    return t instanceof Array ? t : null == t ? [] : [t];
  }function Li(t, e, n) {
    if (t) {
      t[e] = t[e] || {}, t.emphasis = t.emphasis || {}, t.emphasis[e] = t.emphasis[e] || {};for (var i = 0, r = n.length; r > i; i++) {
        var a = n[i];!t.emphasis[e].hasOwnProperty(a) && t[e].hasOwnProperty(a) && (t.emphasis[e][a] = t[e][a]);
      }
    }
  }function Oi(t) {
    return !Mf(t) || Sf(t) || t instanceof Date ? t : t.value;
  }function Ri(t) {
    return Mf(t) && !(t instanceof Array);
  }function Ei(t, e) {
    e = (e || []).slice();var n = p(t || [], function (t) {
      return { exist: t };
    });return bf(e, function (t, i) {
      if (Mf(t)) {
        for (var r = 0; r < n.length; r++) {
          if (!n[r].option && null != t.id && n[r].exist.id === t.id + "") return n[r].option = t, void (e[i] = null);
        }for (var r = 0; r < n.length; r++) {
          var a = n[r].exist;if (!(n[r].option || null != a.id && null != t.id || null == t.name || Ni(t) || Ni(a) || a.name !== t.name + "")) return n[r].option = t, void (e[i] = null);
        }
      }
    }), bf(e, function (t) {
      if (Mf(t)) {
        for (var e = 0; e < n.length; e++) {
          var i = n[e].exist;if (!n[e].option && !Ni(i) && null == t.id) {
            n[e].option = t;break;
          }
        }e >= n.length && n.push({ option: t });
      }
    }), n;
  }function Bi(t) {
    var e = N();bf(t, function (t) {
      var n = t.exist;n && e.set(n.id, t);
    }), bf(t, function (t) {
      var n = t.option;O(!n || null == n.id || !e.get(n.id) || e.get(n.id) === t, "id duplicates: " + (n && n.id)), n && null != n.id && e.set(n.id, t), !t.keyInfo && (t.keyInfo = {});
    }), bf(t, function (t, n) {
      var i = t.exist,
          r = t.option,
          a = t.keyInfo;if (Mf(r)) {
        if (a.name = null != r.name ? r.name + "" : i ? i.name : Cf + n, i) a.id = i.id;else if (null != r.id) a.id = r.id + "";else {
          var o = 0;do {
            a.id = "\x00" + a.name + "\x00" + o++;
          } while (e.get(a.id));
        }e.set(a.id, t);
      }
    });
  }function zi(t) {
    var e = t.name;return !(!e || !e.indexOf(Cf));
  }function Ni(t) {
    return Mf(t) && t.id && 0 === (t.id + "").indexOf("\x00_ec_\x00");
  }function Fi(t, e) {
    return null != e.dataIndexInside ? e.dataIndexInside : null != e.dataIndex ? x(e.dataIndex) ? p(e.dataIndex, function (e) {
      return t.indexOfRawIndex(e);
    }) : t.indexOfRawIndex(e.dataIndex) : null != e.name ? x(e.name) ? p(e.name, function (e) {
      return t.indexOfName(e);
    }) : t.indexOfName(e.name) : void 0;
  }function Vi() {
    var t = "__\x00ec_inner_" + Tf++ + "_" + Math.random().toFixed(5);return function (e) {
      return e[t] || (e[t] = {});
    };
  }function Gi(t, e, n) {
    if (b(e)) {
      var i = {};i[e + "Index"] = 0, e = i;
    }var r = n && n.defaultMainType;!r || Hi(e, r + "Index") || Hi(e, r + "Id") || Hi(e, r + "Name") || (e[r + "Index"] = 0);var a = {};return bf(e, function (i, r) {
      var i = e[r];if ("dataIndex" === r || "dataIndexInside" === r) return void (a[r] = i);var o = r.match(/^(\w+)(Index|Id|Name)$/) || [],
          s = o[1],
          l = (o[2] || "").toLowerCase();if (!(!s || !l || null == i || "index" === l && "none" === i || n && n.includeMainTypes && u(n.includeMainTypes, s) < 0)) {
        var h = { mainType: s };("index" !== l || "all" !== i) && (h[l] = i);var c = t.queryComponents(h);a[s + "Models"] = c, a[s + "Model"] = c[0];
      }
    }), a;
  }function Hi(t, e) {
    return t && t.hasOwnProperty(e);
  }function Wi(t, e, n) {
    t.setAttribute ? t.setAttribute(e, n) : t[e] = n;
  }function ji(t, e) {
    return t.getAttribute ? t.getAttribute(e) : t[e];
  }function qi(t) {
    var e = { main: "", sub: "" };return t && (t = t.split(kf), e.main = t[0] || "", e.sub = t[1] || ""), e;
  }function Ui(t) {
    O(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(t), 'componentType "' + t + '" illegal');
  }function Xi(t) {
    t.$constructor = t, t.extend = function (t) {
      var e = this,
          n = function n() {
        t.$constructor ? t.$constructor.apply(this, arguments) : e.apply(this, arguments);
      };return o(n.prototype, t), n.extend = this.extend, n.superCall = Zi, n.superApply = $i, h(n, this), n.superClass = e, n;
    };
  }function Yi(t) {
    var e = ["__\x00is_clz", Af++, Math.random().toFixed(3)].join("_");t.prototype[e] = !0, t.isInstance = function (t) {
      return !(!t || !t[e]);
    };
  }function Zi(t, e) {
    var n = P(arguments, 2);return this.superClass.prototype[e].apply(t, n);
  }function $i(t, e, n) {
    return this.superClass.prototype[e].apply(t, n);
  }function Ki(t, e) {
    function n(t) {
      var e = i[t.main];return e && e[Df] || (e = i[t.main] = {}, e[Df] = !0), e;
    }e = e || {};var i = {};if (t.registerClass = function (t, e) {
      if (e) if (Ui(e), e = qi(e), e.sub) {
        if (e.sub !== Df) {
          var r = n(e);r[e.sub] = t;
        }
      } else i[e.main] = t;return t;
    }, t.getClass = function (t, e, n) {
      var r = i[t];if (r && r[Df] && (r = e ? r[e] : null), n && !r) throw new Error(e ? "Component " + t + "." + (e || "") + " not exists. Load it first." : t + ".type should be specified.");return r;
    }, t.getClassesByMainType = function (t) {
      t = qi(t);var e = [],
          n = i[t.main];return n && n[Df] ? f(n, function (t, n) {
        n !== Df && e.push(t);
      }) : e.push(n), e;
    }, t.hasClass = function (t) {
      return t = qi(t), !!i[t.main];
    }, t.getAllClassMainTypes = function () {
      var t = [];return f(i, function (e, n) {
        t.push(n);
      }), t;
    }, t.hasSubTypes = function (t) {
      t = qi(t);var e = i[t.main];return e && e[Df];
    }, t.parseClassType = qi, e.registerWhenExtend) {
      var r = t.extend;r && (t.extend = function (e) {
        var n = r.call(this, e);return t.registerClass(n, e.type);
      });
    }return t;
  }function Qi(t) {
    return t > -Nf && Nf > t;
  }function Ji(t) {
    return t > Nf || -Nf > t;
  }function tr(t, e, n, i, r) {
    var a = 1 - r;return a * a * (a * t + 3 * r * e) + r * r * (r * i + 3 * a * n);
  }function er(t, e, n, i, r) {
    var a = 1 - r;return 3 * (((e - t) * a + 2 * (n - e) * r) * a + (i - n) * r * r);
  }function nr(t, e, n, i, r, a) {
    var o = i + 3 * (e - n) - t,
        s = 3 * (n - 2 * e + t),
        l = 3 * (e - t),
        u = t - r,
        h = s * s - 3 * o * l,
        c = s * l - 9 * o * u,
        d = l * l - 3 * s * u,
        f = 0;if (Qi(h) && Qi(c)) {
      if (Qi(s)) a[0] = 0;else {
        var p = -l / s;p >= 0 && 1 >= p && (a[f++] = p);
      }
    } else {
      var g = c * c - 4 * h * d;if (Qi(g)) {
        var v = c / h,
            p = -s / o + v,
            m = -v / 2;p >= 0 && 1 >= p && (a[f++] = p), m >= 0 && 1 >= m && (a[f++] = m);
      } else if (g > 0) {
        var y = zf(g),
            _ = h * s + 1.5 * o * (-c + y),
            x = h * s + 1.5 * o * (-c - y);_ = 0 > _ ? -Bf(-_, Gf) : Bf(_, Gf), x = 0 > x ? -Bf(-x, Gf) : Bf(x, Gf);var p = (-s - (_ + x)) / (3 * o);p >= 0 && 1 >= p && (a[f++] = p);
      } else {
        var w = (2 * h * s - 3 * o * c) / (2 * zf(h * h * h)),
            b = Math.acos(w) / 3,
            M = zf(h),
            S = Math.cos(b),
            p = (-s - 2 * M * S) / (3 * o),
            m = (-s + M * (S + Vf * Math.sin(b))) / (3 * o),
            C = (-s + M * (S - Vf * Math.sin(b))) / (3 * o);p >= 0 && 1 >= p && (a[f++] = p), m >= 0 && 1 >= m && (a[f++] = m), C >= 0 && 1 >= C && (a[f++] = C);
      }
    }return f;
  }function ir(t, e, n, i, r) {
    var a = 6 * n - 12 * e + 6 * t,
        o = 9 * e + 3 * i - 3 * t - 9 * n,
        s = 3 * e - 3 * t,
        l = 0;if (Qi(o)) {
      if (Ji(a)) {
        var u = -s / a;u >= 0 && 1 >= u && (r[l++] = u);
      }
    } else {
      var h = a * a - 4 * o * s;if (Qi(h)) r[0] = -a / (2 * o);else if (h > 0) {
        var c = zf(h),
            u = (-a + c) / (2 * o),
            d = (-a - c) / (2 * o);u >= 0 && 1 >= u && (r[l++] = u), d >= 0 && 1 >= d && (r[l++] = d);
      }
    }return l;
  }function rr(t, e, n, i, r, a) {
    var o = (e - t) * r + t,
        s = (n - e) * r + e,
        l = (i - n) * r + n,
        u = (s - o) * r + o,
        h = (l - s) * r + s,
        c = (h - u) * r + u;a[0] = t, a[1] = o, a[2] = u, a[3] = c, a[4] = c, a[5] = h, a[6] = l, a[7] = i;
  }function ar(t, e, n, i, r, a, o, s, l, u, h) {
    var c,
        d,
        f,
        p,
        g,
        v = .005,
        m = 1 / 0;Hf[0] = l, Hf[1] = u;for (var y = 0; 1 > y; y += .05) {
      Wf[0] = tr(t, n, r, o, y), Wf[1] = tr(e, i, a, s, y), p = Gc(Hf, Wf), m > p && (c = y, m = p);
    }m = 1 / 0;for (var _ = 0; 32 > _ && !(Ff > v); _++) {
      d = c - v, f = c + v, Wf[0] = tr(t, n, r, o, d), Wf[1] = tr(e, i, a, s, d), p = Gc(Wf, Hf), d >= 0 && m > p ? (c = d, m = p) : (jf[0] = tr(t, n, r, o, f), jf[1] = tr(e, i, a, s, f), g = Gc(jf, Hf), 1 >= f && m > g ? (c = f, m = g) : v *= .5);
    }return h && (h[0] = tr(t, n, r, o, c), h[1] = tr(e, i, a, s, c)), zf(m);
  }function or(t, e, n, i) {
    var r = 1 - i;return r * (r * t + 2 * i * e) + i * i * n;
  }function sr(t, e, n, i) {
    return 2 * ((1 - i) * (e - t) + i * (n - e));
  }function lr(t, e, n, i, r) {
    var a = t - 2 * e + n,
        o = 2 * (e - t),
        s = t - i,
        l = 0;if (Qi(a)) {
      if (Ji(o)) {
        var u = -s / o;u >= 0 && 1 >= u && (r[l++] = u);
      }
    } else {
      var h = o * o - 4 * a * s;if (Qi(h)) {
        var u = -o / (2 * a);u >= 0 && 1 >= u && (r[l++] = u);
      } else if (h > 0) {
        var c = zf(h),
            u = (-o + c) / (2 * a),
            d = (-o - c) / (2 * a);u >= 0 && 1 >= u && (r[l++] = u), d >= 0 && 1 >= d && (r[l++] = d);
      }
    }return l;
  }function ur(t, e, n) {
    var i = t + n - 2 * e;return 0 === i ? .5 : (t - e) / i;
  }function hr(t, e, n, i, r) {
    var a = (e - t) * i + t,
        o = (n - e) * i + e,
        s = (o - a) * i + a;r[0] = t, r[1] = a, r[2] = s, r[3] = s, r[4] = o, r[5] = n;
  }function cr(t, e, n, i, r, a, o, s, l) {
    var u,
        h = .005,
        c = 1 / 0;Hf[0] = o, Hf[1] = s;for (var d = 0; 1 > d; d += .05) {
      Wf[0] = or(t, n, r, d), Wf[1] = or(e, i, a, d);var f = Gc(Hf, Wf);c > f && (u = d, c = f);
    }c = 1 / 0;for (var p = 0; 32 > p && !(Ff > h); p++) {
      var g = u - h,
          v = u + h;Wf[0] = or(t, n, r, g), Wf[1] = or(e, i, a, g);var f = Gc(Wf, Hf);if (g >= 0 && c > f) u = g, c = f;else {
        jf[0] = or(t, n, r, v), jf[1] = or(e, i, a, v);var m = Gc(jf, Hf);1 >= v && c > m ? (u = v, c = m) : h *= .5;
      }
    }return l && (l[0] = or(t, n, r, u), l[1] = or(e, i, a, u)), zf(c);
  }function dr(t, e, n) {
    if (0 !== t.length) {
      var i,
          r = t[0],
          a = r[0],
          o = r[0],
          s = r[1],
          l = r[1];for (i = 1; i < t.length; i++) {
        r = t[i], a = qf(a, r[0]), o = Uf(o, r[0]), s = qf(s, r[1]), l = Uf(l, r[1]);
      }e[0] = a, e[1] = s, n[0] = o, n[1] = l;
    }
  }function fr(t, e, n, i, r, a) {
    r[0] = qf(t, n), r[1] = qf(e, i), a[0] = Uf(t, n), a[1] = Uf(e, i);
  }function pr(t, e, n, i, r, a, o, s, l, u) {
    var h,
        c = ir,
        d = tr,
        f = c(t, n, r, o, Jf);for (l[0] = 1 / 0, l[1] = 1 / 0, u[0] = -1 / 0, u[1] = -1 / 0, h = 0; f > h; h++) {
      var p = d(t, n, r, o, Jf[h]);l[0] = qf(p, l[0]), u[0] = Uf(p, u[0]);
    }for (f = c(e, i, a, s, tp), h = 0; f > h; h++) {
      var g = d(e, i, a, s, tp[h]);l[1] = qf(g, l[1]), u[1] = Uf(g, u[1]);
    }l[0] = qf(t, l[0]), u[0] = Uf(t, u[0]), l[0] = qf(o, l[0]), u[0] = Uf(o, u[0]), l[1] = qf(e, l[1]), u[1] = Uf(e, u[1]), l[1] = qf(s, l[1]), u[1] = Uf(s, u[1]);
  }function gr(t, e, n, i, r, a, o, s) {
    var l = ur,
        u = or,
        h = Uf(qf(l(t, n, r), 1), 0),
        c = Uf(qf(l(e, i, a), 1), 0),
        d = u(t, n, r, h),
        f = u(e, i, a, c);o[0] = qf(t, r, d), o[1] = qf(e, a, f), s[0] = Uf(t, r, d), s[1] = Uf(e, a, f);
  }function vr(t, e, n, i, r, a, o, s, l) {
    var u = oe,
        h = se,
        c = Math.abs(r - a);if (1e-4 > c % Zf && c > 1e-4) return s[0] = t - n, s[1] = e - i, l[0] = t + n, void (l[1] = e + i);if ($f[0] = Yf(r) * n + t, $f[1] = Xf(r) * i + e, Kf[0] = Yf(a) * n + t, Kf[1] = Xf(a) * i + e, u(s, $f, Kf), h(l, $f, Kf), r %= Zf, 0 > r && (r += Zf), a %= Zf, 0 > a && (a += Zf), r > a && !o ? a += Zf : a > r && o && (r += Zf), o) {
      var d = a;a = r, r = d;
    }for (var f = 0; a > f; f += Math.PI / 2) {
      f > r && (Qf[0] = Yf(f) * n + t, Qf[1] = Xf(f) * i + e, u(s, Qf, s), h(l, Qf, l));
    }
  }function mr(t, e, n, i, r, a, o) {
    if (0 === r) return !1;var s = r,
        l = 0,
        u = t;if (o > e + s && o > i + s || e - s > o && i - s > o || a > t + s && a > n + s || t - s > a && n - s > a) return !1;if (t === n) return Math.abs(a - t) <= s / 2;l = (e - i) / (t - n), u = (t * i - n * e) / (t - n);var h = l * a - o + u,
        c = h * h / (l * l + 1);return s / 2 * s / 2 >= c;
  }function yr(t, e, n, i, r, a, o, s, l, u, h) {
    if (0 === l) return !1;var c = l;if (h > e + c && h > i + c && h > a + c && h > s + c || e - c > h && i - c > h && a - c > h && s - c > h || u > t + c && u > n + c && u > r + c && u > o + c || t - c > u && n - c > u && r - c > u && o - c > u) return !1;var d = ar(t, e, n, i, r, a, o, s, u, h, null);return c / 2 >= d;
  }function _r(t, e, n, i, r, a, o, s, l) {
    if (0 === o) return !1;var u = o;if (l > e + u && l > i + u && l > a + u || e - u > l && i - u > l && a - u > l || s > t + u && s > n + u && s > r + u || t - u > s && n - u > s && r - u > s) return !1;var h = cr(t, e, n, i, r, a, s, l, null);return u / 2 >= h;
  }function xr(t) {
    return t %= pp, 0 > t && (t += pp), t;
  }function wr(t, e, n, i, r, a, o, s, l) {
    if (0 === o) return !1;var u = o;s -= t, l -= e;var h = Math.sqrt(s * s + l * l);if (h - u > n || n > h + u) return !1;if (Math.abs(i - r) % gp < 1e-4) return !0;if (a) {
      var c = i;i = xr(r), r = xr(c);
    } else i = xr(i), r = xr(r);i > r && (r += gp);var d = Math.atan2(l, s);return 0 > d && (d += gp), d >= i && r >= d || d + gp >= i && r >= d + gp;
  }function br(t, e, n, i, r, a) {
    if (a > e && a > i || e > a && i > a) return 0;if (i === e) return 0;var o = e > i ? 1 : -1,
        s = (a - e) / (i - e);(1 === s || 0 === s) && (o = e > i ? .5 : -.5);var l = s * (n - t) + t;return l === r ? 1 / 0 : l > r ? o : 0;
  }function Mr(t, e) {
    return Math.abs(t - e) < yp;
  }function Sr() {
    var t = xp[0];xp[0] = xp[1], xp[1] = t;
  }function Cr(t, e, n, i, r, a, o, s, l, u) {
    if (u > e && u > i && u > a && u > s || e > u && i > u && a > u && s > u) return 0;var h = nr(e, i, a, s, u, _p);if (0 === h) return 0;for (var c, d, f = 0, p = -1, g = 0; h > g; g++) {
      var v = _p[g],
          m = 0 === v || 1 === v ? .5 : 1,
          y = tr(t, n, r, o, v);l > y || (0 > p && (p = ir(e, i, a, s, xp), xp[1] < xp[0] && p > 1 && Sr(), c = tr(e, i, a, s, xp[0]), p > 1 && (d = tr(e, i, a, s, xp[1]))), f += 2 == p ? v < xp[0] ? e > c ? m : -m : v < xp[1] ? c > d ? m : -m : d > s ? m : -m : v < xp[0] ? e > c ? m : -m : c > s ? m : -m);
    }return f;
  }function Ir(t, e, n, i, r, a, o, s) {
    if (s > e && s > i && s > a || e > s && i > s && a > s) return 0;var l = lr(e, i, a, s, _p);if (0 === l) return 0;var u = ur(e, i, a);if (u >= 0 && 1 >= u) {
      for (var h = 0, c = or(e, i, a, u), d = 0; l > d; d++) {
        var f = 0 === _p[d] || 1 === _p[d] ? .5 : 1,
            p = or(t, n, r, _p[d]);o > p || (h += _p[d] < u ? e > c ? f : -f : c > a ? f : -f);
      }return h;
    }var f = 0 === _p[0] || 1 === _p[0] ? .5 : 1,
        p = or(t, n, r, _p[0]);return o > p ? 0 : e > a ? f : -f;
  }function Tr(t, e, n, i, r, a, o, s) {
    if (s -= e, s > n || -n > s) return 0;var l = Math.sqrt(n * n - s * s);_p[0] = -l, _p[1] = l;var u = Math.abs(i - r);if (1e-4 > u) return 0;if (1e-4 > u % mp) {
      i = 0, r = mp;var h = a ? 1 : -1;return o >= _p[0] + t && o <= _p[1] + t ? h : 0;
    }if (a) {
      var l = i;i = xr(r), r = xr(l);
    } else i = xr(i), r = xr(r);i > r && (r += mp);for (var c = 0, d = 0; 2 > d; d++) {
      var f = _p[d];if (f + t > o) {
        var p = Math.atan2(s, f),
            h = a ? 1 : -1;0 > p && (p = mp + p), (p >= i && r >= p || p + mp >= i && r >= p + mp) && (p > Math.PI / 2 && p < 1.5 * Math.PI && (h = -h), c += h);
      }
    }return c;
  }function kr(t, e, n, i, r) {
    for (var a = 0, o = 0, s = 0, l = 0, u = 0, h = 0; h < t.length;) {
      var c = t[h++];switch (c === vp.M && h > 1 && (n || (a += br(o, s, l, u, i, r))), 1 == h && (o = t[h], s = t[h + 1], l = o, u = s), c) {case vp.M:
          l = t[h++], u = t[h++], o = l, s = u;break;case vp.L:
          if (n) {
            if (mr(o, s, t[h], t[h + 1], e, i, r)) return !0;
          } else a += br(o, s, t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case vp.C:
          if (n) {
            if (yr(o, s, t[h++], t[h++], t[h++], t[h++], t[h], t[h + 1], e, i, r)) return !0;
          } else a += Cr(o, s, t[h++], t[h++], t[h++], t[h++], t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case vp.Q:
          if (n) {
            if (_r(o, s, t[h++], t[h++], t[h], t[h + 1], e, i, r)) return !0;
          } else a += Ir(o, s, t[h++], t[h++], t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case vp.A:
          var d = t[h++],
              f = t[h++],
              p = t[h++],
              g = t[h++],
              v = t[h++],
              m = t[h++],
              y = (t[h++], 1 - t[h++]),
              _ = Math.cos(v) * p + d,
              x = Math.sin(v) * g + f;h > 1 ? a += br(o, s, _, x, i, r) : (l = _, u = x);var w = (i - d) * g / p + d;if (n) {
            if (wr(d, f, g, v, v + m, y, e, w, r)) return !0;
          } else a += Tr(d, f, g, v, v + m, y, w, r);o = Math.cos(v + m) * p + d, s = Math.sin(v + m) * g + f;break;case vp.R:
          l = o = t[h++], u = s = t[h++];var b = t[h++],
              M = t[h++],
              _ = l + b,
              x = u + M;if (n) {
            if (mr(l, u, _, u, e, i, r) || mr(_, u, _, x, e, i, r) || mr(_, x, l, x, e, i, r) || mr(l, x, l, u, e, i, r)) return !0;
          } else a += br(_, u, _, x, i, r), a += br(l, x, l, u, i, r);break;case vp.Z:
          if (n) {
            if (mr(o, s, l, u, e, i, r)) return !0;
          } else a += br(o, s, l, u, i, r);o = l, s = u;}
    }return n || Mr(s, u) || (a += br(o, s, l, u, i, r) || 0), 0 !== a;
  }function Dr(t, e, n) {
    return kr(t, 0, !1, e, n);
  }function Ar(t, e, n, i) {
    return kr(t, e, !0, n, i);
  }function Pr(t) {
    ri.call(this, t), this.path = null;
  }function Lr(t, e, n, i, r, a, o, s, l, u, h) {
    var c = l * (Op / 180),
        d = Lp(c) * (t - n) / 2 + Pp(c) * (e - i) / 2,
        f = -1 * Pp(c) * (t - n) / 2 + Lp(c) * (e - i) / 2,
        p = d * d / (o * o) + f * f / (s * s);p > 1 && (o *= Ap(p), s *= Ap(p));var g = (r === a ? -1 : 1) * Ap((o * o * s * s - o * o * f * f - s * s * d * d) / (o * o * f * f + s * s * d * d)) || 0,
        v = g * o * f / s,
        m = g * -s * d / o,
        y = (t + n) / 2 + Lp(c) * v - Pp(c) * m,
        _ = (e + i) / 2 + Pp(c) * v + Lp(c) * m,
        x = Bp([1, 0], [(d - v) / o, (f - m) / s]),
        w = [(d - v) / o, (f - m) / s],
        b = [(-1 * d - v) / o, (-1 * f - m) / s],
        M = Bp(w, b);Ep(w, b) <= -1 && (M = Op), Ep(w, b) >= 1 && (M = 0), 0 === a && M > 0 && (M -= 2 * Op), 1 === a && 0 > M && (M += 2 * Op), h.addData(u, y, _, o, s, x, M, c, a);
  }function Or(t) {
    if (!t) return [];var e,
        n = t.replace(/-/g, " -").replace(/  /g, " ").replace(/ /g, ",").replace(/,,/g, ",");for (e = 0; e < Dp.length; e++) {
      n = n.replace(new RegExp(Dp[e], "g"), "|" + Dp[e]);
    }var i,
        r = n.split("|"),
        a = 0,
        o = 0,
        s = new fp(),
        l = fp.CMD;for (e = 1; e < r.length; e++) {
      var u,
          h = r[e],
          c = h.charAt(0),
          d = 0,
          f = h.slice(1).replace(/e,-/g, "e-").split(",");f.length > 0 && "" === f[0] && f.shift();for (var p = 0; p < f.length; p++) {
        f[p] = parseFloat(f[p]);
      }for (; d < f.length && !isNaN(f[d]) && !isNaN(f[0]);) {
        var g,
            v,
            m,
            y,
            _,
            x,
            w,
            b = a,
            M = o;switch (c) {case "l":
            a += f[d++], o += f[d++], u = l.L, s.addData(u, a, o);break;case "L":
            a = f[d++], o = f[d++], u = l.L, s.addData(u, a, o);break;case "m":
            a += f[d++], o += f[d++], u = l.M, s.addData(u, a, o), c = "l";break;case "M":
            a = f[d++], o = f[d++], u = l.M, s.addData(u, a, o), c = "L";break;case "h":
            a += f[d++], u = l.L, s.addData(u, a, o);break;case "H":
            a = f[d++], u = l.L, s.addData(u, a, o);break;case "v":
            o += f[d++], u = l.L, s.addData(u, a, o);break;case "V":
            o = f[d++], u = l.L, s.addData(u, a, o);break;case "C":
            u = l.C, s.addData(u, f[d++], f[d++], f[d++], f[d++], f[d++], f[d++]), a = f[d - 2], o = f[d - 1];break;case "c":
            u = l.C, s.addData(u, f[d++] + a, f[d++] + o, f[d++] + a, f[d++] + o, f[d++] + a, f[d++] + o), a += f[d - 2], o += f[d - 1];break;case "S":
            g = a, v = o;var S = s.len(),
                C = s.data;i === l.C && (g += a - C[S - 4], v += o - C[S - 3]), u = l.C, b = f[d++], M = f[d++], a = f[d++], o = f[d++], s.addData(u, g, v, b, M, a, o);break;case "s":
            g = a, v = o;var S = s.len(),
                C = s.data;i === l.C && (g += a - C[S - 4], v += o - C[S - 3]), u = l.C, b = a + f[d++], M = o + f[d++], a += f[d++], o += f[d++], s.addData(u, g, v, b, M, a, o);break;case "Q":
            b = f[d++], M = f[d++], a = f[d++], o = f[d++], u = l.Q, s.addData(u, b, M, a, o);break;case "q":
            b = f[d++] + a, M = f[d++] + o, a += f[d++], o += f[d++], u = l.Q, s.addData(u, b, M, a, o);break;case "T":
            g = a, v = o;var S = s.len(),
                C = s.data;i === l.Q && (g += a - C[S - 4], v += o - C[S - 3]), a = f[d++], o = f[d++], u = l.Q, s.addData(u, g, v, a, o);break;case "t":
            g = a, v = o;var S = s.len(),
                C = s.data;i === l.Q && (g += a - C[S - 4], v += o - C[S - 3]), a += f[d++], o += f[d++], u = l.Q, s.addData(u, g, v, a, o);break;case "A":
            m = f[d++], y = f[d++], _ = f[d++], x = f[d++], w = f[d++], b = a, M = o, a = f[d++], o = f[d++], u = l.A, Lr(b, M, a, o, x, w, m, y, _, u, s);break;case "a":
            m = f[d++], y = f[d++], _ = f[d++], x = f[d++], w = f[d++], b = a, M = o, a += f[d++], o += f[d++], u = l.A, Lr(b, M, a, o, x, w, m, y, _, u, s);}
      }("z" === c || "Z" === c) && (u = l.Z, s.addData(u)), i = u;
    }return s.toStatic(), s;
  }function Rr(t, e) {
    var n = Or(t);return e = e || {}, e.buildPath = function (t) {
      if (t.setData) {
        t.setData(n.data);var e = t.getContext();e && t.rebuildPath(e);
      } else {
        var e = t;n.rebuildPath(e);
      }
    }, e.applyTransform = function (t) {
      kp(n, t), this.dirty(!0);
    }, e;
  }function Er(t, e) {
    return new Pr(Rr(t, e));
  }function Br(t, e) {
    return Pr.extend(Rr(t, e));
  }function zr(t, e) {
    for (var n = [], i = t.length, r = 0; i > r; r++) {
      var a = t[r];a.path || a.createPathProxy(), a.__dirtyPath && a.buildPath(a.path, a.shape, !0), n.push(a.path);
    }var o = new Pr(e);return o.createPathProxy(), o.buildPath = function (t) {
      t.appendPath(n);var e = t.getContext();e && t.rebuildPath(e);
    }, o;
  }function Nr(t, e, n, i, r, a, o) {
    var s = .5 * (n - t),
        l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;
  }function Fr(t, e, n) {
    var i = e.points,
        r = e.smooth;if (i && i.length >= 2) {
      if (r && "spline" !== r) {
        var a = jp(i, r, n, e.smoothConstraint);t.moveTo(i[0][0], i[0][1]);for (var o = i.length, s = 0; (n ? o : o - 1) > s; s++) {
          var l = a[2 * s],
              u = a[2 * s + 1],
              h = i[(s + 1) % o];t.bezierCurveTo(l[0], l[1], u[0], u[1], h[0], h[1]);
        }
      } else {
        "spline" === r && (i = Wp(i, n)), t.moveTo(i[0][0], i[0][1]);for (var s = 1, c = i.length; c > s; s++) {
          t.lineTo(i[s][0], i[s][1]);
        }
      }n && t.closePath();
    }
  }function Vr(t, e, n) {
    var i = t.cpx2,
        r = t.cpy2;return null === i || null === r ? [(n ? er : tr)(t.x1, t.cpx1, t.cpx2, t.x2, e), (n ? er : tr)(t.y1, t.cpy1, t.cpy2, t.y2, e)] : [(n ? sr : or)(t.x1, t.cpx1, t.x2, e), (n ? sr : or)(t.y1, t.cpy1, t.y2, e)];
  }function Gr(t) {
    ri.call(this, t), this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.notClear = !0;
  }function Hr(t) {
    return Pr.extend(t);
  }function Wr(t, e) {
    return Br(t, e);
  }function jr(t, e, n, i) {
    var r = Er(t, e),
        a = r.getBoundingRect();return n && ("center" === i && (n = Ur(n, a)), Xr(r, n)), r;
  }function qr(t, e, n) {
    var i = new ai({ style: { image: t, x: e.x, y: e.y, width: e.width, height: e.height }, onload: function onload(t) {
        if ("center" === n) {
          var r = { width: t.width, height: t.height };i.setStyle(Ur(e, r));
        }
      } });return i;
  }function Ur(t, e) {
    var n,
        i = e.width / e.height,
        r = t.height * i;r <= t.width ? n = t.height : (r = t.width, n = r / i);var a = t.x + t.width / 2,
        o = t.y + t.height / 2;return { x: a - r / 2, y: o - n / 2, width: r, height: n };
  }function Xr(t, e) {
    if (t.applyTransform) {
      var n = t.getBoundingRect(),
          i = n.calculateTransform(e);t.applyTransform(i);
    }
  }function Yr(t) {
    var e = t.shape,
        n = t.style.lineWidth;return ig(2 * e.x1) === ig(2 * e.x2) && (e.x1 = e.x2 = $r(e.x1, n, !0)), ig(2 * e.y1) === ig(2 * e.y2) && (e.y1 = e.y2 = $r(e.y1, n, !0)), t;
  }function Zr(t) {
    var e = t.shape,
        n = t.style.lineWidth,
        i = e.x,
        r = e.y,
        a = e.width,
        o = e.height;return e.x = $r(e.x, n, !0), e.y = $r(e.y, n, !0), e.width = Math.max($r(i + a, n, !1) - e.x, 0 === a ? 0 : 1), e.height = Math.max($r(r + o, n, !1) - e.y, 0 === o ? 0 : 1), t;
  }function $r(t, e, n) {
    var i = ig(2 * t);return (i + ig(e)) % 2 === 0 ? i / 2 : (i + (n ? 1 : -1)) / 2;
  }function Kr(t) {
    return null != t && "none" != t;
  }function Qr(t) {
    return "string" == typeof t ? ze(t, -.1) : t;
  }function Jr(t) {
    if (t.__hoverStlDirty) {
      var e = t.style.stroke,
          n = t.style.fill,
          i = t.__hoverStl;i.fill = i.fill || (Kr(n) ? Qr(n) : null), i.stroke = i.stroke || (Kr(e) ? Qr(e) : null);var r = {};for (var a in i) {
        null != i[a] && (r[a] = t.style[a]);
      }t.__normalStl = r, t.__hoverStlDirty = !1;
    }
  }function ta(t) {
    if (!t.__isHover) {
      if (Jr(t), t.useHoverLayer) t.__zr && t.__zr.addHover(t, t.__hoverStl);else {
        var e = t.style,
            n = e.insideRollbackOpt;n && ya(e), e.extendFrom(t.__hoverStl), n && (ma(e, e.insideOriginalTextPosition, n), null == e.textFill && (e.textFill = n.autoColor)), t.dirty(!1), t.z2 += 1;
      }t.__isHover = !0;
    }
  }function ea(t) {
    if (t.__isHover) {
      var e = t.__normalStl;t.useHoverLayer ? t.__zr && t.__zr.removeHover(t) : (e && t.setStyle(e), t.z2 -= 1), t.__isHover = !1;
    }
  }function na(t) {
    "group" === t.type ? t.traverse(function (t) {
      "group" !== t.type && ta(t);
    }) : ta(t);
  }function ia(t) {
    "group" === t.type ? t.traverse(function (t) {
      "group" !== t.type && ea(t);
    }) : ea(t);
  }function ra(t, e) {
    t.__hoverStl = t.hoverStyle || e || {}, t.__hoverStlDirty = !0, t.__isHover && Jr(t);
  }function aa(t) {
    this.__hoverSilentOnTouch && t.zrByTouch || !this.__isEmphasis && na(this);
  }function oa(t) {
    this.__hoverSilentOnTouch && t.zrByTouch || !this.__isEmphasis && ia(this);
  }function sa() {
    this.__isEmphasis = !0, na(this);
  }function la() {
    this.__isEmphasis = !1, ia(this);
  }function ua(t, e, n) {
    t.__hoverSilentOnTouch = n && n.hoverSilentOnTouch, "group" === t.type ? t.traverse(function (t) {
      "group" !== t.type && ra(t, e);
    }) : ra(t, e), t.on("mouseover", aa).on("mouseout", oa), t.on("emphasis", sa).on("normal", la);
  }function ha(t, e, n, i, r, a, o) {
    r = r || og;var s,
        l = r.labelFetcher,
        u = r.labelDataIndex,
        h = r.labelDimIndex,
        c = n.getShallow("show"),
        d = i.getShallow("show");(c || d) && (l && (s = l.getFormattedLabel(u, "normal", null, h)), null == s && (s = w(r.defaultText) ? r.defaultText(u, r) : r.defaultText));var f = c ? s : null,
        p = d ? D(l ? l.getFormattedLabel(u, "emphasis", null, h) : null, s) : null;(null != f || null != p) && (ca(t, n, a, r), ca(e, i, o, r, !0)), t.text = f, e.text = p;
  }function ca(t, e, n, i, r) {
    return fa(t, e, i, r), n && o(t, n), t.host && t.host.dirty && t.host.dirty(!1), t;
  }function da(t, e, n) {
    var i,
        r = { isRectText: !0 };n === !1 ? i = !0 : r.autoColor = n, fa(t, e, r, i), t.host && t.host.dirty && t.host.dirty(!1);
  }function fa(t, e, n, i) {
    if (n = n || og, n.isRectText) {
      var r = e.getShallow("position") || (i ? null : "inside");"outside" === r && (r = "top"), t.textPosition = r, t.textOffset = e.getShallow("offset");var a = e.getShallow("rotate");null != a && (a *= Math.PI / 180), t.textRotation = a, t.textDistance = D(e.getShallow("distance"), i ? null : 5);
    }var o,
        s = e.ecModel,
        l = s && s.option.textStyle,
        u = pa(e);if (u) {
      o = {};for (var h in u) {
        if (u.hasOwnProperty(h)) {
          var c = e.getModel(["rich", h]);ga(o[h] = {}, c, l, n, i);
        }
      }
    }return t.rich = o, ga(t, e, l, n, i, !0), n.forceRich && !n.textStyle && (n.textStyle = {}), t;
  }function pa(t) {
    for (var e; t && t !== t.ecModel;) {
      var n = (t.option || og).rich;if (n) {
        e = e || {};for (var i in n) {
          n.hasOwnProperty(i) && (e[i] = 1);
        }
      }t = t.parentModel;
    }return e;
  }function ga(t, e, n, i, r, a) {
    if (n = !r && n || og, t.textFill = va(e.getShallow("color"), i) || n.color, t.textStroke = va(e.getShallow("textBorderColor"), i) || n.textBorderColor, t.textStrokeWidth = D(e.getShallow("textBorderWidth"), n.textBorderWidth), !r) {
      if (a) {
        var o = t.textPosition;t.insideRollback = ma(t, o, i), t.insideOriginalTextPosition = o, t.insideRollbackOpt = i;
      }null == t.textFill && (t.textFill = i.autoColor);
    }t.fontStyle = e.getShallow("fontStyle") || n.fontStyle, t.fontWeight = e.getShallow("fontWeight") || n.fontWeight, t.fontSize = e.getShallow("fontSize") || n.fontSize, t.fontFamily = e.getShallow("fontFamily") || n.fontFamily, t.textAlign = e.getShallow("align"), t.textVerticalAlign = e.getShallow("verticalAlign") || e.getShallow("baseline"), t.textLineHeight = e.getShallow("lineHeight"), t.textWidth = e.getShallow("width"), t.textHeight = e.getShallow("height"), t.textTag = e.getShallow("tag"), a && i.disableBox || (t.textBackgroundColor = va(e.getShallow("backgroundColor"), i), t.textPadding = e.getShallow("padding"), t.textBorderColor = va(e.getShallow("borderColor"), i), t.textBorderWidth = e.getShallow("borderWidth"), t.textBorderRadius = e.getShallow("borderRadius"), t.textBoxShadowColor = e.getShallow("shadowColor"), t.textBoxShadowBlur = e.getShallow("shadowBlur"), t.textBoxShadowOffsetX = e.getShallow("shadowOffsetX"), t.textBoxShadowOffsetY = e.getShallow("shadowOffsetY")), t.textShadowColor = e.getShallow("textShadowColor") || n.textShadowColor, t.textShadowBlur = e.getShallow("textShadowBlur") || n.textShadowBlur, t.textShadowOffsetX = e.getShallow("textShadowOffsetX") || n.textShadowOffsetX, t.textShadowOffsetY = e.getShallow("textShadowOffsetY") || n.textShadowOffsetY;
  }function va(t, e) {
    return "auto" !== t ? t : e && e.autoColor ? e.autoColor : null;
  }function ma(t, e, n) {
    var i,
        r = n.useInsideStyle;return null == t.textFill && r !== !1 && (r === !0 || n.isRectText && e && "string" == typeof e && e.indexOf("inside") >= 0) && (i = { textFill: null, textStroke: t.textStroke, textStrokeWidth: t.textStrokeWidth }, t.textFill = "#fff", null == t.textStroke && (t.textStroke = n.autoColor, null == t.textStrokeWidth && (t.textStrokeWidth = 2))), i;
  }function ya(t) {
    var e = t.insideRollback;e && (t.textFill = e.textFill, t.textStroke = e.textStroke, t.textStrokeWidth = e.textStrokeWidth);
  }function _a(t, e) {
    var n = e || e.getModel("textStyle");return R([t.fontStyle || n && n.getShallow("fontStyle") || "", t.fontWeight || n && n.getShallow("fontWeight") || "", (t.fontSize || n && n.getShallow("fontSize") || 12) + "px", t.fontFamily || n && n.getShallow("fontFamily") || "sans-serif"].join(" "));
  }function xa(t, e, n, i, r, a) {
    "function" == typeof r && (a = r, r = null);var o = i && i.isAnimationEnabled();if (o) {
      var s = t ? "Update" : "",
          l = i.getShallow("animationDuration" + s),
          u = i.getShallow("animationEasing" + s),
          h = i.getShallow("animationDelay" + s);"function" == typeof h && (h = h(r, i.getAnimationDelayParams ? i.getAnimationDelayParams(e, r) : null)), "function" == typeof l && (l = l(r)), l > 0 ? e.animateTo(n, l, h || 0, u, a, !!a) : (e.stopAnimation(), e.attr(n), a && a());
    } else e.stopAnimation(), e.attr(n), a && a();
  }function wa(t, e, n, i, r) {
    xa(!0, t, e, n, i, r);
  }function ba(t, e, n, i, r) {
    xa(!1, t, e, n, i, r);
  }function Ma(t, e) {
    for (var n = pe([]); t && t !== e;) {
      ve(n, t.getLocalTransform(), n), t = t.parent;
    }return n;
  }function Sa(t, e, n) {
    return e && !d(e) && (e = Qc.getLocalTransform(e)), n && (e = xe([], e)), ae([], t, e);
  }function Ca(t, e, n) {
    var i = 0 === e[4] || 0 === e[5] || 0 === e[0] ? 1 : Math.abs(2 * e[4] / e[0]),
        r = 0 === e[4] || 0 === e[5] || 0 === e[2] ? 1 : Math.abs(2 * e[4] / e[2]),
        a = ["left" === t ? -i : "right" === t ? i : 0, "top" === t ? -r : "bottom" === t ? r : 0];return a = Sa(a, e, n), Math.abs(a[0]) > Math.abs(a[1]) ? a[0] > 0 ? "right" : "left" : a[1] > 0 ? "bottom" : "top";
  }function Ia(t, e, n) {
    function i(t) {
      var e = {};return t.traverse(function (t) {
        !t.isGroup && t.anid && (e[t.anid] = t);
      }), e;
    }function r(t) {
      var e = { position: W(t.position), rotation: t.rotation };return t.shape && (e.shape = o({}, t.shape)), e;
    }if (t && e) {
      var a = i(t);e.traverse(function (t) {
        if (!t.isGroup && t.anid) {
          var e = a[t.anid];if (e) {
            var i = r(t);t.attr(r(e)), wa(t, i, n, t.dataIndex);
          }
        }
      });
    }
  }function Ta(t, e) {
    return p(t, function (t) {
      var n = t[0];n = rg(n, e.x), n = ag(n, e.x + e.width);var i = t[1];return i = rg(i, e.y), i = ag(i, e.y + e.height), [n, i];
    });
  }function ka(t, e) {
    var n = rg(t.x, e.x),
        i = ag(t.x + t.width, e.x + e.width),
        r = rg(t.y, e.y),
        a = ag(t.y + t.height, e.y + e.height);return i >= n && a >= r ? { x: n, y: r, width: i - n, height: a - r } : void 0;
  }function Da(t, e, n) {
    e = o({ rectHover: !0 }, e);var i = e.style = { strokeNoScale: !0 };return n = n || { x: -1, y: -1, width: 2, height: 2 }, t ? 0 === t.indexOf("image://") ? (i.image = t.slice(8), s(i, n), new ai(e)) : jr(t.replace("path://", ""), e, n, "center") : void 0;
  }function Aa(t, e, n) {
    this.parentModel = e, this.ecModel = n, this.option = t;
  }function Pa(t, e, n) {
    for (var i = 0; i < e.length && (!e[i] || (t = t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t[e[i]] : null, null != t)); i++) {}return null == t && n && (t = n.get(e)), t;
  }function La(t, e) {
    var n = pg(t).getParent;return n ? n.call(t, e) : t.parentModel;
  }function Oa(t) {
    return [t || "", gg++, Math.random().toFixed(5)].join("_");
  }function Ra(t) {
    var e = {};return t.registerSubTypeDefaulter = function (t, n) {
      t = qi(t), e[t.main] = n;
    }, t.determineSubType = function (n, i) {
      var r = i.type;if (!r) {
        var a = qi(n).main;t.hasSubTypes(n) && e[a] && (r = e[a](i));
      }return r;
    }, t;
  }function Ea(t, e) {
    function n(t) {
      var n = {},
          a = [];return f(t, function (o) {
        var s = i(n, o),
            l = s.originalDeps = e(o),
            h = r(l, t);s.entryCount = h.length, 0 === s.entryCount && a.push(o), f(h, function (t) {
          u(s.predecessor, t) < 0 && s.predecessor.push(t);var e = i(n, t);u(e.successor, t) < 0 && e.successor.push(o);
        });
      }), { graph: n, noEntryList: a };
    }function i(t, e) {
      return t[e] || (t[e] = { predecessor: [], successor: [] }), t[e];
    }function r(t, e) {
      var n = [];return f(t, function (t) {
        u(e, t) >= 0 && n.push(t);
      }), n;
    }t.topologicalTravel = function (t, e, i, r) {
      function a(t) {
        l[t].entryCount--, 0 === l[t].entryCount && u.push(t);
      }function o(t) {
        h[t] = !0, a(t);
      }if (t.length) {
        var s = n(e),
            l = s.graph,
            u = s.noEntryList,
            h = {};for (f(t, function (t) {
          h[t] = !0;
        }); u.length;) {
          var c = u.pop(),
              d = l[c],
              p = !!h[c];p && (i.call(r, c, d.originalDeps.slice()), delete h[c]), f(d.successor, p ? o : a);
        }f(h, function () {
          throw new Error("Circle dependency may exists");
        });
      }
    };
  }function Ba(t) {
    return t.replace(/^\s+/, "").replace(/\s+$/, "");
  }function za(t, e, n, i) {
    var r = e[1] - e[0],
        a = n[1] - n[0];if (0 === r) return 0 === a ? n[0] : (n[0] + n[1]) / 2;if (i) {
      if (r > 0) {
        if (t <= e[0]) return n[0];if (t >= e[1]) return n[1];
      } else {
        if (t >= e[0]) return n[0];if (t <= e[1]) return n[1];
      }
    } else {
      if (t === e[0]) return n[0];if (t === e[1]) return n[1];
    }return (t - e[0]) / r * a + n[0];
  }function Na(t, e) {
    switch (t) {case "center":case "middle":
        t = "50%";break;case "left":case "top":
        t = "0%";break;case "right":case "bottom":
        t = "100%";}return "string" == typeof t ? Ba(t).match(/%$/) ? parseFloat(t) / 100 * e : parseFloat(t) : null == t ? 0 / 0 : +t;
  }function Fa(t, e, n) {
    return null == e && (e = 10), e = Math.min(Math.max(0, e), 20), t = (+t).toFixed(e), n ? t : +t;
  }function Va(t) {
    return t.sort(function (t, e) {
      return t - e;
    }), t;
  }function Ga(t) {
    if (t = +t, isNaN(t)) return 0;for (var e = 1, n = 0; Math.round(t * e) / e !== t;) {
      e *= 10, n++;
    }return n;
  }function Ha(t) {
    var e = t.toString(),
        n = e.indexOf("e");if (n > 0) {
      var i = +e.slice(n + 1);return 0 > i ? -i : 0;
    }var r = e.indexOf(".");return 0 > r ? 0 : e.length - 1 - r;
  }function Wa(t, e) {
    var n = Math.log,
        i = Math.LN10,
        r = Math.floor(n(t[1] - t[0]) / i),
        a = Math.round(n(Math.abs(e[1] - e[0])) / i),
        o = Math.min(Math.max(-r + a, 0), 20);return isFinite(o) ? o : 20;
  }function ja(t, e, n) {
    if (!t[e]) return 0;var i = g(t, function (t, e) {
      return t + (isNaN(e) ? 0 : e);
    }, 0);if (0 === i) return 0;for (var r = Math.pow(10, n), a = p(t, function (t) {
      return (isNaN(t) ? 0 : t) / i * r * 100;
    }), o = 100 * r, s = p(a, function (t) {
      return Math.floor(t);
    }), l = g(s, function (t, e) {
      return t + e;
    }, 0), u = p(a, function (t, e) {
      return t - s[e];
    }); o > l;) {
      for (var h = Number.NEGATIVE_INFINITY, c = null, d = 0, f = u.length; f > d; ++d) {
        u[d] > h && (h = u[d], c = d);
      }++s[c], u[c] = 0, ++l;
    }return s[e] / r;
  }function qa(t) {
    var e = 2 * Math.PI;return (t % e + e) % e;
  }function Ua(t) {
    return t > -vg && vg > t;
  }function Xa(t) {
    if (t instanceof Date) return t;if ("string" == typeof t) {
      var e = yg.exec(t);if (!e) return new Date(0 / 0);if (e[8]) {
        var n = +e[4] || 0;return "Z" !== e[8].toUpperCase() && (n -= e[8].slice(0, 3)), new Date(Date.UTC(+e[1], +(e[2] || 1) - 1, +e[3] || 1, n, +(e[5] || 0), +e[6] || 0, +e[7] || 0));
      }return new Date(+e[1], +(e[2] || 1) - 1, +e[3] || 1, +e[4] || 0, +(e[5] || 0), +e[6] || 0, +e[7] || 0);
    }return new Date(null == t ? 0 / 0 : Math.round(t));
  }function Ya(t) {
    return Math.pow(10, Za(t));
  }function Za(t) {
    return Math.floor(Math.log(t) / Math.LN10);
  }function $a(t, e) {
    var n,
        i = Za(t),
        r = Math.pow(10, i),
        a = t / r;return n = e ? 1.5 > a ? 1 : 2.5 > a ? 2 : 4 > a ? 3 : 7 > a ? 5 : 10 : 1 > a ? 1 : 2 > a ? 2 : 3 > a ? 3 : 5 > a ? 5 : 10, t = n * r, i >= -20 ? +t.toFixed(0 > i ? -i : 0) : t;
  }function Ka(t, e) {
    var n = (t.length - 1) * e + 1,
        i = Math.floor(n),
        r = +t[i - 1],
        a = n - i;return a ? r + a * (t[i] - r) : r;
  }function Qa(t) {
    function e(t, n, i) {
      return t.interval[i] < n.interval[i] || t.interval[i] === n.interval[i] && (t.close[i] - n.close[i] === (i ? -1 : 1) || !i && e(t, n, 1));
    }t.sort(function (t, n) {
      return e(t, n, 0) ? -1 : 1;
    });for (var n = -1 / 0, i = 1, r = 0; r < t.length;) {
      for (var a = t[r].interval, o = t[r].close, s = 0; 2 > s; s++) {
        a[s] <= n && (a[s] = n, o[s] = s ? 1 : 1 - i), n = a[s], i = o[s];
      }a[0] === a[1] && o[0] * o[1] !== 1 ? t.splice(r, 1) : r++;
    }return t;
  }function Ja(t) {
    return t - parseFloat(t) >= 0;
  }function to(t) {
    return isNaN(t) ? "-" : (t = (t + "").split("."), t[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") + (t.length > 1 ? "." + t[1] : ""));
  }function eo(t, e) {
    return t = (t || "").toLowerCase().replace(/-(.)/g, function (t, e) {
      return e.toUpperCase();
    }), e && t && (t = t.charAt(0).toUpperCase() + t.slice(1)), t;
  }function no(t) {
    return null == t ? "" : (t + "").replace(wg, function (t, e) {
      return bg[e];
    });
  }function io(t, e, n) {
    x(e) || (e = [e]);var i = e.length;if (!i) return "";for (var r = e[0].$vars || [], a = 0; a < r.length; a++) {
      var o = Mg[a];t = t.replace(Sg(o), Sg(o, 0));
    }for (var s = 0; i > s; s++) {
      for (var l = 0; l < r.length; l++) {
        var u = e[s][r[l]];t = t.replace(Sg(Mg[l], s), n ? no(u) : u);
      }
    }return t;
  }function ro(t, e, n) {
    return f(e, function (e, i) {
      t = t.replace("{" + i + "}", n ? no(e) : e);
    }), t;
  }function ao(t, e) {
    t = b(t) ? { color: t, extraCssText: e } : t || {};var n = t.color,
        i = t.type,
        e = t.extraCssText;return n ? "subItem" === i ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' + no(n) + ";" + (e || "") + '"></span>' : '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + no(n) + ";" + (e || "") + '"></span>' : "";
  }function oo(t, e) {
    return t += "", "0000".substr(0, e - t.length) + t;
  }function so(t, e, n) {
    ("week" === t || "month" === t || "quarter" === t || "half-year" === t || "year" === t) && (t = "MM-dd\nyyyy");var i = Xa(e),
        r = n ? "UTC" : "",
        a = i["get" + r + "FullYear"](),
        o = i["get" + r + "Month"]() + 1,
        s = i["get" + r + "Date"](),
        l = i["get" + r + "Hours"](),
        u = i["get" + r + "Minutes"](),
        h = i["get" + r + "Seconds"](),
        c = i["get" + r + "Milliseconds"]();return t = t.replace("MM", oo(o, 2)).replace("M", o).replace("yyyy", a).replace("yy", a % 100).replace("dd", oo(s, 2)).replace("d", s).replace("hh", oo(l, 2)).replace("h", l).replace("mm", oo(u, 2)).replace("m", u).replace("ss", oo(h, 2)).replace("s", h).replace("SSS", oo(c, 3));
  }function lo(t) {
    return t ? t.charAt(0).toUpperCase() + t.substr(1) : t;
  }function uo(t, e, n, i, r) {
    var a = 0,
        o = 0;null == i && (i = 1 / 0), null == r && (r = 1 / 0);var s = 0;e.eachChild(function (l, u) {
      var h,
          c,
          d = l.position,
          f = l.getBoundingRect(),
          p = e.childAt(u + 1),
          g = p && p.getBoundingRect();if ("horizontal" === t) {
        var v = f.width + (g ? -g.x + f.x : 0);h = a + v, h > i || l.newline ? (a = 0, h = v, o += s + n, s = f.height) : s = Math.max(s, f.height);
      } else {
        var m = f.height + (g ? -g.y + f.y : 0);c = o + m, c > r || l.newline ? (a += s + n, o = 0, c = m, s = f.width) : s = Math.max(s, f.width);
      }l.newline || (d[0] = a, d[1] = o, "horizontal" === t ? a = h + n : o = c + n);
    });
  }function ho(t, e, n) {
    n = xg(n || 0);var i = e.width,
        r = e.height,
        a = Na(t.left, i),
        o = Na(t.top, r),
        s = Na(t.right, i),
        l = Na(t.bottom, r),
        u = Na(t.width, i),
        h = Na(t.height, r),
        c = n[2] + n[0],
        d = n[1] + n[3],
        f = t.aspect;switch (isNaN(u) && (u = i - s - d - a), isNaN(h) && (h = r - l - c - o), null != f && (isNaN(u) && isNaN(h) && (f > i / r ? u = .8 * i : h = .8 * r), isNaN(u) && (u = f * h), isNaN(h) && (h = u / f)), isNaN(a) && (a = i - s - u - d), isNaN(o) && (o = r - l - h - c), t.left || t.right) {case "center":
        a = i / 2 - u / 2 - n[3];
        break;case "right":
        a = i - u - d;}switch (t.top || t.bottom) {case "middle":case "center":
        o = r / 2 - h / 2 - n[0];break;case "bottom":
        o = r - h - c;}a = a || 0, o = o || 0, isNaN(u) && (u = i - d - a - (s || 0)), isNaN(h) && (h = r - c - o - (l || 0));var p = new rn(a + n[3], o + n[0], u, h);return p.margin = n, p;
  }function co(t, e, n) {
    function i(n, i) {
      var o = {},
          l = 0,
          u = {},
          h = 0,
          c = 2;if (kg(n, function (e) {
        u[e] = t[e];
      }), kg(n, function (t) {
        r(e, t) && (o[t] = u[t] = e[t]), a(o, t) && l++, a(u, t) && h++;
      }), s[i]) return a(e, n[1]) ? u[n[2]] = null : a(e, n[2]) && (u[n[1]] = null), u;if (h !== c && l) {
        if (l >= c) return o;for (var d = 0; d < n.length; d++) {
          var f = n[d];if (!r(o, f) && r(t, f)) {
            o[f] = t[f];break;
          }
        }return o;
      }return u;
    }function r(t, e) {
      return t.hasOwnProperty(e);
    }function a(t, e) {
      return null != t[e] && "auto" !== t[e];
    }function o(t, e, n) {
      kg(t, function (t) {
        e[t] = n[t];
      });
    }!M(n) && (n = {});var s = n.ignoreSize;!x(s) && (s = [s, s]);var l = i(Ag[0], 0),
        u = i(Ag[1], 1);o(Ag[0], t, l), o(Ag[1], t, u);
  }function fo(t) {
    return po({}, t);
  }function po(t, e) {
    return e && t && kg(Dg, function (n) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }), t;
  }function go(t) {
    var e = [];return f(Rg.getClassesByMainType(t), function (t) {
      e = e.concat(t.prototype.dependencies || []);
    }), e = p(e, function (t) {
      return qi(t).main;
    }), "dataset" !== t && u(e, "dataset") <= 0 && e.unshift("dataset"), e;
  }function vo(t, e) {
    for (var n = t.length, i = 0; n > i; i++) {
      if (t[i].length > e) return t[i];
    }return t[n - 1];
  }function mo(t) {
    var e = t.get("coordinateSystem"),
        n = { coordSysName: e, coordSysDims: [], axisMap: N(), categoryAxisMap: N() },
        i = Fg[e];return i ? (i(t, n, n.axisMap, n.categoryAxisMap), n) : void 0;
  }function yo(t) {
    return "category" === t.get("type");
  }function _o(t) {
    this.fromDataset = t.fromDataset, this.data = t.data || (t.sourceFormat === Wg ? {} : []), this.sourceFormat = t.sourceFormat || jg, this.seriesLayoutBy = t.seriesLayoutBy || Ug, this.dimensionsDefine = t.dimensionsDefine, this.encodeDefine = t.encodeDefine && N(t.encodeDefine), this.startIndex = t.startIndex || 0, this.dimensionsDetectCount = t.dimensionsDetectCount;
  }function xo(t) {
    var e = t.option.source,
        n = jg;if (C(e)) n = qg;else if (x(e)) for (var i = 0, r = e.length; r > i; i++) {
      var a = e[i];if (null != a) {
        if (x(a)) {
          n = Gg;break;
        }if (M(a)) {
          n = Hg;break;
        }
      }
    } else if (M(e)) {
      for (var o in e) {
        if (e.hasOwnProperty(o) && d(e[o])) {
          n = Wg;break;
        }
      }
    } else if (null != e) throw new Error("Invalid data");Yg(t).sourceFormat = n;
  }function wo(t) {
    return Yg(t).source;
  }function bo(t) {
    Yg(t).datasetMap = N();
  }function Mo(t) {
    var e = t.option,
        n = e.data,
        i = C(n) ? qg : Vg,
        r = !1,
        a = e.seriesLayoutBy,
        o = e.sourceHeader,
        s = e.dimensions,
        l = Do(t);if (l) {
      var u = l.option;n = u.source, i = Yg(l).sourceFormat, r = !0, a = a || u.seriesLayoutBy, null == o && (o = u.sourceHeader), s = s || u.dimensions;
    }var h = So(n, i, a, o, s),
        c = e.encode;!c && l && (c = ko(t, l, n, i, a, h)), Yg(t).source = new _o({ data: n, fromDataset: r, seriesLayoutBy: a, sourceFormat: i, dimensionsDefine: h.dimensionsDefine, startIndex: h.startIndex, dimensionsDetectCount: h.dimensionsDetectCount, encodeDefine: c });
  }function So(t, e, n, i, r) {
    if (!t) return { dimensionsDefine: Co(r) };var a, o, s;if (e === Gg) "auto" === i || null == i ? Io(function (t) {
      null != t && "-" !== t && (b(t) ? null == o && (o = 1) : o = 0);
    }, n, t, 10) : o = i ? 1 : 0, r || 1 !== o || (r = [], Io(function (t, e) {
      r[e] = null != t ? t : "";
    }, n, t)), a = r ? r.length : n === Xg ? t.length : t[0] ? t[0].length : null;else if (e === Hg) r || (r = To(t), s = !0);else if (e === Wg) r || (r = [], s = !0, f(t, function (t, e) {
      r.push(e);
    }));else if (e === Vg) {
      var l = Oi(t[0]);a = x(l) && l.length || 1;
    }var u;return s && f(r, function (t, e) {
      "name" === (M(t) ? t.name : t) && (u = e);
    }), { startIndex: o, dimensionsDefine: Co(r), dimensionsDetectCount: a, potentialNameDimIndex: u };
  }function Co(t) {
    if (t) {
      var e = N();return p(t, function (t) {
        if (t = o({}, M(t) ? t : { name: t }), null == t.name) return t;t.name += "", null == t.displayName && (t.displayName = t.name);var n = e.get(t.name);return n ? t.name += "-" + n.count++ : e.set(t.name, { count: 1 }), t;
      });
    }
  }function Io(t, e, n, i) {
    if (null == i && (i = 1 / 0), e === Xg) for (var r = 0; r < n.length && i > r; r++) {
      t(n[r] ? n[r][0] : null, r);
    } else for (var a = n[0] || [], r = 0; r < a.length && i > r; r++) {
      t(a[r], r);
    }
  }function To(t) {
    for (var e, n = 0; n < t.length && !(e = t[n++]);) {}if (e) {
      var i = [];return f(e, function (t, e) {
        i.push(e);
      }), i;
    }
  }function ko(t, e, n, i, r, a) {
    var o = mo(t),
        s = {},
        l = [],
        u = [],
        h = t.subType,
        c = N(["pie", "map", "funnel"]),
        d = N(["line", "bar", "pictorialBar", "scatter", "effectScatter", "candlestick", "boxplot"]);if (o && null != d.get(h)) {
      var p = t.ecModel,
          g = Yg(p).datasetMap,
          v = e.uid + "_" + r,
          m = g.get(v) || g.set(v, { categoryWayDim: 1, valueWayDim: 0 });f(o.coordSysDims, function (t) {
        if (null == o.firstCategoryDimIndex) {
          var e = m.valueWayDim++;s[t] = e, u.push(e);
        } else if (o.categoryAxisMap.get(t)) s[t] = 0, l.push(0);else {
          var e = m.categoryWayDim++;s[t] = e, u.push(e);
        }
      });
    } else if (null != c.get(h)) {
      for (var y, _ = 0; 5 > _ && null == y; _++) {
        Po(n, i, r, a.dimensionsDefine, a.startIndex, _) || (y = _);
      }if (null != y) {
        s.value = y;var x = a.potentialNameDimIndex || Math.max(y - 1, 0);u.push(x), l.push(x);
      }
    }return l.length && (s.itemName = l), u.length && (s.seriesName = u), s;
  }function Do(t) {
    var e = t.option,
        n = e.data;return n ? void 0 : t.ecModel.getComponent("dataset", e.datasetIndex || 0);
  }function Ao(t, e) {
    return Po(t.data, t.sourceFormat, t.seriesLayoutBy, t.dimensionsDefine, t.startIndex, e);
  }function Po(t, e, n, i, r, a) {
    function o(t) {
      return null != t && isFinite(t) && "" !== t ? !1 : b(t) && "-" !== t ? !0 : void 0;
    }var s,
        l = 5;if (C(t)) return !1;var u;if (i && (u = i[a], u = M(u) ? u.name : u), e === Gg) {
      if (n === Xg) {
        for (var h = t[a], c = 0; c < (h || []).length && l > c; c++) {
          if (null != (s = o(h[r + c]))) return s;
        }
      } else for (var c = 0; c < t.length && l > c; c++) {
        var d = t[r + c];if (d && null != (s = o(d[a]))) return s;
      }
    } else if (e === Hg) {
      if (!u) return;for (var c = 0; c < t.length && l > c; c++) {
        var f = t[c];if (f && null != (s = o(f[u]))) return s;
      }
    } else if (e === Wg) {
      if (!u) return;var h = t[u];if (!h || C(h)) return !1;for (var c = 0; c < h.length && l > c; c++) {
        if (null != (s = o(h[c]))) return s;
      }
    } else if (e === Vg) for (var c = 0; c < t.length && l > c; c++) {
      var f = t[c],
          p = Oi(f);if (!x(p)) return !1;if (null != (s = o(p[a]))) return s;
    }return !1;
  }function Lo(t, e) {
    if (e) {
      var n = e.seiresIndex,
          i = e.seriesId,
          r = e.seriesName;return null != n && t.componentIndex !== n || null != i && t.id !== i || null != r && t.name !== r;
    }
  }function Oo(t, e) {
    var n = t.color && !t.colorLayer;f(e, function (e, a) {
      "colorLayer" === a && n || Rg.hasClass(a) || ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? t[a] = t[a] ? r(t[a], e, !1) : i(e) : null == t[a] && (t[a] = e));
    });
  }function Ro(t) {
    t = t, this.option = {}, this.option[Zg] = 1, this._componentsMap = N({ series: [] }), this._seriesIndices, this._seriesIndicesMap, Oo(t, this._theme.option), r(t, Bg, !1), this.mergeOption(t);
  }function Eo(t, e) {
    x(e) || (e = e ? [e] : []);var n = {};return f(e, function (e) {
      n[e] = (t.get(e) || []).slice();
    }), n;
  }function Bo(t, e, n) {
    var i = e.type ? e.type : n ? n.subType : Rg.determineSubType(t, e);return i;
  }function zo(t, e) {
    t._seriesIndicesMap = N(t._seriesIndices = p(e, function (t) {
      return t.componentIndex;
    }) || []);
  }function No(t, e) {
    return e.hasOwnProperty("subType") ? v(t, function (t) {
      return t.subType === e.subType;
    }) : t;
  }function Fo(t) {
    f(Kg, function (e) {
      this[e] = y(t[e], t);
    }, this);
  }function Vo() {
    this._coordinateSystems = [];
  }function Go(t) {
    this._api = t, this._timelineOptions = [], this._mediaList = [], this._mediaDefault, this._currentMediaIndices = [], this._optionBackup, this._newBaseOption;
  }function Ho(t, e, n) {
    var i,
        r,
        a = [],
        o = [],
        s = t.timeline;if (t.baseOption && (r = t.baseOption), (s || t.options) && (r = r || {}, a = (t.options || []).slice()), t.media) {
      r = r || {};var l = t.media;Jg(l, function (t) {
        t && t.option && (t.query ? o.push(t) : i || (i = t));
      });
    }return r || (r = t), r.timeline || (r.timeline = s), Jg([r].concat(a).concat(p(o, function (t) {
      return t.option;
    })), function (t) {
      Jg(e, function (e) {
        e(t, n);
      });
    }), { baseOption: r, timelineOptions: a, mediaDefault: i, mediaList: o };
  }function Wo(t, e, n) {
    var i = { width: e, height: n, aspectratio: e / n },
        r = !0;return f(t, function (t, e) {
      var n = e.match(iv);if (n && n[1] && n[2]) {
        var a = n[1],
            o = n[2].toLowerCase();jo(i[o], t, a) || (r = !1);
      }
    }), r;
  }function jo(t, e, n) {
    return "min" === n ? t >= e : "max" === n ? e >= t : t === e;
  }function qo(t, e) {
    return t.join(",") === e.join(",");
  }function Uo(t, e) {
    e = e || {}, Jg(e, function (e, n) {
      if (null != e) {
        var i = t[n];if (Rg.hasClass(n)) {
          e = Pi(e), i = Pi(i);var r = Ei(i, e);t[n] = ev(r, function (t) {
            return t.option && t.exist ? nv(t.exist, t.option, !0) : t.exist || t.option;
          });
        } else t[n] = nv(i, e, !0);
      }
    });
  }function Xo(t) {
    var e = t && t.itemStyle;if (e) for (var n = 0, i = ov.length; i > n; n++) {
      var a = ov[n],
          o = e.normal,
          s = e.emphasis;o && o[a] && (t[a] = t[a] || {}, t[a].normal ? r(t[a].normal, o[a]) : t[a].normal = o[a], o[a] = null), s && s[a] && (t[a] = t[a] || {}, t[a].emphasis ? r(t[a].emphasis, s[a]) : t[a].emphasis = s[a], s[a] = null);
    }
  }function Yo(t, e, n) {
    if (t && t[e] && (t[e].normal || t[e].emphasis)) {
      var i = t[e].normal,
          r = t[e].emphasis;i && (n ? (t[e].normal = t[e].emphasis = null, s(t[e], i)) : t[e] = i), r && (t.emphasis = t.emphasis || {}, t.emphasis[e] = r);
    }
  }function Zo(t) {
    Yo(t, "itemStyle"), Yo(t, "lineStyle"), Yo(t, "areaStyle"), Yo(t, "label"), Yo(t, "labelLine"), Yo(t, "upperLabel"), Yo(t, "edgeLabel");
  }function $o(t, e) {
    var n = av(t) && t[e],
        i = av(n) && n.textStyle;if (i) for (var r = 0, a = If.length; a > r; r++) {
      var e = If[r];i.hasOwnProperty(e) && (n[e] = i[e]);
    }
  }function Ko(t) {
    t && (Zo(t), $o(t, "label"), t.emphasis && $o(t.emphasis, "label"));
  }function Qo(t) {
    if (av(t)) {
      Xo(t), Zo(t), $o(t, "label"), $o(t, "upperLabel"), $o(t, "edgeLabel"), t.emphasis && ($o(t.emphasis, "label"), $o(t.emphasis, "upperLabel"), $o(t.emphasis, "edgeLabel"));var e = t.markPoint;e && (Xo(e), Ko(e));var n = t.markLine;n && (Xo(n), Ko(n));var i = t.markArea;i && Ko(i);var r = t.data;if ("graph" === t.type) {
        r = r || t.nodes;var a = t.links || t.edges;if (a && !C(a)) for (var o = 0; o < a.length; o++) {
          Ko(a[o]);
        }f(t.categories, function (t) {
          Zo(t);
        });
      }if (r && !C(r)) for (var o = 0; o < r.length; o++) {
        Ko(r[o]);
      }var e = t.markPoint;if (e && e.data) for (var s = e.data, o = 0; o < s.length; o++) {
        Ko(s[o]);
      }var n = t.markLine;if (n && n.data) for (var l = n.data, o = 0; o < l.length; o++) {
        x(l[o]) ? (Ko(l[o][0]), Ko(l[o][1])) : Ko(l[o]);
      }"gauge" === t.type ? ($o(t, "axisLabel"), $o(t, "title"), $o(t, "detail")) : "treemap" === t.type ? (Yo(t.breadcrumb, "itemStyle"), f(t.levels, function (t) {
        Zo(t);
      })) : "tree" === t.type && Zo(t.leaves);
    }
  }function Jo(t) {
    return x(t) ? t : t ? [t] : [];
  }function ts(t) {
    return (x(t) ? t[0] : t) || {};
  }function es(t, e) {
    e = e.split(",");for (var n = t, i = 0; i < e.length && (n = n && n[e[i]], null != n); i++) {}return n;
  }function ns(t, e, n, i) {
    e = e.split(",");for (var r, a = t, o = 0; o < e.length - 1; o++) {
      r = e[o], null == a[r] && (a[r] = {}), a = a[r];
    }(i || null == a[e[o]]) && (a[e[o]] = n);
  }function is(t) {
    f(lv, function (e) {
      e[0] in t && !(e[1] in t) && (t[e[1]] = t[e[0]]);
    });
  }function rs(t) {
    f(t, function (e, n) {
      var i = [],
          r = [0 / 0, 0 / 0],
          a = [e.stackResultDimension, e.stackedOverDimension],
          o = e.data,
          s = e.isStackedByIndex,
          l = o.map(a, function (a, l, u) {
        var h = o.get(e.stackedDimension, u);if (isNaN(h)) return r;var c, d;s ? d = o.getRawIndex(u) : c = o.get(e.stackedByDimension, u);for (var f = 0 / 0, p = n - 1; p >= 0; p--) {
          var g = t[p];if (s || (d = g.data.rawIndexOf(g.stackedByDimension, c)), d >= 0) {
            var v = g.data.getByRawIndex(g.stackResultDimension, d);if (h >= 0 && v > 0 || 0 >= h && 0 > v) {
              h += v, f = v;break;
            }
          }
        }return i[0] = h, i[1] = f, i;
      });o.hostModel.setData(l), e.data = l;
    });
  }function as(t, e) {
    _o.isInstance(t) || (t = _o.seriesDataToSource(t)), this._source = t;var n = this._data = t.data,
        i = t.sourceFormat;i === qg && (this._offset = 0, this._dimSize = e, this._data = n);var r = fv[i === Gg ? i + "_" + t.seriesLayoutBy : i];o(this, r);
  }function os() {
    return this._data.length;
  }function ss(t) {
    return this._data[t];
  }function ls(t) {
    for (var e = 0; e < t.length; e++) {
      this._data.push(t[e]);
    }
  }function us(t, e, n) {
    return null != n ? t[n] : t;
  }function hs(t, e, n, i) {
    return cs(t[i], this._dimensionInfos[e]);
  }function cs(t, e) {
    var n = e && e.type;if ("ordinal" === n) {
      var i = e && e.ordinalMeta;return i ? i.parseAndCollect(t) : t;
    }return "time" === n && "number" != typeof t && null != t && "-" !== t && (t = +Xa(t)), null == t || "" === t ? 0 / 0 : +t;
  }function ds(t, e, n) {
    if (t) {
      var i = t.getRawDataItem(e);if (null != i) {
        var r,
            a,
            o = t.getProvider().getSource().sourceFormat,
            s = t.getDimensionInfo(n);return s && (r = s.name, a = s.index), pv[o](i, e, a, r);
      }
    }
  }function fs(t) {
    return new ps(t);
  }function ps(t) {
    t = t || {}, this._reset = t.reset, this._plan = t.plan, this._count = t.count, this._onDirty = t.onDirty, this._dirty = !0, this.context;
  }function gs(t, e, n, i, r, a) {
    _v.reset(n, i, r, a), t._callingProgress = e, t._callingProgress({ start: n, end: i, count: i - n, next: _v.next }, t.context);
  }function vs(t, e) {
    t._dueIndex = t._outputDueEnd = t._dueEnd = 0, t._settedOutputEnd = null;var n, i;!e && t._reset && (n = t._reset(t.context), n && n.progress && (i = n.forceFirstProgress, n = n.progress), x(n) && !n.length && (n = null)), t._progress = n, t._modBy = t._modDataCount = null;var r = t._downstream;return r && r.dirty(), i;
  }function ms(t) {
    var e = t.name;zi(t) || (t.name = ys(t) || e);
  }function ys(t) {
    var e = t.getRawData(),
        n = e.mapDimension("seriesName", !0),
        i = [];return f(n, function (t) {
      var n = e.getDimensionInfo(t);n.displayName && i.push(n.displayName);
    }), i.join(" ");
  }function _s(t) {
    return t.model.getRawData().count();
  }function xs(t) {
    var e = t.model;return e.setData(e.getRawData().cloneShallow()), ws;
  }function ws(t, e) {
    t.end > e.outputData.count() && e.model.getRawData().cloneShallow(e.outputData);
  }function bs(t, e) {
    f(t.CHANGABLE_METHODS, function (n) {
      t.wrapMethod(n, _(Ms, e));
    });
  }function Ms(t) {
    var e = Ss(t);e && e.setOutputEnd(this.count());
  }function Ss(t) {
    var e = (t.ecModel || {}).scheduler,
        n = e && e.getPipeline(t.uid);if (n) {
      var i = n.currentTask;if (i) {
        var r = i.agentStubMap;r && (i = r.get(t.uid));
      }return i;
    }
  }function Cs() {
    this.group = new Cd(), this.uid = Oa("viewChart"), this.renderTask = fs({ plan: ks, reset: Ds }), this.renderTask.context = { view: this };
  }function Is(t, e) {
    if (t && (t.trigger(e), "group" === t.type)) for (var n = 0; n < t.childCount(); n++) {
      Is(t.childAt(n), e);
    }
  }function Ts(t, e, n) {
    var i = Fi(t, e);null != i ? f(Pi(i), function (e) {
      Is(t.getItemGraphicEl(e), n);
    }) : t.eachItemGraphicEl(function (t) {
      Is(t, n);
    });
  }function ks(t) {
    return Iv(t.model);
  }function Ds(t) {
    var e = t.model,
        n = t.ecModel,
        i = t.api,
        r = t.payload,
        a = e.pipelineContext.progressiveRender,
        o = t.view,
        s = r && Cv(r).updateMethod,
        l = a ? "incrementalPrepareRender" : s && o[s] ? s : "render";return "render" !== l && o[l](e, n, i, r), kv[l];
  }function As(t, e, n) {
    function i() {
      h = new Date().getTime(), c = null, t.apply(o, s || []);
    }var r,
        a,
        o,
        s,
        l,
        u = 0,
        h = 0,
        c = null;e = e || 0;var d = function d() {
      r = new Date().getTime(), o = this, s = arguments;var t = l || e,
          d = l || n;l = null, a = r - (d ? u : h) - t, clearTimeout(c), d ? c = setTimeout(i, t) : a >= 0 ? i() : c = setTimeout(i, -a), u = r;
    };return d.clear = function () {
      c && (clearTimeout(c), c = null);
    }, d.debounceNextCall = function (t) {
      l = t;
    }, d;
  }function Ps(t, e, n, i) {
    this.ecInstance = t, this.api = e, this.unfinished;var n = this._dataProcessorHandlers = n.slice(),
        i = this._visualHandlers = i.slice();this._allHandlers = n.concat(i), this._stageTaskMap = N();
  }function Ls(t, e, n, i, r) {
    function a(t, e) {
      return t.setDirty && (!t.dirtyMap || t.dirtyMap.get(e.__pipeline.id));
    }r = r || {};var o;f(e, function (e) {
      if (!r.visualType || r.visualType === e.visualType) {
        var s = t._stageTaskMap.get(e.uid),
            l = s.seriesTaskMap,
            u = s.overallTask;if (u) {
          var h,
              c = u.agentStubMap;c.each(function (t) {
            a(r, t) && (t.dirty(), h = !0);
          }), h && u.dirty(), Ev(u, i);var d = t.getPerformArgs(u, r.block);c.each(function (t) {
            t.perform(d);
          }), o |= u.perform(d);
        } else l && l.each(function (s) {
          a(r, s) && s.dirty();var l = t.getPerformArgs(s, r.block);l.skip = !e.performRawSeries && n.isSeriesFiltered(s.context.model), Ev(s, i), o |= s.perform(l);
        });
      }
    }), t.unfinished |= o;
  }function Os(t, e, n, i, r) {
    function a(n) {
      var a = n.uid,
          s = o.get(a) || o.set(a, fs({ plan: Fs, reset: Vs, count: Hs }));s.context = { model: n, ecModel: i, api: r, useClearVisual: e.isVisual && !e.isLayout, plan: e.plan, reset: e.reset, scheduler: t }, Ws(t, n, s);
    }var o = n.seriesTaskMap || (n.seriesTaskMap = N()),
        s = e.seriesType,
        l = e.getTargetSeries;e.createOnAllSeries ? i.eachRawSeries(a) : s ? i.eachRawSeriesByType(s, a) : l && l(i, r).each(a);var u = t._pipelineMap;o.each(function (t, e) {
      u.get(e) || (t.dispose(), o.removeKey(e));
    });
  }function Rs(t, e, n, i, r) {
    function a(e) {
      var n = e.uid,
          i = s.get(n);i || (i = s.set(n, fs({ reset: Bs, onDirty: Ns })), o.dirty()), i.context = { model: e, overallProgress: h, modifyOutputEnd: c }, i.agent = o, i.__block = h, Ws(t, e, i);
    }var o = n.overallTask = n.overallTask || fs({ reset: Es });o.context = { ecModel: i, api: r, overallReset: e.overallReset, scheduler: t };var s = o.agentStubMap = o.agentStubMap || N(),
        l = e.seriesType,
        u = e.getTargetSeries,
        h = !0,
        c = e.modifyOutputEnd;l ? i.eachRawSeriesByType(l, a) : u ? u(i, r).each(a) : (h = !1, f(i.getSeries(), a));var d = t._pipelineMap;s.each(function (t, e) {
      d.get(e) || (t.dispose(), o.dirty(), s.removeKey(e));
    });
  }function Es(t) {
    t.overallReset(t.ecModel, t.api, t.payload);
  }function Bs(t) {
    return t.overallProgress && zs;
  }function zs() {
    this.agent.dirty(), this.getDownstream().dirty();
  }function Ns() {
    this.agent && this.agent.dirty();
  }function Fs(t) {
    return t.plan && t.plan(t.model, t.ecModel, t.api, t.payload);
  }function Vs(t) {
    t.useClearVisual && t.data.clearAllVisual();var e = t.resetDefines = Pi(t.reset(t.model, t.ecModel, t.api, t.payload));return e.length > 1 ? p(e, function (t, e) {
      return Gs(e);
    }) : Bv;
  }function Gs(t) {
    return function (e, n) {
      var i = n.data,
          r = n.resetDefines[t];if (r && r.dataEach) for (var a = e.start; a < e.end; a++) {
        r.dataEach(i, a);
      } else r && r.progress && r.progress(e, i);
    };
  }function Hs(t) {
    return t.data.count();
  }function Ws(t, e, n) {
    var i = e.uid,
        r = t._pipelineMap.get(i);!r.head && (r.head = n), r.tail && r.tail.pipe(n), r.tail = n, n.__idxInPipeline = r.count++, n.__pipeline = r;
  }function js(t) {
    zv = null;try {
      t(Nv, Fv);
    } catch (e) {}return zv;
  }function qs(t, e) {
    for (var n in e.prototype) {
      t[n] = V;
    }
  }function Us(t) {
    return function (e, n, i) {
      e = e && e.toLowerCase(), jc.prototype[t].call(this, e, n, i);
    };
  }function Xs() {
    jc.call(this);
  }function Ys(t, e, n) {
    function r(t, e) {
      return t.__prio - e.__prio;
    }n = n || {}, "string" == typeof e && (e = xm[e]), this.id, this.group, this._dom = t;var a = "canvas",
        o = this._zr = Ii(t, { renderer: n.renderer || a, devicePixelRatio: n.devicePixelRatio, width: n.width, height: n.height });this._throttledZrFlush = As(y(o.flush, o), 17);var e = i(e);e && hv(e, !0), this._theme = e, this._chartsViews = [], this._chartsMap = {}, this._componentsViews = [], this._componentsMap = {}, this._coordSysMgr = new Vo();var s = this._api = dl(this);dn(_m, r), dn(vm, r), this._scheduler = new Ps(this, s, vm, _m), jc.call(this), this._messageCenter = new Xs(), this._initEvents(), this.resize = y(this.resize, this), this._pendingActions = [], o.animation.on("frame", this._onframe, this), nl(o, this), E(this);
  }function Zs(t, e, n) {
    var i,
        r = this._model,
        a = this._coordSysMgr.getCoordinateSystems();e = Gi(r, e);for (var o = 0; o < a.length; o++) {
      var s = a[o];if (s[t] && null != (i = s[t](r, e, n))) return i;
    }
  }function $s(t) {
    var e = t._model,
        n = t._scheduler;n.restorePipelines(e), n.prepareStageTasks(), il(t, "component", e, n), il(t, "chart", e, n), n.plan();
  }function Ks(t, e, n, i, r) {
    function a(i) {
      i && i.__alive && i[e] && i[e](i.__model, o, t._api, n);
    }var o = t._model;if (!i) return void Xv(t._componentsViews.concat(t._chartsViews), a);var s = {};s[i + "Id"] = n[i + "Id"], s[i + "Index"] = n[i + "Index"], s[i + "Name"] = n[i + "Name"];var l = { mainType: i, query: s };r && (l.subType = r);var u = n.excludeSeriesId;null != u && (u = N(Pi(u))), o && o.eachComponent(l, function (e) {
      u && null != u.get(e.id) || a(t["series" === i ? "_chartsMap" : "_componentsMap"][e.__viewId]);
    }, t);
  }function Qs(t, e) {
    var n = t._chartsMap,
        i = t._scheduler;e.eachSeries(function (t) {
      i.updateStreamModes(t, n[t.__viewId]);
    });
  }function Js(t, e) {
    var n = t.type,
        i = t.escapeConnect,
        r = pm[n],
        a = r.actionInfo,
        l = (a.update || "update").split(":"),
        u = l.pop();l = null != l[0] && $v(l[0]), this[lm] = !0;var h = [t],
        c = !1;t.batch && (c = !0, h = p(t.batch, function (e) {
      return e = s(o({}, e), t), e.batch = null, e;
    }));var d,
        f = [],
        g = "highlight" === n || "downplay" === n;Xv(h, function (t) {
      d = r.action(t, this._model, this._api), d = d || o({}, t), d.type = a.event || d.type, f.push(d), g ? Ks(this, u, t, "series") : l && Ks(this, u, t, l.main, l.sub);
    }, this), "none" === u || g || l || (this[um] ? ($s(this), dm.update.call(this, t), this[um] = !1) : dm[u].call(this, t)), d = c ? { type: a.event || n, escapeConnect: i, batch: f } : f[0], this[lm] = !1, !e && this._messageCenter.trigger(d.type, d);
  }function tl(t) {
    for (var e = this._pendingActions; e.length;) {
      var n = e.shift();Js.call(this, n, t);
    }
  }function el(t) {
    !t && this.trigger("updated");
  }function nl(t, e) {
    t.on("rendered", function () {
      e.trigger("rendered"), !t.animation.isFinished() || e[um] || e._scheduler.unfinished || e._pendingActions.length || e.trigger("finished");
    });
  }function il(t, e, n, i) {
    function r(t) {
      var e = "_ec_" + t.id + "_" + t.type,
          r = s[e];if (!r) {
        var h = $v(t.type),
            c = a ? bv.getClass(h.main, h.sub) : Cs.getClass(h.sub);r = new c(), r.init(n, u), s[e] = r, o.push(r), l.add(r.group);
      }t.__viewId = r.__id = e, r.__alive = !0, r.__model = t, r.group.__ecComponentInfo = { mainType: t.mainType, index: t.componentIndex }, !a && i.prepareView(r, t, n, u);
    }for (var a = "component" === e, o = a ? t._componentsViews : t._chartsViews, s = a ? t._componentsMap : t._chartsMap, l = t._zr, u = t._api, h = 0; h < o.length; h++) {
      o[h].__alive = !1;
    }a ? n.eachComponent(function (t, e) {
      "series" !== t && r(e);
    }) : n.eachSeries(r);for (var h = 0; h < o.length;) {
      var c = o[h];c.__alive ? h++ : (!a && c.renderTask.dispose(), l.remove(c.group), c.dispose(n, u), o.splice(h, 1), delete s[c.__id], c.__id = c.group.__ecComponentInfo = null);
    }
  }function rl(t) {
    t.clearColorPalette(), t.eachSeries(function (t) {
      t.clearColorPalette();
    });
  }function al(t, e, n, i) {
    ol(t, e, n, i), Xv(t._chartsViews, function (t) {
      t.__alive = !1;
    }), sl(t, e, n, i), Xv(t._chartsViews, function (t) {
      t.__alive || t.remove(e, n);
    });
  }function ol(t, e, n, i, r) {
    Xv(r || t._componentsViews, function (t) {
      var r = t.__model;t.render(r, e, n, i), cl(r, t);
    });
  }function sl(t, e, n, i, r) {
    var a,
        o = t._scheduler;e.eachSeries(function (e) {
      var n = t._chartsMap[e.__viewId];n.__alive = !0;var s = n.renderTask;o.updatePayload(s, i), r && r.get(e.uid) && s.dirty(), a |= s.perform(o.getPerformArgs(s)), n.group.silent = !!e.get("silent"), cl(e, n), hl(e, n);
    }), o.unfinished |= a, ul(t._zr, e), Pv(t._zr.dom, e);
  }function ll(t, e) {
    Xv(ym, function (n) {
      n(t, e);
    });
  }function ul(t, e) {
    var n = t.storage,
        i = 0;n.traverse(function (t) {
      t.isGroup || i++;
    }), i > e.get("hoverLayerThreshold") && !bc.node && n.traverse(function (t) {
      t.isGroup || (t.useHoverLayer = !0);
    });
  }function hl(t, e) {
    var n = t.get("blendMode") || null;e.group.traverse(function (t) {
      t.isGroup || t.style.blend !== n && t.setStyle("blend", n), t.eachPendingDisplayable && t.eachPendingDisplayable(function (t) {
        t.setStyle("blend", n);
      });
    });
  }function cl(t, e) {
    var n = t.get("z"),
        i = t.get("zlevel");e.group.traverse(function (t) {
      "group" !== t.type && (null != n && (t.z = n), null != i && (t.zlevel = i));
    });
  }function dl(t) {
    var e = t._coordSysMgr;return o(new Fo(t), { getCoordinateSystems: y(e.getCoordinateSystems, e), getComponentByElement: function getComponentByElement(e) {
        for (; e;) {
          var n = e.__ecComponentInfo;if (null != n) return t._model.getComponent(n.mainType, n.index);e = e.parent;
        }
      } });
  }function fl(t) {
    function e(t, e) {
      for (var n = 0; n < t.length; n++) {
        var i = t[n];i[a] = e;
      }
    }var n = 0,
        i = 1,
        r = 2,
        a = "__connectUpdateStatus";Xv(gm, function (o, s) {
      t._messageCenter.on(s, function (o) {
        if (Mm[t.group] && t[a] !== n) {
          if (o && o.escapeConnect) return;var s = t.makeActionFromEvent(o),
              l = [];Xv(bm, function (e) {
            e !== t && e.group === t.group && l.push(e);
          }), e(l, n), Xv(l, function (t) {
            t[a] !== i && t.dispatchAction(s);
          }), e(l, r);
        }
      });
    });
  }function pl(t, e, n) {
    var i = yl(t);if (i) return i;var r = new Ys(t, e, n);return r.id = "ec_" + Sm++, bm[r.id] = r, Wi(t, Im, r.id), fl(r), r;
  }function gl(t) {
    if (x(t)) {
      var e = t;t = null, Xv(e, function (e) {
        null != e.group && (t = e.group);
      }), t = t || "g_" + Cm++, Xv(e, function (e) {
        e.group = t;
      });
    }return Mm[t] = !0, t;
  }function vl(t) {
    Mm[t] = !1;
  }function ml(t) {
    "string" == typeof t ? t = bm[t] : t instanceof Ys || (t = yl(t)), t instanceof Ys && !t.isDisposed() && t.dispose();
  }function yl(t) {
    return bm[ji(t, Im)];
  }function _l(t) {
    return bm[t];
  }function xl(t, e) {
    xm[t] = e;
  }function wl(t) {
    mm.push(t);
  }function bl(t, e) {
    Dl(vm, t, e, tm);
  }function Ml(t) {
    ym.push(t);
  }function Sl(t, e, n) {
    "function" == typeof e && (n = e, e = "");var i = Zv(t) ? t.type : [t, t = { event: e }][0];t.event = (t.event || i).toLowerCase(), e = t.event, Uv(hm.test(i) && hm.test(e)), pm[i] || (pm[i] = { action: n, actionInfo: t }), gm[e] = i;
  }function Cl(t, e) {
    Vo.register(t, e);
  }function Il(t) {
    var e = Vo.get(t);return e ? e.getDimensionsInfo ? e.getDimensionsInfo() : e.dimensions.slice() : void 0;
  }function Tl(t, e) {
    Dl(_m, t, e, nm, "layout");
  }function kl(t, e) {
    Dl(_m, t, e, rm, "visual");
  }function Dl(t, e, n, i, r) {
    (Yv(e) || Zv(e)) && (n = e, e = i);var a = Ps.wrapStageHandler(n, r);return a.__prio = e, a.__raw = n, t.push(a), a;
  }function Al(t, e) {
    wm[t] = e;
  }function Pl(t) {
    return Rg.extend(t);
  }function Ll(t) {
    return bv.extend(t);
  }function Ol(t) {
    return wv.extend(t);
  }function Rl(t) {
    return Cs.extend(t);
  }function El(t) {
    n("createCanvas", t);
  }function Bl(t, e, n) {
    e.geoJson && !e.features && (n = e.specialAreas, e = e.geoJson), "string" == typeof e && (e = "undefined" != typeof JSON && JSON.parse ? JSON.parse(e) : new Function("return (" + e + ");")()), Tm[t] = { geoJson: e, specialAreas: n };
  }function zl(t) {
    return Tm[t];
  }function Nl(t) {
    return t;
  }function Fl(t, e, n, i, r) {
    this._old = t, this._new = e, this._oldKeyGetter = n || Nl, this._newKeyGetter = i || Nl, this.context = r;
  }function Vl(t, e, n, i, r) {
    for (var a = 0; a < t.length; a++) {
      var o = "_ec_" + r[i](t[a], a),
          s = e[o];null == s ? (n.push(o), e[o] = a) : (s.length || (e[o] = s = [s]), s.push(a));
    }
  }function Gl(t) {
    var e = {},
        n = e.encode = {},
        i = N(),
        r = [],
        a = [];f(t.dimensions, function (e) {
      var o = t.getDimensionInfo(e),
          s = o.coordDim;if (s) {
        var l = n[s];n.hasOwnProperty(s) || (l = n[s] = []), l[o.coordDimIndex] = e, o.isExtraCoord || (i.set(s, 1), Wl(o.type) && (r[0] = e)), o.defaultTooltip && a.push(e);
      }Am.each(function (t, e) {
        var i = n[e];n.hasOwnProperty(e) || (i = n[e] = []);var r = o.otherDims[e];null != r && r !== !1 && (i[r] = o.name);
      });
    });var o = [],
        s = {};i.each(function (t, e) {
      var i = n[e];s[e] = i[0], o = o.concat(i);
    }), e.dataDimsOnCoord = o, e.encodeFirstDimNotExtra = s;var l = n.label;l && l.length && (r = l.slice());var u = n.tooltip;return u && u.length ? a = u.slice() : a.length || (a = r.slice()), n.defaultedLabel = r, n.defaultedTooltip = a, e;
  }function Hl(t) {
    return "category" === t ? "ordinal" : "time" === t ? "time" : "float";
  }function Wl(t) {
    return !("ordinal" === t || "time" === t);
  }function jl(t) {
    return t._rawCount > 65535 ? Em : Bm;
  }function ql(t) {
    var e = t.constructor;return e === Array ? t.slice() : new e(t);
  }function Ul(t, e) {
    f(zm.concat(e.__wrappedMethods || []), function (n) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }), t.__wrappedMethods = e.__wrappedMethods, f(Nm, function (n) {
      t[n] = i(e[n]);
    }), t._calculationInfo = o(e._calculationInfo);
  }function Xl(t) {
    var e = t._invertedIndicesMap;f(e, function (n, i) {
      var r = t._dimensionInfos[i],
          a = r.ordinalMeta;if (a) {
        n = e[i] = new Em(a.categories.length);for (var o = 0; o < n.length; o++) {
          n[o] = 0 / 0;
        }for (var o = 0; o < t._count; o++) {
          n[t.get(i, o)] = o;
        }
      }
    });
  }function Yl(t, e, n) {
    var i;if (null != e) {
      var r = t._chunkSize,
          a = Math.floor(n / r),
          o = n % r,
          s = t.dimensions[e],
          l = t._storage[s][a];if (l) {
        i = l[o];var u = t._dimensionInfos[s].ordinalMeta;u && u.categories.length && (i = u.categories[i]);
      }
    }return i;
  }function Zl(t) {
    return t;
  }function $l(t) {
    return t < this._count && t >= 0 ? this._indices[t] : -1;
  }function Kl(t, e) {
    var n = t._idList[e];return null == n && (n = Yl(t, t._idDimIdx, e)), null == n && (n = Om + e), n;
  }function Ql(t) {
    return x(t) || (t = [t]), t;
  }function Jl(t, e) {
    var n = t.dimensions,
        i = new Fm(p(n, t.getDimensionInfo, t), t.hostModel);Ul(i, t);for (var r = i._storage = {}, a = t._storage, o = 0; o < n.length; o++) {
      var s = n[o];a[s] && (u(e, s) >= 0 ? (r[s] = tu(a[s]), i._rawExtent[s] = eu(), i._extent[s] = null) : r[s] = a[s]);
    }return i;
  }function tu(t) {
    for (var e = new Array(t.length), n = 0; n < t.length; n++) {
      e[n] = ql(t[n]);
    }return e;
  }function eu() {
    return [1 / 0, -1 / 0];
  }function nu(t, e, n) {
    function r(t, e, n) {
      null != Am.get(e) ? t.otherDims[e] = n : (t.coordDim = e, t.coordDimIndex = n, h.set(e, !0));
    }_o.isInstance(e) || (e = _o.seriesDataToSource(e)), n = n || {}, t = (t || []).slice();for (var a = (n.dimsDef || []).slice(), l = N(n.encodeDef), u = N(), h = N(), c = [], d = iu(e, t, a, n.dimCount), p = 0; d > p; p++) {
      var g = a[p] = o({}, M(a[p]) ? a[p] : { name: a[p] }),
          v = g.name,
          m = c[p] = { otherDims: {} };null != v && null == u.get(v) && (m.name = m.displayName = v, u.set(v, p)), null != g.type && (m.type = g.type), null != g.displayName && (m.displayName = g.displayName);
    }l.each(function (t, e) {
      t = Pi(t).slice();var n = l.set(e, []);f(t, function (t, i) {
        b(t) && (t = u.get(t)), null != t && d > t && (n[i] = t, r(c[t], e, i));
      });
    });var y = 0;f(t, function (t) {
      var e, t, n, a;if (b(t)) e = t, t = {};else {
        e = t.name;var o = t.ordinalMeta;t.ordinalMeta = null, t = i(t), t.ordinalMeta = o, n = t.dimsDef, a = t.otherDims, t.name = t.coordDim = t.coordDimIndex = t.dimsDef = t.otherDims = null;
      }var u = Pi(l.get(e));if (!u.length) for (var h = 0; h < (n && n.length || 1); h++) {
        for (; y < c.length && null != c[y].coordDim;) {
          y++;
        }y < c.length && u.push(y++);
      }f(u, function (i, o) {
        var l = c[i];if (r(s(l, t), e, o), null == l.name && n) {
          var u = n[o];!M(u) && (u = { name: u }), l.name = l.displayName = u.name, l.defaultTooltip = u.defaultTooltip;
        }a && s(l.otherDims, a);
      });
    });var _ = n.generateCoord,
        x = n.generateCoordCount,
        w = null != x;x = _ ? x || 1 : 0;for (var S = _ || "value", C = 0; d > C; C++) {
      var m = c[C] = c[C] || {},
          I = m.coordDim;null == I && (m.coordDim = ru(S, h, w), m.coordDimIndex = 0, (!_ || 0 >= x) && (m.isExtraCoord = !0), x--), null == m.name && (m.name = ru(m.coordDim, u)), null == m.type && Ao(e, C, m.name) && (m.type = "ordinal");
    }return c;
  }function iu(t, e, n, i) {
    var r = Math.max(t.dimensionsDetectCount || 1, e.length, n.length, i || 0);return f(e, function (t) {
      var e = t.dimsDef;e && (r = Math.max(r, e.length));
    }), r;
  }function ru(t, e, n) {
    if (n || null != e.get(t)) {
      for (var i = 0; null != e.get(t + i);) {
        i++;
      }t += i;
    }return e.set(t, !0), t;
  }function au(t, e, n) {
    n = n || {};var i,
        r,
        a,
        o,
        s = n.byIndex,
        l = n.stackedCoordDimension,
        u = !(!t || !t.get("stack"));if (f(e, function (t, n) {
      b(t) && (e[n] = t = { name: t }), u && !t.isExtraCoord && (s || i || !t.ordinalMeta || (i = t), r || "ordinal" === t.type || "time" === t.type || l && l !== t.coordDim || (r = t));
    }), !r || s || i || (s = !0), r) {
      a = "__\x00ecstackresult", o = "__\x00ecstackedover", i && (i.createInvertedIndices = !0);var h = r.coordDim,
          c = r.type,
          d = 0;f(e, function (t) {
        t.coordDim === h && d++;
      }), e.push({ name: a, coordDim: h, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 }), d++, e.push({ name: o, coordDim: o, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 });
    }return { stackedDimension: r && r.name, stackedByDimension: i && i.name, isStackedByIndex: s, stackedOverDimension: o, stackResultDimension: a };
  }function ou(t, e) {
    return !!e && e === t.getCalculationInfo("stackedDimension");
  }function su(t, e) {
    return ou(t, e) ? t.getCalculationInfo("stackResultDimension") : e;
  }function lu(t, e, n) {
    n = n || {}, _o.isInstance(t) || (t = _o.seriesDataToSource(t));var i,
        r = e.get("coordinateSystem"),
        a = Vo.get(r),
        o = mo(e);o && (i = p(o.coordSysDims, function (t) {
      var e = { name: t },
          n = o.axisMap.get(t);if (n) {
        var i = n.get("type");e.type = Hl(i);
      }return e;
    })), i || (i = a && (a.getDimensionsInfo ? a.getDimensionsInfo() : a.dimensions.slice()) || ["x", "y"]);var s,
        l,
        u = Hm(t, { coordDimensions: i, generateCoord: n.generateCoord });o && f(u, function (t, e) {
      var n = t.coordDim,
          i = o.categoryAxisMap.get(n);i && (null == s && (s = e), t.ordinalMeta = i.getOrdinalMeta()), null != t.otherDims.itemName && (l = !0);
    }), l || null == s || (u[s].otherDims.itemName = 0);var h = au(e, u),
        c = new Fm(u, e);c.setCalculationInfo(h);var d = null != s && uu(t) ? function (t, e, n, i) {
      return i === s ? n : this.defaultDimValueGetter(t, e, n, i);
    } : null;return c.hasItemOption = !1, c.initData(t, null, d), c;
  }function uu(t) {
    if (t.sourceFormat === Vg) {
      var e = hu(t.data || []);return null != e && !x(Oi(e));
    }
  }function hu(t) {
    for (var e = 0; e < t.length && null == t[e];) {
      e++;
    }return t[e];
  }function cu(t) {
    this._setting = t || {}, this._extent = [1 / 0, -1 / 0], this._interval = 0, this.init && this.init.apply(this, arguments);
  }function du(t) {
    this.categories = t.categories || [], this._needCollect = t.needCollect, this._deduplication = t.deduplication, this._map;
  }function fu(t) {
    return t._map || (t._map = N(t.categories));
  }function pu(t) {
    return M(t) && null != t.value ? t.value : t + "";
  }function gu(t, e, n, i) {
    var r = {},
        a = t[1] - t[0],
        o = r.interval = $a(a / e, !0);null != n && n > o && (o = r.interval = n), null != i && o > i && (o = r.interval = i);var s = r.intervalPrecision = vu(o),
        l = r.niceTickExtent = [Um(Math.ceil(t[0] / o) * o, s), Um(Math.floor(t[1] / o) * o, s)];return yu(l, t), r;
  }function vu(t) {
    return Ha(t) + 2;
  }function mu(t, e, n) {
    t[e] = Math.max(Math.min(t[e], n[1]), n[0]);
  }function yu(t, e) {
    !isFinite(t[0]) && (t[0] = e[0]), !isFinite(t[1]) && (t[1] = e[1]), mu(t, 0, e), mu(t, 1, e), t[0] > t[1] && (t[0] = t[1]);
  }function _u(t, e, n, i) {
    var r = [];if (!t) return r;var a = 1e4;e[0] < n[0] && r.push(e[0]);for (var o = n[0]; o <= n[1] && (r.push(o), o = Um(o + t, i), o !== r[r.length - 1]);) {
      if (r.length > a) return [];
    }return e[1] > (r.length ? r[r.length - 1] : n[1]) && r.push(e[1]), r;
  }function xu(t) {
    return t.get("stack") || Zm + t.seriesIndex;
  }function wu(t) {
    return t.dim + t.index;
  }function bu(t, e) {
    var n = [];return e.eachSeriesByType(t, function (t) {
      Iu(t) && !Tu(t) && n.push(t);
    }), n;
  }function Mu(t) {
    var e = [];return f(t, function (t) {
      var n = t.getData(),
          i = t.coordinateSystem,
          r = i.getBaseAxis(),
          a = r.getExtent(),
          o = "category" === r.type ? r.getBandWidth() : Math.abs(a[1] - a[0]) / n.count(),
          s = Na(t.get("barWidth"), o),
          l = Na(t.get("barMaxWidth"), o),
          u = t.get("barGap"),
          h = t.get("barCategoryGap");e.push({ bandWidth: o, barWidth: s, barMaxWidth: l, barGap: u, barCategoryGap: h, axisKey: wu(r), stackId: xu(t) });
    }), Su(e);
  }function Su(t) {
    var e = {};f(t, function (t) {
      var n = t.axisKey,
          i = t.bandWidth,
          r = e[n] || { bandWidth: i, remainedWidth: i, autoWidthCount: 0, categoryGap: "20%", gap: "30%", stacks: {} },
          a = r.stacks;e[n] = r;var o = t.stackId;a[o] || r.autoWidthCount++, a[o] = a[o] || { width: 0, maxWidth: 0 };var s = t.barWidth;s && !a[o].width && (a[o].width = s, s = Math.min(r.remainedWidth, s), r.remainedWidth -= s);var l = t.barMaxWidth;l && (a[o].maxWidth = l);var u = t.barGap;null != u && (r.gap = u);var h = t.barCategoryGap;null != h && (r.categoryGap = h);
    });var n = {};return f(e, function (t, e) {
      n[e] = {};var i = t.stacks,
          r = t.bandWidth,
          a = Na(t.categoryGap, r),
          o = Na(t.gap, 1),
          s = t.remainedWidth,
          l = t.autoWidthCount,
          u = (s - a) / (l + (l - 1) * o);u = Math.max(u, 0), f(i, function (t) {
        var e = t.maxWidth;e && u > e && (e = Math.min(e, s), t.width && (e = Math.min(e, t.width)), s -= e, t.width = e, l--);
      }), u = (s - a) / (l + (l - 1) * o), u = Math.max(u, 0);var h,
          c = 0;f(i, function (t) {
        t.width || (t.width = u), h = t, c += t.width * (1 + o);
      }), h && (c -= h.width * o);var d = -c / 2;f(i, function (t, i) {
        n[e][i] = n[e][i] || { offset: d, width: t.width }, d += t.width * (1 + o);
      });
    }), n;
  }function Cu(t, e, n) {
    if (t && e) {
      var i = t[wu(e)];return null != i && null != n && (i = i[xu(n)]), i;
    }
  }function Iu(t) {
    return t.coordinateSystem && "cartesian2d" === t.coordinateSystem.type;
  }function Tu(t) {
    return t.pipelineContext && t.pipelineContext.large;
  }function ku(t, e, n) {
    return u(t.getAxesOnZeroOf(), e) >= 0 || n ? e.toGlobalCoord(e.dataToCoord(0)) : e.getGlobalExtent()[0];
  }function Du(t, e) {
    return cy(t, hy(e));
  }function Au(t, e) {
    var n,
        i,
        r,
        a = t.type,
        o = e.getMin(),
        s = e.getMax(),
        l = null != o,
        u = null != s,
        h = t.getExtent();
    "ordinal" === a ? n = e.getCategories().length : (i = e.get("boundaryGap"), x(i) || (i = [i || 0, i || 0]), "boolean" == typeof i[0] && (i = [0, 0]), i[0] = Na(i[0], 1), i[1] = Na(i[1], 1), r = h[1] - h[0] || Math.abs(h[0])), null == o && (o = "ordinal" === a ? n ? 0 : 0 / 0 : h[0] - i[0] * r), null == s && (s = "ordinal" === a ? n ? n - 1 : 0 / 0 : h[1] + i[1] * r), "dataMin" === o ? o = h[0] : "function" == typeof o && (o = o({ min: h[0], max: h[1] })), "dataMax" === s ? s = h[1] : "function" == typeof s && (s = s({ min: h[0], max: h[1] })), (null == o || !isFinite(o)) && (o = 0 / 0), (null == s || !isFinite(s)) && (s = 0 / 0), t.setBlank(T(o) || T(s) || "ordinal" === a && !t.getOrdinalMeta().categories.length), e.getNeedCrossZero() && (o > 0 && s > 0 && !l && (o = 0), 0 > o && 0 > s && !u && (s = 0));var c = e.ecModel;if (c && "time" === a) {
      var d,
          p = bu("bar", c);if (f(p, function (t) {
        d |= t.getBaseAxis() === e.axis;
      }), d) {
        var g = Mu(p),
            v = Pu(o, s, e, g);o = v.min, s = v.max;
      }
    }return [o, s];
  }function Pu(t, e, n, i) {
    var r = n.axis.getExtent(),
        a = r[1] - r[0],
        o = Cu(i, n.axis);if (void 0 === o) return { min: t, max: e };var s = 1 / 0;f(o, function (t) {
      s = Math.min(t.offset, s);
    });var l = -1 / 0;f(o, function (t) {
      l = Math.max(t.offset + t.width, l);
    }), s = Math.abs(s), l = Math.abs(l);var u = s + l,
        h = e - t,
        c = 1 - (s + l) / a,
        d = h / c - h;return e += d * (l / u), t -= d * (s / u), { min: t, max: e };
  }function Lu(t, e) {
    var n = Au(t, e),
        i = null != e.getMin(),
        r = null != e.getMax(),
        a = e.get("splitNumber");"log" === t.type && (t.base = e.get("logBase"));var o = t.type;t.setExtent(n[0], n[1]), t.niceExtent({ splitNumber: a, fixMin: i, fixMax: r, minInterval: "interval" === o || "time" === o ? e.get("minInterval") : null, maxInterval: "interval" === o || "time" === o ? e.get("maxInterval") : null });var s = e.get("interval");null != s && t.setInterval && t.setInterval(s);
  }function Ou(t, e) {
    if (e = e || t.get("type")) switch (e) {case "category":
        return new qm(t.getOrdinalMeta ? t.getOrdinalMeta() : t.getCategories(), [1 / 0, -1 / 0]);case "value":
        return new Ym();default:
        return (cu.getClass(e) || Ym).create(t);}
  }function Ru(t) {
    var e = t.scale.getExtent(),
        n = e[0],
        i = e[1];return !(n > 0 && i > 0 || 0 > n && 0 > i);
  }function Eu(t) {
    var e = t.getLabelModel().get("formatter"),
        n = "category" === t.type ? t.scale.getExtent()[0] : null;return "string" == typeof e ? e = function (t) {
      return function (e) {
        return t.replace("{value}", null != e ? e : "");
      };
    }(e) : "function" == typeof e ? function (i, r) {
      return null != n && (r = i - n), e(Bu(t, i), r);
    } : function (e) {
      return t.scale.getLabel(e);
    };
  }function Bu(t, e) {
    return "category" === t.type ? t.scale.getLabel(e) : e;
  }function zu(t) {
    var e = t.model,
        n = t.scale;if (e.get("axisLabel.show") && !n.isBlank()) {
      var i,
          r,
          a = "category" === t.type,
          o = n.getExtent();a ? r = n.count() : (i = n.getTicks(), r = i.length);var s,
          l = t.getLabelModel(),
          u = Eu(t),
          h = 1;r > 40 && (h = Math.ceil(r / 40));for (var c = 0; r > c; c += h) {
        var d = i ? i[c] : o[0] + c,
            f = u(d),
            p = l.getTextRect(f),
            g = Nu(p, l.get("rotate") || 0);s ? s.union(g) : s = g;
      }return s;
    }
  }function Nu(t, e) {
    var n = e * Math.PI / 180,
        i = t.plain(),
        r = i.width,
        a = i.height,
        o = r * Math.cos(n) + a * Math.sin(n),
        s = r * Math.sin(n) + a * Math.cos(n),
        l = new rn(i.x, i.y, o, s);return l;
  }function Fu(t, e) {
    if ("image" !== this.type) {
      var n = this.style,
          i = this.shape;i && "line" === i.symbolType ? n.stroke = t : this.__isEmptyBrush ? (n.stroke = t, n.fill = e || "#fff") : (n.fill && (n.fill = t), n.stroke && (n.stroke = t)), this.dirty(!1);
    }
  }function Vu(t, e, n, i, r, a, o) {
    var s = 0 === t.indexOf("empty");s && (t = t.substr(5, 1).toLowerCase() + t.substr(6));var l;return l = 0 === t.indexOf("image://") ? qr(t.slice(8), new rn(e, n, i, r), o ? "center" : "cover") : 0 === t.indexOf("path://") ? jr(t.slice(7), {}, new rn(e, n, i, r), o ? "center" : "cover") : new Cy({ shape: { symbolType: t, x: e, y: n, width: i, height: r } }), l.__isEmptyBrush = s, l.setColor = Fu, l.setColor(a), l;
  }function Gu(t) {
    return lu(t.getSource(), t);
  }function Hu(t, e) {
    var n = e;Aa.isInstance(e) || (n = new Aa(e), c(n, my));var i = Ou(n);return i.setExtent(t[0], t[1]), Lu(i, n), i;
  }function Wu(t) {
    c(t, my);
  }function ju(t, e) {
    return Math.abs(t - e) < ky;
  }function qu(t, e, n) {
    var i = 0,
        r = t[0];if (!r) return !1;for (var a = 1; a < t.length; a++) {
      var o = t[a];i += br(r[0], r[1], o[0], o[1], e, n), r = o;
    }var s = t[0];return ju(r[0], s[0]) && ju(r[1], s[1]) || (i += br(r[0], r[1], s[0], s[1], e, n)), 0 !== i;
  }function Uu(t, e, n) {
    if (this.name = t, this.geometries = e, n) n = [n[0], n[1]];else {
      var i = this.getBoundingRect();n = [i.x + i.width / 2, i.y + i.height / 2];
    }this.center = n;
  }function Xu(t) {
    if (!t.UTF8Encoding) return t;var e = t.UTF8Scale;null == e && (e = 1024);for (var n = t.features, i = 0; i < n.length; i++) {
      for (var r = n[i], a = r.geometry, o = a.coordinates, s = a.encodeOffsets, l = 0; l < o.length; l++) {
        var u = o[l];if ("Polygon" === a.type) o[l] = Yu(u, s[l], e);else if ("MultiPolygon" === a.type) for (var h = 0; h < u.length; h++) {
          var c = u[h];u[h] = Yu(c, s[l][h], e);
        }
      }
    }return t.UTF8Encoding = !1, t;
  }function Yu(t, e, n) {
    for (var i = [], r = e[0], a = e[1], o = 0; o < t.length; o += 2) {
      var s = t.charCodeAt(o) - 64,
          l = t.charCodeAt(o + 1) - 64;s = s >> 1 ^ -(1 & s), l = l >> 1 ^ -(1 & l), s += r, l += a, r = s, a = l, i.push([s / n, l / n]);
    }return i;
  }function Zu(t) {
    return "category" === t.type ? Ku(t) : th(t);
  }function $u(t, e) {
    return "category" === t.type ? Ju(t, e) : { ticks: t.scale.getTicks() };
  }function Ku(t) {
    var e = t.getLabelModel(),
        n = Qu(t, e);return !e.get("show") || t.scale.isBlank() ? { labels: [], labelCategoryInterval: n.labelCategoryInterval } : n;
  }function Qu(t, e) {
    var n = eh(t, "labels"),
        i = uh(e),
        r = nh(n, i);if (r) return r;var a, o;return w(i) ? a = lh(t, i) : (o = "auto" === i ? rh(t) : i, a = sh(t, o)), ih(n, i, { labels: a, labelCategoryInterval: o });
  }function Ju(t, e) {
    var n = eh(t, "ticks"),
        i = uh(e),
        r = nh(n, i);if (r) return r;var a, o;if ((!e.get("show") || t.scale.isBlank()) && (a = []), w(i)) a = lh(t, i, !0);else if ("auto" === i) {
      var s = Qu(t, t.getLabelModel());o = s.labelCategoryInterval, a = p(s.labels, function (t) {
        return t.tickValue;
      });
    } else o = i, a = sh(t, o, !0);return ih(n, i, { ticks: a, tickCategoryInterval: o });
  }function th(t) {
    var e = t.scale.getTicks(),
        n = Eu(t);return { labels: p(e, function (e, i) {
        return { formattedLabel: n(e, i), rawLabel: t.scale.getLabel(e), tickValue: e };
      }) };
  }function eh(t, e) {
    return Ay(t)[e] || (Ay(t)[e] = []);
  }function nh(t, e) {
    for (var n = 0; n < t.length; n++) {
      if (t[n].key === e) return t[n].value;
    }
  }function ih(t, e, n) {
    return t.push({ key: e, value: n }), n;
  }function rh(t) {
    var e = Ay(t).autoInterval;return null != e ? e : Ay(t).autoInterval = t.calculateCategoryInterval();
  }function ah(t) {
    var e = oh(t),
        n = Eu(t),
        i = (e.axisRotate - e.labelRotate) / 180 * Math.PI,
        r = t.scale,
        a = r.getExtent(),
        o = r.count();if (a[1] - a[0] < 1) return 0;var s = 1;o > 40 && (s = Math.max(1, Math.floor(o / 40)));for (var l = a[0], u = t.dataToCoord(l + 1) - t.dataToCoord(l), h = Math.abs(u * Math.cos(i)), c = Math.abs(u * Math.sin(i)), d = 0, f = 0; l <= a[1]; l += s) {
      var p = 0,
          g = 0,
          v = Mn(n(l), e.font, "center", "top");p = 1.3 * v.width, g = 1.3 * v.height, d = Math.max(d, p, 7), f = Math.max(f, g, 7);
    }var m = d / h,
        y = f / c;isNaN(m) && (m = 1 / 0), isNaN(y) && (y = 1 / 0);var _ = Math.max(0, Math.floor(Math.min(m, y))),
        x = Ay(t.model),
        w = x.lastAutoInterval,
        b = x.lastTickCount;return null != w && null != b && Math.abs(w - _) <= 1 && Math.abs(b - o) <= 1 && w > _ ? _ = w : (x.lastTickCount = o, x.lastAutoInterval = _), _;
  }function oh(t) {
    var e = t.getLabelModel();return { axisRotate: t.getRotate ? t.getRotate() : t.isHorizontal && !t.isHorizontal() ? 90 : 0, labelRotate: e.get("rotate") || 0, font: e.getFont() };
  }function sh(t, e, n) {
    function i(t) {
      l.push(n ? t : { formattedLabel: r(t), rawLabel: a.getLabel(t), tickValue: t });
    }var r = Eu(t),
        a = t.scale,
        o = a.getExtent(),
        s = t.getLabelModel(),
        l = [],
        u = Math.max((e || 0) + 1, 1),
        h = o[0],
        c = a.count();0 !== h && u > 1 && c / u > 2 && (h = Math.round(Math.ceil(h / u) * u));var d = { min: s.get("showMinLabel"), max: s.get("showMaxLabel") };d.min && h !== o[0] && i(o[0]);for (var f = h; f <= o[1]; f += u) {
      i(f);
    }return d.max && f !== o[1] && i(o[1]), l;
  }function lh(t, e, n) {
    var i = t.scale,
        r = Eu(t),
        a = [];return f(i.getTicks(), function (t) {
      var o = i.getLabel(t);e(t, o) && a.push(n ? t : { formattedLabel: r(t), rawLabel: o, tickValue: t });
    }), a;
  }function uh(t) {
    var e = t.get("interval");return null == e ? "auto" : e;
  }function hh(t, e) {
    var n = t[1] - t[0],
        i = e,
        r = n / i / 2;t[0] += r, t[1] -= r;
  }function ch(t, e, n, i, r) {
    function a(t, e) {
      return h ? t > e : e > t;
    }var o = e.length;if (t.onBand && !i && o) {
      var s,
          l = t.getExtent();if (1 === o) e[0].coord = l[0], s = e[1] = { coord: l[0] };else {
        var u = e[1].coord - e[0].coord;f(e, function (t) {
          t.coord -= u / 2;var e = e || 0;e % 2 > 0 && (t.coord -= u / (2 * (e + 1)));
        }), s = { coord: e[o - 1].coord + u }, e.push(s);
      }var h = l[0] > l[1];a(e[0].coord, l[0]) && (r ? e[0].coord = l[0] : e.shift()), r && a(l[0], e[0].coord) && e.unshift({ coord: l[0] }), a(l[1], s.coord) && (r ? s.coord = l[1] : e.pop()), r && a(s.coord, l[1]) && e.push({ coord: l[1] });
    }
  }function dh(t, e) {
    var n = t.mapDimension("defaultedLabel", !0),
        i = n.length;if (1 === i) return ds(t, e, n[0]);if (i) {
      for (var r = [], a = 0; a < n.length; a++) {
        var o = ds(t, e, n[a]);r.push(o);
      }return r.join(" ");
    }
  }function fh(t, e, n) {
    Cd.call(this), this.updateData(t, e, n);
  }function ph(t) {
    return [t[0] / 2, t[1] / 2];
  }function gh(t, e) {
    this.parent.drift(t, e);
  }function vh(t) {
    this.group = new Cd(), this._symbolCtor = t || fh;
  }function mh(t, e, n, i) {
    return !(!e || isNaN(e[0]) || isNaN(e[1]) || i.isIgnore && i.isIgnore(n) || i.clipShape && !i.clipShape.contain(e[0], e[1]) || "none" === t.getItemVisual(n, "symbol"));
  }function yh(t) {
    return null == t || M(t) || (t = { isIgnore: t }), t || {};
  }function _h(t) {
    var e = t.hostModel;return { itemStyle: e.getModel("itemStyle").getItemStyle(["color"]), hoverItemStyle: e.getModel("emphasis.itemStyle").getItemStyle(), symbolRotate: e.get("symbolRotate"), symbolOffset: e.get("symbolOffset"), hoverAnimation: e.get("hoverAnimation"), labelModel: e.getModel("label"), hoverLabelModel: e.getModel("emphasis.label"), cursorStyle: e.get("cursor") };
  }function xh(t, e, n) {
    var i,
        r = t.getBaseAxis(),
        a = t.getOtherAxis(r),
        o = wh(a, n),
        s = r.dim,
        l = a.dim,
        u = e.mapDimension(l),
        h = e.mapDimension(s),
        c = "x" === l || "radius" === l ? 1 : 0,
        d = p(t.dimensions, function (t) {
      return e.mapDimension(t);
    }),
        f = e.getCalculationInfo("stackResultDimension");return (i |= ou(e, d[0])) && (d[0] = f), (i |= ou(e, d[1])) && (d[1] = f), { dataDimsForPoint: d, valueStart: o, valueAxisDim: l, baseAxisDim: s, stacked: !!i, valueDim: u, baseDim: h, baseDataOffset: c, stackedOverDimension: e.getCalculationInfo("stackedOverDimension") };
  }function wh(t, e) {
    var n = 0,
        i = t.scale.getExtent();return "start" === e ? n = i[0] : "end" === e ? n = i[1] : i[0] > 0 ? n = i[0] : i[1] < 0 && (n = i[1]), n;
  }function bh(t, e, n, i) {
    var r = 0 / 0;t.stacked && (r = n.get(n.getCalculationInfo("stackedOverDimension"), i)), isNaN(r) && (r = t.valueStart);var a = t.baseDataOffset,
        o = [];return o[a] = n.get(t.baseDim, i), o[1 - a] = r, e.dataToPoint(o);
  }function Mh(t, e) {
    var n = [];return e.diff(t).add(function (t) {
      n.push({ cmd: "+", idx: t });
    }).update(function (t, e) {
      n.push({ cmd: "=", idx: e, idx1: t });
    }).remove(function (t) {
      n.push({ cmd: "-", idx: t });
    }).execute(), n;
  }function Sh(t) {
    return isNaN(t[0]) || isNaN(t[1]);
  }function Ch(t, e, n, i, r, a, o, s, l, u) {
    return "none" !== u && u ? Ih.apply(this, arguments) : Th.apply(this, arguments);
  }function Ih(t, e, n, i, r, a, o, s, l, u, h) {
    for (var c = 0, d = n, f = 0; i > f; f++) {
      var p = e[d];if (d >= r || 0 > d) break;if (Sh(p)) {
        if (h) {
          d += a;continue;
        }break;
      }if (d === n) t[a > 0 ? "moveTo" : "lineTo"](p[0], p[1]);else if (l > 0) {
        var g = e[c],
            v = "y" === u ? 1 : 0,
            m = (p[v] - g[v]) * l;Uy(Yy, g), Yy[v] = g[v] + m, Uy(Zy, p), Zy[v] = p[v] - m, t.bezierCurveTo(Yy[0], Yy[1], Zy[0], Zy[1], p[0], p[1]);
      } else t.lineTo(p[0], p[1]);c = d, d += a;
    }return f;
  }function Th(t, e, n, i, r, a, o, s, l, u, h) {
    for (var c = 0, d = n, f = 0; i > f; f++) {
      var p = e[d];if (d >= r || 0 > d) break;if (Sh(p)) {
        if (h) {
          d += a;continue;
        }break;
      }if (d === n) t[a > 0 ? "moveTo" : "lineTo"](p[0], p[1]), Uy(Yy, p);else if (l > 0) {
        var g = d + a,
            v = e[g];if (h) for (; v && Sh(e[g]);) {
          g += a, v = e[g];
        }var m = .5,
            y = e[c],
            v = e[g];if (!v || Sh(v)) Uy(Zy, p);else {
          Sh(v) && !h && (v = p), X(Xy, v, y);var _, x;if ("x" === u || "y" === u) {
            var w = "x" === u ? 0 : 1;_ = Math.abs(p[w] - y[w]), x = Math.abs(p[w] - v[w]);
          } else _ = Vc(p, y), x = Vc(p, v);m = x / (x + _), qy(Zy, p, Xy, -l * (1 - m));
        }Wy(Yy, Yy, s), jy(Yy, Yy, o), Wy(Zy, Zy, s), jy(Zy, Zy, o), t.bezierCurveTo(Yy[0], Yy[1], Zy[0], Zy[1], p[0], p[1]), qy(Yy, p, Xy, l * m);
      } else t.lineTo(p[0], p[1]);c = d, d += a;
    }return f;
  }function kh(t, e) {
    var n = [1 / 0, 1 / 0],
        i = [-1 / 0, -1 / 0];if (e) for (var r = 0; r < t.length; r++) {
      var a = t[r];a[0] < n[0] && (n[0] = a[0]), a[1] < n[1] && (n[1] = a[1]), a[0] > i[0] && (i[0] = a[0]), a[1] > i[1] && (i[1] = a[1]);
    }return { min: e ? n : i, max: e ? i : n };
  }function Dh(t, e) {
    if (t.length === e.length) {
      for (var n = 0; n < t.length; n++) {
        var i = t[n],
            r = e[n];if (i[0] !== r[0] || i[1] !== r[1]) return;
      }return !0;
    }
  }function Ah(t) {
    return "number" == typeof t ? t : t ? .5 : 0;
  }function Ph(t) {
    var e = t.getGlobalExtent();if (t.onBand) {
      var n = t.getBandWidth() / 2 - 1,
          i = e[1] > e[0] ? 1 : -1;e[0] += i * n, e[1] -= i * n;
    }return e;
  }function Lh(t, e, n) {
    if (!n.valueDim) return [];for (var i = [], r = 0, a = e.count(); a > r; r++) {
      i.push(bh(n, t, e, r));
    }return i;
  }function Oh(t, e, n, i) {
    var r = Ph(t.getAxis("x")),
        a = Ph(t.getAxis("y")),
        o = t.getBaseAxis().isHorizontal(),
        s = Math.min(r[0], r[1]),
        l = Math.min(a[0], a[1]),
        u = Math.max(r[0], r[1]) - s,
        h = Math.max(a[0], a[1]) - l;if (n) s -= .5, u += .5, l -= .5, h += .5;else {
      var c = i.get("lineStyle.width") || 2,
          d = i.get("clipOverflow") ? c / 2 : Math.max(u, h);o ? (l -= d, h += 2 * d) : (s -= d, u += 2 * d);
    }var f = new Xp({ shape: { x: s, y: l, width: u, height: h } });return e && (f.shape[o ? "width" : "height"] = 0, ba(f, { shape: { width: u, height: h } }, i)), f;
  }function Rh(t, e, n, i) {
    var r = t.getAngleAxis(),
        a = t.getRadiusAxis(),
        o = a.getExtent().slice();o[0] > o[1] && o.reverse();var s = r.getExtent(),
        l = Math.PI / 180;n && (o[0] -= .5, o[1] += .5);var u = new Gp({ shape: { cx: Fa(t.cx, 1), cy: Fa(t.cy, 1), r0: Fa(o[0], 1), r: Fa(o[1], 1), startAngle: -s[0] * l, endAngle: -s[1] * l, clockwise: r.inverse } });return e && (u.shape.endAngle = -s[0] * l, ba(u, { shape: { endAngle: -s[1] * l } }, i)), u;
  }function Eh(t, e, n, i) {
    return "polar" === t.type ? Rh(t, e, n, i) : Oh(t, e, n, i);
  }function Bh(t, e, n) {
    for (var i = e.getBaseAxis(), r = "x" === i.dim || "radius" === i.dim ? 0 : 1, a = [], o = 0; o < t.length - 1; o++) {
      var s = t[o + 1],
          l = t[o];a.push(l);var u = [];switch (n) {case "end":
          u[r] = s[r], u[1 - r] = l[1 - r], a.push(u);break;case "middle":
          var h = (l[r] + s[r]) / 2,
              c = [];u[r] = c[r] = h, u[1 - r] = l[1 - r], c[1 - r] = s[1 - r], a.push(u), a.push(c);break;default:
          u[r] = l[r], u[1 - r] = s[1 - r], a.push(u);}
    }return t[o] && a.push(t[o]), a;
  }function zh(t, e) {
    var n = t.getVisual("visualMeta");if (n && n.length && t.count() && "cartesian2d" === e.type) {
      for (var i, r, a = n.length - 1; a >= 0; a--) {
        var o = n[a].dimension,
            s = t.dimensions[o],
            l = t.getDimensionInfo(s);if (i = l && l.coordDim, "x" === i || "y" === i) {
          r = n[a];break;
        }
      }if (r) {
        var u = e.getAxis(i),
            h = p(r.stops, function (t) {
          return { coord: u.toGlobalCoord(u.dataToCoord(t.value)), color: t.color };
        }),
            c = h.length,
            d = r.outerColors.slice();c && h[0].coord > h[c - 1].coord && (h.reverse(), d.reverse());var g = 10,
            v = h[0].coord - g,
            m = h[c - 1].coord + g,
            y = m - v;if (.001 > y) return "transparent";f(h, function (t) {
          t.offset = (t.coord - v) / y;
        }), h.push({ offset: c ? h[c - 1].offset : .5, color: d[1] || "transparent" }), h.unshift({ offset: c ? h[0].offset : .5, color: d[0] || "transparent" });var _ = new tg(0, 0, 0, 0, h, !0);return _[i] = v, _[i + "2"] = m, _;
      }
    }
  }function Nh(t, e, n) {
    var i = t.get("showAllSymbol"),
        r = "auto" === i;if (!i || r) {
      var a = n.getAxesByScale("ordinal")[0];if (a && (!r || !Fh(a, e))) {
        var o = e.mapDimension(a.dim),
            s = {};return f(a.getViewLabels(), function (t) {
          s[t.tickValue] = 1;
        }), function (t) {
          return !s.hasOwnProperty(e.get(o, t));
        };
      }
    }
  }function Fh(t, e) {
    var n = t.getExtent(),
        i = Math.abs(n[1] - n[0]) / t.scale.count();isNaN(i) && (i = 0);for (var r = e.count(), a = Math.max(1, Math.round(r / 5)), o = 0; r > o; o += a) {
      if (1.5 * fh.getSymbolSize(e, o)[t.isHorizontal() ? 1 : 0] > i) return !1;
    }return !0;
  }function Vh(t) {
    return this._axes[t];
  }function Gh(t) {
    i_.call(this, t);
  }function Hh(t, e) {
    return e.type || (e.data ? "category" : "value");
  }function Wh(t, e) {
    return t.getCoordSysModel() === e;
  }function jh(t, e, n) {
    this._coordsMap = {}, this._coordsList = [], this._axesMap = {}, this._axesList = [], this._initCartesian(t, e, n), this.model = t;
  }function qh(t, e, n) {
    n.getAxesOnZeroOf = function () {
      return i ? [i] : [];
    };var i,
        r = t[e],
        a = n.model,
        o = a.get("axisLine.onZero"),
        s = a.get("axisLine.onZeroAxisIndex");if (o) {
      if (null != s) return void (Uh(r[s]) && (i = r[s]));for (var l in r) {
        if (r.hasOwnProperty(l) && Uh(r[l])) {
          i = r[l];break;
        }
      }
    }
  }function Uh(t) {
    return t && "category" !== t.type && "time" !== t.type && Ru(t);
  }function Xh(t, e) {
    var n = t.getExtent(),
        i = n[0] + n[1];t.toGlobalCoord = "x" === t.dim ? function (t) {
      return t + e;
    } : function (t) {
      return i - t + e;
    }, t.toLocalCoord = "x" === t.dim ? function (t) {
      return t - e;
    } : function (t) {
      return i - t + e;
    };
  }function Yh(t) {
    return p(d_, function (e) {
      var n = t.getReferringComponents(e)[0];return n;
    });
  }function Zh(t) {
    return "cartesian2d" === t.get("coordinateSystem");
  }function $h(t) {
    var e = { componentType: t.mainType };return e[t.mainType + "Index"] = t.componentIndex, e;
  }function Kh(t, e, n, i) {
    var r,
        a,
        o = qa(n - t.rotation),
        s = i[0] > i[1],
        l = "start" === e && !s || "start" !== e && s;return Ua(o - f_ / 2) ? (a = l ? "bottom" : "top", r = "center") : Ua(o - 1.5 * f_) ? (a = l ? "top" : "bottom", r = "center") : (a = "middle", r = 1.5 * f_ > o && o > f_ / 2 ? l ? "left" : "right" : l ? "right" : "left"), { rotation: o, textAlign: r, textVerticalAlign: a };
  }function Qh(t) {
    var e = t.get("tooltip");return t.get("silent") || !(t.get("triggerEvent") || e && e.show);
  }function Jh(t, e, n) {
    var i = t.get("axisLabel.showMinLabel"),
        r = t.get("axisLabel.showMaxLabel");e = e || [], n = n || [];var a = e[0],
        o = e[1],
        s = e[e.length - 1],
        l = e[e.length - 2],
        u = n[0],
        h = n[1],
        c = n[n.length - 1],
        d = n[n.length - 2];i === !1 ? (tc(a), tc(u)) : ec(a, o) && (i ? (tc(o), tc(h)) : (tc(a), tc(u))), r === !1 ? (tc(s), tc(c)) : ec(l, s) && (r ? (tc(l), tc(d)) : (tc(s), tc(c)));
  }function tc(t) {
    t && (t.ignore = !0);
  }function ec(t, e) {
    var n = t && t.getBoundingRect().clone(),
        i = e && e.getBoundingRect().clone();if (n && i) {
      var r = pe([]);return ye(r, r, -t.rotation), n.applyTransform(ve([], r, t.getLocalTransform())), i.applyTransform(ve([], r, e.getLocalTransform())), n.intersect(i);
    }
  }function nc(t) {
    return "middle" === t || "center" === t;
  }function ic(t, e, n) {
    var i = e.axis;if (e.get("axisTick.show") && !i.scale.isBlank()) {
      for (var r = e.getModel("axisTick"), a = r.getModel("lineStyle"), o = r.get("length"), l = i.getTicksCoords(), u = [], h = [], c = t._transform, d = [], f = 0; f < l.length; f++) {
        var p = l[f].coord;u[0] = p, u[1] = 0, h[0] = p, h[1] = n.tickDirection * o, c && (ae(u, u, c), ae(h, h, c));var g = new Yp(Yr({ anid: "tick_" + l[f].tickValue, shape: { x1: u[0], y1: u[1], x2: h[0], y2: h[1] }, style: s(a.getLineStyle(), { stroke: e.get("axisLine.lineStyle.color") }), z2: 2, silent: !0 }));t.group.add(g), d.push(g);
      }return d;
    }
  }function rc(t, e, n) {
    var i = e.axis,
        r = k(n.axisLabelShow, e.get("axisLabel.show"));if (r && !i.scale.isBlank()) {
      var a = e.getModel("axisLabel"),
          o = a.get("margin"),
          s = i.getViewLabels(),
          l = (k(n.labelRotate, a.get("rotate")) || 0) * f_ / 180,
          u = v_(n.rotation, l, n.labelDirection),
          h = e.getCategories(!0),
          c = [],
          d = Qh(e),
          p = e.get("triggerEvent");return f(s, function (r, s) {
        var l = r.tickValue,
            f = r.formattedLabel,
            g = r.rawLabel,
            v = a;h && h[l] && h[l].textStyle && (v = new Aa(h[l].textStyle, a, e.ecModel));var m = v.getTextColor() || e.get("axisLine.lineStyle.color"),
            y = i.dataToCoord(l),
            _ = [y, n.labelOffset + n.labelDirection * o],
            x = new zp({ anid: "label_" + l, position: _, rotation: u.rotation, silent: d, z2: 10 });ca(x.style, v, { text: f, textAlign: v.getShallow("align", !0) || u.textAlign, textVerticalAlign: v.getShallow("verticalAlign", !0) || v.getShallow("baseline", !0) || u.textVerticalAlign, textFill: "function" == typeof m ? m("category" === i.type ? g : "value" === i.type ? l + "" : l, s) : m }), p && (x.eventData = $h(e), x.eventData.targetType = "axisLabel", x.eventData.value = g), t._dumbGroup.add(x), x.updateTransform(), c.push(x), t.group.add(x), x.decomposeTransform();
      }), c;
    }
  }function ac(t) {
    var e = oc(t);if (e) {
      var n = e.axisPointerModel,
          i = e.axis.scale,
          r = n.option,
          a = n.get("status"),
          o = n.get("value");null != o && (o = i.parse(o));var s = lc(n);null == a && (r.status = s ? "show" : "hide");var l = i.getExtent().slice();l[0] > l[1] && l.reverse(), (null == o || o > l[1]) && (o = l[1]), o < l[0] && (o = l[0]), r.value = o, s && (r.status = e.axis.scale.isBlank() ? "hide" : "show");
    }
  }function oc(t) {
    var e = (t.ecModel.getComponent("axisPointer") || {}).coordSysAxesInfo;return e && e.axesInfo[uc(t)];
  }function sc(t) {
    var e = oc(t);return e && e.axisPointerModel;
  }function lc(t) {
    return !!t.get("handle.show");
  }function uc(t) {
    return t.type + "||" + t.id;
  }function hc(t, e, n, i, r, a) {
    var o = m_.getAxisPointerClass(t.axisPointerClass);if (o) {
      var s = sc(e);s ? (t._axisPointer || (t._axisPointer = new o())).render(e, s, i, a) : cc(t, i);
    }
  }function cc(t, e, n) {
    var i = t._axisPointer;i && i.dispose(e, n), t._axisPointer = null;
  }function dc(t, e, n) {
    n = n || {};var i = t.coordinateSystem,
        r = e.axis,
        a = {},
        o = r.getAxesOnZeroOf()[0],
        s = r.position,
        l = o ? "onZero" : s,
        u = r.dim,
        h = i.getRect(),
        c = [h.x, h.x + h.width, h.y, h.y + h.height],
        d = { left: 0, right: 1, top: 0, bottom: 1, onZero: 2 },
        f = e.get("offset") || 0,
        p = "x" === u ? [c[2] - f, c[3] + f] : [c[0] - f, c[1] + f];if (o) {
      var g = o.toGlobalCoord(o.dataToCoord(0));p[d.onZero] = Math.max(Math.min(g, p[1]), p[0]);
    }a.position = ["y" === u ? p[d[l]] : c[0], "x" === u ? p[d[l]] : c[3]], a.rotation = Math.PI / 2 * ("x" === u ? 0 : 1);var v = { top: -1, bottom: 1, left: -1, right: 1 };a.labelDirection = a.tickDirection = a.nameDirection = v[s], a.labelOffset = o ? p[d[s]] - p[d.onZero] : 0, e.get("axisTick.inside") && (a.tickDirection = -a.tickDirection), k(n.labelInside, e.get("axisLabel.inside")) && (a.labelDirection = -a.labelDirection);var m = e.get("axisLabel.rotate");return a.labelRotate = "top" === l ? -m : m, a.z2 = 1, a;
  }function fc(t, e, n) {
    var i,
        r = {},
        a = "toggleSelected" === t;return n.eachComponent("legend", function (n) {
      a && null != i ? n[i ? "select" : "unSelect"](e.name) : (n[t](e.name), i = n.isSelected(e.name));var o = n.getData();f(o, function (t) {
        var e = t.get("name");if ("\n" !== e && "" !== e) {
          var i = n.isSelected(e);r[e] = r.hasOwnProperty(e) ? r[e] && i : i;
        }
      });
    }), { name: e.name, selected: r };
  }function pc(t, e) {
    var n = xg(e.get("padding")),
        i = e.getItemStyle(["color", "opacity"]);i.fill = e.get("backgroundColor");var t = new Xp({ shape: { x: t.x - n[3], y: t.y - n[0], width: t.width + n[1] + n[3], height: t.height + n[0] + n[2], r: e.get("borderRadius") }, style: i, silent: !0, z2: -1 });return t;
  }function gc(t, e) {
    e.dispatchAction({ type: "legendToggleSelect", name: t });
  }function vc(t, e, n, i) {
    var r = n.getZr().storage.getDisplayList()[0];r && r.useHoverLayer || n.dispatchAction({ type: "highlight", seriesName: t.name, name: e, excludeSeriesId: i });
  }function mc(t, e, n, i) {
    var r = n.getZr().storage.getDisplayList()[0];r && r.useHoverLayer || n.dispatchAction({ type: "downplay", seriesName: t.name, name: e, excludeSeriesId: i });
  }function yc(t, e, n) {
    var i = t.getOrient(),
        r = [1, 1];r[i.index] = 0, co(e, n, { type: "box", ignoreSize: r });
  }var _c = 2311,
      xc = function xc() {
    return _c++;
  },
      wc = {};wc = "object" == (typeof wx === "undefined" ? "undefined" : _typeof(wx)) && "function" == typeof wx.getSystemInfoSync ? { browser: {}, os: {}, node: !1, wxa: !0, canvasSupported: !0, svgSupported: !1, touchEventsSupported: !0 } : "undefined" == typeof document && "undefined" != typeof self ? { browser: {}, os: {}, node: !1, worker: !0, canvasSupported: !0 } : "undefined" == typeof navigator ? { browser: {}, os: {}, node: !0, worker: !1, canvasSupported: !0, svgSupported: !0 } : e(navigator.userAgent);var bc = wc,
      Mc = { "[object Function]": 1, "[object RegExp]": 1, "[object Date]": 1, "[object Error]": 1, "[object CanvasGradient]": 1, "[object CanvasPattern]": 1, "[object Image]": 1, "[object Canvas]": 1 },
      Sc = { "[object Int8Array]": 1, "[object Uint8Array]": 1, "[object Uint8ClampedArray]": 1, "[object Int16Array]": 1, "[object Uint16Array]": 1, "[object Int32Array]": 1, "[object Uint32Array]": 1, "[object Float32Array]": 1, "[object Float64Array]": 1 },
      Cc = Object.prototype.toString,
      Ic = Array.prototype,
      Tc = Ic.forEach,
      kc = Ic.filter,
      Dc = Ic.slice,
      Ac = Ic.map,
      Pc = Ic.reduce,
      Lc = {},
      Oc = function Oc() {
    return Lc.createCanvas();
  };Lc.createCanvas = function () {
    return document.createElement("canvas");
  };var Rc,
      Ec = "__ec_primitive__";z.prototype = { constructor: z, get: function get(t) {
      return this.hasOwnProperty(t) ? this[t] : null;
    }, set: function set(t, e) {
      return this[t] = e;
    }, each: function each(t, e) {
      void 0 !== e && (t = y(t, e));for (var n in this) {
        this.hasOwnProperty(n) && t(this[n], n);
      }
    }, removeKey: function removeKey(t) {
      delete this[t];
    } };var Bc = (Object.freeze || Object)({ $override: n, clone: i, merge: r, mergeAll: a, extend: o, defaults: s, createCanvas: Oc, getContext: l, indexOf: u, inherits: h, mixin: c, isArrayLike: d, each: f, map: p, reduce: g, filter: v, find: m, bind: y, curry: _, isArray: x, isFunction: w, isString: b, isObject: M, isBuiltInObject: S, isTypedArray: C, isDom: I, eqNaN: T, retrieve: k, retrieve2: D, retrieve3: A, slice: P, normalizeCssArray: L, assert: O, trim: R, setAsPrimitive: E, isPrimitive: B, createHashMap: N, concatArray: F, noop: V }),
      zc = "undefined" == typeof Float32Array ? Array : Float32Array,
      Nc = Y,
      Fc = Z,
      Vc = ee,
      Gc = ne,
      Hc = (Object.freeze || Object)({ create: G, copy: H, clone: W, set: j, add: q, scaleAndAdd: U, sub: X, len: Y, length: Nc, lenSquare: Z, lengthSquare: Fc, mul: $, div: K, dot: Q, scale: J, normalize: te, distance: ee, dist: Vc, distanceSquare: ne, distSquare: Gc, negate: ie, lerp: re, applyTransform: ae, min: oe, max: se });le.prototype = { constructor: le, _dragStart: function _dragStart(t) {
      var e = t.target;e && e.draggable && (this._draggingTarget = e, e.dragging = !0, this._x = t.offsetX, this._y = t.offsetY, this.dispatchToElement(ue(e, t), "dragstart", t.event));
    }, _drag: function _drag(t) {
      var e = this._draggingTarget;if (e) {
        var n = t.offsetX,
            i = t.offsetY,
            r = n - this._x,
            a = i - this._y;this._x = n, this._y = i, e.drift(r, a, t), this.dispatchToElement(ue(e, t), "drag", t.event);var o = this.findHover(n, i, e).target,
            s = this._dropTarget;this._dropTarget = o, e !== o && (s && o !== s && this.dispatchToElement(ue(s, t), "dragleave", t.event), o && o !== s && this.dispatchToElement(ue(o, t), "dragenter", t.event));
      }
    }, _dragEnd: function _dragEnd(t) {
      var e = this._draggingTarget;e && (e.dragging = !1), this.dispatchToElement(ue(e, t), "dragend", t.event), this._dropTarget && this.dispatchToElement(ue(this._dropTarget, t), "drop", t.event), this._draggingTarget = null, this._dropTarget = null;
    } };var Wc = Array.prototype.slice,
      jc = function jc() {
    this._$handlers = {};
  };jc.prototype = { constructor: jc, one: function one(t, e, n) {
      var i = this._$handlers;if (!e || !t) return this;i[t] || (i[t] = []);for (var r = 0; r < i[t].length; r++) {
        if (i[t][r].h === e) return this;
      }return i[t].push({ h: e, one: !0, ctx: n || this }), this;
    }, on: function on(t, e, n) {
      var i = this._$handlers;if (!e || !t) return this;i[t] || (i[t] = []);for (var r = 0; r < i[t].length; r++) {
        if (i[t][r].h === e) return this;
      }return i[t].push({ h: e, one: !1, ctx: n || this }), this;
    }, isSilent: function isSilent(t) {
      var e = this._$handlers;return e[t] && e[t].length;
    }, off: function off(t, e) {
      var n = this._$handlers;if (!t) return this._$handlers = {}, this;if (e) {
        if (n[t]) {
          for (var i = [], r = 0, a = n[t].length; a > r; r++) {
            n[t][r].h != e && i.push(n[t][r]);
          }n[t] = i;
        }n[t] && 0 === n[t].length && delete n[t];
      } else delete n[t];return this;
    }, trigger: function trigger(t) {
      if (this._$handlers[t]) {
        var e = arguments,
            n = e.length;n > 3 && (e = Wc.call(e, 1));for (var i = this._$handlers[t], r = i.length, a = 0; r > a;) {
          switch (n) {case 1:
              i[a].h.call(i[a].ctx);break;case 2:
              i[a].h.call(i[a].ctx, e[1]);break;case 3:
              i[a].h.call(i[a].ctx, e[1], e[2]);break;default:
              i[a].h.apply(i[a].ctx, e);}i[a].one ? (i.splice(a, 1), r--) : a++;
        }
      }return this;
    }, triggerWithContext: function triggerWithContext(t) {
      if (this._$handlers[t]) {
        var e = arguments,
            n = e.length;n > 4 && (e = Wc.call(e, 1, e.length - 1));for (var i = e[e.length - 1], r = this._$handlers[t], a = r.length, o = 0; a > o;) {
          switch (n) {case 1:
              r[o].h.call(i);break;case 2:
              r[o].h.call(i, e[1]);break;case 3:
              r[o].h.call(i, e[1], e[2]);break;default:
              r[o].h.apply(i, e);}r[o].one ? (r.splice(o, 1), a--) : o++;
        }
      }return this;
    } };var qc = "silent";ce.prototype.dispose = function () {};var Uc = ["click", "dblclick", "mousewheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"],
      Xc = function Xc(t, e, n, i) {
    jc.call(this), this.storage = t, this.painter = e, this.painterRoot = i, n = n || new ce(), this.proxy = null, this._hovered = {}, this._lastTouchMoment, this._lastX, this._lastY, le.call(this), this.setHandlerProxy(n);
  };Xc.prototype = { constructor: Xc, setHandlerProxy: function setHandlerProxy(t) {
      this.proxy && this.proxy.dispose(), t && (f(Uc, function (e) {
        t.on && t.on(e, this[e], this);
      }, this), t.handler = this), this.proxy = t;
    }, mousemove: function mousemove(t) {
      var e = t.zrX,
          n = t.zrY,
          i = this._hovered,
          r = i.target;r && !r.__zr && (i = this.findHover(i.x, i.y), r = i.target);var a = this._hovered = this.findHover(e, n),
          o = a.target,
          s = this.proxy;s.setCursor && s.setCursor(o ? o.cursor : "default"), r && o !== r && this.dispatchToElement(i, "mouseout", t), this.dispatchToElement(a, "mousemove", t), o && o !== r && this.dispatchToElement(a, "mouseover", t);
    }, mouseout: function mouseout(t) {
      this.dispatchToElement(this._hovered, "mouseout", t);var e,
          n = t.toElement || t.relatedTarget;do {
        n = n && n.parentNode;
      } while (n && 9 != n.nodeType && !(e = n === this.painterRoot));!e && this.trigger("globalout", { event: t });
    }, resize: function resize() {
      this._hovered = {};
    }, dispatch: function dispatch(t, e) {
      var n = this[t];n && n.call(this, e);
    }, dispose: function dispose() {
      this.proxy.dispose(), this.storage = this.proxy = this.painter = null;
    }, setCursorStyle: function setCursorStyle(t) {
      var e = this.proxy;e.setCursor && e.setCursor(t);
    }, dispatchToElement: function dispatchToElement(t, e, n) {
      t = t || {};var i = t.target;if (!i || !i.silent) {
        for (var r = "on" + e, a = he(e, t, n); i && (i[r] && (a.cancelBubble = i[r].call(i, a)), i.trigger(e, a), i = i.parent, !a.cancelBubble);) {}a.cancelBubble || (this.trigger(e, a), this.painter && this.painter.eachOtherLayer(function (t) {
          "function" == typeof t[r] && t[r].call(t, a), t.trigger && t.trigger(e, a);
        }));
      }
    }, findHover: function findHover(t, e, n) {
      for (var i = this.storage.getDisplayList(), r = { x: t, y: e }, a = i.length - 1; a >= 0; a--) {
        var o;if (i[a] !== n && !i[a].ignore && (o = de(i[a], t, e)) && (!r.topTarget && (r.topTarget = i[a]), o !== qc)) {
          r.target = i[a];break;
        }
      }return r;
    } }, f(["click", "mousedown", "mouseup", "mousewheel", "dblclick", "contextmenu"], function (t) {
    Xc.prototype[t] = function (e) {
      var n = this.findHover(e.zrX, e.zrY),
          i = n.target;if ("mousedown" === t) this._downEl = i, this._downPoint = [e.zrX, e.zrY], this._upEl = i;else if ("mouseup" === t) this._upEl = i;else if ("click" === t) {
        if (this._downEl !== this._upEl || !this._downPoint || Vc(this._downPoint, [e.zrX, e.zrY]) > 4) return;this._downPoint = null;
      }this.dispatchToElement(n, t, e);
    };
  }), c(Xc, jc), c(Xc, le);var Yc = "undefined" == typeof Float32Array ? Array : Float32Array,
      Zc = (Object.freeze || Object)({ create: fe, identity: pe, copy: ge, mul: ve, translate: me, rotate: ye, scale: _e, invert: xe, clone: we }),
      $c = pe,
      Kc = 5e-5,
      Qc = function Qc(t) {
    t = t || {}, t.position || (this.position = [0, 0]), null == t.rotation && (this.rotation = 0), t.scale || (this.scale = [1, 1]), this.origin = this.origin || null;
  },
      Jc = Qc.prototype;Jc.transform = null, Jc.needLocalTransform = function () {
    return be(this.rotation) || be(this.position[0]) || be(this.position[1]) || be(this.scale[0] - 1) || be(this.scale[1] - 1);
  }, Jc.updateTransform = function () {
    var t = this.parent,
        e = t && t.transform,
        n = this.needLocalTransform(),
        i = this.transform;return n || e ? (i = i || fe(), n ? this.getLocalTransform(i) : $c(i), e && (n ? ve(i, t.transform, i) : ge(i, t.transform)), this.transform = i, this.invTransform = this.invTransform || fe(), void xe(this.invTransform, i)) : void (i && $c(i));
  }, Jc.getLocalTransform = function (t) {
    return Qc.getLocalTransform(this, t);
  }, Jc.setTransform = function (t) {
    var e = this.transform,
        n = t.dpr || 1;e ? t.setTransform(n * e[0], n * e[1], n * e[2], n * e[3], n * e[4], n * e[5]) : t.setTransform(n, 0, 0, n, 0, 0);
  }, Jc.restoreTransform = function (t) {
    var e = t.dpr || 1;t.setTransform(e, 0, 0, e, 0, 0);
  };var td = [];Jc.decomposeTransform = function () {
    if (this.transform) {
      var t = this.parent,
          e = this.transform;t && t.transform && (ve(td, t.invTransform, e), e = td);var n = e[0] * e[0] + e[1] * e[1],
          i = e[2] * e[2] + e[3] * e[3],
          r = this.position,
          a = this.scale;be(n - 1) && (n = Math.sqrt(n)), be(i - 1) && (i = Math.sqrt(i)), e[0] < 0 && (n = -n), e[3] < 0 && (i = -i), r[0] = e[4], r[1] = e[5], a[0] = n, a[1] = i, this.rotation = Math.atan2(-e[1] / i, e[0] / n);
    }
  }, Jc.getGlobalScale = function () {
    var t = this.transform;if (!t) return [1, 1];var e = Math.sqrt(t[0] * t[0] + t[1] * t[1]),
        n = Math.sqrt(t[2] * t[2] + t[3] * t[3]);return t[0] < 0 && (e = -e), t[3] < 0 && (n = -n), [e, n];
  }, Jc.transformCoordToLocal = function (t, e) {
    var n = [t, e],
        i = this.invTransform;return i && ae(n, n, i), n;
  }, Jc.transformCoordToGlobal = function (t, e) {
    var n = [t, e],
        i = this.transform;return i && ae(n, n, i), n;
  }, Qc.getLocalTransform = function (t, e) {
    e = e || [], $c(e);var n = t.origin,
        i = t.scale || [1, 1],
        r = t.rotation || 0,
        a = t.position || [0, 0];return n && (e[4] -= n[0], e[5] -= n[1]), _e(e, e, i), r && ye(e, e, r), n && (e[4] += n[0], e[5] += n[1]), e[4] += a[0], e[5] += a[1], e;
  };var ed = { linear: function linear(t) {
      return t;
    }, quadraticIn: function quadraticIn(t) {
      return t * t;
    }, quadraticOut: function quadraticOut(t) {
      return t * (2 - t);
    }, quadraticInOut: function quadraticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
    }, cubicIn: function cubicIn(t) {
      return t * t * t;
    }, cubicOut: function cubicOut(t) {
      return --t * t * t + 1;
    }, cubicInOut: function cubicInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
    }, quarticIn: function quarticIn(t) {
      return t * t * t * t;
    }, quarticOut: function quarticOut(t) {
      return 1 - --t * t * t * t;
    }, quarticInOut: function quarticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
    }, quinticIn: function quinticIn(t) {
      return t * t * t * t * t;
    }, quinticOut: function quinticOut(t) {
      return --t * t * t * t * t + 1;
    }, quinticInOut: function quinticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
    }, sinusoidalIn: function sinusoidalIn(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }, sinusoidalOut: function sinusoidalOut(t) {
      return Math.sin(t * Math.PI / 2);
    }, sinusoidalInOut: function sinusoidalInOut(t) {
      return .5 * (1 - Math.cos(Math.PI * t));
    }, exponentialIn: function exponentialIn(t) {
      return 0 === t ? 0 : Math.pow(1024, t - 1);
    }, exponentialOut: function exponentialOut(t) {
      return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
    }, exponentialInOut: function exponentialInOut(t) {
      return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (-Math.pow(2, -10 * (t - 1)) + 2);
    }, circularIn: function circularIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }, circularOut: function circularOut(t) {
      return Math.sqrt(1 - --t * t);
    }, circularInOut: function circularInOut(t) {
      return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }, elasticIn: function elasticIn(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), -(n * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i)));
    }, elasticOut: function elasticOut(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), n * Math.pow(2, -10 * t) * Math.sin(2 * (t - e) * Math.PI / i) + 1);
    }, elasticInOut: function elasticInOut(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), (t *= 2) < 1 ? -.5 * n * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i) : n * Math.pow(2, -10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i) * .5 + 1);
    }, backIn: function backIn(t) {
      var e = 1.70158;return t * t * ((e + 1) * t - e);
    }, backOut: function backOut(t) {
      var e = 1.70158;return --t * t * ((e + 1) * t + e) + 1;
    }, backInOut: function backInOut(t) {
      var e = 2.5949095;return (t *= 2) < 1 ? .5 * t * t * ((e + 1) * t - e) : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);
    }, bounceIn: function bounceIn(t) {
      return 1 - ed.bounceOut(1 - t);
    }, bounceOut: function bounceOut(t) {
      return 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
    }, bounceInOut: function bounceInOut(t) {
      return .5 > t ? .5 * ed.bounceIn(2 * t) : .5 * ed.bounceOut(2 * t - 1) + .5;
    } };Me.prototype = { constructor: Me, step: function step(t, e) {
      if (this._initialized || (this._startTime = t + this._delay, this._initialized = !0), this._paused) return void (this._pausedTime += e);
      var n = (t - this._startTime - this._pausedTime) / this._life;if (!(0 > n)) {
        n = Math.min(n, 1);var i = this.easing,
            r = "string" == typeof i ? ed[i] : i,
            a = "function" == typeof r ? r(n) : n;return this.fire("frame", a), 1 == n ? this.loop ? (this.restart(t), "restart") : (this._needsRemove = !0, "destroy") : null;
      }
    }, restart: function restart(t) {
      var e = (t - this._startTime - this._pausedTime) % this._life;this._startTime = t - e + this.gap, this._pausedTime = 0, this._needsRemove = !1;
    }, fire: function fire(t, e) {
      t = "on" + t, this[t] && this[t](this._target, e);
    }, pause: function pause() {
      this._paused = !0;
    }, resume: function resume() {
      this._paused = !1;
    } };var nd = function nd() {
    this.head = null, this.tail = null, this._len = 0;
  },
      id = nd.prototype;id.insert = function (t) {
    var e = new rd(t);return this.insertEntry(e), e;
  }, id.insertEntry = function (t) {
    this.head ? (this.tail.next = t, t.prev = this.tail, t.next = null, this.tail = t) : this.head = this.tail = t, this._len++;
  }, id.remove = function (t) {
    var e = t.prev,
        n = t.next;e ? e.next = n : this.head = n, n ? n.prev = e : this.tail = e, t.next = t.prev = null, this._len--;
  }, id.len = function () {
    return this._len;
  }, id.clear = function () {
    this.head = this.tail = null, this._len = 0;
  };var rd = function rd(t) {
    this.value = t, this.next, this.prev;
  },
      ad = function ad(t) {
    this._list = new nd(), this._map = {}, this._maxSize = t || 10, this._lastRemovedEntry = null;
  },
      od = ad.prototype;od.put = function (t, e) {
    var n = this._list,
        i = this._map,
        r = null;if (null == i[t]) {
      var a = n.len(),
          o = this._lastRemovedEntry;if (a >= this._maxSize && a > 0) {
        var s = n.head;n.remove(s), delete i[s.key], r = s.value, this._lastRemovedEntry = s;
      }o ? o.value = e : o = new rd(e), o.key = t, n.insertEntry(o), i[t] = o;
    }return r;
  }, od.get = function (t) {
    var e = this._map[t],
        n = this._list;return null != e ? (e !== n.tail && (n.remove(e), n.insertEntry(e)), e.value) : void 0;
  }, od.clear = function () {
    this._list.clear(), this._map = {};
  };var sd = { transparent: [0, 0, 0, 0], aliceblue: [240, 248, 255, 1], antiquewhite: [250, 235, 215, 1], aqua: [0, 255, 255, 1], aquamarine: [127, 255, 212, 1], azure: [240, 255, 255, 1], beige: [245, 245, 220, 1], bisque: [255, 228, 196, 1], black: [0, 0, 0, 1], blanchedalmond: [255, 235, 205, 1], blue: [0, 0, 255, 1], blueviolet: [138, 43, 226, 1], brown: [165, 42, 42, 1], burlywood: [222, 184, 135, 1], cadetblue: [95, 158, 160, 1], chartreuse: [127, 255, 0, 1], chocolate: [210, 105, 30, 1], coral: [255, 127, 80, 1], cornflowerblue: [100, 149, 237, 1], cornsilk: [255, 248, 220, 1], crimson: [220, 20, 60, 1], cyan: [0, 255, 255, 1], darkblue: [0, 0, 139, 1], darkcyan: [0, 139, 139, 1], darkgoldenrod: [184, 134, 11, 1], darkgray: [169, 169, 169, 1], darkgreen: [0, 100, 0, 1], darkgrey: [169, 169, 169, 1], darkkhaki: [189, 183, 107, 1], darkmagenta: [139, 0, 139, 1], darkolivegreen: [85, 107, 47, 1], darkorange: [255, 140, 0, 1], darkorchid: [153, 50, 204, 1], darkred: [139, 0, 0, 1], darksalmon: [233, 150, 122, 1], darkseagreen: [143, 188, 143, 1], darkslateblue: [72, 61, 139, 1], darkslategray: [47, 79, 79, 1], darkslategrey: [47, 79, 79, 1], darkturquoise: [0, 206, 209, 1], darkviolet: [148, 0, 211, 1], deeppink: [255, 20, 147, 1], deepskyblue: [0, 191, 255, 1], dimgray: [105, 105, 105, 1], dimgrey: [105, 105, 105, 1], dodgerblue: [30, 144, 255, 1], firebrick: [178, 34, 34, 1], floralwhite: [255, 250, 240, 1], forestgreen: [34, 139, 34, 1], fuchsia: [255, 0, 255, 1], gainsboro: [220, 220, 220, 1], ghostwhite: [248, 248, 255, 1], gold: [255, 215, 0, 1], goldenrod: [218, 165, 32, 1], gray: [128, 128, 128, 1], green: [0, 128, 0, 1], greenyellow: [173, 255, 47, 1], grey: [128, 128, 128, 1], honeydew: [240, 255, 240, 1], hotpink: [255, 105, 180, 1], indianred: [205, 92, 92, 1], indigo: [75, 0, 130, 1], ivory: [255, 255, 240, 1], khaki: [240, 230, 140, 1], lavender: [230, 230, 250, 1], lavenderblush: [255, 240, 245, 1], lawngreen: [124, 252, 0, 1], lemonchiffon: [255, 250, 205, 1], lightblue: [173, 216, 230, 1], lightcoral: [240, 128, 128, 1], lightcyan: [224, 255, 255, 1], lightgoldenrodyellow: [250, 250, 210, 1], lightgray: [211, 211, 211, 1], lightgreen: [144, 238, 144, 1], lightgrey: [211, 211, 211, 1], lightpink: [255, 182, 193, 1], lightsalmon: [255, 160, 122, 1], lightseagreen: [32, 178, 170, 1], lightskyblue: [135, 206, 250, 1], lightslategray: [119, 136, 153, 1], lightslategrey: [119, 136, 153, 1], lightsteelblue: [176, 196, 222, 1], lightyellow: [255, 255, 224, 1], lime: [0, 255, 0, 1], limegreen: [50, 205, 50, 1], linen: [250, 240, 230, 1], magenta: [255, 0, 255, 1], maroon: [128, 0, 0, 1], mediumaquamarine: [102, 205, 170, 1], mediumblue: [0, 0, 205, 1], mediumorchid: [186, 85, 211, 1], mediumpurple: [147, 112, 219, 1], mediumseagreen: [60, 179, 113, 1], mediumslateblue: [123, 104, 238, 1], mediumspringgreen: [0, 250, 154, 1], mediumturquoise: [72, 209, 204, 1], mediumvioletred: [199, 21, 133, 1], midnightblue: [25, 25, 112, 1], mintcream: [245, 255, 250, 1], mistyrose: [255, 228, 225, 1], moccasin: [255, 228, 181, 1], navajowhite: [255, 222, 173, 1], navy: [0, 0, 128, 1], oldlace: [253, 245, 230, 1], olive: [128, 128, 0, 1], olivedrab: [107, 142, 35, 1], orange: [255, 165, 0, 1], orangered: [255, 69, 0, 1], orchid: [218, 112, 214, 1], palegoldenrod: [238, 232, 170, 1], palegreen: [152, 251, 152, 1], paleturquoise: [175, 238, 238, 1], palevioletred: [219, 112, 147, 1], papayawhip: [255, 239, 213, 1], peachpuff: [255, 218, 185, 1], peru: [205, 133, 63, 1], pink: [255, 192, 203, 1], plum: [221, 160, 221, 1], powderblue: [176, 224, 230, 1], purple: [128, 0, 128, 1], red: [255, 0, 0, 1], rosybrown: [188, 143, 143, 1], royalblue: [65, 105, 225, 1], saddlebrown: [139, 69, 19, 1], salmon: [250, 128, 114, 1], sandybrown: [244, 164, 96, 1], seagreen: [46, 139, 87, 1], seashell: [255, 245, 238, 1], sienna: [160, 82, 45, 1], silver: [192, 192, 192, 1], skyblue: [135, 206, 235, 1], slateblue: [106, 90, 205, 1], slategray: [112, 128, 144, 1], slategrey: [112, 128, 144, 1], snow: [255, 250, 250, 1], springgreen: [0, 255, 127, 1], steelblue: [70, 130, 180, 1], tan: [210, 180, 140, 1], teal: [0, 128, 128, 1], thistle: [216, 191, 216, 1], tomato: [255, 99, 71, 1], turquoise: [64, 224, 208, 1], violet: [238, 130, 238, 1], wheat: [245, 222, 179, 1], white: [255, 255, 255, 1], whitesmoke: [245, 245, 245, 1], yellow: [255, 255, 0, 1], yellowgreen: [154, 205, 50, 1] },
      ld = new ad(20),
      ud = null,
      hd = Fe,
      cd = Ve,
      dd = (Object.freeze || Object)({ parse: Re, lift: ze, toHex: Ne, fastLerp: Fe, fastMapToColor: hd, lerp: Ve, mapToColor: cd, modifyHSL: Ge, modifyAlpha: He, stringify: We }),
      fd = Array.prototype.slice,
      pd = function pd(t, e, n, i) {
    this._tracks = {}, this._target = t, this._loop = e || !1, this._getter = n || je, this._setter = i || qe, this._clipCount = 0, this._delay = 0, this._doneList = [], this._onframeList = [], this._clipList = [];
  };pd.prototype = { when: function when(t, e) {
      var n = this._tracks;for (var i in e) {
        if (e.hasOwnProperty(i)) {
          if (!n[i]) {
            n[i] = [];var r = this._getter(this._target, i);if (null == r) continue;0 !== t && n[i].push({ time: 0, value: Je(r) });
          }n[i].push({ time: t, value: e[i] });
        }
      }return this;
    }, during: function during(t) {
      return this._onframeList.push(t), this;
    }, pause: function pause() {
      for (var t = 0; t < this._clipList.length; t++) {
        this._clipList[t].pause();
      }this._paused = !0;
    }, resume: function resume() {
      for (var t = 0; t < this._clipList.length; t++) {
        this._clipList[t].resume();
      }this._paused = !1;
    }, isPaused: function isPaused() {
      return !!this._paused;
    }, _doneCallback: function _doneCallback() {
      this._tracks = {}, this._clipList.length = 0;for (var t = this._doneList, e = t.length, n = 0; e > n; n++) {
        t[n].call(this);
      }
    }, start: function start(t, e) {
      var n,
          i = this,
          r = 0,
          a = function a() {
        r--, r || i._doneCallback();
      };for (var o in this._tracks) {
        if (this._tracks.hasOwnProperty(o)) {
          var s = nn(this, t, a, this._tracks[o], o, e);s && (this._clipList.push(s), r++, this.animation && this.animation.addClip(s), n = s);
        }
      }if (n) {
        var l = n.onframe;n.onframe = function (t, e) {
          l(t, e);for (var n = 0; n < i._onframeList.length; n++) {
            i._onframeList[n](t, e);
          }
        };
      }return r || this._doneCallback(), this;
    }, stop: function stop(t) {
      for (var e = this._clipList, n = this.animation, i = 0; i < e.length; i++) {
        var r = e[i];t && r.onframe(this._target, 1), n && n.removeClip(r);
      }e.length = 0;
    }, delay: function delay(t) {
      return this._delay = t, this;
    }, done: function done(t) {
      return t && this._doneList.push(t), this;
    }, getClips: function getClips() {
      return this._clipList;
    } };var gd = 1;"undefined" != typeof window && (gd = Math.max(window.devicePixelRatio || 1, 1));var vd = 0,
      md = gd,
      yd = function yd() {};1 === vd ? yd = function yd() {
    for (var t in arguments) {
      throw new Error(arguments[t]);
    }
  } : vd > 1 && (yd = function yd() {
    for (var t in arguments) {
      console.log(arguments[t]);
    }
  });var _d = yd,
      xd = function xd() {
    this.animators = [];
  };xd.prototype = { constructor: xd, animate: function animate(t, e) {
      var n,
          i = !1,
          r = this,
          a = this.__zr;if (t) {
        var o = t.split("."),
            s = r;i = "shape" === o[0];for (var l = 0, h = o.length; h > l; l++) {
          s && (s = s[o[l]]);
        }s && (n = s);
      } else n = r;if (!n) return void _d('Property "' + t + '" is not existed in element ' + r.id);var c = r.animators,
          d = new pd(n, e);return d.during(function () {
        r.dirty(i);
      }).done(function () {
        c.splice(u(c, d), 1);
      }), c.push(d), a && a.animation.addAnimator(d), d;
    }, stopAnimation: function stopAnimation(t) {
      for (var e = this.animators, n = e.length, i = 0; n > i; i++) {
        e[i].stop(t);
      }return e.length = 0, this;
    }, animateTo: function animateTo(t, e, n, i, r, a) {
      function o() {
        l--, l || r && r();
      }b(n) ? (r = i, i = n, n = 0) : w(i) ? (r = i, i = "linear", n = 0) : w(n) ? (r = n, n = 0) : w(e) ? (r = e, e = 500) : e || (e = 500), this.stopAnimation(), this._animateToShallow("", this, t, e, n);var s = this.animators.slice(),
          l = s.length;l || r && r();for (var u = 0; u < s.length; u++) {
        s[u].done(o).start(i, a);
      }
    }, _animateToShallow: function _animateToShallow(t, e, n, i, r) {
      var a = {},
          o = 0;for (var s in n) {
        if (n.hasOwnProperty(s)) if (null != e[s]) M(n[s]) && !d(n[s]) ? this._animateToShallow(t ? t + "." + s : s, e[s], n[s], i, r) : (a[s] = n[s], o++);else if (null != n[s]) if (t) {
          var l = {};l[t] = {}, l[t][s] = n[s], this.attr(l);
        } else this.attr(s, n[s]);
      }return o > 0 && this.animate(t, !1).when(null == i ? 500 : i, a).delay(r || 0), this;
    } };var wd = function wd(t) {
    Qc.call(this, t), jc.call(this, t), xd.call(this, t), this.id = t.id || xc();
  };wd.prototype = { type: "element", name: "", __zr: null, ignore: !1, clipPath: null, isGroup: !1, drift: function drift(t, e) {
      switch (this.draggable) {case "horizontal":
          e = 0;break;case "vertical":
          t = 0;}var n = this.transform;n || (n = this.transform = [1, 0, 0, 1, 0, 0]), n[4] += t, n[5] += e, this.decomposeTransform(), this.dirty(!1);
    }, beforeUpdate: function beforeUpdate() {}, afterUpdate: function afterUpdate() {}, update: function update() {
      this.updateTransform();
    }, traverse: function traverse() {}, attrKV: function attrKV(t, e) {
      if ("position" === t || "scale" === t || "origin" === t) {
        if (e) {
          var n = this[t];n || (n = this[t] = []), n[0] = e[0], n[1] = e[1];
        }
      } else this[t] = e;
    }, hide: function hide() {
      this.ignore = !0, this.__zr && this.__zr.refresh();
    }, show: function show() {
      this.ignore = !1, this.__zr && this.__zr.refresh();
    }, attr: function attr(t, e) {
      if ("string" == typeof t) this.attrKV(t, e);else if (M(t)) for (var n in t) {
        t.hasOwnProperty(n) && this.attrKV(n, t[n]);
      }return this.dirty(!1), this;
    }, setClipPath: function setClipPath(t) {
      var e = this.__zr;e && t.addSelfToZr(e), this.clipPath && this.clipPath !== t && this.removeClipPath(), this.clipPath = t, t.__zr = e, t.__clipTarget = this, this.dirty(!1);
    }, removeClipPath: function removeClipPath() {
      var t = this.clipPath;t && (t.__zr && t.removeSelfFromZr(t.__zr), t.__zr = null, t.__clipTarget = null, this.clipPath = null, this.dirty(!1));
    }, addSelfToZr: function addSelfToZr(t) {
      this.__zr = t;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {
        t.animation.addAnimator(e[n]);
      }this.clipPath && this.clipPath.addSelfToZr(t);
    }, removeSelfFromZr: function removeSelfFromZr(t) {
      this.__zr = null;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {
        t.animation.removeAnimator(e[n]);
      }this.clipPath && this.clipPath.removeSelfFromZr(t);
    } }, c(wd, xd), c(wd, Qc), c(wd, jc);var bd = ae,
      Md = Math.min,
      Sd = Math.max;rn.prototype = { constructor: rn, union: function union(t) {
      var e = Md(t.x, this.x),
          n = Md(t.y, this.y);this.width = Sd(t.x + t.width, this.x + this.width) - e, this.height = Sd(t.y + t.height, this.y + this.height) - n, this.x = e, this.y = n;
    }, applyTransform: function () {
      var t = [],
          e = [],
          n = [],
          i = [];return function (r) {
        if (r) {
          t[0] = n[0] = this.x, t[1] = i[1] = this.y, e[0] = i[0] = this.x + this.width, e[1] = n[1] = this.y + this.height, bd(t, t, r), bd(e, e, r), bd(n, n, r), bd(i, i, r), this.x = Md(t[0], e[0], n[0], i[0]), this.y = Md(t[1], e[1], n[1], i[1]);var a = Sd(t[0], e[0], n[0], i[0]),
              o = Sd(t[1], e[1], n[1], i[1]);this.width = a - this.x, this.height = o - this.y;
        }
      };
    }(), calculateTransform: function calculateTransform(t) {
      var e = this,
          n = t.width / e.width,
          i = t.height / e.height,
          r = fe();return me(r, r, [-e.x, -e.y]), _e(r, r, [n, i]), me(r, r, [t.x, t.y]), r;
    }, intersect: function intersect(t) {
      if (!t) return !1;t instanceof rn || (t = rn.create(t));var e = this,
          n = e.x,
          i = e.x + e.width,
          r = e.y,
          a = e.y + e.height,
          o = t.x,
          s = t.x + t.width,
          l = t.y,
          u = t.y + t.height;return !(o > i || n > s || l > a || r > u);
    }, contain: function contain(t, e) {
      var n = this;return t >= n.x && t <= n.x + n.width && e >= n.y && e <= n.y + n.height;
    }, clone: function clone() {
      return new rn(this.x, this.y, this.width, this.height);
    }, copy: function copy(t) {
      this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height;
    }, plain: function plain() {
      return { x: this.x, y: this.y, width: this.width, height: this.height };
    } }, rn.create = function (t) {
    return new rn(t.x, t.y, t.width, t.height);
  };var Cd = function Cd(t) {
    t = t || {}, wd.call(this, t);for (var e in t) {
      t.hasOwnProperty(e) && (this[e] = t[e]);
    }this._children = [], this.__storage = null, this.__dirty = !0;
  };Cd.prototype = { constructor: Cd, isGroup: !0, type: "group", silent: !1, children: function children() {
      return this._children.slice();
    }, childAt: function childAt(t) {
      return this._children[t];
    }, childOfName: function childOfName(t) {
      for (var e = this._children, n = 0; n < e.length; n++) {
        if (e[n].name === t) return e[n];
      }
    }, childCount: function childCount() {
      return this._children.length;
    }, add: function add(t) {
      return t && t !== this && t.parent !== this && (this._children.push(t), this._doAdd(t)), this;
    }, addBefore: function addBefore(t, e) {
      if (t && t !== this && t.parent !== this && e && e.parent === this) {
        var n = this._children,
            i = n.indexOf(e);i >= 0 && (n.splice(i, 0, t), this._doAdd(t));
      }return this;
    }, _doAdd: function _doAdd(t) {
      t.parent && t.parent.remove(t), t.parent = this;var e = this.__storage,
          n = this.__zr;e && e !== t.__storage && (e.addToStorage(t), t instanceof Cd && t.addChildrenToStorage(e)), n && n.refresh();
    }, remove: function remove(t) {
      var e = this.__zr,
          n = this.__storage,
          i = this._children,
          r = u(i, t);return 0 > r ? this : (i.splice(r, 1), t.parent = null, n && (n.delFromStorage(t), t instanceof Cd && t.delChildrenFromStorage(n)), e && e.refresh(), this);
    }, removeAll: function removeAll() {
      var t,
          e,
          n = this._children,
          i = this.__storage;for (e = 0; e < n.length; e++) {
        t = n[e], i && (i.delFromStorage(t), t instanceof Cd && t.delChildrenFromStorage(i)), t.parent = null;
      }return n.length = 0, this;
    }, eachChild: function eachChild(t, e) {
      for (var n = this._children, i = 0; i < n.length; i++) {
        var r = n[i];t.call(e, r, i);
      }return this;
    }, traverse: function traverse(t, e) {
      for (var n = 0; n < this._children.length; n++) {
        var i = this._children[n];t.call(e, i), "group" === i.type && i.traverse(t, e);
      }return this;
    }, addChildrenToStorage: function addChildrenToStorage(t) {
      for (var e = 0; e < this._children.length; e++) {
        var n = this._children[e];t.addToStorage(n), n instanceof Cd && n.addChildrenToStorage(t);
      }
    }, delChildrenFromStorage: function delChildrenFromStorage(t) {
      for (var e = 0; e < this._children.length; e++) {
        var n = this._children[e];t.delFromStorage(n), n instanceof Cd && n.delChildrenFromStorage(t);
      }
    }, dirty: function dirty() {
      return this.__dirty = !0, this.__zr && this.__zr.refresh(), this;
    }, getBoundingRect: function getBoundingRect(t) {
      for (var e = null, n = new rn(0, 0, 0, 0), i = t || this._children, r = [], a = 0; a < i.length; a++) {
        var o = i[a];if (!o.ignore && !o.invisible) {
          var s = o.getBoundingRect(),
              l = o.getLocalTransform(r);l ? (n.copy(s), n.applyTransform(l), e = e || n.clone(), e.union(n)) : (e = e || s.clone(), e.union(s));
        }
      }return e || n;
    } }, h(Cd, wd);var Id = 32,
      Td = 7,
      kd = function kd() {
    this._roots = [], this._displayList = [], this._displayListLen = 0;
  };kd.prototype = { constructor: kd, traverse: function traverse(t, e) {
      for (var n = 0; n < this._roots.length; n++) {
        this._roots[n].traverse(t, e);
      }
    }, getDisplayList: function getDisplayList(t, e) {
      return e = e || !1, t && this.updateDisplayList(e), this._displayList;
    }, updateDisplayList: function updateDisplayList(t) {
      this._displayListLen = 0;for (var e = this._roots, n = this._displayList, i = 0, r = e.length; r > i; i++) {
        this._updateAndAddDisplayable(e[i], null, t);
      }n.length = this._displayListLen, bc.canvasSupported && dn(n, fn);
    }, _updateAndAddDisplayable: function _updateAndAddDisplayable(t, e, n) {
      if (!t.ignore || n) {
        t.beforeUpdate(), t.__dirty && t.update(), t.afterUpdate();var i = t.clipPath;if (i) {
          e = e ? e.slice() : [];for (var r = i, a = t; r;) {
            r.parent = a, r.updateTransform(), e.push(r), a = r, r = r.clipPath;
          }
        }if (t.isGroup) {
          for (var o = t._children, s = 0; s < o.length; s++) {
            var l = o[s];t.__dirty && (l.__dirty = !0), this._updateAndAddDisplayable(l, e, n);
          }t.__dirty = !1;
        } else t.__clipPaths = e, this._displayList[this._displayListLen++] = t;
      }
    }, addRoot: function addRoot(t) {
      t.__storage !== this && (t instanceof Cd && t.addChildrenToStorage(this), this.addToStorage(t), this._roots.push(t));
    }, delRoot: function delRoot(t) {
      if (null == t) {
        for (var e = 0; e < this._roots.length; e++) {
          var n = this._roots[e];n instanceof Cd && n.delChildrenFromStorage(this);
        }return this._roots = [], this._displayList = [], void (this._displayListLen = 0);
      }if (t instanceof Array) for (var e = 0, i = t.length; i > e; e++) {
        this.delRoot(t[e]);
      } else {
        var r = u(this._roots, t);r >= 0 && (this.delFromStorage(t), this._roots.splice(r, 1), t instanceof Cd && t.delChildrenFromStorage(this));
      }
    }, addToStorage: function addToStorage(t) {
      return t && (t.__storage = this, t.dirty(!1)), this;
    }, delFromStorage: function delFromStorage(t) {
      return t && (t.__storage = null), this;
    }, dispose: function dispose() {
      this._renderList = this._roots = null;
    }, displayableSortFunc: fn };var Dd = { shadowBlur: 1, shadowOffsetX: 1, shadowOffsetY: 1, textShadowBlur: 1, textShadowOffsetX: 1, textShadowOffsetY: 1, textBoxShadowBlur: 1, textBoxShadowOffsetX: 1, textBoxShadowOffsetY: 1 },
      Ad = function Ad(t, e, n) {
    return Dd.hasOwnProperty(e) ? n *= t.dpr : n;
  },
      Pd = [["shadowBlur", 0], ["shadowOffsetX", 0], ["shadowOffsetY", 0], ["shadowColor", "#000"], ["lineCap", "butt"], ["lineJoin", "miter"], ["miterLimit", 10]],
      Ld = function Ld(t, e) {
    this.extendFrom(t, !1), this.host = e;
  };Ld.prototype = { constructor: Ld, host: null, fill: "#000", stroke: null, opacity: 1, lineDash: null, lineDashOffset: 0, shadowBlur: 0, shadowOffsetX: 0, shadowOffsetY: 0, lineWidth: 1, strokeNoScale: !1, text: null, font: null, textFont: null, fontStyle: null, fontWeight: null, fontSize: null, fontFamily: null, textTag: null, textFill: "#000", textStroke: null, textWidth: null, textHeight: null, textStrokeWidth: 0, textLineHeight: null, textPosition: "inside", textRect: null, textOffset: null, textAlign: null, textVerticalAlign: null, textDistance: 5, textShadowColor: "transparent", textShadowBlur: 0, textShadowOffsetX: 0, textShadowOffsetY: 0, textBoxShadowColor: "transparent", textBoxShadowBlur: 0, textBoxShadowOffsetX: 0, textBoxShadowOffsetY: 0, transformText: !1, textRotation: 0, textOrigin: null, textBackgroundColor: null, textBorderColor: null, textBorderWidth: 0, textBorderRadius: 0, textPadding: null, rich: null, truncate: null, blend: null, bind: function bind(t, e, n) {
      for (var i = this, r = n && n.style, a = !r, o = 0; o < Pd.length; o++) {
        var s = Pd[o],
            l = s[0];(a || i[l] !== r[l]) && (t[l] = Ad(t, l, i[l] || s[1]));
      }if ((a || i.fill !== r.fill) && (t.fillStyle = i.fill), (a || i.stroke !== r.stroke) && (t.strokeStyle = i.stroke), (a || i.opacity !== r.opacity) && (t.globalAlpha = null == i.opacity ? 1 : i.opacity), (a || i.blend !== r.blend) && (t.globalCompositeOperation = i.blend || "source-over"), this.hasStroke()) {
        var u = i.lineWidth;t.lineWidth = u / (this.strokeNoScale && e && e.getLineScale ? e.getLineScale() : 1);
      }
    }, hasFill: function hasFill() {
      var t = this.fill;return null != t && "none" !== t;
    }, hasStroke: function hasStroke() {
      var t = this.stroke;return null != t && "none" !== t && this.lineWidth > 0;
    }, extendFrom: function extendFrom(t, e) {
      if (t) for (var n in t) {
        !t.hasOwnProperty(n) || e !== !0 && (e === !1 ? this.hasOwnProperty(n) : null == t[n]) || (this[n] = t[n]);
      }
    }, set: function set(t, e) {
      "string" == typeof t ? this[t] = e : this.extendFrom(t, !0);
    }, clone: function clone() {
      var t = new this.constructor();return t.extendFrom(this, !0), t;
    }, getGradient: function getGradient(t, e, n) {
      for (var i = "radial" === e.type ? gn : pn, r = i(t, e, n), a = e.colorStops, o = 0; o < a.length; o++) {
        r.addColorStop(a[o].offset, a[o].color);
      }return r;
    } };for (var Od = Ld.prototype, Rd = 0; Rd < Pd.length; Rd++) {
    var Ed = Pd[Rd];Ed[0] in Od || (Od[Ed[0]] = Ed[1]);
  }Ld.getGradient = Od.getGradient;var Bd = function Bd(t, e) {
    this.image = t, this.repeat = e, this.type = "pattern";
  };Bd.prototype.getCanvasPattern = function (t) {
    return t.createPattern(this.image, this.repeat || "repeat");
  };var zd = function zd(t, e, n) {
    var i;n = n || md, "string" == typeof t ? i = mn(t, e, n) : M(t) && (i = t, t = i.id), this.id = t, this.dom = i;var r = i.style;r && (i.onselectstart = vn, r["-webkit-user-select"] = "none", r["user-select"] = "none", r["-webkit-touch-callout"] = "none", r["-webkit-tap-highlight-color"] = "rgba(0,0,0,0)", r.padding = 0, r.margin = 0, r["border-width"] = 0), this.domBack = null, this.ctxBack = null, this.painter = e, this.config = null, this.clearColor = 0, this.motionBlur = !1, this.lastFrameAlpha = .7, this.dpr = n;
  };zd.prototype = { constructor: zd, __dirty: !0, __used: !1, __drawIndex: 0, __startIndex: 0, __endIndex: 0, incremental: !1, getElementCount: function getElementCount() {
      return this.__endIndex - this.__startIndex;
    }, initContext: function initContext() {
      this.ctx = this.dom.getContext("2d"), this.ctx.dpr = this.dpr;
    }, createBackBuffer: function createBackBuffer() {
      var t = this.dpr;this.domBack = mn("back-" + this.id, this.painter, t), this.ctxBack = this.domBack.getContext("2d"), 1 != t && this.ctxBack.scale(t, t);
    }, resize: function resize(t, e) {
      var n = this.dpr,
          i = this.dom,
          r = i.style,
          a = this.domBack;r && (r.width = t + "px", r.height = e + "px"), i.width = t * n, i.height = e * n, a && (a.width = t * n, a.height = e * n, 1 != n && this.ctxBack.scale(n, n));
    }, clear: function clear(t, e) {
      var n = this.dom,
          i = this.ctx,
          r = n.width,
          a = n.height,
          e = e || this.clearColor,
          o = this.motionBlur && !t,
          s = this.lastFrameAlpha,
          l = this.dpr;if (o && (this.domBack || this.createBackBuffer(), this.ctxBack.globalCompositeOperation = "copy", this.ctxBack.drawImage(n, 0, 0, r / l, a / l)), i.clearRect(0, 0, r, a), e && "transparent" !== e) {
        var u;e.colorStops ? (u = e.__canvasGradient || Ld.getGradient(i, e, { x: 0, y: 0, width: r, height: a }), e.__canvasGradient = u) : e.image && (u = Bd.prototype.getCanvasPattern.call(e, i)), i.save(), i.fillStyle = u || e, i.fillRect(0, 0, r, a), i.restore();
      }if (o) {
        var h = this.domBack;i.save(), i.globalAlpha = s, i.drawImage(h, 0, 0, r, a), i.restore();
      }
    } };var Nd = "undefined" != typeof window && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (t) {
    setTimeout(t, 16);
  },
      Fd = new ad(50),
      Vd = {},
      Gd = 0,
      Hd = 5e3,
      Wd = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g,
      jd = "12px sans-serif",
      qd = {};qd.measureText = function (t, e) {
    var n = l();return n.font = e || jd, n.measureText(t);
  };var Ud = { left: 1, right: 1, center: 1 },
      Xd = { top: 1, bottom: 1, middle: 1 },
      Yd = new rn(),
      Zd = function Zd() {};Zd.prototype = { constructor: Zd, drawRectText: function drawRectText(t, e) {
      var n = this.style;e = n.textRect || e, this.__dirty && Vn(n, !0);var i = n.text;if (null != i && (i += ""), ii(i, n)) {
        t.save();var r = this.transform;n.transformText ? this.setTransform(t) : r && (Yd.copy(e), Yd.applyTransform(r), e = Yd), Hn(this, t, i, n, e), t.restore();
      }
    } }, ri.prototype = { constructor: ri, type: "displayable", __dirty: !0, invisible: !1, z: 0, z2: 0, zlevel: 0, draggable: !1, dragging: !1, silent: !1, culling: !1, cursor: "pointer", rectHover: !1, progressive: !1, incremental: !1, inplace: !1, beforeBrush: function beforeBrush() {}, afterBrush: function afterBrush() {}, brush: function brush() {}, getBoundingRect: function getBoundingRect() {}, contain: function contain(t, e) {
      return this.rectContain(t, e);
    }, traverse: function traverse(t, e) {
      t.call(e, this);
    }, rectContain: function rectContain(t, e) {
      var n = this.transformCoordToLocal(t, e),
          i = this.getBoundingRect();return i.contain(n[0], n[1]);
    }, dirty: function dirty() {
      this.__dirty = !0, this._rect = null, this.__zr && this.__zr.refresh();
    }, animateStyle: function animateStyle(t) {
      return this.animate("style", t);
    }, attrKV: function attrKV(t, e) {
      "style" !== t ? wd.prototype.attrKV.call(this, t, e) : this.style.set(e);
    }, setStyle: function setStyle(t, e) {
      return this.style.set(t, e), this.dirty(!1), this;
    }, useStyle: function useStyle(t) {
      return this.style = new Ld(t, this), this.dirty(!1), this;
    } }, h(ri, wd), c(ri, Zd), ai.prototype = { constructor: ai, type: "image", brush: function brush(t, e) {
      var n = this.style,
          i = n.image;n.bind(t, this, e);var r = this._image = _n(i, this._image, this, this.onload);if (r && wn(r)) {
        var a = n.x || 0,
            o = n.y || 0,
            s = n.width,
            l = n.height,
            u = r.width / r.height;if (null == s && null != l ? s = l * u : null == l && null != s ? l = s / u : null == s && null == l && (s = r.width, l = r.height), this.setTransform(t), n.sWidth && n.sHeight) {
          var h = n.sx || 0,
              c = n.sy || 0;t.drawImage(r, h, c, n.sWidth, n.sHeight, a, o, s, l);
        } else if (n.sx && n.sy) {
          var h = n.sx,
              c = n.sy,
              d = s - h,
              f = l - c;t.drawImage(r, h, c, d, f, a, o, s, l);
        } else t.drawImage(r, a, o, s, l);null != n.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));
      }
    }, getBoundingRect: function getBoundingRect() {
      var t = this.style;return this._rect || (this._rect = new rn(t.x || 0, t.y || 0, t.width || 0, t.height || 0)), this._rect;
    } }, h(ai, ri);var $d = 1e5,
      Kd = 314159,
      Qd = .01,
      Jd = .001,
      tf = new rn(0, 0, 0, 0),
      ef = new rn(0, 0, 0, 0),
      nf = function nf(t, e, n) {
    this.type = "canvas";var i = !t.nodeName || "CANVAS" === t.nodeName.toUpperCase();this._opts = n = o({}, n || {}), this.dpr = n.devicePixelRatio || md, this._singleCanvas = i, this.root = t;var r = t.style;r && (r["-webkit-tap-highlight-color"] = "transparent", r["-webkit-user-select"] = r["user-select"] = r["-webkit-touch-callout"] = "none", t.innerHTML = ""), this.storage = e;var a = this._zlevelList = [],
        s = this._layers = {};if (this._layerConfig = {}, this._needsManuallyCompositing = !1, i) {
      var l = t.width,
          u = t.height;null != n.width && (l = n.width), null != n.height && (u = n.height), this.dpr = n.devicePixelRatio || 1, t.width = l * this.dpr, t.height = u * this.dpr, this._width = l, this._height = u;var h = new zd(t, this, this.dpr);h.__builtin__ = !0, h.initContext(), s[Kd] = h, h.zlevel = Kd, a.push(Kd), this._domRoot = t;
    } else {
      this._width = this._getSize(0), this._height = this._getSize(1);var c = this._domRoot = ci(this._width, this._height);t.appendChild(c);
    }this._hoverlayer = null, this._hoverElements = [];
  };nf.prototype = { constructor: nf, getType: function getType() {
      return "canvas";
    }, isSingleCanvas: function isSingleCanvas() {
      return this._singleCanvas;
    }, getViewportRoot: function getViewportRoot() {
      return this._domRoot;
    }, getViewportRootOffset: function getViewportRootOffset() {
      var t = this.getViewportRoot();return t ? { offsetLeft: t.offsetLeft || 0, offsetTop: t.offsetTop || 0 } : void 0;
    }, refresh: function refresh(t) {
      var e = this.storage.getDisplayList(!0),
          n = this._zlevelList;this._redrawId = Math.random(), this._paintList(e, t, this._redrawId);for (var i = 0; i < n.length; i++) {
        var r = n[i],
            a = this._layers[r];if (!a.__builtin__ && a.refresh) {
          var o = 0 === i ? this._backgroundColor : null;a.refresh(o);
        }
      }return this.refreshHover(), this;
    }, addHover: function addHover(t, e) {
      if (!t.__hoverMir) {
        var n = new t.constructor({ style: t.style, shape: t.shape });n.__from = t, t.__hoverMir = n, n.setStyle(e), this._hoverElements.push(n);
      }
    }, removeHover: function removeHover(t) {
      var e = t.__hoverMir,
          n = this._hoverElements,
          i = u(n, e);i >= 0 && n.splice(i, 1), t.__hoverMir = null;
    }, clearHover: function clearHover() {
      for (var t = this._hoverElements, e = 0; e < t.length; e++) {
        var n = t[e].__from;n && (n.__hoverMir = null);
      }t.length = 0;
    }, refreshHover: function refreshHover() {
      var t = this._hoverElements,
          e = t.length,
          n = this._hoverlayer;if (n && n.clear(), e) {
        dn(t, this.storage.displayableSortFunc), n || (n = this._hoverlayer = this.getLayer($d));var i = {};n.ctx.save();for (var r = 0; e > r;) {
          var a = t[r],
              o = a.__from;o && o.__zr ? (r++, o.invisible || (a.transform = o.transform, a.invTransform = o.invTransform, a.__clipPaths = o.__clipPaths, this._doPaintEl(a, n, !0, i))) : (t.splice(r, 1), o.__hoverMir = null, e--);
        }n.ctx.restore();
      }
    }, getHoverLayer: function getHoverLayer() {
      return this.getLayer($d);
    }, _paintList: function _paintList(t, e, n) {
      if (this._redrawId === n) {
        e = e || !1, this._updateLayerStatus(t);var i = this._doPaintList(t, e);if (this._needsManuallyCompositing && this._compositeManually(), !i) {
          var r = this;Nd(function () {
            r._paintList(t, e, n);
          });
        }
      }
    }, _compositeManually: function _compositeManually() {
      var t = this.getLayer(Kd).ctx,
          e = this._domRoot.width,
          n = this._domRoot.height;t.clearRect(0, 0, e, n), this.eachBuiltinLayer(function (i) {
        i.virtual && t.drawImage(i.dom, 0, 0, e, n);
      });
    }, _doPaintList: function _doPaintList(t, e) {
      for (var n = [], i = 0; i < this._zlevelList.length; i++) {
        var r = this._zlevelList[i],
            a = this._layers[r];a.__builtin__ && a !== this._hoverlayer && (a.__dirty || e) && n.push(a);
      }for (var o = !0, s = 0; s < n.length; s++) {
        var a = n[s],
            l = a.ctx,
            u = {};l.save();var h = e ? a.__startIndex : a.__drawIndex,
            c = !e && a.incremental && Date.now,
            d = c && Date.now(),
            p = a.zlevel === this._zlevelList[0] ? this._backgroundColor : null;if (a.__startIndex === a.__endIndex) a.clear(!1, p);else if (h === a.__startIndex) {
          var g = t[h];g.incremental && g.notClear && !e || a.clear(!1, p);
        }-1 === h && (console.error("For some unknown reason. drawIndex is -1"), h = a.__startIndex);for (var v = h; v < a.__endIndex; v++) {
          var m = t[v];if (this._doPaintEl(m, a, e, u), m.__dirty = !1, c) {
            var y = Date.now() - d;if (y > 15) break;
          }
        }a.__drawIndex = v, a.__drawIndex < a.__endIndex && (o = !1), u.prevElClipPaths && l.restore(), l.restore();
      }return bc.wxa && f(this._layers, function (t) {
        t && t.ctx && t.ctx.draw && t.ctx.draw();
      }), o;
    }, _doPaintEl: function _doPaintEl(t, e, n, i) {
      var r = e.ctx,
          a = t.transform;if (!(!e.__dirty && !n || t.invisible || 0 === t.style.opacity || a && !a[0] && !a[3] || t.culling && li(t, this._width, this._height))) {
        var o = t.__clipPaths;(!i.prevElClipPaths || ui(o, i.prevElClipPaths)) && (i.prevElClipPaths && (e.ctx.restore(), i.prevElClipPaths = null, i.prevEl = null), o && (r.save(), hi(o, r), i.prevElClipPaths = o)), t.beforeBrush && t.beforeBrush(r), t.brush(r, i.prevEl || null), i.prevEl = t, t.afterBrush && t.afterBrush(r);
      }
    }, getLayer: function getLayer(t, e) {
      this._singleCanvas && !this._needsManuallyCompositing && (t = Kd);var n = this._layers[t];return n || (n = new zd("zr_" + t, this, this.dpr), n.zlevel = t, n.__builtin__ = !0, this._layerConfig[t] && r(n, this._layerConfig[t], !0), e && (n.virtual = e), this.insertLayer(t, n), n.initContext()), n;
    }, insertLayer: function insertLayer(t, e) {
      var n = this._layers,
          i = this._zlevelList,
          r = i.length,
          a = null,
          o = -1,
          s = this._domRoot;if (n[t]) return void _d("ZLevel " + t + " has been used already");if (!si(e)) return void _d("Layer of zlevel " + t + " is not valid");if (r > 0 && t > i[0]) {
        for (o = 0; r - 1 > o && !(i[o] < t && i[o + 1] > t); o++) {}a = n[i[o]];
      }if (i.splice(o + 1, 0, t), n[t] = e, !e.virtual) if (a) {
        var l = a.dom;l.nextSibling ? s.insertBefore(e.dom, l.nextSibling) : s.appendChild(e.dom);
      } else s.firstChild ? s.insertBefore(e.dom, s.firstChild) : s.appendChild(e.dom);
    }, eachLayer: function eachLayer(t, e) {
      var n,
          i,
          r = this._zlevelList;for (i = 0; i < r.length; i++) {
        n = r[i], t.call(e, this._layers[n], n);
      }
    }, eachBuiltinLayer: function eachBuiltinLayer(t, e) {
      var n,
          i,
          r,
          a = this._zlevelList;for (r = 0; r < a.length; r++) {
        i = a[r], n = this._layers[i], n.__builtin__ && t.call(e, n, i);
      }
    }, eachOtherLayer: function eachOtherLayer(t, e) {
      var n,
          i,
          r,
          a = this._zlevelList;for (r = 0; r < a.length; r++) {
        i = a[r], n = this._layers[i], n.__builtin__ || t.call(e, n, i);
      }
    }, getLayers: function getLayers() {
      return this._layers;
    }, _updateLayerStatus: function _updateLayerStatus(t) {
      function e(t) {
        r && (r.__endIndex !== t && (r.__dirty = !0), r.__endIndex = t);
      }if (this.eachBuiltinLayer(function (t) {
        t.__dirty = t.__used = !1;
      }), this._singleCanvas) for (var n = 1; n < t.length; n++) {
        var i = t[n];if (i.zlevel !== t[n - 1].zlevel || i.incremental) {
          this._needsManuallyCompositing = !0;break;
        }
      }for (var r = null, a = 0, n = 0; n < t.length; n++) {
        var o,
            i = t[n],
            s = i.zlevel;i.incremental ? (o = this.getLayer(s + Jd, this._needsManuallyCompositing), o.incremental = !0, a = 1) : o = this.getLayer(s + (a > 0 ? Qd : 0), this._needsManuallyCompositing), o.__builtin__ || _d("ZLevel " + s + " has been used by unkown layer " + o.id), o !== r && (o.__used = !0, o.__startIndex !== n && (o.__dirty = !0), o.__startIndex = n, o.__drawIndex = o.incremental ? -1 : n, e(n), r = o), i.__dirty && (o.__dirty = !0, o.incremental && o.__drawIndex < 0 && (o.__drawIndex = n));
      }e(n), this.eachBuiltinLayer(function (t) {
        !t.__used && t.getElementCount() > 0 && (t.__dirty = !0, t.__startIndex = t.__endIndex = t.__drawIndex = 0), t.__dirty && t.__drawIndex < 0 && (t.__drawIndex = t.__startIndex);
      });
    }, clear: function clear() {
      return this.eachBuiltinLayer(this._clearLayer), this;
    }, _clearLayer: function _clearLayer(t) {
      t.clear();
    }, setBackgroundColor: function setBackgroundColor(t) {
      this._backgroundColor = t;
    }, configLayer: function configLayer(t, e) {
      if (e) {
        var n = this._layerConfig;n[t] ? r(n[t], e, !0) : n[t] = e;for (var i = 0; i < this._zlevelList.length; i++) {
          var a = this._zlevelList[i];if (a === t || a === t + Qd) {
            var o = this._layers[a];r(o, n[t], !0);
          }
        }
      }
    }, delLayer: function delLayer(t) {
      var e = this._layers,
          n = this._zlevelList,
          i = e[t];i && (i.dom.parentNode.removeChild(i.dom), delete e[t], n.splice(u(n, t), 1));
    }, resize: function resize(t, e) {
      if (this._domRoot.style) {
        var n = this._domRoot;n.style.display = "none";var i = this._opts;if (null != t && (i.width = t), null != e && (i.height = e), t = this._getSize(0), e = this._getSize(1), n.style.display = "", this._width != t || e != this._height) {
          n.style.width = t + "px", n.style.height = e + "px";for (var r in this._layers) {
            this._layers.hasOwnProperty(r) && this._layers[r].resize(t, e);
          }f(this._progressiveLayers, function (n) {
            n.resize(t, e);
          }), this.refresh(!0);
        }this._width = t, this._height = e;
      } else {
        if (null == t || null == e) return;this._width = t, this._height = e, this.getLayer(Kd).resize(t, e);
      }return this;
    }, clearLayer: function clearLayer(t) {
      var e = this._layers[t];e && e.clear();
    }, dispose: function dispose() {
      this.root.innerHTML = "", this.root = this.storage = this._domRoot = this._layers = null;
    }, getRenderedCanvas: function getRenderedCanvas(t) {
      if (t = t || {}, this._singleCanvas && !this._compositeManually) return this._layers[Kd].dom;var e = new zd("image", this, t.pixelRatio || this.dpr);if (e.initContext(), e.clear(!1, t.backgroundColor || this._backgroundColor), t.pixelRatio <= this.dpr) {
        this.refresh();var n = e.dom.width,
            i = e.dom.height,
            r = e.ctx;this.eachLayer(function (t) {
          t.__builtin__ ? r.drawImage(t.dom, 0, 0, n, i) : t.renderToCanvas && (e.ctx.save(), t.renderToCanvas(e.ctx), e.ctx.restore());
        });
      } else for (var a = {}, o = this.storage.getDisplayList(!0), s = 0; s < o.length; s++) {
        var l = o[s];this._doPaintEl(l, e, !0, a);
      }return e.dom;
    }, getWidth: function getWidth() {
      return this._width;
    }, getHeight: function getHeight() {
      return this._height;
    }, _getSize: function _getSize(t) {
      var e = this._opts,
          n = ["width", "height"][t],
          i = ["clientWidth", "clientHeight"][t],
          r = ["paddingLeft", "paddingTop"][t],
          a = ["paddingRight", "paddingBottom"][t];if (null != e[n] && "auto" !== e[n]) return parseFloat(e[n]);var o = this.root,
          s = document.defaultView.getComputedStyle(o);return (o[i] || oi(s[n]) || oi(o.style[n])) - (oi(s[r]) || 0) - (oi(s[a]) || 0) | 0;
    }, pathToImage: function pathToImage(t, e) {
      e = e || this.dpr;var n = document.createElement("canvas"),
          i = n.getContext("2d"),
          r = t.getBoundingRect(),
          a = t.style,
          o = a.shadowBlur * e,
          s = a.shadowOffsetX * e,
          l = a.shadowOffsetY * e,
          u = a.hasStroke() ? a.lineWidth : 0,
          h = Math.max(u / 2, -s + o),
          c = Math.max(u / 2, s + o),
          d = Math.max(u / 2, -l + o),
          f = Math.max(u / 2, l + o),
          p = r.width + h + c,
          g = r.height + d + f;n.width = p * e, n.height = g * e, i.scale(e, e), i.clearRect(0, 0, p, g), i.dpr = e;var v = { position: t.position, rotation: t.rotation, scale: t.scale };t.position = [h - r.x, d - r.y], t.rotation = 0, t.scale = [1, 1], t.updateTransform(), t && t.brush(i);var m = ai,
          y = new m({ style: { x: 0, y: 0, image: n } });return null != v.position && (y.position = t.position = v.position), null != v.rotation && (y.rotation = t.rotation = v.rotation), null != v.scale && (y.scale = t.scale = v.scale), y;
    } };var rf = "undefined" != typeof window && !!window.addEventListener,
      af = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      of = function of(t) {
    t = t || {}, this.stage = t.stage || {}, this.onframe = t.onframe || function () {}, this._clips = [], this._running = !1, this._time, this._pausedTime, this._pauseStart, this._paused = !1, jc.call(this);
  };of.prototype = { constructor: of, addClip: function addClip(t) {
      this._clips.push(t);
    }, addAnimator: function addAnimator(t) {
      t.animation = this;for (var e = t.getClips(), n = 0; n < e.length; n++) {
        this.addClip(e[n]);
      }
    }, removeClip: function removeClip(t) {
      var e = u(this._clips, t);e >= 0 && this._clips.splice(e, 1);
    }, removeAnimator: function removeAnimator(t) {
      for (var e = t.getClips(), n = 0; n < e.length; n++) {
        this.removeClip(e[n]);
      }t.animation = null;
    }, _update: function _update() {
      for (var t = new Date().getTime() - this._pausedTime, e = t - this._time, n = this._clips, i = n.length, r = [], a = [], o = 0; i > o; o++) {
        var s = n[o],
            l = s.step(t, e);l && (r.push(l), a.push(s));
      }for (var o = 0; i > o;) {
        n[o]._needsRemove ? (n[o] = n[i - 1], n.pop(), i--) : o++;
      }i = r.length;for (var o = 0; i > o; o++) {
        a[o].fire(r[o]);
      }this._time = t, this.onframe(e), this.trigger("frame", e), this.stage.update && this.stage.update();
    }, _startLoop: function _startLoop() {
      function t() {
        e._running && (Nd(t), !e._paused && e._update());
      }var e = this;this._running = !0, Nd(t);
    }, start: function start() {
      this._time = new Date().getTime(), this._pausedTime = 0, this._startLoop();
    }, stop: function stop() {
      this._running = !1;
    }, pause: function pause() {
      this._paused || (this._pauseStart = new Date().getTime(), this._paused = !0);
    }, resume: function resume() {
      this._paused && (this._pausedTime += new Date().getTime() - this._pauseStart, this._paused = !1);
    }, clear: function clear() {
      this._clips = [];
    }, isFinished: function isFinished() {
      return !this._clips.length;
    }, animate: function animate(t, e) {
      e = e || {};var n = new pd(t, e.loop, e.getter, e.setter);return this.addAnimator(n), n;
    } }, c(of, jc);var sf = function sf() {
    this._track = [];
  };sf.prototype = { constructor: sf, recognize: function recognize(t, e, n) {
      return this._doTrack(t, e, n), this._recognize(t);
    }, clear: function clear() {
      return this._track.length = 0, this;
    }, _doTrack: function _doTrack(t, e, n) {
      var i = t.touches;if (i) {
        for (var r = { points: [], touches: [], target: e, event: t }, a = 0, o = i.length; o > a; a++) {
          var s = i[a],
              l = fi(n, s, {});r.points.push([l.zrX, l.zrY]), r.touches.push(s);
        }this._track.push(r);
      }
    }, _recognize: function _recognize(t) {
      for (var e in lf) {
        if (lf.hasOwnProperty(e)) {
          var n = lf[e](this._track, t);if (n) return n;
        }
      }
    } };var lf = { pinch: function pinch(t, e) {
      var n = t.length;if (n) {
        var i = (t[n - 1] || {}).points,
            r = (t[n - 2] || {}).points || i;if (r && r.length > 1 && i && i.length > 1) {
          var a = yi(i) / yi(r);!isFinite(a) && (a = 1), e.pinchScale = a;var o = _i(i);return e.pinchX = o[0], e.pinchY = o[1], { type: "pinch", target: t[0].target, event: e };
        }
      }
    } },
      uf = 300,
      hf = ["click", "dblclick", "mousewheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"],
      cf = ["touchstart", "touchend", "touchmove"],
      df = { pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1 },
      ff = p(hf, function (t) {
    var e = t.replace("mouse", "pointer");return df[e] ? e : t;
  }),
      pf = { mousemove: function mousemove(t) {
      t = gi(this.dom, t), this.trigger("mousemove", t);
    }, mouseout: function mouseout(t) {
      t = gi(this.dom, t);var e = t.toElement || t.relatedTarget;if (e != this.dom) for (; e && 9 != e.nodeType;) {
        if (e === this.dom) return;e = e.parentNode;
      }this.trigger("mouseout", t);
    }, touchstart: function touchstart(t) {
      t = gi(this.dom, t), t.zrByTouch = !0, this._lastTouchMoment = new Date(), wi(this, t, "start"), pf.mousemove.call(this, t), pf.mousedown.call(this, t), bi(this);
    }, touchmove: function touchmove(t) {
      t = gi(this.dom, t), t.zrByTouch = !0, wi(this, t, "change"), pf.mousemove.call(this, t), bi(this);
    }, touchend: function touchend(t) {
      t = gi(this.dom, t), t.zrByTouch = !0, wi(this, t, "end"), pf.mouseup.call(this, t), +new Date() - this._lastTouchMoment < uf && pf.click.call(this, t), bi(this);
    }, pointerdown: function pointerdown(t) {
      pf.mousedown.call(this, t);
    }, pointermove: function pointermove(t) {
      Mi(t) || pf.mousemove.call(this, t);
    }, pointerup: function pointerup(t) {
      pf.mouseup.call(this, t);
    }, pointerout: function pointerout(t) {
      Mi(t) || pf.mouseout.call(this, t);
    } };f(["click", "mousedown", "mouseup", "mousewheel", "dblclick", "contextmenu"], function (t) {
    pf[t] = function (e) {
      e = gi(this.dom, e), this.trigger(t, e);
    };
  });var gf = Ci.prototype;gf.dispose = function () {
    for (var t = hf.concat(cf), e = 0; e < t.length; e++) {
      var n = t[e];mi(this.dom, xi(n), this._handlers[n]);
    }
  }, gf.setCursor = function (t) {
    this.dom.style && (this.dom.style.cursor = t || "default");
  }, c(Ci, jc);var vf = !bc.canvasSupported,
      mf = { canvas: nf },
      yf = {},
      _f = "4.0.4",
      xf = function xf(t, e, n) {
    n = n || {}, this.dom = e, this.id = t;var i = this,
        r = new kd(),
        a = n.renderer;if (vf) {
      if (!mf.vml) throw new Error("You need to require 'zrender/vml/vml' to support IE8");a = "vml";
    } else a && mf[a] || (a = "canvas");var o = new mf[a](e, r, n, t);this.storage = r, this.painter = o;var s = bc.node || bc.worker ? null : new Ci(o.getViewportRoot());this.handler = new Xc(r, o, s, o.root), this.animation = new of({ stage: { update: y(this.flush, this) } }), this.animation.start(), this._needsRefresh;var l = r.delFromStorage,
        u = r.addToStorage;r.delFromStorage = function (t) {
      l.call(r, t), t && t.removeSelfFromZr(i);
    }, r.addToStorage = function (t) {
      u.call(r, t), t.addSelfToZr(i);
    };
  };xf.prototype = { constructor: xf, getId: function getId() {
      return this.id;
    }, add: function add(t) {
      this.storage.addRoot(t), this._needsRefresh = !0;
    }, remove: function remove(t) {
      this.storage.delRoot(t), this._needsRefresh = !0;
    }, configLayer: function configLayer(t, e) {
      this.painter.configLayer && this.painter.configLayer(t, e), this._needsRefresh = !0;
    }, setBackgroundColor: function setBackgroundColor(t) {
      this.painter.setBackgroundColor && this.painter.setBackgroundColor(t), this._needsRefresh = !0;
    }, refreshImmediately: function refreshImmediately() {
      this._needsRefresh = !1, this.painter.refresh(), this._needsRefresh = !1;
    }, refresh: function refresh() {
      this._needsRefresh = !0;
    }, flush: function flush() {
      var t;this._needsRefresh && (t = !0, this.refreshImmediately()), this._needsRefreshHover && (t = !0, this.refreshHoverImmediately()), t && this.trigger("rendered");
    }, addHover: function addHover(t, e) {
      this.painter.addHover && (this.painter.addHover(t, e), this.refreshHover());
    }, removeHover: function removeHover(t) {
      this.painter.removeHover && (this.painter.removeHover(t), this.refreshHover());
    }, clearHover: function clearHover() {
      this.painter.clearHover && (this.painter.clearHover(), this.refreshHover());
    }, refreshHover: function refreshHover() {
      this._needsRefreshHover = !0;
    }, refreshHoverImmediately: function refreshHoverImmediately() {
      this._needsRefreshHover = !1, this.painter.refreshHover && this.painter.refreshHover();
    }, resize: function resize(t) {
      t = t || {}, this.painter.resize(t.width, t.height), this.handler.resize();
    }, clearAnimation: function clearAnimation() {
      this.animation.clear();
    }, getWidth: function getWidth() {
      return this.painter.getWidth();
    }, getHeight: function getHeight() {
      return this.painter.getHeight();
    }, pathToImage: function pathToImage(t, e) {
      return this.painter.pathToImage(t, e);
    }, setCursorStyle: function setCursorStyle(t) {
      this.handler.setCursorStyle(t);
    }, findHover: function findHover(t, e) {
      return this.handler.findHover(t, e);
    }, on: function on(t, e, n) {
      this.handler.on(t, e, n);
    }, off: function off(t, e) {
      this.handler.off(t, e);
    }, trigger: function trigger(t, e) {
      this.handler.trigger(t, e);
    }, clear: function clear() {
      this.storage.delRoot(), this.painter.clear();
    }, dispose: function dispose() {
      this.animation.stop(), this.clear(), this.storage.dispose(), this.painter.dispose(), this.handler.dispose(), this.animation = this.storage = this.painter = this.handler = null, Ai(this.id);
    } };var wf = (Object.freeze || Object)({ version: _f, init: Ii, dispose: Ti, getInstance: ki, registerPainter: Di }),
      bf = f,
      Mf = M,
      Sf = x,
      Cf = "series\x00",
      If = ["fontStyle", "fontWeight", "fontSize", "fontFamily", "rich", "tag", "color", "textBorderColor", "textBorderWidth", "width", "height", "lineHeight", "align", "verticalAlign", "baseline", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY", "textShadowColor", "textShadowBlur", "textShadowOffsetX", "textShadowOffsetY", "backgroundColor", "borderColor", "borderWidth", "borderRadius", "padding"],
      Tf = 0,
      kf = ".",
      Df = "___EC__COMPONENT__CONTAINER___",
      Af = 0,
      Pf = function Pf(t) {
    for (var e = 0; e < t.length; e++) {
      t[e][1] || (t[e][1] = t[e][0]);
    }return function (e, n, i) {
      for (var r = {}, a = 0; a < t.length; a++) {
        var o = t[a][1];if (!(n && u(n, o) >= 0 || i && u(i, o) < 0)) {
          var s = e.getShallow(o);null != s && (r[t[a][0]] = s);
        }
      }return r;
    };
  },
      Lf = Pf([["lineWidth", "width"], ["stroke", "color"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]]),
      Of = { getLineStyle: function getLineStyle(t) {
      var e = Lf(this, t),
          n = this.getLineDash(e.lineWidth);return n && (e.lineDash = n), e;
    }, getLineDash: function getLineDash(t) {
      null == t && (t = 1);var e = this.get("type"),
          n = Math.max(t, 2),
          i = 4 * t;return "solid" === e || null == e ? null : "dashed" === e ? [i, i] : [n, n];
    } },
      Rf = Pf([["fill", "color"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["opacity"], ["shadowColor"]]),
      Ef = { getAreaStyle: function getAreaStyle(t, e) {
      return Rf(this, t, e);
    } },
      Bf = Math.pow,
      zf = Math.sqrt,
      Nf = 1e-8,
      Ff = 1e-4,
      Vf = zf(3),
      Gf = 1 / 3,
      Hf = G(),
      Wf = G(),
      jf = G(),
      qf = Math.min,
      Uf = Math.max,
      Xf = Math.sin,
      Yf = Math.cos,
      Zf = 2 * Math.PI,
      $f = G(),
      Kf = G(),
      Qf = G(),
      Jf = [],
      tp = [],
      ep = { M: 1, L: 2, C: 3, Q: 4, A: 5, Z: 6, R: 7 },
      np = [],
      ip = [],
      rp = [],
      ap = [],
      op = Math.min,
      sp = Math.max,
      lp = Math.cos,
      up = Math.sin,
      hp = Math.sqrt,
      cp = Math.abs,
      dp = "undefined" != typeof Float32Array,
      fp = function fp(t) {
    this._saveData = !t, this._saveData && (this.data = []), this._ctx = null;
  };fp.prototype = { constructor: fp, _xi: 0, _yi: 0, _x0: 0, _y0: 0, _ux: 0, _uy: 0, _len: 0, _lineDash: null, _dashOffset: 0, _dashIdx: 0, _dashSum: 0, setScale: function setScale(t, e) {
      this._ux = cp(1 / md / t) || 0, this._uy = cp(1 / md / e) || 0;
    }, getContext: function getContext() {
      return this._ctx;
    }, beginPath: function beginPath(t) {
      return this._ctx = t, t && t.beginPath(), t && (this.dpr = t.dpr), this._saveData && (this._len = 0), this._lineDash && (this._lineDash = null, this._dashOffset = 0), this;
    }, moveTo: function moveTo(t, e) {
      return this.addData(ep.M, t, e), this._ctx && this._ctx.moveTo(t, e), this._x0 = t, this._y0 = e, this._xi = t, this._yi = e, this;
    }, lineTo: function lineTo(t, e) {
      var n = cp(t - this._xi) > this._ux || cp(e - this._yi) > this._uy || this._len < 5;return this.addData(ep.L, t, e), this._ctx && n && (this._needsDash() ? this._dashedLineTo(t, e) : this._ctx.lineTo(t, e)), n && (this._xi = t, this._yi = e), this;
    }, bezierCurveTo: function bezierCurveTo(t, e, n, i, r, a) {
      return this.addData(ep.C, t, e, n, i, r, a), this._ctx && (this._needsDash() ? this._dashedBezierTo(t, e, n, i, r, a) : this._ctx.bezierCurveTo(t, e, n, i, r, a)), this._xi = r, this._yi = a, this;
    }, quadraticCurveTo: function quadraticCurveTo(t, e, n, i) {
      return this.addData(ep.Q, t, e, n, i), this._ctx && (this._needsDash() ? this._dashedQuadraticTo(t, e, n, i) : this._ctx.quadraticCurveTo(t, e, n, i)), this._xi = n, this._yi = i, this;
    }, arc: function arc(t, e, n, i, r, a) {
      return this.addData(ep.A, t, e, n, n, i, r - i, 0, a ? 0 : 1), this._ctx && this._ctx.arc(t, e, n, i, r, a), this._xi = lp(r) * n + t, this._yi = up(r) * n + t, this;
    }, arcTo: function arcTo(t, e, n, i, r) {
      return this._ctx && this._ctx.arcTo(t, e, n, i, r), this;
    }, rect: function rect(t, e, n, i) {
      return this._ctx && this._ctx.rect(t, e, n, i), this.addData(ep.R, t, e, n, i), this;
    }, closePath: function closePath() {
      this.addData(ep.Z);var t = this._ctx,
          e = this._x0,
          n = this._y0;return t && (this._needsDash() && this._dashedLineTo(e, n), t.closePath()), this._xi = e, this._yi = n, this;
    }, fill: function fill(t) {
      t && t.fill(), this.toStatic();
    }, stroke: function stroke(t) {
      t && t.stroke(), this.toStatic();
    }, setLineDash: function setLineDash(t) {
      if (t instanceof Array) {
        this._lineDash = t, this._dashIdx = 0;for (var e = 0, n = 0; n < t.length; n++) {
          e += t[n];
        }this._dashSum = e;
      }return this;
    }, setLineDashOffset: function setLineDashOffset(t) {
      return this._dashOffset = t, this;
    }, len: function len() {
      return this._len;
    }, setData: function setData(t) {
      var e = t.length;this.data && this.data.length == e || !dp || (this.data = new Float32Array(e));for (var n = 0; e > n; n++) {
        this.data[n] = t[n];
      }this._len = e;
    }, appendPath: function appendPath(t) {
      t instanceof Array || (t = [t]);for (var e = t.length, n = 0, i = this._len, r = 0; e > r; r++) {
        n += t[r].len();
      }dp && this.data instanceof Float32Array && (this.data = new Float32Array(i + n));for (var r = 0; e > r; r++) {
        for (var a = t[r].data, o = 0; o < a.length; o++) {
          this.data[i++] = a[o];
        }
      }this._len = i;
    }, addData: function addData(t) {
      if (this._saveData) {
        var e = this.data;this._len + arguments.length > e.length && (this._expandData(), e = this.data);for (var n = 0; n < arguments.length; n++) {
          e[this._len++] = arguments[n];
        }this._prevCmd = t;
      }
    }, _expandData: function _expandData() {
      if (!(this.data instanceof Array)) {
        for (var t = [], e = 0; e < this._len; e++) {
          t[e] = this.data[e];
        }this.data = t;
      }
    }, _needsDash: function _needsDash() {
      return this._lineDash;
    }, _dashedLineTo: function _dashedLineTo(t, e) {
      var n,
          i,
          r = this._dashSum,
          a = this._dashOffset,
          o = this._lineDash,
          s = this._ctx,
          l = this._xi,
          u = this._yi,
          h = t - l,
          c = e - u,
          d = hp(h * h + c * c),
          f = l,
          p = u,
          g = o.length;for (h /= d, c /= d, 0 > a && (a = r + a), a %= r, f -= a * h, p -= a * c; h > 0 && t >= f || 0 > h && f >= t || 0 == h && (c > 0 && e >= p || 0 > c && p >= e);) {
        i = this._dashIdx, n = o[i], f += h * n, p += c * n, this._dashIdx = (i + 1) % g, h > 0 && l > f || 0 > h && f > l || c > 0 && u > p || 0 > c && p > u || s[i % 2 ? "moveTo" : "lineTo"](h >= 0 ? op(f, t) : sp(f, t), c >= 0 ? op(p, e) : sp(p, e));
      }h = f - t, c = p - e, this._dashOffset = -hp(h * h + c * c);
    }, _dashedBezierTo: function _dashedBezierTo(t, e, n, i, r, a) {
      var o,
          s,
          l,
          u,
          h,
          c = this._dashSum,
          d = this._dashOffset,
          f = this._lineDash,
          p = this._ctx,
          g = this._xi,
          v = this._yi,
          m = tr,
          y = 0,
          _ = this._dashIdx,
          x = f.length,
          w = 0;for (0 > d && (d = c + d), d %= c, o = 0; 1 > o; o += .1) {
        s = m(g, t, n, r, o + .1) - m(g, t, n, r, o), l = m(v, e, i, a, o + .1) - m(v, e, i, a, o), y += hp(s * s + l * l);
      }for (; x > _ && (w += f[_], !(w > d)); _++) {}for (o = (w - d) / y; 1 >= o;) {
        u = m(g, t, n, r, o), h = m(v, e, i, a, o), _ % 2 ? p.moveTo(u, h) : p.lineTo(u, h), o += f[_] / y, _ = (_ + 1) % x;
      }_ % 2 !== 0 && p.lineTo(r, a), s = r - u, l = a - h, this._dashOffset = -hp(s * s + l * l);
    }, _dashedQuadraticTo: function _dashedQuadraticTo(t, e, n, i) {
      var r = n,
          a = i;n = (n + 2 * t) / 3, i = (i + 2 * e) / 3, t = (this._xi + 2 * t) / 3, e = (this._yi + 2 * e) / 3, this._dashedBezierTo(t, e, n, i, r, a);
    }, toStatic: function toStatic() {
      var t = this.data;t instanceof Array && (t.length = this._len, dp && (this.data = new Float32Array(t)));
    }, getBoundingRect: function getBoundingRect() {
      np[0] = np[1] = rp[0] = rp[1] = Number.MAX_VALUE, ip[0] = ip[1] = ap[0] = ap[1] = -Number.MAX_VALUE;for (var t = this.data, e = 0, n = 0, i = 0, r = 0, a = 0; a < t.length;) {
        var o = t[a++];switch (1 == a && (e = t[a], n = t[a + 1], i = e, r = n), o) {case ep.M:
            i = t[a++], r = t[a++], e = i, n = r, rp[0] = i, rp[1] = r, ap[0] = i, ap[1] = r;break;case ep.L:
            fr(e, n, t[a], t[a + 1], rp, ap), e = t[a++], n = t[a++];break;case ep.C:
            pr(e, n, t[a++], t[a++], t[a++], t[a++], t[a], t[a + 1], rp, ap), e = t[a++], n = t[a++];break;case ep.Q:
            gr(e, n, t[a++], t[a++], t[a], t[a + 1], rp, ap), e = t[a++], n = t[a++];break;case ep.A:
            var s = t[a++],
                l = t[a++],
                u = t[a++],
                h = t[a++],
                c = t[a++],
                d = t[a++] + c,
                f = (t[a++], 1 - t[a++]);1 == a && (i = lp(c) * u + s, r = up(c) * h + l), vr(s, l, u, h, c, d, f, rp, ap), e = lp(d) * u + s, n = up(d) * h + l;break;case ep.R:
            i = e = t[a++], r = n = t[a++];var p = t[a++],
                g = t[a++];fr(i, r, i + p, r + g, rp, ap);break;case ep.Z:
            e = i, n = r;}oe(np, np, rp), se(ip, ip, ap);
      }return 0 === a && (np[0] = np[1] = ip[0] = ip[1] = 0), new rn(np[0], np[1], ip[0] - np[0], ip[1] - np[1]);
    }, rebuildPath: function rebuildPath(t) {
      for (var e, n, i, r, a, o, s = this.data, l = this._ux, u = this._uy, h = this._len, c = 0; h > c;) {
        var d = s[c++];switch (1 == c && (i = s[c], r = s[c + 1], e = i, n = r), d) {case ep.M:
            e = i = s[c++], n = r = s[c++], t.moveTo(i, r);break;case ep.L:
            a = s[c++], o = s[c++], (cp(a - i) > l || cp(o - r) > u || c === h - 1) && (t.lineTo(a, o), i = a, r = o);break;case ep.C:
            t.bezierCurveTo(s[c++], s[c++], s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case ep.Q:
            t.quadraticCurveTo(s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case ep.A:
            var f = s[c++],
                p = s[c++],
                g = s[c++],
                v = s[c++],
                m = s[c++],
                y = s[c++],
                _ = s[c++],
                x = s[c++],
                w = g > v ? g : v,
                b = g > v ? 1 : g / v,
                M = g > v ? v / g : 1,
                S = Math.abs(g - v) > .001,
                C = m + y;S ? (t.translate(f, p), t.rotate(_), t.scale(b, M), t.arc(0, 0, w, m, C, 1 - x), t.scale(1 / b, 1 / M), t.rotate(-_), t.translate(-f, -p)) : t.arc(f, p, w, m, C, 1 - x), 1 == c && (e = lp(m) * g + f, n = up(m) * v + p), i = lp(C) * g + f, r = up(C) * v + p;break;case ep.R:
            e = i = s[c], n = r = s[c + 1], t.rect(s[c++], s[c++], s[c++], s[c++]);break;case ep.Z:
            t.closePath(), i = e, r = n;}
      }
    } }, fp.CMD = ep;var pp = 2 * Math.PI,
      gp = 2 * Math.PI,
      vp = fp.CMD,
      mp = 2 * Math.PI,
      yp = 1e-4,
      _p = [-1, -1, -1],
      xp = [-1, -1],
      wp = Bd.prototype.getCanvasPattern,
      bp = Math.abs,
      Mp = new fp(!0);Pr.prototype = { constructor: Pr, type: "path", __dirtyPath: !0, strokeContainThreshold: 5, brush: function brush(t, e) {
      var n = this.style,
          i = this.path || Mp,
          r = n.hasStroke(),
          a = n.hasFill(),
          o = n.fill,
          s = n.stroke,
          l = a && !!o.colorStops,
          u = r && !!s.colorStops,
          h = a && !!o.image,
          c = r && !!s.image;if (n.bind(t, this, e), this.setTransform(t), this.__dirty) {
        var d;l && (d = d || this.getBoundingRect(), this._fillGradient = n.getGradient(t, o, d)), u && (d = d || this.getBoundingRect(), this._strokeGradient = n.getGradient(t, s, d));
      }l ? t.fillStyle = this._fillGradient : h && (t.fillStyle = wp.call(o, t)), u ? t.strokeStyle = this._strokeGradient : c && (t.strokeStyle = wp.call(s, t));var f = n.lineDash,
          p = n.lineDashOffset,
          g = !!t.setLineDash,
          v = this.getGlobalScale();i.setScale(v[0], v[1]), this.__dirtyPath || f && !g && r ? (i.beginPath(t), f && !g && (i.setLineDash(f), i.setLineDashOffset(p)), this.buildPath(i, this.shape, !1), this.path && (this.__dirtyPath = !1)) : (t.beginPath(), this.path.rebuildPath(t)), a && i.fill(t), f && g && (t.setLineDash(f), t.lineDashOffset = p), r && i.stroke(t), f && g && t.setLineDash([]), null != n.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));
    }, buildPath: function buildPath() {}, createPathProxy: function createPathProxy() {
      this.path = new fp();
    }, getBoundingRect: function getBoundingRect() {
      var t = this._rect,
          e = this.style,
          n = !t;if (n) {
        var i = this.path;i || (i = this.path = new fp()), this.__dirtyPath && (i.beginPath(), this.buildPath(i, this.shape, !1)), t = i.getBoundingRect();
      }if (this._rect = t, e.hasStroke()) {
        var r = this._rectWithStroke || (this._rectWithStroke = t.clone());if (this.__dirty || n) {
          r.copy(t);var a = e.lineWidth,
              o = e.strokeNoScale ? this.getLineScale() : 1;e.hasFill() || (a = Math.max(a, this.strokeContainThreshold || 4)), o > 1e-10 && (r.width += a / o, r.height += a / o, r.x -= a / o / 2, r.y -= a / o / 2);
        }return r;
      }return t;
    }, contain: function contain(t, e) {
      var n = this.transformCoordToLocal(t, e),
          i = this.getBoundingRect(),
          r = this.style;if (t = n[0], e = n[1], i.contain(t, e)) {
        var a = this.path.data;if (r.hasStroke()) {
          var o = r.lineWidth,
              s = r.strokeNoScale ? this.getLineScale() : 1;if (s > 1e-10 && (r.hasFill() || (o = Math.max(o, this.strokeContainThreshold)), Ar(a, o / s, t, e))) return !0;
        }if (r.hasFill()) return Dr(a, t, e);
      }return !1;
    }, dirty: function dirty(t) {
      null == t && (t = !0), t && (this.__dirtyPath = t, this._rect = null), this.__dirty = !0, this.__zr && this.__zr.refresh(), this.__clipTarget && this.__clipTarget.dirty();
    }, animateShape: function animateShape(t) {
      return this.animate("shape", t);
    }, attrKV: function attrKV(t, e) {
      "shape" === t ? (this.setShape(e), this.__dirtyPath = !0, this._rect = null) : ri.prototype.attrKV.call(this, t, e);
    }, setShape: function setShape(t, e) {
      var n = this.shape;if (n) {
        if (M(t)) for (var i in t) {
          t.hasOwnProperty(i) && (n[i] = t[i]);
        } else n[t] = e;this.dirty(!0);
      }return this;
    }, getLineScale: function getLineScale() {
      var t = this.transform;return t && bp(t[0] - 1) > 1e-10 && bp(t[3] - 1) > 1e-10 ? Math.sqrt(bp(t[0] * t[3] - t[2] * t[1])) : 1;
    } }, Pr.extend = function (t) {
    var e = function e(_e2) {
      Pr.call(this, _e2), t.style && this.style.extendFrom(t.style, !1);var n = t.shape;if (n) {
        this.shape = this.shape || {};var i = this.shape;for (var r in n) {
          !i.hasOwnProperty(r) && n.hasOwnProperty(r) && (i[r] = n[r]);
        }
      }t.init && t.init.call(this, _e2);
    };h(e, Pr);for (var n in t) {
      "style" !== n && "shape" !== n && (e.prototype[n] = t[n]);
    }return e;
  }, h(Pr, ri);var Sp = fp.CMD,
      Cp = [[], [], []],
      Ip = Math.sqrt,
      Tp = Math.atan2,
      kp = function kp(t, e) {
    var n,
        i,
        r,
        a,
        o,
        s,
        l = t.data,
        u = Sp.M,
        h = Sp.C,
        c = Sp.L,
        d = Sp.R,
        f = Sp.A,
        p = Sp.Q;for (r = 0, a = 0; r < l.length;) {
      switch (n = l[r++], a = r, i = 0, n) {case u:
          i = 1;break;case c:
          i = 1;break;case h:
          i = 3;break;case p:
          i = 2;break;case f:
          var g = e[4],
              v = e[5],
              m = Ip(e[0] * e[0] + e[1] * e[1]),
              y = Ip(e[2] * e[2] + e[3] * e[3]),
              _ = Tp(-e[1] / y, e[0] / m);l[r] *= m, l[r++] += g, l[r] *= y, l[r++] += v, l[r++] *= m, l[r++] *= y, l[r++] += _, l[r++] += _, r += 2, a = r;break;case d:
          s[0] = l[r++], s[1] = l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1], s[0] += l[r++], s[1] += l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1];}for (o = 0; i > o; o++) {
        var s = Cp[o];s[0] = l[r++], s[1] = l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1];
      }
    }
  },
      Dp = ["m", "M", "l", "L", "v", "V", "h", "H", "z", "Z", "c", "C", "q", "Q", "t", "T", "s", "S", "a", "A"],
      Ap = Math.sqrt,
      Pp = Math.sin,
      Lp = Math.cos,
      Op = Math.PI,
      Rp = function Rp(t) {
    return Math.sqrt(t[0] * t[0] + t[1] * t[1]);
  },
      Ep = function Ep(t, e) {
    return (t[0] * e[0] + t[1] * e[1]) / (Rp(t) * Rp(e));
  },
      Bp = function Bp(t, e) {
    return (t[0] * e[1] < t[1] * e[0] ? -1 : 1) * Math.acos(Ep(t, e));
  },
      zp = function zp(t) {
    ri.call(this, t);
  };zp.prototype = { constructor: zp, type: "text", brush: function brush(t, e) {
      var n = this.style;this.__dirty && Vn(n, !0), n.fill = n.stroke = n.shadowBlur = n.shadowColor = n.shadowOffsetX = n.shadowOffsetY = null;var i = n.text;null != i && (i += ""), n.bind(t, this, e), ii(i, n) && (this.setTransform(t), Hn(this, t, i, n), this.restoreTransform(t));
    }, getBoundingRect: function getBoundingRect() {
      var t = this.style;if (this.__dirty && Vn(t, !0), !this._rect) {
        var e = t.text;null != e ? e += "" : e = "";var n = Mn(t.text + "", t.font, t.textAlign, t.textVerticalAlign, t.textPadding, t.rich);if (n.x += t.x || 0, n.y += t.y || 0, Jn(t.textStroke, t.textStrokeWidth)) {
          var i = t.textStrokeWidth;n.x -= i / 2, n.y -= i / 2, n.width += i, n.height += i;
        }this._rect = n;
      }return this._rect;
    } }, h(zp, ri);var Np = Pr.extend({ type: "circle", shape: { cx: 0, cy: 0, r: 0 }, buildPath: function buildPath(t, e, n) {
      n && t.moveTo(e.cx + e.r, e.cy), t.arc(e.cx, e.cy, e.r, 0, 2 * Math.PI, !0);
    } }),
      Fp = [["shadowBlur", 0], ["shadowColor", "#000"], ["shadowOffsetX", 0], ["shadowOffsetY", 0]],
      Vp = function Vp(t) {
    return bc.browser.ie && bc.browser.version >= 11 ? function () {
      var e,
          n = this.__clipPaths,
          i = this.style;if (n) for (var r = 0; r < n.length; r++) {
        var a = n[r],
            o = a && a.shape,
            s = a && a.type;if (o && ("sector" === s && o.startAngle === o.endAngle || "rect" === s && (!o.width || !o.height))) {
          for (var l = 0; l < Fp.length; l++) {
            Fp[l][2] = i[Fp[l][0]], i[Fp[l][0]] = Fp[l][1];
          }e = !0;break;
        }
      }if (t.apply(this, arguments), e) for (var l = 0; l < Fp.length; l++) {
        i[Fp[l][0]] = Fp[l][2];
      }
    } : t;
  },
      Gp = Pr.extend({ type: "sector", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, brush: Vp(Pr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = Math.max(e.r0 || 0, 0),
          a = Math.max(e.r, 0),
          o = e.startAngle,
          s = e.endAngle,
          l = e.clockwise,
          u = Math.cos(o),
          h = Math.sin(o);t.moveTo(u * r + n, h * r + i), t.lineTo(u * a + n, h * a + i), t.arc(n, i, a, o, s, !l), t.lineTo(Math.cos(s) * r + n, Math.sin(s) * r + i), 0 !== r && t.arc(n, i, r, s, o, l), t.closePath();
    } }),
      Hp = Pr.extend({ type: "ring", shape: { cx: 0, cy: 0, r: 0, r0: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = 2 * Math.PI;t.moveTo(n + e.r, i), t.arc(n, i, e.r, 0, r, !1), t.moveTo(n + e.r0, i), t.arc(n, i, e.r0, 0, r, !0);
    } }),
      Wp = function Wp(t, e) {
    for (var n = t.length, i = [], r = 0, a = 1; n > a; a++) {
      r += ee(t[a - 1], t[a]);
    }var o = r / 2;o = n > o ? n : o;for (var a = 0; o > a; a++) {
      var s,
          l,
          u,
          h = a / (o - 1) * (e ? n : n - 1),
          c = Math.floor(h),
          d = h - c,
          f = t[c % n];e ? (s = t[(c - 1 + n) % n], l = t[(c + 1) % n], u = t[(c + 2) % n]) : (s = t[0 === c ? c : c - 1], l = t[c > n - 2 ? n - 1 : c + 1], u = t[c > n - 3 ? n - 1 : c + 2]);var p = d * d,
          g = d * p;i.push([Nr(s[0], f[0], l[0], u[0], d, p, g), Nr(s[1], f[1], l[1], u[1], d, p, g)]);
    }return i;
  },
      jp = function jp(t, e, n, i) {
    var r,
        a,
        o,
        s,
        l = [],
        u = [],
        h = [],
        c = [];if (i) {
      o = [1 / 0, 1 / 0], s = [-1 / 0, -1 / 0];for (var d = 0, f = t.length; f > d; d++) {
        oe(o, o, t[d]), se(s, s, t[d]);
      }oe(o, o, i[0]), se(s, s, i[1]);
    }for (var d = 0, f = t.length; f > d; d++) {
      var p = t[d];if (n) r = t[d ? d - 1 : f - 1], a = t[(d + 1) % f];else {
        if (0 === d || d === f - 1) {
          l.push(W(t[d]));continue;
        }r = t[d - 1], a = t[d + 1];
      }X(u, a, r), J(u, u, e);var g = ee(p, r),
          v = ee(p, a),
          m = g + v;0 !== m && (g /= m, v /= m), J(h, u, -g), J(c, u, v);var y = q([], p, h),
          _ = q([], p, c);i && (se(y, y, o), oe(y, y, s), se(_, _, o), oe(_, _, s)), l.push(y), l.push(_);
    }return n && l.push(l.shift()), l;
  },
      qp = Pr.extend({ type: "polygon", shape: { points: null, smooth: !1, smoothConstraint: null }, buildPath: function buildPath(t, e) {
      Fr(t, e, !0);
    } }),
      Up = Pr.extend({ type: "polyline", shape: { points: null, smooth: !1, smoothConstraint: null }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      Fr(t, e, !1);
    } }),
      Xp = Pr.extend({ type: "rect", shape: { r: 0, x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.x,
          i = e.y,
          r = e.width,
          a = e.height;e.r ? Fn(t, e) : t.rect(n, i, r, a), t.closePath();
    } }),
      Yp = Pr.extend({ type: "line", shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n = e.x1,
          i = e.y1,
          r = e.x2,
          a = e.y2,
          o = e.percent;0 !== o && (t.moveTo(n, i), 1 > o && (r = n * (1 - o) + r * o, a = i * (1 - o) + a * o), t.lineTo(r, a));
    }, pointAt: function pointAt(t) {
      var e = this.shape;return [e.x1 * (1 - t) + e.x2 * t, e.y1 * (1 - t) + e.y2 * t];
    } }),
      Zp = [],
      $p = Pr.extend({ type: "bezier-curve", shape: { x1: 0, y1: 0, x2: 0, y2: 0, cpx1: 0, cpy1: 0, percent: 1 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n = e.x1,
          i = e.y1,
          r = e.x2,
          a = e.y2,
          o = e.cpx1,
          s = e.cpy1,
          l = e.cpx2,
          u = e.cpy2,
          h = e.percent;0 !== h && (t.moveTo(n, i), null == l || null == u ? (1 > h && (hr(n, o, r, h, Zp), o = Zp[1], r = Zp[2], hr(i, s, a, h, Zp), s = Zp[1], a = Zp[2]), t.quadraticCurveTo(o, s, r, a)) : (1 > h && (rr(n, o, l, r, h, Zp), o = Zp[1], l = Zp[2], r = Zp[3], rr(i, s, u, a, h, Zp), s = Zp[1], u = Zp[2], a = Zp[3]), t.bezierCurveTo(o, s, l, u, r, a)));
    }, pointAt: function pointAt(t) {
      return Vr(this.shape, t, !1);
    }, tangentAt: function tangentAt(t) {
      var e = Vr(this.shape, t, !0);return te(e, e);
    } }),
      Kp = Pr.extend({ type: "arc", shape: { cx: 0, cy: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = Math.max(e.r, 0),
          a = e.startAngle,
          o = e.endAngle,
          s = e.clockwise,
          l = Math.cos(a),
          u = Math.sin(a);t.moveTo(l * r + n, u * r + i), t.arc(n, i, r, a, o, !s);
    } }),
      Qp = Pr.extend({ type: "compound", shape: { paths: null }, _updatePathDirty: function _updatePathDirty() {
      for (var t = this.__dirtyPath, e = this.shape.paths, n = 0; n < e.length; n++) {
        t = t || e[n].__dirtyPath;
      }this.__dirtyPath = t, this.__dirty = this.__dirty || t;
    }, beforeBrush: function beforeBrush() {
      this._updatePathDirty();for (var t = this.shape.paths || [], e = this.getGlobalScale(), n = 0; n < t.length; n++) {
        t[n].path || t[n].createPathProxy(), t[n].path.setScale(e[0], e[1]);
      }
    }, buildPath: function buildPath(t, e) {
      for (var n = e.paths || [], i = 0; i < n.length; i++) {
        n[i].buildPath(t, n[i].shape, !0);
      }
    }, afterBrush: function afterBrush() {
      for (var t = this.shape.paths || [], e = 0; e < t.length; e++) {
        t[e].__dirtyPath = !1;
      }
    }, getBoundingRect: function getBoundingRect() {
      return this._updatePathDirty(), Pr.prototype.getBoundingRect.call(this);
    } }),
      Jp = function Jp(t) {
    this.colorStops = t || [];
  };Jp.prototype = { constructor: Jp, addColorStop: function addColorStop(t, e) {
      this.colorStops.push({ offset: t, color: e });
    } };var tg = function tg(t, e, n, i, r, a) {
    this.x = null == t ? 0 : t, this.y = null == e ? 0 : e, this.x2 = null == n ? 1 : n, this.y2 = null == i ? 0 : i, this.type = "linear", this.global = a || !1, Jp.call(this, r);
  };tg.prototype = { constructor: tg }, h(tg, Jp);var eg = function eg(t, e, n, i, r) {
    this.x = null == t ? .5 : t, this.y = null == e ? .5 : e, this.r = null == n ? .5 : n, this.type = "radial", this.global = r || !1, Jp.call(this, i);
  };eg.prototype = { constructor: eg }, h(eg, Jp), Gr.prototype.incremental = !0, Gr.prototype.clearDisplaybles = function () {
    this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.dirty(), this.notClear = !1;
  }, Gr.prototype.addDisplayable = function (t, e) {
    e ? this._temporaryDisplayables.push(t) : this._displayables.push(t), this.dirty();
  }, Gr.prototype.addDisplayables = function (t, e) {
    e = e || !1;for (var n = 0; n < t.length; n++) {
      this.addDisplayable(t[n], e);
    }
  }, Gr.prototype.eachPendingDisplayable = function (t) {
    for (var e = this._cursor; e < this._displayables.length; e++) {
      t && t(this._displayables[e]);
    }for (var e = 0; e < this._temporaryDisplayables.length; e++) {
      t && t(this._temporaryDisplayables[e]);
    }
  }, Gr.prototype.update = function () {
    this.updateTransform();for (var t = this._cursor; t < this._displayables.length; t++) {
      var e = this._displayables[t];e.parent = this, e.update(), e.parent = null;
    }for (var t = 0; t < this._temporaryDisplayables.length; t++) {
      var e = this._temporaryDisplayables[t];e.parent = this, e.update(), e.parent = null;
    }
  }, Gr.prototype.brush = function (t) {
    for (var e = this._cursor; e < this._displayables.length; e++) {
      var n = this._displayables[e];n.beforeBrush && n.beforeBrush(t), n.brush(t, e === this._cursor ? null : this._displayables[e - 1]), n.afterBrush && n.afterBrush(t);
    }this._cursor = e;for (var e = 0; e < this._temporaryDisplayables.length; e++) {
      var n = this._temporaryDisplayables[e];n.beforeBrush && n.beforeBrush(t), n.brush(t, 0 === e ? null : this._temporaryDisplayables[e - 1]), n.afterBrush && n.afterBrush(t);
    }this._temporaryDisplayables = [], this.notClear = !0;
  };var ng = [];Gr.prototype.getBoundingRect = function () {
    if (!this._rect) {
      for (var t = new rn(1 / 0, 1 / 0, -1 / 0, -1 / 0), e = 0; e < this._displayables.length; e++) {
        var n = this._displayables[e],
            i = n.getBoundingRect().clone();n.needLocalTransform() && i.applyTransform(n.getLocalTransform(ng)), t.union(i);
      }this._rect = t;
    }return this._rect;
  }, Gr.prototype.contain = function (t, e) {
    var n = this.transformCoordToLocal(t, e),
        i = this.getBoundingRect();if (i.contain(n[0], n[1])) for (var r = 0; r < this._displayables.length; r++) {
      var a = this._displayables[r];if (a.contain(t, e)) return !0;
    }return !1;
  }, h(Gr, ri);var ig = Math.round,
      rg = Math.max,
      ag = Math.min,
      og = {},
      sg = zr,
      lg = (Object.freeze || Object)({ extendShape: Hr, extendPath: Wr, makePath: jr, makeImage: qr, mergePath: sg, resizePath: Xr, subPixelOptimizeLine: Yr, subPixelOptimizeRect: Zr, subPixelOptimize: $r, setHoverStyle: ua, setLabelStyle: ha, setTextStyle: ca, setText: da, getFont: _a, updateProps: wa, initProps: ba, getTransform: Ma, applyTransform: Sa, transformDirection: Ca, groupTransition: Ia, clipPointsByRect: Ta, clipRectByRect: ka, createIcon: Da, Group: Cd, Image: ai, Text: zp, Circle: Np, Sector: Gp, Ring: Hp, Polygon: qp, Polyline: Up, Rect: Xp, Line: Yp, BezierCurve: $p, Arc: Kp, IncrementalDisplayable: Gr, CompoundPath: Qp, LinearGradient: tg, RadialGradient: eg, BoundingRect: rn }),
      ug = ["textStyle", "color"],
      hg = { getTextColor: function getTextColor(t) {
      var e = this.ecModel;return this.getShallow("color") || (!t && e ? e.get(ug) : null);
    }, getFont: function getFont() {
      return _a({ fontStyle: this.getShallow("fontStyle"), fontWeight: this.getShallow("fontWeight"), fontSize: this.getShallow("fontSize"), fontFamily: this.getShallow("fontFamily") }, this.ecModel);
    }, getTextRect: function getTextRect(t) {
      return Mn(t, this.getFont(), this.getShallow("align"), this.getShallow("verticalAlign") || this.getShallow("baseline"), this.getShallow("padding"), this.getShallow("rich"), this.getShallow("truncateText"));
    } },
      cg = Pf([["fill", "color"], ["stroke", "borderColor"], ["lineWidth", "borderWidth"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"], ["textPosition"], ["textAlign"]]),
      dg = { getItemStyle: function getItemStyle(t, e) {
      var n = cg(this, t, e),
          i = this.getBorderLineDash();return i && (n.lineDash = i), n;
    }, getBorderLineDash: function getBorderLineDash() {
      var t = this.get("borderType");return "solid" === t || null == t ? null : "dashed" === t ? [5, 5] : [1, 1];
    } },
      fg = c,
      pg = Vi();Aa.prototype = { constructor: Aa, init: null, mergeOption: function mergeOption(t) {
      r(this.option, t, !0);
    }, get: function get(t, e) {
      return null == t ? this.option : Pa(this.option, this.parsePath(t), !e && La(this, t));
    }, getShallow: function getShallow(t, e) {
      var n = this.option,
          i = null == n ? n : n[t],
          r = !e && La(this, t);return null == i && r && (i = r.getShallow(t)), i;
    }, getModel: function getModel(t, e) {
      var n,
          i = null == t ? this.option : Pa(this.option, t = this.parsePath(t));return e = e || (n = La(this, t)) && n.getModel(t), new Aa(i, e, this.ecModel);
    }, isEmpty: function isEmpty() {
      return null == this.option;
    }, restoreData: function restoreData() {}, clone: function clone() {
      var t = this.constructor;return new t(i(this.option));
    }, setReadOnly: function setReadOnly() {}, parsePath: function parsePath(t) {
      return "string" == typeof t && (t = t.split(".")), t;
    }, customizeGetParent: function customizeGetParent(t) {
      pg(this).getParent = t;
    }, isAnimationEnabled: function isAnimationEnabled() {
      if (!bc.node) {
        if (null != this.option.animation) return !!this.option.animation;if (this.parentModel) return this.parentModel.isAnimationEnabled();
      }
    } }, Xi(Aa), Yi(Aa), fg(Aa, Of), fg(Aa, Ef), fg(Aa, hg), fg(Aa, dg);var gg = 0,
      vg = 1e-4,
      mg = 9007199254740991,
      yg = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/,
      _g = (Object.freeze || Object)({ linearMap: za, parsePercent: Na, round: Fa, asc: Va, getPrecision: Ga, getPrecisionSafe: Ha, getPixelPrecision: Wa, getPercentWithPrecision: ja, MAX_SAFE_INTEGER: mg, remRadian: qa, isRadianAroundZero: Ua, parseDate: Xa, quantity: Ya, nice: $a, quantile: Ka, reformIntervals: Qa, isNumeric: Ja }),
      xg = L,
      wg = /([&<>"'])/g,
      bg = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" },
      Mg = ["a", "b", "c", "d", "e", "f", "g"],
      Sg = function Sg(t, e) {
    return "{" + t + (null == e ? "" : e) + "}";
  },
      Cg = Dn,
      Ig = Mn,
      Tg = (Object.freeze || Object)({ addCommas: to, toCamelCase: eo, normalizeCssArray: xg, encodeHTML: no, formatTpl: io, formatTplSimple: ro, getTooltipMarker: ao, formatTime: so, capitalFirst: lo, truncateText: Cg, getTextRect: Ig }),
      kg = f,
      Dg = ["left", "right", "top", "bottom", "width", "height"],
      Ag = [["width", "left", "right"], ["height", "top", "bottom"]],
      Pg = uo,
      Lg = (_(uo, "vertical"), _(uo, "horizontal"), { getBoxLayoutParams: function getBoxLayoutParams() {
      return { left: this.get("left"), top: this.get("top"), right: this.get("right"), bottom: this.get("bottom"), width: this.get("width"), height: this.get("height") };
    } }),
      Og = Vi(),
      Rg = Aa.extend({ type: "component", id: "", name: "", mainType: "", subType: "", componentIndex: 0, defaultOption: null, ecModel: null, dependentModels: [], uid: null, layoutMode: null, $constructor: function $constructor(t, e, n, i) {
      Aa.call(this, t, e, n, i), this.uid = Oa("ec_cpt_model");
    }, init: function init(t, e, n) {
      this.mergeDefaultAndTheme(t, n);
    }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {
      var n = this.layoutMode,
          i = n ? fo(t) : {},
          a = e.getTheme();r(t, a.get(this.mainType)), r(t, this.getDefaultOption()), n && co(t, i, n);
    }, mergeOption: function mergeOption(t) {
      r(this.option, t, !0);var e = this.layoutMode;e && co(this.option, t, e);
    }, optionUpdated: function optionUpdated() {}, getDefaultOption: function getDefaultOption() {
      var t = Og(this);if (!t.defaultOption) {
        for (var e = [], n = this.constructor; n;) {
          var i = n.prototype.defaultOption;i && e.push(i), n = n.superClass;
        }for (var a = {}, o = e.length - 1; o >= 0; o--) {
          a = r(a, e[o], !0);
        }t.defaultOption = a;
      }return t.defaultOption;
    }, getReferringComponents: function getReferringComponents(t) {
      return this.ecModel.queryComponents({ mainType: t, index: this.get(t + "Index", !0), id: this.get(t + "Id", !0) });
    } });Ki(Rg, { registerWhenExtend: !0 }), Ra(Rg), Ea(Rg, go), c(Rg, Lg);var Eg = "";"undefined" != typeof navigator && (Eg = navigator.platform || "");var Bg = { color: ["#c23531", "#2f4554", "#61a0a8", "#d48265", "#91c7ae", "#749f83", "#ca8622", "#bda29a", "#6e7074", "#546570", "#c4ccd3"], gradientColor: ["#f6efa6", "#d88273", "#bf444c"], textStyle: { fontFamily: Eg.match(/^Win/) ? "Microsoft YaHei" : "sans-serif", fontSize: 12, fontStyle: "normal", fontWeight: "normal" }, blendMode: null, animation: "auto", animationDuration: 1e3, animationDurationUpdate: 300, animationEasing: "exponentialOut", animationEasingUpdate: "cubicOut", animationThreshold: 2e3, progressiveThreshold: 3e3, progressive: 400, hoverLayerThreshold: 3e3, useUTC: !1 },
      zg = Vi(),
      Ng = { clearColorPalette: function clearColorPalette() {
      zg(this).colorIdx = 0, zg(this).colorNameMap = {};
    }, getColorFromPalette: function getColorFromPalette(t, e, n) {
      e = e || this;var i = zg(e),
          r = i.colorIdx || 0,
          a = i.colorNameMap = i.colorNameMap || {};if (a.hasOwnProperty(t)) return a[t];var o = Pi(this.get("color", !0)),
          s = this.get("colorLayer", !0),
          l = null != n && s ? vo(s, n) : o;if (l = l || o, l && l.length) {
        var u = l[r];return t && (a[t] = u), i.colorIdx = (r + 1) % l.length, u;
      }
    } },
      Fg = { cartesian2d: function cartesian2d(t, e, n, i) {
      var r = t.getReferringComponents("xAxis")[0],
          a = t.getReferringComponents("yAxis")[0];e.coordSysDims = ["x", "y"], n.set("x", r), n.set("y", a), yo(r) && (i.set("x", r), e.firstCategoryDimIndex = 0), yo(a) && (i.set("y", a), e.firstCategoryDimIndex = 1);
    }, singleAxis: function singleAxis(t, e, n, i) {
      var r = t.getReferringComponents("singleAxis")[0];
      e.coordSysDims = ["single"], n.set("single", r), yo(r) && (i.set("single", r), e.firstCategoryDimIndex = 0);
    }, polar: function polar(t, e, n, i) {
      var r = t.getReferringComponents("polar")[0],
          a = r.findAxisModel("radiusAxis"),
          o = r.findAxisModel("angleAxis");e.coordSysDims = ["radius", "angle"], n.set("radius", a), n.set("angle", o), yo(a) && (i.set("radius", a), e.firstCategoryDimIndex = 0), yo(o) && (i.set("angle", o), e.firstCategoryDimIndex = 1);
    }, geo: function geo(t, e) {
      e.coordSysDims = ["lng", "lat"];
    }, parallel: function parallel(t, e, n, i) {
      var r = t.ecModel,
          a = r.getComponent("parallel", t.get("parallelIndex")),
          o = e.coordSysDims = a.dimensions.slice();f(a.parallelAxisIndex, function (t, a) {
        var s = r.getComponent("parallelAxis", t),
            l = o[a];n.set(l, s), yo(s) && null == e.firstCategoryDimIndex && (i.set(l, s), e.firstCategoryDimIndex = a);
      });
    } },
      Vg = "original",
      Gg = "arrayRows",
      Hg = "objectRows",
      Wg = "keyedColumns",
      jg = "unknown",
      qg = "typedArray",
      Ug = "column",
      Xg = "row";_o.seriesDataToSource = function (t) {
    return new _o({ data: t, sourceFormat: C(t) ? qg : Vg, fromDataset: !1 });
  }, Yi(_o);var Yg = Vi(),
      Zg = "\x00_ec_inner",
      $g = Aa.extend({ init: function init(t, e, n, i) {
      n = n || {}, this.option = null, this._theme = new Aa(n), this._optionManager = i;
    }, setOption: function setOption(t, e) {
      O(!(Zg in t), "please use chart.getOption()"), this._optionManager.setOption(t, e), this.resetOption(null);
    }, resetOption: function resetOption(t) {
      var e = !1,
          n = this._optionManager;if (!t || "recreate" === t) {
        var i = n.mountOption("recreate" === t);this.option && "recreate" !== t ? (this.restoreData(), this.mergeOption(i)) : Ro.call(this, i), e = !0;
      }if (("timeline" === t || "media" === t) && this.restoreData(), !t || "recreate" === t || "timeline" === t) {
        var r = n.getTimelineOption(this);r && (this.mergeOption(r), e = !0);
      }if (!t || "recreate" === t || "media" === t) {
        var a = n.getMediaOption(this, this._api);a.length && f(a, function (t) {
          this.mergeOption(t, e = !0);
        }, this);
      }return e;
    }, mergeOption: function mergeOption(t) {
      function e(e, i) {
        var r = Pi(t[e]),
            s = Ei(a.get(e), r);Bi(s), f(s, function (t) {
          var n = t.option;M(n) && (t.keyInfo.mainType = e, t.keyInfo.subType = Bo(e, n, t.exist));
        });var l = Eo(a, i);n[e] = [], a.set(e, []), f(s, function (t, i) {
          var r = t.exist,
              s = t.option;if (O(M(s) || r, "Empty component definition"), s) {
            var u = Rg.getClass(e, t.keyInfo.subType, !0);if (r && r instanceof u) r.name = t.keyInfo.name, r.mergeOption(s, this), r.optionUpdated(s, !1);else {
              var h = o({ dependentModels: l, componentIndex: i }, t.keyInfo);r = new u(s, this, this, h), o(r, h), r.init(s, this, this, h), r.optionUpdated(null, !0);
            }
          } else r.mergeOption({}, this), r.optionUpdated({}, !1);a.get(e)[i] = r, n[e][i] = r.option;
        }, this), "series" === e && zo(this, a.get("series"));
      }var n = this.option,
          a = this._componentsMap,
          s = [];bo(this), f(t, function (t, e) {
        null != t && (Rg.hasClass(e) ? e && s.push(e) : n[e] = null == n[e] ? i(t) : r(n[e], t, !0));
      }), Rg.topologicalTravel(s, Rg.getAllClassMainTypes(), e, this), this._seriesIndicesMap = N(this._seriesIndices = this._seriesIndices || []);
    }, getOption: function getOption() {
      var t = i(this.option);return f(t, function (e, n) {
        if (Rg.hasClass(n)) {
          for (var e = Pi(e), i = e.length - 1; i >= 0; i--) {
            Ni(e[i]) && e.splice(i, 1);
          }t[n] = e;
        }
      }), delete t[Zg], t;
    }, getTheme: function getTheme() {
      return this._theme;
    }, getComponent: function getComponent(t, e) {
      var n = this._componentsMap.get(t);return n ? n[e || 0] : void 0;
    }, queryComponents: function queryComponents(t) {
      var e = t.mainType;if (!e) return [];var n = t.index,
          i = t.id,
          r = t.name,
          a = this._componentsMap.get(e);if (!a || !a.length) return [];var o;if (null != n) x(n) || (n = [n]), o = v(p(n, function (t) {
        return a[t];
      }), function (t) {
        return !!t;
      });else if (null != i) {
        var s = x(i);o = v(a, function (t) {
          return s && u(i, t.id) >= 0 || !s && t.id === i;
        });
      } else if (null != r) {
        var l = x(r);o = v(a, function (t) {
          return l && u(r, t.name) >= 0 || !l && t.name === r;
        });
      } else o = a.slice();return No(o, t);
    }, findComponents: function findComponents(t) {
      function e(t) {
        var e = r + "Index",
            n = r + "Id",
            i = r + "Name";return !t || null == t[e] && null == t[n] && null == t[i] ? null : { mainType: r, index: t[e], id: t[n], name: t[i] };
      }function n(e) {
        return t.filter ? v(e, t.filter) : e;
      }var i = t.query,
          r = t.mainType,
          a = e(i),
          o = a ? this.queryComponents(a) : this._componentsMap.get(r);return n(No(o, t));
    }, eachComponent: function eachComponent(t, e, n) {
      var i = this._componentsMap;if ("function" == typeof t) n = e, e = t, i.each(function (t, i) {
        f(t, function (t, r) {
          e.call(n, i, t, r);
        });
      });else if (b(t)) f(i.get(t), e, n);else if (M(t)) {
        var r = this.findComponents(t);f(r, e, n);
      }
    }, getSeriesByName: function getSeriesByName(t) {
      var e = this._componentsMap.get("series");return v(e, function (e) {
        return e.name === t;
      });
    }, getSeriesByIndex: function getSeriesByIndex(t) {
      return this._componentsMap.get("series")[t];
    }, getSeriesByType: function getSeriesByType(t) {
      var e = this._componentsMap.get("series");return v(e, function (e) {
        return e.subType === t;
      });
    }, getSeries: function getSeries() {
      return this._componentsMap.get("series").slice();
    }, getSeriesCount: function getSeriesCount() {
      return this._componentsMap.get("series").length;
    }, eachSeries: function eachSeries(t, e) {
      f(this._seriesIndices, function (n) {
        var i = this._componentsMap.get("series")[n];t.call(e, i, n);
      }, this);
    }, eachRawSeries: function eachRawSeries(t, e) {
      f(this._componentsMap.get("series"), t, e);
    }, eachSeriesByType: function eachSeriesByType(t, e, n) {
      f(this._seriesIndices, function (i) {
        var r = this._componentsMap.get("series")[i];r.subType === t && e.call(n, r, i);
      }, this);
    }, eachRawSeriesByType: function eachRawSeriesByType(t, e, n) {
      return f(this.getSeriesByType(t), e, n);
    }, isSeriesFiltered: function isSeriesFiltered(t) {
      return null == this._seriesIndicesMap.get(t.componentIndex);
    }, getCurrentSeriesIndices: function getCurrentSeriesIndices() {
      return (this._seriesIndices || []).slice();
    }, filterSeries: function filterSeries(t, e) {
      var n = v(this._componentsMap.get("series"), t, e);zo(this, n);
    }, restoreData: function restoreData(t) {
      var e = this._componentsMap;zo(this, e.get("series"));var n = [];e.each(function (t, e) {
        n.push(e);
      }), Rg.topologicalTravel(n, Rg.getAllClassMainTypes(), function (n) {
        f(e.get(n), function (e) {
          ("series" !== n || !Lo(e, t)) && e.restoreData();
        });
      });
    } });c($g, Ng);var Kg = ["getDom", "getZr", "getWidth", "getHeight", "getDevicePixelRatio", "dispatchAction", "isDisposed", "on", "off", "getDataURL", "getConnectedDataURL", "getModel", "getOption", "getViewOfComponentModel", "getViewOfSeriesModel"],
      Qg = {};Vo.prototype = { constructor: Vo, create: function create(t, e) {
      var n = [];f(Qg, function (i) {
        var r = i.create(t, e);n = n.concat(r || []);
      }), this._coordinateSystems = n;
    }, update: function update(t, e) {
      f(this._coordinateSystems, function (n) {
        n.update && n.update(t, e);
      });
    }, getCoordinateSystems: function getCoordinateSystems() {
      return this._coordinateSystems.slice();
    } }, Vo.register = function (t, e) {
    Qg[t] = e;
  }, Vo.get = function (t) {
    return Qg[t];
  };var Jg = f,
      tv = i,
      ev = p,
      nv = r,
      iv = /^(min|max)?(.+)$/;Go.prototype = { constructor: Go, setOption: function setOption(t, e) {
      t && f(Pi(t.series), function (t) {
        t && t.data && C(t.data) && E(t.data);
      }), t = tv(t, !0);var n = this._optionBackup,
          i = Ho.call(this, t, e, !n);this._newBaseOption = i.baseOption, n ? (Uo(n.baseOption, i.baseOption), i.timelineOptions.length && (n.timelineOptions = i.timelineOptions), i.mediaList.length && (n.mediaList = i.mediaList), i.mediaDefault && (n.mediaDefault = i.mediaDefault)) : this._optionBackup = i;
    }, mountOption: function mountOption(t) {
      var e = this._optionBackup;return this._timelineOptions = ev(e.timelineOptions, tv), this._mediaList = ev(e.mediaList, tv), this._mediaDefault = tv(e.mediaDefault), this._currentMediaIndices = [], tv(t ? e.baseOption : this._newBaseOption);
    }, getTimelineOption: function getTimelineOption(t) {
      var e,
          n = this._timelineOptions;if (n.length) {
        var i = t.getComponent("timeline");i && (e = tv(n[i.getCurrentIndex()], !0));
      }return e;
    }, getMediaOption: function getMediaOption() {
      var t = this._api.getWidth(),
          e = this._api.getHeight(),
          n = this._mediaList,
          i = this._mediaDefault,
          r = [],
          a = [];if (!n.length && !i) return a;for (var o = 0, s = n.length; s > o; o++) {
        Wo(n[o].query, t, e) && r.push(o);
      }return !r.length && i && (r = [-1]), r.length && !qo(r, this._currentMediaIndices) && (a = ev(r, function (t) {
        return tv(-1 === t ? i.option : n[t].option);
      })), this._currentMediaIndices = r, a;
    } };var rv = f,
      av = M,
      ov = ["areaStyle", "lineStyle", "nodeStyle", "linkStyle", "chordStyle", "label", "labelLine"],
      sv = function sv(t, e) {
    rv(Jo(t.series), function (t) {
      av(t) && Qo(t);
    });var n = ["xAxis", "yAxis", "radiusAxis", "angleAxis", "singleAxis", "parallelAxis", "radar"];e && n.push("valueAxis", "categoryAxis", "logAxis", "timeAxis"), rv(n, function (e) {
      rv(Jo(t[e]), function (t) {
        t && ($o(t, "axisLabel"), $o(t.axisPointer, "label"));
      });
    }), rv(Jo(t.parallel), function (t) {
      var e = t && t.parallelAxisDefault;$o(e, "axisLabel"), $o(e && e.axisPointer, "label");
    }), rv(Jo(t.calendar), function (t) {
      Yo(t, "itemStyle"), $o(t, "dayLabel"), $o(t, "monthLabel"), $o(t, "yearLabel");
    }), rv(Jo(t.radar), function (t) {
      $o(t, "name");
    }), rv(Jo(t.geo), function (t) {
      av(t) && (Ko(t), rv(Jo(t.regions), function (t) {
        Ko(t);
      }));
    }), rv(Jo(t.timeline), function (t) {
      Ko(t), Yo(t, "label"), Yo(t, "itemStyle"), Yo(t, "controlStyle", !0);var e = t.data;x(e) && f(e, function (t) {
        M(t) && (Yo(t, "label"), Yo(t, "itemStyle"));
      });
    }), rv(Jo(t.toolbox), function (t) {
      Yo(t, "iconStyle"), rv(t.feature, function (t) {
        Yo(t, "iconStyle");
      });
    }), $o(ts(t.axisPointer), "label"), $o(ts(t.tooltip).axisPointer, "label");
  },
      lv = [["x", "left"], ["y", "top"], ["x2", "right"], ["y2", "bottom"]],
      uv = ["grid", "geo", "parallel", "legend", "toolbox", "title", "visualMap", "dataZoom", "timeline"],
      hv = function hv(t, e) {
    sv(t, e), t.series = Pi(t.series), f(t.series, function (t) {
      if (M(t)) {
        var e = t.type;if (("pie" === e || "gauge" === e) && null != t.clockWise && (t.clockwise = t.clockWise), "gauge" === e) {
          var n = es(t, "pointer.color");null != n && ns(t, "itemStyle.normal.color", n);
        }is(t);
      }
    }), t.dataRange && (t.visualMap = t.dataRange), f(uv, function (e) {
      var n = t[e];n && (x(n) || (n = [n]), f(n, function (t) {
        is(t);
      }));
    });
  },
      cv = function cv(t) {
    var e = N();t.eachSeries(function (t) {
      var n = t.get("stack");if (n) {
        var i = e.get(n) || e.set(n, []),
            r = t.getData(),
            a = { stackResultDimension: r.getCalculationInfo("stackResultDimension"), stackedOverDimension: r.getCalculationInfo("stackedOverDimension"), stackedDimension: r.getCalculationInfo("stackedDimension"), stackedByDimension: r.getCalculationInfo("stackedByDimension"), isStackedByIndex: r.getCalculationInfo("isStackedByIndex"), data: r, seriesModel: t };if (!a.stackedDimension || !a.isStackedByIndex && !a.stackedByDimension) return;i.length && r.setCalculationInfo("stackedOnSeries", i[i.length - 1].seriesModel), i.push(a);
      }
    }), e.each(rs);
  },
      dv = as.prototype;dv.pure = !1, dv.persistent = !0, dv.getSource = function () {
    return this._source;
  };var fv = { arrayRows_column: { pure: !0, count: function count() {
        return Math.max(0, this._data.length - this._source.startIndex);
      }, getItem: function getItem(t) {
        return this._data[t + this._source.startIndex];
      }, appendData: ls }, arrayRows_row: { pure: !0, count: function count() {
        var t = this._data[0];return t ? Math.max(0, t.length - this._source.startIndex) : 0;
      }, getItem: function getItem(t) {
        t += this._source.startIndex;for (var e = [], n = this._data, i = 0; i < n.length; i++) {
          var r = n[i];e.push(r ? r[t] : null);
        }return e;
      }, appendData: function appendData() {
        throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
      } }, objectRows: { pure: !0, count: os, getItem: ss, appendData: ls }, keyedColumns: { pure: !0, count: function count() {
        var t = this._source.dimensionsDefine[0].name,
            e = this._data[t];return e ? e.length : 0;
      }, getItem: function getItem(t) {
        for (var e = [], n = this._source.dimensionsDefine, i = 0; i < n.length; i++) {
          var r = this._data[n[i].name];e.push(r ? r[t] : null);
        }return e;
      }, appendData: function appendData(t) {
        var e = this._data;f(t, function (t, n) {
          for (var i = e[n] || (e[n] = []), r = 0; r < (t || []).length; r++) {
            i.push(t[r]);
          }
        });
      } }, original: { count: os, getItem: ss, appendData: ls }, typedArray: { persistent: !1, pure: !0, count: function count() {
        return this._data ? this._data.length / this._dimSize : 0;
      }, getItem: function getItem(t, e) {
        t -= this._offset, e = e || [];for (var n = this._dimSize * t, i = 0; i < this._dimSize; i++) {
          e[i] = this._data[n + i];
        }return e;
      }, appendData: function appendData(t) {
        this._data = t;
      }, clean: function clean() {
        this._offset += this.count(), this._data = null;
      } } },
      pv = { arrayRows: us, objectRows: function objectRows(t, e, n, i) {
      return null != n ? t[i] : t;
    }, keyedColumns: us, original: function original(t, e, n) {
      var i = Oi(t);return null != n && i instanceof Array ? i[n] : i;
    }, typedArray: us },
      gv = { arrayRows: hs, objectRows: function objectRows(t, e) {
      return cs(t[e], this._dimensionInfos[e]);
    }, keyedColumns: hs, original: function original(t, e, n, i) {
      var r = t && (null == t.value ? t : t.value);return !this._rawData.pure && Ri(t) && (this.hasItemOption = !0), cs(r instanceof Array ? r[i] : r, this._dimensionInfos[e]);
    }, typedArray: function typedArray(t, e, n, i) {
      return t[i];
    } },
      vv = /\{@(.+?)\}/g,
      mv = { getDataParams: function getDataParams(t, e) {
      var n = this.getData(e),
          i = this.getRawValue(t, e),
          r = n.getRawIndex(t),
          a = n.getName(t),
          o = n.getRawDataItem(t),
          s = n.getItemVisual(t, "color");return { componentType: this.mainType, componentSubType: this.subType, seriesType: "series" === this.mainType ? this.subType : null, seriesIndex: this.seriesIndex, seriesId: this.id, seriesName: this.name, name: a, dataIndex: r, data: o, dataType: e, value: i, color: s, marker: ao(s), $vars: ["seriesName", "name", "value"] };
    }, getFormattedLabel: function getFormattedLabel(t, e, n, i, r) {
      e = e || "normal";var a = this.getData(n),
          o = a.getItemModel(t),
          s = this.getDataParams(t, n);null != i && s.value instanceof Array && (s.value = s.value[i]);var l = o.get("normal" === e ? [r || "label", "formatter"] : [e, r || "label", "formatter"]);if ("function" == typeof l) return s.status = e, l(s);if ("string" == typeof l) {
        var u = io(l, s);return u.replace(vv, function (e, n) {
          var i = n.length;return "[" === n.charAt(0) && "]" === n.charAt(i - 1) && (n = +n.slice(1, i - 1)), ds(a, t, n);
        });
      }
    }, getRawValue: function getRawValue(t, e) {
      return ds(this.getData(e), t);
    }, formatTooltip: function formatTooltip() {} },
      yv = ps.prototype;yv.perform = function (t) {
    function e(t) {
      return !(t >= 1) && (t = 1), t;
    }var n = this._upstream,
        i = t && t.skip;if (this._dirty && n) {
      var r = this.context;r.data = r.outputData = n.context.outputData;
    }this.__pipeline && (this.__pipeline.currentTask = this);var a;this._plan && !i && (a = this._plan(this.context));var o = e(this._modBy),
        s = this._modDataCount || 0,
        l = e(t && t.modBy),
        u = t && t.modDataCount || 0;(o !== l || s !== u) && (a = "reset");var h;(this._dirty || "reset" === a) && (this._dirty = !1, h = vs(this, i)), this._modBy = l, this._modDataCount = u;var c = t && t.step;if (this._dueEnd = n ? n._outputDueEnd : this._count ? this._count(this.context) : 1 / 0, this._progress) {
      var d = this._dueIndex,
          f = Math.min(null != c ? this._dueIndex + c : 1 / 0, this._dueEnd);if (!i && (h || f > d)) {
        var p = this._progress;if (x(p)) for (var g = 0; g < p.length; g++) {
          gs(this, p[g], d, f, l, u);
        } else gs(this, p, d, f, l, u);
      }this._dueIndex = f;var v = null != this._settedOutputEnd ? this._settedOutputEnd : f;this._outputDueEnd = v;
    } else this._dueIndex = this._outputDueEnd = null != this._settedOutputEnd ? this._settedOutputEnd : this._dueEnd;return this.unfinished();
  };var _v = function () {
    function t() {
      return n > i ? i++ : null;
    }function e() {
      var t = i % o * r + Math.ceil(i / o),
          e = i >= n ? null : a > t ? t : i;return i++, e;
    }var n,
        i,
        r,
        a,
        o,
        s = { reset: function reset(l, u, h, c) {
        i = l, n = u, r = h, a = c, o = Math.ceil(a / r), s.next = r > 1 && a > 0 ? e : t;
      } };return s;
  }();yv.dirty = function () {
    this._dirty = !0, this._onDirty && this._onDirty(this.context);
  }, yv.unfinished = function () {
    return this._progress && this._dueIndex < this._dueEnd;
  }, yv.pipe = function (t) {
    (this._downstream !== t || this._dirty) && (this._downstream = t, t._upstream = this, t.dirty());
  }, yv.dispose = function () {
    this._disposed || (this._upstream && (this._upstream._downstream = null), this._downstream && (this._downstream._upstream = null), this._dirty = !1, this._disposed = !0);
  }, yv.getUpstream = function () {
    return this._upstream;
  }, yv.getDownstream = function () {
    return this._downstream;
  }, yv.setOutputEnd = function (t) {
    this._outputDueEnd = this._settedOutputEnd = t;
  };var xv = Vi(),
      wv = Rg.extend({ type: "series.__base__", seriesIndex: 0, coordinateSystem: null, defaultOption: null, legendDataProvider: null, visualColorAccessPath: "itemStyle.color", layoutMode: null, init: function init(t, e, n) {
      this.seriesIndex = this.componentIndex, this.dataTask = fs({ count: _s, reset: xs }), this.dataTask.context = { model: this }, this.mergeDefaultAndTheme(t, n), Mo(this);var i = this.getInitialData(t, n);bs(i, this), this.dataTask.context.data = i, xv(this).dataBeforeProcessed = i, ms(this);
    }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {
      var n = this.layoutMode,
          i = n ? fo(t) : {},
          a = this.subType;Rg.hasClass(a) && (a += "Series"), r(t, e.getTheme().get(this.subType)), r(t, this.getDefaultOption()), Li(t, "label", ["show"]), this.fillDataTextStyle(t.data), n && co(t, i, n);
    }, mergeOption: function mergeOption(t, e) {
      t = r(this.option, t, !0), this.fillDataTextStyle(t.data);var n = this.layoutMode;n && co(this.option, t, n), Mo(this);var i = this.getInitialData(t, e);bs(i, this), this.dataTask.dirty(), this.dataTask.context.data = i, xv(this).dataBeforeProcessed = i, ms(this);
    }, fillDataTextStyle: function fillDataTextStyle(t) {
      if (t && !C(t)) for (var e = ["show"], n = 0; n < t.length; n++) {
        t[n] && t[n].label && Li(t[n], "label", e);
      }
    }, getInitialData: function getInitialData() {}, appendData: function appendData(t) {
      var e = this.getRawData();e.appendData(t.data);
    }, getData: function getData(t) {
      var e = Ss(this);if (e) {
        var n = e.context.data;return null == t ? n : n.getLinkedData(t);
      }return xv(this).data;
    }, setData: function setData(t) {
      var e = Ss(this);if (e) {
        var n = e.context;n.data !== t && e.modifyOutputEnd && e.setOutputEnd(t.count()), n.outputData = t, e !== this.dataTask && (n.data = t);
      }xv(this).data = t;
    }, getSource: function getSource() {
      return wo(this);
    }, getRawData: function getRawData() {
      return xv(this).dataBeforeProcessed;
    }, getBaseAxis: function getBaseAxis() {
      var t = this.coordinateSystem;return t && t.getBaseAxis && t.getBaseAxis();
    }, formatTooltip: function formatTooltip(t, e) {
      function n(n) {
        function i(t, n) {
          var i = r.getDimensionInfo(n);if (i && i.otherDims.tooltip !== !1) {
            var a = i.type,
                l = ao({ color: u, type: "subItem" }),
                h = (o ? l + no(i.displayName || "-") + ": " : "") + no("ordinal" === a ? t + "" : "time" === a ? e ? "" : so("yyyy/MM/dd hh:mm:ss", t) : to(t));h && s.push(h);
          }
        }var o = g(n, function (t, e, n) {
          var i = r.getDimensionInfo(n);return t |= i && i.tooltip !== !1 && null != i.displayName;
        }, 0),
            s = [];return a.length ? f(a, function (e) {
          i(ds(r, t, e), e);
        }) : f(n, i), (o ? "<br/>" : "") + s.join(o ? "<br/>" : ", ");
      }function i(t) {
        return no(to(t));
      }var r = this.getData(),
          a = r.mapDimension("defaultedTooltip", !0),
          o = a.length,
          s = this.getRawValue(t),
          l = x(s),
          u = r.getItemVisual(t, "color");M(u) && u.colorStops && (u = (u.colorStops[0] || {}).color), u = u || "transparent";var h = o > 1 || l && !o ? n(s) : i(o ? ds(r, t, a[0]) : l ? s[0] : s),
          c = ao(u),
          d = r.getName(t),
          p = this.name;return zi(this) || (p = ""), p = p ? no(p) + (e ? ": " : "<br/>") : "", e ? c + p + h : p + c + (d ? no(d) + ": " + h : h);
    }, isAnimationEnabled: function isAnimationEnabled() {
      if (bc.node) return !1;var t = this.getShallow("animation");return t && this.getData().count() > this.getShallow("animationThreshold") && (t = !1), t;
    }, restoreData: function restoreData() {
      this.dataTask.dirty();
    }, getColorFromPalette: function getColorFromPalette(t, e, n) {
      var i = this.ecModel,
          r = Ng.getColorFromPalette.call(this, t, e, n);return r || (r = i.getColorFromPalette(t, e, n)), r;
    }, coordDimToDataDim: function coordDimToDataDim(t) {
      return this.getRawData().mapDimension(t, !0);
    }, getProgressive: function getProgressive() {
      return this.get("progressive");
    }, getProgressiveThreshold: function getProgressiveThreshold() {
      return this.get("progressiveThreshold");
    }, getAxisTooltipData: null, getTooltipPosition: null, pipeTask: null, preventIncremental: null, pipelineContext: null });c(wv, mv), c(wv, Ng);var bv = function bv() {
    this.group = new Cd(), this.uid = Oa("viewComponent");
  };bv.prototype = { constructor: bv, init: function init() {}, render: function render() {}, dispose: function dispose() {} };var Mv = bv.prototype;Mv.updateView = Mv.updateLayout = Mv.updateVisual = function () {}, Xi(bv), Ki(bv, { registerWhenExtend: !0 });var Sv = function Sv() {
    var t = Vi();return function (e) {
      var n = t(e),
          i = e.pipelineContext,
          r = n.large,
          a = n.progressiveRender,
          o = n.large = i.large,
          s = n.progressiveRender = i.progressiveRender;return !!(r ^ o || a ^ s) && "reset";
    };
  },
      Cv = Vi(),
      Iv = Sv();Cs.prototype = { type: "chart", init: function init() {}, render: function render() {}, highlight: function highlight(t, e, n, i) {
      Ts(t.getData(), i, "emphasis");
    }, downplay: function downplay(t, e, n, i) {
      Ts(t.getData(), i, "normal");
    }, remove: function remove() {
      this.group.removeAll();
    }, dispose: function dispose() {}, incrementalPrepareRender: null, incrementalRender: null, updateTransform: null };var Tv = Cs.prototype;Tv.updateView = Tv.updateLayout = Tv.updateVisual = function (t, e, n, i) {
    this.render(t, e, n, i);
  }, Xi(Cs, ["dispose"]), Ki(Cs, { registerWhenExtend: !0 }), Cs.markUpdateMethod = function (t, e) {
    Cv(t).updateMethod = e;
  };var kv = { incrementalPrepareRender: { progress: function progress(t, e) {
        e.view.incrementalRender(t, e.model, e.ecModel, e.api, e.payload);
      } }, render: { forceFirstProgress: !0, progress: function progress(t, e) {
        e.view.render(e.model, e.ecModel, e.api, e.payload);
      } } },
      Dv = { createOnAllSeries: !0, performRawSeries: !0, reset: function reset(t, e) {
      var n = t.getData(),
          i = (t.visualColorAccessPath || "itemStyle.color").split("."),
          r = t.get(i) || t.getColorFromPalette(t.name, null, e.getSeriesCount());if (n.setVisual("color", r), !e.isSeriesFiltered(t)) {
        "function" != typeof r || r instanceof Jp || n.each(function (e) {
          n.setItemVisual(e, "color", r(t.getDataParams(e)));
        });var a = function a(t, e) {
          var n = t.getItemModel(e),
              r = n.get(i, !0);null != r && t.setItemVisual(e, "color", r);
        };return { dataEach: n.hasItemOption ? a : null };
      }
    } },
      Av = { toolbox: { brush: { title: { rect: "矩形选择", polygon: "圈选", lineX: "横向选择", lineY: "纵向选择", keep: "保持选择", clear: "清除选择" } }, dataView: { title: "数据视图", lang: ["数据视图", "关闭", "刷新"] }, dataZoom: { title: { zoom: "区域缩放", back: "区域缩放还原" } }, magicType: { title: { line: "切换为折线图", bar: "切换为柱状图", stack: "切换为堆叠", tiled: "切换为平铺" } }, restore: { title: "还原" }, saveAsImage: { title: "保存为图片", lang: ["右键另存为图片"] } }, series: { typeNames: { pie: "饼图", bar: "柱状图", line: "折线图", scatter: "散点图", effectScatter: "涟漪散点图", radar: "雷达图", tree: "树图", treemap: "矩形树图", boxplot: "箱型图", candlestick: "K线图", k: "K线图", heatmap: "热力图", map: "地图", parallel: "平行坐标图", lines: "线图", graph: "关系图", sankey: "桑基图", funnel: "漏斗图", gauge: "仪表盘图", pictorialBar: "象形柱图", themeRiver: "主题河流图", sunburst: "旭日图" } }, aria: { general: { withTitle: "这是一个关于“{title}”的图表。", withoutTitle: "这是一个图表，" }, series: { single: { prefix: "", withName: "图表类型是{seriesType}，表示{seriesName}。", withoutName: "图表类型是{seriesType}。" }, multiple: { prefix: "它由{seriesCount}个图表系列组成。", withName: "第{seriesId}个系列是一个表示{seriesName}的{seriesType}，", withoutName: "第{seriesId}个系列是一个{seriesType}，", separator: { middle: "；", end: "。" } } }, data: { allData: "其数据是——", partialData: "其中，前{displayCnt}项是——", withName: "{name}的数据是{value}", withoutName: "{value}", separator: { middle: "，", end: "" } } } },
      Pv = function Pv(t, e) {
    function n(t, e) {
      if ("string" != typeof t) return t;var n = t;return f(e, function (t, e) {
        n = n.replace(new RegExp("\\{\\s*" + e + "\\s*\\}", "g"), t);
      }), n;
    }function i(t) {
      var e = o.get(t);if (null == e) {
        for (var n = t.split("."), i = Av.aria, r = 0; r < n.length; ++r) {
          i = i[n[r]];
        }return i;
      }return e;
    }function r() {
      var t = e.getModel("title").option;return t && t.length && (t = t[0]), t && t.text;
    }function a(t) {
      return Av.series.typeNames[t] || "自定义图";
    }var o = e.getModel("aria");if (o.get("show")) {
      if (o.get("description")) return void t.setAttribute("aria-label", o.get("description"));var s = 0;e.eachSeries(function () {
        ++s;
      }, this);var l,
          u = o.get("data.maxCount") || 10,
          h = o.get("series.maxCount") || 10,
          c = Math.min(s, h);if (!(1 > s)) {
        var d = r();l = d ? n(i("general.withTitle"), { title: d }) : i("general.withoutTitle");var p = [],
            g = s > 1 ? "series.multiple.prefix" : "series.single.prefix";l += n(i(g), { seriesCount: s }), e.eachSeries(function (t, e) {
          if (c > e) {
            var r,
                o = t.get("name"),
                l = "series." + (s > 1 ? "multiple" : "single") + ".";r = i(o ? l + "withName" : l + "withoutName"), r = n(r, { seriesId: t.seriesIndex, seriesName: t.get("name"), seriesType: a(t.subType) });var h = t.getData();window.data = h, r += h.count() > u ? n(i("data.partialData"), { displayCnt: u }) : i("data.allData");for (var d = [], f = 0; f < h.count(); f++) {
              if (u > f) {
                var g = h.getName(f),
                    v = ds(h, f);d.push(n(i(g ? "data.withName" : "data.withoutName"), { name: g, value: v }));
              }
            }r += d.join(i("data.separator.middle")) + i("data.separator.end"), p.push(r);
          }
        }), l += p.join(i("series.multiple.separator.middle")) + i("series.multiple.separator.end"), t.setAttribute("aria-label", l);
      }
    }
  },
      Lv = Math.PI,
      Ov = function Ov(t, e) {
    e = e || {}, s(e, { text: "loading", color: "#c23531", textColor: "#000", maskColor: "rgba(255, 255, 255, 0.8)", zlevel: 0 });var n = new Xp({ style: { fill: e.maskColor }, zlevel: e.zlevel, z: 1e4 }),
        i = new Kp({ shape: { startAngle: -Lv / 2, endAngle: -Lv / 2 + .1, r: 10 }, style: { stroke: e.color, lineCap: "round", lineWidth: 5 }, zlevel: e.zlevel, z: 10001 }),
        r = new Xp({ style: { fill: "none", text: e.text, textPosition: "right", textDistance: 10, textFill: e.textColor }, zlevel: e.zlevel, z: 10001 });i.animateShape(!0).when(1e3, { endAngle: 3 * Lv / 2 }).start("circularInOut"), i.animateShape(!0).when(1e3, { startAngle: 3 * Lv / 2 }).delay(300).start("circularInOut");var a = new Cd();return a.add(i), a.add(r), a.add(n), a.resize = function () {
      var e = t.getWidth() / 2,
          a = t.getHeight() / 2;i.setShape({ cx: e, cy: a });var o = i.shape.r;r.setShape({ x: e - o, y: a - o, width: 2 * o, height: 2 * o }), n.setShape({ x: 0, y: 0, width: t.getWidth(), height: t.getHeight() });
    }, a.resize(), a;
  },
      Rv = Ps.prototype;Rv.restoreData = function (t, e) {
    t.restoreData(e), this._stageTaskMap.each(function (t) {
      var e = t.overallTask;e && e.dirty();
    });
  }, Rv.getPerformArgs = function (t, e) {
    if (t.__pipeline) {
      var n = this._pipelineMap.get(t.__pipeline.id),
          i = n.context,
          r = !e && n.progressiveEnabled && (!i || i.progressiveRender) && t.__idxInPipeline > n.blockIndex,
          a = r ? n.step : null,
          o = i && i.modDataCount,
          s = null != o ? Math.ceil(o / a) : null;return { step: a, modBy: s, modDataCount: o };
    }
  }, Rv.getPipeline = function (t) {
    return this._pipelineMap.get(t);
  }, Rv.updateStreamModes = function (t, e) {
    var n = this._pipelineMap.get(t.uid),
        i = t.getData(),
        r = i.count(),
        a = n.progressiveEnabled && e.incrementalPrepareRender && r >= n.threshold,
        o = t.get("large") && r >= t.get("largeThreshold"),
        s = "mod" === t.get("progressiveChunkMode") ? r : null;t.pipelineContext = n.context = { progressiveRender: a, modDataCount: s, large: o };
  }, Rv.restorePipelines = function (t) {
    var e = this,
        n = e._pipelineMap = N();t.eachSeries(function (t) {
      var i = t.getProgressive(),
          r = t.uid;n.set(r, { id: r, head: null, tail: null, threshold: t.getProgressiveThreshold(), progressiveEnabled: i && !(t.preventIncremental && t.preventIncremental()), blockIndex: -1, step: Math.round(i || 700), count: 0 }), Ws(e, t, t.dataTask);
    });
  }, Rv.prepareStageTasks = function () {
    var t = this._stageTaskMap,
        e = this.ecInstance.getModel(),
        n = this.api;f(this._allHandlers, function (i) {
      var r = t.get(i.uid) || t.set(i.uid, []);i.reset && Os(this, i, r, e, n), i.overallReset && Rs(this, i, r, e, n);
    }, this);
  }, Rv.prepareView = function (t, e, n, i) {
    var r = t.renderTask,
        a = r.context;a.model = e, a.ecModel = n, a.api = i, r.__block = !t.incrementalPrepareRender, Ws(this, e, r);
  }, Rv.performDataProcessorTasks = function (t, e) {
    Ls(this, this._dataProcessorHandlers, t, e, { block: !0 });
  }, Rv.performVisualTasks = function (t, e, n) {
    Ls(this, this._visualHandlers, t, e, n);
  }, Rv.performSeriesTasks = function (t) {
    var e;t.eachSeries(function (t) {
      e |= t.dataTask.perform();
    }), this.unfinished |= e;
  }, Rv.plan = function () {
    this._pipelineMap.each(function (t) {
      var e = t.tail;do {
        if (e.__block) {
          t.blockIndex = e.__idxInPipeline;break;
        }e = e.getUpstream();
      } while (e);
    });
  };var Ev = Rv.updatePayload = function (t, e) {
    "remain" !== e && (t.context.payload = e);
  },
      Bv = Gs(0);Ps.wrapStageHandler = function (t, e) {
    return w(t) && (t = { overallReset: t, seriesType: js(t) }), t.uid = Oa("stageHandler"), e && (t.visualType = e), t;
  };var zv,
      Nv = {},
      Fv = {};qs(Nv, $g), qs(Fv, Fo), Nv.eachSeriesByType = Nv.eachRawSeriesByType = function (t) {
    zv = t;
  }, Nv.eachComponent = function (t) {
    "series" === t.mainType && t.subType && (zv = t.subType);
  };var Vv = ["#37A2DA", "#32C5E9", "#67E0E3", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#E062AE", "#E690D1", "#e7bcf3", "#9d96f5", "#8378EA", "#96BFFF"],
      Gv = { color: Vv, colorLayer: [["#37A2DA", "#ffd85c", "#fd7b5f"], ["#37A2DA", "#67E0E3", "#FFDB5C", "#ff9f7f", "#E062AE", "#9d96f5"], ["#37A2DA", "#32C5E9", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#e7bcf3", "#8378EA", "#96BFFF"], Vv] },
      Hv = "#eee",
      Wv = function Wv() {
    return { axisLine: { lineStyle: { color: Hv } }, axisTick: { lineStyle: { color: Hv } }, axisLabel: { textStyle: { color: Hv } }, splitLine: { lineStyle: { type: "dashed", color: "#aaa" } }, splitArea: { areaStyle: { color: Hv } } };
  },
      jv = ["#dd6b66", "#759aa0", "#e69d87", "#8dc1a9", "#ea7e53", "#eedd78", "#73a373", "#73b9bc", "#7289ab", "#91ca8c", "#f49f42"],
      qv = { color: jv, backgroundColor: "#333", tooltip: { axisPointer: { lineStyle: { color: Hv }, crossStyle: { color: Hv } } }, legend: { textStyle: { color: Hv } }, textStyle: { color: Hv }, title: { textStyle: { color: Hv } }, toolbox: { iconStyle: { normal: { borderColor: Hv } } }, dataZoom: { textStyle: { color: Hv } }, visualMap: { textStyle: { color: Hv } }, timeline: { lineStyle: { color: Hv }, itemStyle: { normal: { color: jv[1] } }, label: { normal: { textStyle: { color: Hv } } }, controlStyle: { normal: { color: Hv, borderColor: Hv } } }, timeAxis: Wv(), logAxis: Wv(), valueAxis: Wv(), categoryAxis: Wv(), line: { symbol: "circle" }, graph: { color: jv }, gauge: { title: { textStyle: { color: Hv } } }, candlestick: { itemStyle: { normal: { color: "#FD1050", color0: "#0CF49B", borderColor: "#FD1050", borderColor0: "#0CF49B" } } } };qv.categoryAxis.splitLine.show = !1, Rg.extend({ type: "dataset", defaultOption: { seriesLayoutBy: Ug, sourceHeader: null, dimensions: null, source: null }, optionUpdated: function optionUpdated() {
      xo(this);
    } }), bv.extend({ type: "dataset" });var Uv = O,
      Xv = f,
      Yv = w,
      Zv = M,
      $v = Rg.parseClassType,
      Kv = "4.1.0",
      Qv = { zrender: "4.0.4" },
      Jv = 1,
      tm = 1e3,
      em = 5e3,
      nm = 1e3,
      im = 2e3,
      rm = 3e3,
      am = 4e3,
      om = 5e3,
      sm = { PROCESSOR: { FILTER: tm, STATISTIC: em }, VISUAL: { LAYOUT: nm, GLOBAL: im, CHART: rm, COMPONENT: am, BRUSH: om } },
      lm = "__flagInMainProcess",
      um = "__optionUpdated",
      hm = /^[a-zA-Z0-9_]+$/;Xs.prototype.on = Us("on"), Xs.prototype.off = Us("off"), Xs.prototype.one = Us("one"), c(Xs, jc);var cm = Ys.prototype;cm._onframe = function () {
    if (!this._disposed) {
      var t = this._scheduler;if (this[um]) {
        var e = this[um].silent;this[lm] = !0, $s(this), dm.update.call(this), this[lm] = !1, this[um] = !1, tl.call(this, e), el.call(this, e);
      } else if (t.unfinished) {
        var n = Jv,
            i = this._model,
            r = this._api;t.unfinished = !1;do {
          var a = +new Date();t.performSeriesTasks(i), t.performDataProcessorTasks(i), Qs(this, i), t.performVisualTasks(i), sl(this, this._model, r, "remain"), n -= +new Date() - a;
        } while (n > 0 && t.unfinished);t.unfinished || this._zr.flush();
      }
    }
  }, cm.getDom = function () {
    return this._dom;
  }, cm.getZr = function () {
    return this._zr;
  }, cm.setOption = function (t, e, n) {
    var i;if (Zv(e) && (n = e.lazyUpdate, i = e.silent, e = e.notMerge), this[lm] = !0, !this._model || e) {
      var r = new Go(this._api),
          a = this._theme,
          o = this._model = new $g(null, null, a, r);o.scheduler = this._scheduler, o.init(null, null, a, r);
    }this._model.setOption(t, mm), n ? (this[um] = { silent: i }, this[lm] = !1) : ($s(this), dm.update.call(this), this._zr.flush(), this[um] = !1, this[lm] = !1, tl.call(this, i), el.call(this, i));
  }, cm.setTheme = function () {
    console.log("ECharts#setTheme() is DEPRECATED in ECharts 3.0");
  }, cm.getModel = function () {
    return this._model;
  }, cm.getOption = function () {
    return this._model && this._model.getOption();
  }, cm.getWidth = function () {
    return this._zr.getWidth();
  }, cm.getHeight = function () {
    return this._zr.getHeight();
  }, cm.getDevicePixelRatio = function () {
    return this._zr.painter.dpr || window.devicePixelRatio || 1;
  }, cm.getRenderedCanvas = function (t) {
    if (bc.canvasSupported) {
      t = t || {}, t.pixelRatio = t.pixelRatio || 1, t.backgroundColor = t.backgroundColor || this._model.get("backgroundColor");var e = this._zr;return e.painter.getRenderedCanvas(t);
    }
  }, cm.getSvgDataUrl = function () {
    if (bc.svgSupported) {
      var t = this._zr,
          e = t.storage.getDisplayList();return f(e, function (t) {
        t.stopAnimation(!0);
      }), t.painter.pathToDataUrl();
    }
  }, cm.getDataURL = function (t) {
    t = t || {};var e = t.excludeComponents,
        n = this._model,
        i = [],
        r = this;Xv(e, function (t) {
      n.eachComponent({ mainType: t }, function (t) {
        var e = r._componentsMap[t.__viewId];e.group.ignore || (i.push(e), e.group.ignore = !0);
      });
    });var a = "svg" === this._zr.painter.getType() ? this.getSvgDataUrl() : this.getRenderedCanvas(t).toDataURL("image/" + (t && t.type || "png"));return Xv(i, function (t) {
      t.group.ignore = !1;
    }), a;
  }, cm.getConnectedDataURL = function (t) {
    if (bc.canvasSupported) {
      var e = this.group,
          n = Math.min,
          r = Math.max,
          a = 1 / 0;if (Mm[e]) {
        var o = a,
            s = a,
            l = -a,
            u = -a,
            h = [],
            c = t && t.pixelRatio || 1;f(bm, function (a) {
          if (a.group === e) {
            var c = a.getRenderedCanvas(i(t)),
                d = a.getDom().getBoundingClientRect();o = n(d.left, o), s = n(d.top, s), l = r(d.right, l), u = r(d.bottom, u), h.push({ dom: c, left: d.left, top: d.top });
          }
        }), o *= c, s *= c, l *= c, u *= c;var d = l - o,
            p = u - s,
            g = Oc();g.width = d, g.height = p;var v = Ii(g);return Xv(h, function (t) {
          var e = new ai({ style: { x: t.left * c - o, y: t.top * c - s, image: t.dom } });v.add(e);
        }), v.refreshImmediately(), g.toDataURL("image/" + (t && t.type || "png"));
      }return this.getDataURL(t);
    }
  }, cm.convertToPixel = _(Zs, "convertToPixel"), cm.convertFromPixel = _(Zs, "convertFromPixel"), cm.containPixel = function (t, e) {
    var n,
        i = this._model;return t = Gi(i, t), f(t, function (t, i) {
      i.indexOf("Models") >= 0 && f(t, function (t) {
        var r = t.coordinateSystem;if (r && r.containPoint) n |= !!r.containPoint(e);else if ("seriesModels" === i) {
          var a = this._chartsMap[t.__viewId];a && a.containPoint && (n |= a.containPoint(e, t));
        }
      }, this);
    }, this), !!n;
  }, cm.getVisual = function (t, e) {
    var n = this._model;t = Gi(n, t, { defaultMainType: "series" });var i = t.seriesModel,
        r = i.getData(),
        a = t.hasOwnProperty("dataIndexInside") ? t.dataIndexInside : t.hasOwnProperty("dataIndex") ? r.indexOfRawIndex(t.dataIndex) : null;return null != a ? r.getItemVisual(a, e) : r.getVisual(e);
  }, cm.getViewOfComponentModel = function (t) {
    return this._componentsMap[t.__viewId];
  }, cm.getViewOfSeriesModel = function (t) {
    return this._chartsMap[t.__viewId];
  };var dm = { prepareAndUpdate: function prepareAndUpdate(t) {
      $s(this), dm.update.call(this, t);
    }, update: function update(t) {
      var e = this._model,
          n = this._api,
          i = this._zr,
          r = this._coordSysMgr,
          a = this._scheduler;if (e) {
        a.restoreData(e, t), a.performSeriesTasks(e), r.create(e, n), a.performDataProcessorTasks(e, t), Qs(this, e), r.update(e, n), rl(e), a.performVisualTasks(e, t), al(this, e, n, t);var o = e.get("backgroundColor") || "transparent";if (bc.canvasSupported) i.setBackgroundColor(o);else {
          var s = Re(o);o = We(s, "rgb"), 0 === s[3] && (o = "transparent");
        }ll(e, n);
      }
    }, updateTransform: function updateTransform(t) {
      var e = this._model,
          n = this,
          i = this._api;if (e) {
        var r = [];e.eachComponent(function (a, o) {
          var s = n.getViewOfComponentModel(o);if (s && s.__alive) if (s.updateTransform) {
            var l = s.updateTransform(o, e, i, t);l && l.update && r.push(s);
          } else r.push(s);
        });var a = N();e.eachSeries(function (r) {
          var o = n._chartsMap[r.__viewId];if (o.updateTransform) {
            var s = o.updateTransform(r, e, i, t);s && s.update && a.set(r.uid, 1);
          } else a.set(r.uid, 1);
        }), rl(e), this._scheduler.performVisualTasks(e, t, { setDirty: !0, dirtyMap: a }), sl(n, e, i, t, a), ll(e, this._api);
      }
    }, updateView: function updateView(t) {
      var e = this._model;e && (Cs.markUpdateMethod(t, "updateView"), rl(e), this._scheduler.performVisualTasks(e, t, { setDirty: !0 }), al(this, this._model, this._api, t), ll(e, this._api));
    }, updateVisual: function updateVisual(t) {
      dm.update.call(this, t);
    }, updateLayout: function updateLayout(t) {
      dm.update.call(this, t);
    } };cm.resize = function (t) {
    this._zr.resize(t);var e = this._model;if (this._loadingFX && this._loadingFX.resize(), e) {
      var n = e.resetOption("media"),
          i = t && t.silent;this[lm] = !0, n && $s(this), dm.update.call(this), this[lm] = !1, tl.call(this, i), el.call(this, i);
    }
  }, cm.showLoading = function (t, e) {
    if (Zv(t) && (e = t, t = ""), t = t || "default", this.hideLoading(), wm[t]) {
      var n = wm[t](this._api, e),
          i = this._zr;this._loadingFX = n, i.add(n);
    }
  }, cm.hideLoading = function () {
    this._loadingFX && this._zr.remove(this._loadingFX), this._loadingFX = null;
  }, cm.makeActionFromEvent = function (t) {
    var e = o({}, t);return e.type = gm[t.type], e;
  }, cm.dispatchAction = function (t, e) {
    if (Zv(e) || (e = { silent: !!e }), pm[t.type] && this._model) {
      if (this[lm]) return void this._pendingActions.push(t);Js.call(this, t, e.silent), e.flush ? this._zr.flush(!0) : e.flush !== !1 && bc.browser.weChat && this._throttledZrFlush(), tl.call(this, e.silent), el.call(this, e.silent);
    }
  }, cm.appendData = function (t) {
    var e = t.seriesIndex,
        n = this.getModel(),
        i = n.getSeriesByIndex(e);i.appendData(t), this._scheduler.unfinished = !0;
  }, cm.on = Us("on"), cm.off = Us("off"), cm.one = Us("one");var fm = ["click", "dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "mouseup", "globalout", "contextmenu"];cm._initEvents = function () {
    Xv(fm, function (t) {
      this._zr.on(t, function (e) {
        var n,
            i = this.getModel(),
            r = e.target;if ("globalout" === t) n = {};else if (r && null != r.dataIndex) {
          var a = r.dataModel || i.getSeriesByIndex(r.seriesIndex);n = a && a.getDataParams(r.dataIndex, r.dataType) || {};
        } else r && r.eventData && (n = o({}, r.eventData));n && (n.event = e, n.type = t, this.trigger(t, n));
      }, this);
    }, this), Xv(gm, function (t, e) {
      this._messageCenter.on(e, function (t) {
        this.trigger(e, t);
      }, this);
    }, this);
  }, cm.isDisposed = function () {
    return this._disposed;
  }, cm.clear = function () {
    this.setOption({ series: [] }, !0);
  }, cm.dispose = function () {
    if (!this._disposed) {
      this._disposed = !0, Wi(this.getDom(), Im, "");var t = this._api,
          e = this._model;Xv(this._componentsViews, function (n) {
        n.dispose(e, t);
      }), Xv(this._chartsViews, function (n) {
        n.dispose(e, t);
      }), this._zr.dispose(), delete bm[this.id];
    }
  }, c(Ys, jc);var pm = {},
      gm = {},
      vm = [],
      mm = [],
      ym = [],
      _m = [],
      xm = {},
      wm = {},
      bm = {},
      Mm = {},
      Sm = new Date() - 0,
      Cm = new Date() - 0,
      Im = "_echarts_instance_",
      Tm = {},
      km = vl;kl(im, Dv), wl(hv), bl(em, cv), Al("default", Ov), Sl({ type: "highlight", event: "highlight", update: "highlight" }, V), Sl({ type: "downplay", event: "downplay", update: "downplay" }, V), xl("light", Gv), xl("dark", qv);var Dm = {};Fl.prototype = { constructor: Fl, add: function add(t) {
      return this._add = t, this;
    }, update: function update(t) {
      return this._update = t, this;
    }, remove: function remove(t) {
      return this._remove = t, this;
    }, execute: function execute() {
      var t,
          e = this._old,
          n = this._new,
          i = {},
          r = {},
          a = [],
          o = [];for (Vl(e, i, a, "_oldKeyGetter", this), Vl(n, r, o, "_newKeyGetter", this), t = 0; t < e.length; t++) {
        var s = a[t],
            l = r[s];if (null != l) {
          var u = l.length;u ? (1 === u && (r[s] = null), l = l.unshift()) : r[s] = null, this._update && this._update(l, t);
        } else this._remove && this._remove(t);
      }for (var t = 0; t < o.length; t++) {
        var s = o[t];if (r.hasOwnProperty(s)) {
          var l = r[s];if (null == l) continue;if (l.length) for (var h = 0, u = l.length; u > h; h++) {
            this._add && this._add(l[h]);
          } else this._add && this._add(l);
        }
      }
    } };var Am = N(["tooltip", "label", "itemName", "itemId", "seriesName"]),
      Pm = M,
      Lm = "undefined",
      Om = "e\x00\x00",
      Rm = { "float": (typeof Float64Array === "undefined" ? "undefined" : _typeof(Float64Array)) === Lm ? Array : Float64Array, "int": (typeof Int32Array === "undefined" ? "undefined" : _typeof(Int32Array)) === Lm ? Array : Int32Array, ordinal: Array, number: Array, time: Array },
      Em = (typeof Uint32Array === "undefined" ? "undefined" : _typeof(Uint32Array)) === Lm ? Array : Uint32Array,
      Bm = (typeof Uint16Array === "undefined" ? "undefined" : _typeof(Uint16Array)) === Lm ? Array : Uint16Array,
      zm = ["hasItemOption", "_nameList", "_idList", "_invertedIndicesMap", "_rawData", "_chunkSize", "_chunkCount", "_dimValueGetter", "_count", "_rawCount", "_nameDimIdx", "_idDimIdx"],
      Nm = ["_extent", "_approximateExtent", "_rawExtent"],
      Fm = function Fm(t, e) {
    t = t || ["x", "y"];for (var n = {}, i = [], r = {}, a = 0; a < t.length; a++) {
      var o = t[a];b(o) && (o = { name: o });var s = o.name;o.type = o.type || "float", o.coordDim || (o.coordDim = s, o.coordDimIndex = 0), o.otherDims = o.otherDims || {}, i.push(s), n[s] = o, o.index = a, o.createInvertedIndices && (r[s] = []);
    }this.dimensions = i, this._dimensionInfos = n, this.hostModel = e, this.dataType, this._indices = null, this._count = 0, this._rawCount = 0, this._storage = {}, this._nameList = [], this._idList = [], this._optionModels = [], this._visual = {}, this._layout = {}, this._itemVisuals = [], this.hasItemVisual = {}, this._itemLayouts = [], this._graphicEls = [], this._chunkSize = 1e5, this._chunkCount = 0, this._rawData, this._rawExtent = {}, this._extent = {}, this._approximateExtent = {}, this._dimensionsSummary = Gl(this), this._invertedIndicesMap = r, this._calculationInfo = {};
  },
      Vm = Fm.prototype;Vm.type = "list", Vm.hasItemOption = !0, Vm.getDimension = function (t) {
    return isNaN(t) || (t = this.dimensions[t] || t), t;
  }, Vm.getDimensionInfo = function (t) {
    return this._dimensionInfos[this.getDimension(t)];
  }, Vm.getDimensionsOnCoord = function () {
    return this._dimensionsSummary.dataDimsOnCoord.slice();
  }, Vm.mapDimension = function (t, e) {
    var n = this._dimensionsSummary;if (null == e) return n.encodeFirstDimNotExtra[t];var i = n.encode[t];return e === !0 ? (i || []).slice() : i && i[e];
  }, Vm.initData = function (t, e, n) {
    var i = _o.isInstance(t) || d(t);i && (t = new as(t, this.dimensions.length)), this._rawData = t, this._storage = {}, this._indices = null, this._nameList = e || [], this._idList = [], this._nameRepeatCount = {}, n || (this.hasItemOption = !1), this.defaultDimValueGetter = gv[this._rawData.getSource().sourceFormat], this._dimValueGetter = n = n || this.defaultDimValueGetter, this._rawExtent = {}, this._initDataFromProvider(0, t.count()), t.pure && (this.hasItemOption = !1);
  }, Vm.getProvider = function () {
    return this._rawData;
  }, Vm.appendData = function (t) {
    var e = this._rawData,
        n = this.count();e.appendData(t);var i = e.count();e.persistent || (i += n), this._initDataFromProvider(n, i);
  }, Vm._initDataFromProvider = function (t, e) {
    if (!(t >= e)) {
      for (var n, i = this._chunkSize, r = this._rawData, a = this._storage, o = this.dimensions, s = o.length, l = this._dimensionInfos, u = this._nameList, h = this._idList, c = this._rawExtent, d = this._nameRepeatCount = {}, f = this._chunkCount, p = f - 1, g = 0; s > g; g++) {
        var v = o[g];c[v] || (c[v] = eu());var m = l[v];0 === m.otherDims.itemName && (n = this._nameDimIdx = g), 0 === m.otherDims.itemId && (this._idDimIdx = g);var y = Rm[m.type];a[v] || (a[v] = []);var _ = a[v][p];if (_ && _.length < i) {
          for (var x = new y(Math.min(e - p * i, i)), w = 0; w < _.length; w++) {
            x[w] = _[w];
          }a[v][p] = x;
        }for (var b = f * i; e > b; b += i) {
          a[v].push(new y(Math.min(e - b, i)));
        }this._chunkCount = a[v].length;
      }for (var M = new Array(s), S = t; e > S; S++) {
        M = r.getItem(S, M);for (var C = Math.floor(S / i), I = S % i, b = 0; s > b; b++) {
          var v = o[b],
              T = a[v][C],
              k = this._dimValueGetter(M, v, S, b);T[I] = k;var D = c[v];k < D[0] && (D[0] = k), k > D[1] && (D[1] = k);
        }if (!r.pure) {
          var A = u[S];if (M && null == A) if (null != M.name) u[S] = A = M.name;else if (null != n) {
            var P = o[n],
                L = a[P][C];if (L) {
              A = L[I];var O = l[P].ordinalMeta;O && O.categories.length && (A = O.categories[A]);
            }
          }var R = null == M ? null : M.id;null == R && null != A && (d[A] = d[A] || 0, R = A, d[A] > 0 && (R += "__ec__" + d[A]), d[A]++), null != R && (h[S] = R);
        }
      }!r.persistent && r.clean && r.clean(), this._rawCount = this._count = e, this._extent = {}, Xl(this);
    }
  }, Vm.count = function () {
    return this._count;
  }, Vm.getIndices = function () {
    var t,
        e = this._indices;if (e) {
      var n = e.constructor,
          i = this._count;if (n === Array) {
        t = new n(i);for (var r = 0; i > r; r++) {
          t[r] = e[r];
        }
      } else t = new n(e.buffer, 0, i);
    } else for (var n = jl(this), t = new n(this.count()), r = 0; r < t.length; r++) {
      t[r] = r;
    }return t;
  }, Vm.get = function (t, e) {
    if (!(e >= 0 && e < this._count)) return 0 / 0;var n = this._storage;if (!n[t]) return 0 / 0;e = this.getRawIndex(e);var i = Math.floor(e / this._chunkSize),
        r = e % this._chunkSize,
        a = n[t][i],
        o = a[r];return o;
  }, Vm.getByRawIndex = function (t, e) {
    if (!(e >= 0 && e < this._rawCount)) return 0 / 0;var n = this._storage[t];if (!n) return 0 / 0;var i = Math.floor(e / this._chunkSize),
        r = e % this._chunkSize,
        a = n[i];return a[r];
  }, Vm._getFast = function (t, e) {
    var n = Math.floor(e / this._chunkSize),
        i = e % this._chunkSize,
        r = this._storage[t][n];return r[i];
  }, Vm.getValues = function (t, e) {
    var n = [];x(t) || (e = t, t = this.dimensions);for (var i = 0, r = t.length; r > i; i++) {
      n.push(this.get(t[i], e));
    }return n;
  }, Vm.hasValue = function (t) {
    for (var e = this._dimensionsSummary.dataDimsOnCoord, n = this._dimensionInfos, i = 0, r = e.length; r > i; i++) {
      if ("ordinal" !== n[e[i]].type && isNaN(this.get(e[i], t))) return !1;
    }return !0;
  }, Vm.getDataExtent = function (t) {
    t = this.getDimension(t);var e = this._storage[t],
        n = eu();if (!e) return n;var i,
        r = this.count(),
        a = !this._indices;if (a) return this._rawExtent[t].slice();if (i = this._extent[t]) return i.slice();i = n;for (var o = i[0], s = i[1], l = 0; r > l; l++) {
      var u = this._getFast(t, this.getRawIndex(l));o > u && (o = u), u > s && (s = u);
    }return i = [o, s], this._extent[t] = i, i;
  }, Vm.getApproximateExtent = function (t) {
    return t = this.getDimension(t), this._approximateExtent[t] || this.getDataExtent(t);
  }, Vm.setApproximateExtent = function (t, e) {
    e = this.getDimension(e), this._approximateExtent[e] = t.slice();
  }, Vm.getCalculationInfo = function (t) {
    return this._calculationInfo[t];
  }, Vm.setCalculationInfo = function (t, e) {
    Pm(t) ? o(this._calculationInfo, t) : this._calculationInfo[t] = e;
  }, Vm.getSum = function (t) {
    var e = this._storage[t],
        n = 0;if (e) for (var i = 0, r = this.count(); r > i; i++) {
      var a = this.get(t, i);isNaN(a) || (n += a);
    }return n;
  }, Vm.getMedian = function (t) {
    var e = [];this.each(t, function (t) {
      isNaN(t) || e.push(t);
    });var n = [].concat(e).sort(function (t, e) {
      return t - e;
    }),
        i = this.count();return 0 === i ? 0 : i % 2 === 1 ? n[(i - 1) / 2] : (n[i / 2] + n[i / 2 - 1]) / 2;
  }, Vm.rawIndexOf = function (t, e) {
    var n = t && this._invertedIndicesMap[t],
        i = n[e];return null == i || isNaN(i) ? -1 : i;
  }, Vm.indexOfName = function (t) {
    for (var e = 0, n = this.count(); n > e; e++) {
      if (this.getName(e) === t) return e;
    }return -1;
  }, Vm.indexOfRawIndex = function (t) {
    if (!this._indices) return t;if (t >= this._rawCount || 0 > t) return -1;var e = this._indices,
        n = e[t];if (null != n && n < this._count && n === t) return t;for (var i = 0, r = this._count - 1; r >= i;) {
      var a = (i + r) / 2 | 0;if (e[a] < t) i = a + 1;else {
        if (!(e[a] > t)) return a;r = a - 1;
      }
    }return -1;
  }, Vm.indicesOfNearest = function (t, e, n) {
    var i = this._storage,
        r = i[t],
        a = [];if (!r) return a;null == n && (n = 1 / 0);for (var o = Number.MAX_VALUE, s = -1, l = 0, u = this.count(); u > l; l++) {
      var h = e - this.get(t, l),
          c = Math.abs(h);n >= h && o >= c && ((o > c || h >= 0 && 0 > s) && (o = c, s = h, a.length = 0), a.push(l));
    }return a;
  }, Vm.getRawIndex = Zl, Vm.getRawDataItem = function (t) {
    if (this._rawData.persistent) return this._rawData.getItem(this.getRawIndex(t));for (var e = [], n = 0; n < this.dimensions.length; n++) {
      var i = this.dimensions[n];e.push(this.get(i, t));
    }return e;
  }, Vm.getName = function (t) {
    var e = this.getRawIndex(t);return this._nameList[e] || Yl(this, this._nameDimIdx, e) || "";
  }, Vm.getId = function (t) {
    return Kl(this, this.getRawIndex(t));
  }, Vm.each = function (t, e, n, i) {
    if (this._count) {
      "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this, t = p(Ql(t), this.getDimension, this);for (var r = t.length, a = 0; a < this.count(); a++) {
        switch (r) {case 0:
            e.call(n, a);break;case 1:
            e.call(n, this.get(t[0], a), a);break;case 2:
            e.call(n, this.get(t[0], a), this.get(t[1], a), a);break;default:
            for (var o = 0, s = []; r > o; o++) {
              s[o] = this.get(t[o], a);
            }s[o] = a, e.apply(n, s);}
      }
    }
  }, Vm.filterSelf = function (t, e, n, i) {
    if (this._count) {
      "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this, t = p(Ql(t), this.getDimension, this);for (var r = this.count(), a = jl(this), o = new a(r), s = [], l = t.length, u = 0, h = t[0], c = 0; r > c; c++) {
        var d,
            f = this.getRawIndex(c);if (0 === l) d = e.call(n, c);else if (1 === l) {
          var g = this._getFast(h, f);d = e.call(n, g, c);
        } else {
          for (var v = 0; l > v; v++) {
            s[v] = this._getFast(h, f);
          }s[v] = c, d = e.apply(n, s);
        }d && (o[u++] = f);
      }return r > u && (this._indices = o), this._count = u, this._extent = {}, this.getRawIndex = this._indices ? $l : Zl, this;
    }
  }, Vm.selectRange = function (t) {
    if (this._count) {
      var e = [];for (var n in t) {
        t.hasOwnProperty(n) && e.push(n);
      }var i = e.length;if (i) {
        var r = this.count(),
            a = jl(this),
            o = new a(r),
            s = 0,
            l = e[0],
            u = t[l][0],
            h = t[l][1],
            c = !1;if (!this._indices) {
          var d = 0;if (1 === i) {
            for (var f = this._storage[e[0]], p = 0; p < this._chunkCount; p++) {
              for (var g = f[p], v = Math.min(this._count - p * this._chunkSize, this._chunkSize), m = 0; v > m; m++) {
                var y = g[m];(y >= u && h >= y || isNaN(y)) && (o[s++] = d), d++;
              }
            }c = !0;
          } else if (2 === i) {
            for (var f = this._storage[l], _ = this._storage[e[1]], x = t[e[1]][0], w = t[e[1]][1], p = 0; p < this._chunkCount; p++) {
              for (var g = f[p], b = _[p], v = Math.min(this._count - p * this._chunkSize, this._chunkSize), m = 0; v > m; m++) {
                var y = g[m],
                    M = b[m];(y >= u && h >= y || isNaN(y)) && (M >= x && w >= M || isNaN(M)) && (o[s++] = d), d++;
              }
            }c = !0;
          }
        }if (!c) if (1 === i) for (var m = 0; r > m; m++) {
          var S = this.getRawIndex(m),
              y = this._getFast(l, S);(y >= u && h >= y || isNaN(y)) && (o[s++] = S);
        } else for (var m = 0; r > m; m++) {
          for (var C = !0, S = this.getRawIndex(m), p = 0; i > p; p++) {
            var I = e[p],
                y = this._getFast(n, S);(y < t[I][0] || y > t[I][1]) && (C = !1);
          }C && (o[s++] = this.getRawIndex(m));
        }return r > s && (this._indices = o), this._count = s, this._extent = {}, this.getRawIndex = this._indices ? $l : Zl, this;
      }
    }
  }, Vm.mapArray = function (t, e, n, i) {
    "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this;var r = [];return this.each(t, function () {
      r.push(e && e.apply(this, arguments));
    }, n), r;
  }, Vm.map = function (t, e, n, i) {
    n = n || i || this, t = p(Ql(t), this.getDimension, this);var r = Jl(this, t);r._indices = this._indices, r.getRawIndex = r._indices ? $l : Zl;for (var a = r._storage, o = [], s = this._chunkSize, l = t.length, u = this.count(), h = [], c = r._rawExtent, d = 0; u > d; d++) {
      for (var f = 0; l > f; f++) {
        h[f] = this.get(t[f], d);
      }h[l] = d;var g = e && e.apply(n, h);if (null != g) {
        "object" != (typeof g === "undefined" ? "undefined" : _typeof(g)) && (o[0] = g, g = o);for (var v = this.getRawIndex(d), m = Math.floor(v / s), y = v % s, _ = 0; _ < g.length; _++) {
          var x = t[_],
              w = g[_],
              b = c[x],
              M = a[x];M && (M[m][y] = w), w < b[0] && (b[0] = w), w > b[1] && (b[1] = w);
        }
      }
    }return r;
  }, Vm.downSample = function (t, e, n, i) {
    for (var r = Jl(this, [t]), a = r._storage, o = [], s = Math.floor(1 / e), l = a[t], u = this.count(), h = this._chunkSize, c = r._rawExtent[t], d = new (jl(this))(u), f = 0, p = 0; u > p; p += s) {
      s > u - p && (s = u - p, o.length = s);for (var g = 0; s > g; g++) {
        var v = this.getRawIndex(p + g),
            m = Math.floor(v / h),
            y = v % h;o[g] = l[m][y];
      }var _ = n(o),
          x = this.getRawIndex(Math.min(p + i(o, _) || 0, u - 1)),
          w = Math.floor(x / h),
          b = x % h;l[w][b] = _, _ < c[0] && (c[0] = _), _ > c[1] && (c[1] = _), d[f++] = x;
    }return r._count = f, r._indices = d, r.getRawIndex = $l, r;
  }, Vm.getItemModel = function (t) {
    var e = this.hostModel;return new Aa(this.getRawDataItem(t), e, e && e.ecModel);
  }, Vm.diff = function (t) {
    var e = this;return new Fl(t ? t.getIndices() : [], this.getIndices(), function (e) {
      return Kl(t, e);
    }, function (t) {
      return Kl(e, t);
    });
  }, Vm.getVisual = function (t) {
    var e = this._visual;return e && e[t];
  }, Vm.setVisual = function (t, e) {
    if (Pm(t)) for (var n in t) {
      t.hasOwnProperty(n) && this.setVisual(n, t[n]);
    } else this._visual = this._visual || {}, this._visual[t] = e;
  }, Vm.setLayout = function (t, e) {
    if (Pm(t)) for (var n in t) {
      t.hasOwnProperty(n) && this.setLayout(n, t[n]);
    } else this._layout[t] = e;
  }, Vm.getLayout = function (t) {
    return this._layout[t];
  }, Vm.getItemLayout = function (t) {
    return this._itemLayouts[t];
  }, Vm.setItemLayout = function (t, e, n) {
    this._itemLayouts[t] = n ? o(this._itemLayouts[t] || {}, e) : e;
  }, Vm.clearItemLayouts = function () {
    this._itemLayouts.length = 0;
  }, Vm.getItemVisual = function (t, e, n) {
    var i = this._itemVisuals[t],
        r = i && i[e];return null != r || n ? r : this.getVisual(e);
  }, Vm.setItemVisual = function (t, e, n) {
    var i = this._itemVisuals[t] || {},
        r = this.hasItemVisual;if (this._itemVisuals[t] = i, Pm(e)) for (var a in e) {
      e.hasOwnProperty(a) && (i[a] = e[a], r[a] = !0);
    } else i[e] = n, r[e] = !0;
  }, Vm.clearAllVisual = function () {
    this._visual = {}, this._itemVisuals = [], this.hasItemVisual = {};
  };var Gm = function Gm(t) {
    t.seriesIndex = this.seriesIndex, t.dataIndex = this.dataIndex, t.dataType = this.dataType;
  };Vm.setItemGraphicEl = function (t, e) {
    var n = this.hostModel;e && (e.dataIndex = t, e.dataType = this.dataType, e.seriesIndex = n && n.seriesIndex, "group" === e.type && e.traverse(Gm, e)), this._graphicEls[t] = e;
  }, Vm.getItemGraphicEl = function (t) {
    return this._graphicEls[t];
  }, Vm.eachItemGraphicEl = function (t, e) {
    f(this._graphicEls, function (n, i) {
      n && t && t.call(e, n, i);
    });
  }, Vm.cloneShallow = function (t) {
    if (!t) {
      var e = p(this.dimensions, this.getDimensionInfo, this);t = new Fm(e, this.hostModel);
    }if (t._storage = this._storage, Ul(t, this), this._indices) {
      var n = this._indices.constructor;t._indices = new n(this._indices);
    } else t._indices = null;return t.getRawIndex = t._indices ? $l : Zl, t;
  }, Vm.wrapMethod = function (t, e) {
    var n = this[t];"function" == typeof n && (this.__wrappedMethods = this.__wrappedMethods || [], this.__wrappedMethods.push(t), this[t] = function () {
      var t = n.apply(this, arguments);return e.apply(this, [t].concat(P(arguments)));
    });
  }, Vm.TRANSFERABLE_METHODS = ["cloneShallow", "downSample", "map"], Vm.CHANGABLE_METHODS = ["filterSelf", "selectRange"];var Hm = function Hm(t, e) {
    return e = e || {}, nu(e.coordDimensions || [], t, { dimsDef: e.dimensionsDefine || t.dimensionsDefine, encodeDef: e.encodeDefine || t.encodeDefine, dimCount: e.dimensionsCount, generateCoord: e.generateCoord, generateCoordCount: e.generateCoordCount });
  };cu.prototype.parse = function (t) {
    return t;
  }, cu.prototype.getSetting = function (t) {
    return this._setting[t];
  }, cu.prototype.contain = function (t) {
    var e = this._extent;return t >= e[0] && t <= e[1];
  }, cu.prototype.normalize = function (t) {
    var e = this._extent;return e[1] === e[0] ? .5 : (t - e[0]) / (e[1] - e[0]);
  }, cu.prototype.scale = function (t) {
    var e = this._extent;return t * (e[1] - e[0]) + e[0];
  }, cu.prototype.unionExtent = function (t) {
    var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]);
  }, cu.prototype.unionExtentFromData = function (t, e) {
    this.unionExtent(t.getApproximateExtent(e));
  }, cu.prototype.getExtent = function () {
    return this._extent.slice();
  }, cu.prototype.setExtent = function (t, e) {
    var n = this._extent;isNaN(t) || (n[0] = t), isNaN(e) || (n[1] = e);
  }, cu.prototype.isBlank = function () {
    return this._isBlank;
  }, cu.prototype.setBlank = function (t) {
    this._isBlank = t;
  }, cu.prototype.getLabel = null, Xi(cu), Ki(cu, { registerWhenExtend: !0 }), du.createByAxisModel = function (t) {
    var e = t.option,
        n = e.data,
        i = n && p(n, pu);return new du({ categories: i, needCollect: !i, deduplication: e.dedplication !== !1 });
  };var Wm = du.prototype;Wm.getOrdinal = function (t) {
    return fu(this).get(t);
  }, Wm.parseAndCollect = function (t) {
    var e,
        n = this._needCollect;if ("string" != typeof t && !n) return t;if (n && !this._deduplication) return e = this.categories.length, this.categories[e] = t, e;var i = fu(this);return e = i.get(t), null == e && (n ? (e = this.categories.length, this.categories[e] = t, i.set(t, e)) : e = 0 / 0), e;
  };var jm = cu.prototype,
      qm = cu.extend({ type: "ordinal", init: function init(t, e) {
      (!t || x(t)) && (t = new du({ categories: t })), this._ordinalMeta = t, this._extent = e || [0, t.categories.length - 1];
    }, parse: function parse(t) {
      return "string" == typeof t ? this._ordinalMeta.getOrdinal(t) : Math.round(t);
    }, contain: function contain(t) {
      return t = this.parse(t), jm.contain.call(this, t) && null != this._ordinalMeta.categories[t];
    }, normalize: function normalize(t) {
      return jm.normalize.call(this, this.parse(t));
    }, scale: function scale(t) {
      return Math.round(jm.scale.call(this, t));
    }, getTicks: function getTicks() {
      for (var t = [], e = this._extent, n = e[0]; n <= e[1];) {
        t.push(n), n++;
      }return t;
    }, getLabel: function getLabel(t) {
      return this.isBlank() ? void 0 : this._ordinalMeta.categories[t];
    }, count: function count() {
      return this._extent[1] - this._extent[0] + 1;
    }, unionExtentFromData: function unionExtentFromData(t, e) {
      this.unionExtent(t.getApproximateExtent(e));
    }, getOrdinalMeta: function getOrdinalMeta() {
      return this._ordinalMeta;
    }, niceTicks: V, niceExtent: V });qm.create = function () {
    return new qm();
  };var Um = Fa,
      Xm = Fa,
      Ym = cu.extend({ type: "interval", _interval: 0, _intervalPrecision: 2, setExtent: function setExtent(t, e) {
      var n = this._extent;isNaN(t) || (n[0] = parseFloat(t)), isNaN(e) || (n[1] = parseFloat(e));
    }, unionExtent: function unionExtent(t) {
      var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]), Ym.prototype.setExtent.call(this, e[0], e[1]);
    }, getInterval: function getInterval() {
      return this._interval;
    }, setInterval: function setInterval(t) {
      this._interval = t, this._niceExtent = this._extent.slice(), this._intervalPrecision = vu(t);
    }, getTicks: function getTicks() {
      return _u(this._interval, this._extent, this._niceExtent, this._intervalPrecision);
    }, getLabel: function getLabel(t, e) {
      if (null == t) return "";var n = e && e.precision;return null == n ? n = Ha(t) || 0 : "auto" === n && (n = this._intervalPrecision), t = Xm(t, n, !0), to(t);
    }, niceTicks: function niceTicks(t, e, n) {
      t = t || 5;var i = this._extent,
          r = i[1] - i[0];if (isFinite(r)) {
        0 > r && (r = -r, i.reverse());var a = gu(i, t, e, n);this._intervalPrecision = a.intervalPrecision, this._interval = a.interval, this._niceExtent = a.niceTickExtent;
      }
    }, niceExtent: function niceExtent(t) {
      var e = this._extent;if (e[0] === e[1]) if (0 !== e[0]) {
        var n = e[0];t.fixMax ? e[0] -= n / 2 : (e[1] += n / 2, e[0] -= n / 2);
      } else e[1] = 1;var i = e[1] - e[0];isFinite(i) || (e[0] = 0, e[1] = 1), this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var r = this._interval;t.fixMin || (e[0] = Xm(Math.floor(e[0] / r) * r)), t.fixMax || (e[1] = Xm(Math.ceil(e[1] / r) * r));
    } });Ym.create = function () {
    return new Ym();
  };var Zm = "__ec_stack_",
      $m = .5,
      Km = "undefined" != typeof Float32Array ? Float32Array : Array,
      Qm = ({ seriesType: "bar", plan: Sv(), reset: function reset(t) {
      function e(t, e) {
        for (var n, c = new Km(2 * t.count), d = [], f = [], p = 0; null != (n = t.next());) {
          f[u] = e.get(o, n), f[1 - u] = e.get(s, n), d = i.dataToPoint(f, null, d), c[p++] = d[0], c[p++] = d[1];
        }e.setLayout({ largePoints: c, barWidth: h, valueAxisStart: ku(r, a, !1), valueAxisHorizontal: l });
      }if (Iu(t) && Tu(t)) {
        var n = t.getData(),
            i = t.coordinateSystem,
            r = i.getBaseAxis(),
            a = i.getOtherAxis(r),
            o = n.mapDimension(a.dim),
            s = n.mapDimension(r.dim),
            l = a.isHorizontal(),
            u = l ? 0 : 1,
            h = Cu(Mu([t]), r, t).width;return h > $m || (h = $m), { progress: e };
      }
    } }, Ym.prototype),
      Jm = Math.ceil,
      ty = Math.floor,
      ey = 1e3,
      ny = 60 * ey,
      iy = 60 * ny,
      ry = 24 * iy,
      ay = function ay(t, e, n, i) {
    for (; i > n;) {
      var r = n + i >>> 1;t[r][1] < e ? n = r + 1 : i = r;
    }return n;
  },
      oy = Ym.extend({ type: "time", getLabel: function getLabel(t) {
      var e = this._stepLvl,
          n = new Date(t);return so(e[0], n, this.getSetting("useUTC"));
    }, niceExtent: function niceExtent(t) {
      var e = this._extent;if (e[0] === e[1] && (e[0] -= ry, e[1] += ry), e[1] === -1 / 0 && 1 / 0 === e[0]) {
        var n = new Date();e[1] = +new Date(n.getFullYear(), n.getMonth(), n.getDate()), e[0] = e[1] - ry;
      }this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var i = this._interval;t.fixMin || (e[0] = Fa(ty(e[0] / i) * i)), t.fixMax || (e[1] = Fa(Jm(e[1] / i) * i));
    }, niceTicks: function niceTicks(t, e, n) {
      t = t || 10;var i = this._extent,
          r = i[1] - i[0],
          a = r / t;null != e && e > a && (a = e), null != n && a > n && (a = n);var o = sy.length,
          s = ay(sy, a, 0, o),
          l = sy[Math.min(s, o - 1)],
          u = l[1];if ("year" === l[0]) {
        var h = r / u,
            c = $a(h / t, !0);u *= c;
      }var d = this.getSetting("useUTC") ? 0 : 60 * new Date(+i[0] || +i[1]).getTimezoneOffset() * 1e3,
          f = [Math.round(Jm((i[0] - d) / u) * u + d), Math.round(ty((i[1] - d) / u) * u + d)];yu(f, i), this._stepLvl = l, this._interval = u, this._niceExtent = f;
    }, parse: function parse(t) {
      return +Xa(t);
    } });f(["contain", "normalize"], function (t) {
    oy.prototype[t] = function (e) {
      return Qm[t].call(this, this.parse(e));
    };
  });var sy = [["hh:mm:ss", ey], ["hh:mm:ss", 5 * ey], ["hh:mm:ss", 10 * ey], ["hh:mm:ss", 15 * ey], ["hh:mm:ss", 30 * ey], ["hh:mm\nMM-dd", ny], ["hh:mm\nMM-dd", 5 * ny], ["hh:mm\nMM-dd", 10 * ny], ["hh:mm\nMM-dd", 15 * ny], ["hh:mm\nMM-dd", 30 * ny], ["hh:mm\nMM-dd", iy], ["hh:mm\nMM-dd", 2 * iy], ["hh:mm\nMM-dd", 6 * iy], ["hh:mm\nMM-dd", 12 * iy], ["MM-dd\nyyyy", ry], ["MM-dd\nyyyy", 2 * ry], ["MM-dd\nyyyy", 3 * ry], ["MM-dd\nyyyy", 4 * ry], ["MM-dd\nyyyy", 5 * ry], ["MM-dd\nyyyy", 6 * ry], ["week", 7 * ry], ["MM-dd\nyyyy", 10 * ry], ["week", 14 * ry], ["week", 21 * ry], ["month", 31 * ry], ["week", 42 * ry], ["month", 62 * ry], ["week", 42 * ry], ["quarter", 380 * ry / 4], ["month", 31 * ry * 4], ["month", 31 * ry * 5], ["half-year", 380 * ry / 2], ["month", 31 * ry * 8], ["month", 31 * ry * 10], ["year", 380 * ry]];oy.create = function (t) {
    return new oy({ useUTC: t.ecModel.get("useUTC") });
  };var ly = cu.prototype,
      uy = Ym.prototype,
      hy = Ha,
      cy = Fa,
      dy = Math.floor,
      fy = Math.ceil,
      py = Math.pow,
      gy = Math.log,
      vy = cu.extend({ type: "log", base: 10, $constructor: function $constructor() {
      cu.apply(this, arguments), this._originalScale = new Ym();
    }, getTicks: function getTicks() {
      var t = this._originalScale,
          e = this._extent,
          n = t.getExtent();return p(uy.getTicks.call(this), function (i) {
        var r = Fa(py(this.base, i));return r = i === e[0] && t.__fixMin ? Du(r, n[0]) : r, r = i === e[1] && t.__fixMax ? Du(r, n[1]) : r;
      }, this);
    }, getLabel: uy.getLabel, scale: function scale(t) {
      return t = ly.scale.call(this, t), py(this.base, t);
    }, setExtent: function setExtent(t, e) {
      var n = this.base;t = gy(t) / gy(n), e = gy(e) / gy(n), uy.setExtent.call(this, t, e);
    }, getExtent: function getExtent() {
      var t = this.base,
          e = ly.getExtent.call(this);e[0] = py(t, e[0]), e[1] = py(t, e[1]);var n = this._originalScale,
          i = n.getExtent();return n.__fixMin && (e[0] = Du(e[0], i[0])), n.__fixMax && (e[1] = Du(e[1], i[1])), e;
    }, unionExtent: function unionExtent(t) {
      this._originalScale.unionExtent(t);var e = this.base;t[0] = gy(t[0]) / gy(e), t[1] = gy(t[1]) / gy(e), ly.unionExtent.call(this, t);
    }, unionExtentFromData: function unionExtentFromData(t, e) {
      this.unionExtent(t.getApproximateExtent(e));
    }, niceTicks: function niceTicks(t) {
      t = t || 10;var e = this._extent,
          n = e[1] - e[0];if (!(1 / 0 === n || 0 >= n)) {
        var i = Ya(n),
            r = t / n * i;for (.5 >= r && (i *= 10); !isNaN(i) && Math.abs(i) < 1 && Math.abs(i) > 0;) {
          i *= 10;
        }var a = [Fa(fy(e[0] / i) * i), Fa(dy(e[1] / i) * i)];this._interval = i, this._niceExtent = a;
      }
    }, niceExtent: function niceExtent(t) {
      uy.niceExtent.call(this, t);var e = this._originalScale;e.__fixMin = t.fixMin, e.__fixMax = t.fixMax;
    } });f(["contain", "normalize"], function (t) {
    vy.prototype[t] = function (e) {
      return e = gy(e) / gy(this.base), ly[t].call(this, e);
    };
  }), vy.create = function () {
    return new vy();
  };var my = { getMin: function getMin(t) {
      var e = this.option,
          n = t || null == e.rangeStart ? e.min : e.rangeStart;return this.axis && null != n && "dataMin" !== n && "function" != typeof n && !T(n) && (n = this.axis.scale.parse(n)), n;
    }, getMax: function getMax(t) {
      var e = this.option,
          n = t || null == e.rangeEnd ? e.max : e.rangeEnd;return this.axis && null != n && "dataMax" !== n && "function" != typeof n && !T(n) && (n = this.axis.scale.parse(n)), n;
    }, getNeedCrossZero: function getNeedCrossZero() {
      var t = this.option;return null != t.rangeStart || null != t.rangeEnd ? !1 : !t.scale;
    }, getCoordSysModel: V, setRange: function setRange(t, e) {
      this.option.rangeStart = t, this.option.rangeEnd = e;
    }, resetRange: function resetRange() {
      this.option.rangeStart = this.option.rangeEnd = null;
    } },
      yy = Hr({ type: "triangle", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = e.width / 2,
          a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i + a), t.lineTo(n - r, i + a), t.closePath();
    } }),
      _y = Hr({ type: "diamond", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = e.width / 2,
          a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i), t.lineTo(n, i + a), t.lineTo(n - r, i), t.closePath();
    } }),
      xy = Hr({ type: "pin", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.x,
          i = e.y,
          r = e.width / 5 * 3,
          a = Math.max(r, e.height),
          o = r / 2,
          s = o * o / (a - o),
          l = i - a + o + s,
          u = Math.asin(s / o),
          h = Math.cos(u) * o,
          c = Math.sin(u),
          d = Math.cos(u),
          f = .6 * o,
          p = .7 * o;t.moveTo(n - h, l + s), t.arc(n, l, o, Math.PI - u, 2 * Math.PI + u), t.bezierCurveTo(n + h - c * f, l + s + d * f, n, i - p, n, i), t.bezierCurveTo(n, i - p, n - h + c * f, l + s + d * f, n - h, l + s), t.closePath();
    } }),
      wy = Hr({ type: "arrow", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.height,
          i = e.width,
          r = e.x,
          a = e.y,
          o = i / 3 * 2;t.moveTo(r, a), t.lineTo(r + o, a + n), t.lineTo(r, a + n / 4 * 3), t.lineTo(r - o, a + n), t.lineTo(r, a), t.closePath();
    } }),
      by = { line: Yp, rect: Xp, roundRect: Xp, square: Xp, circle: Np, diamond: _y, pin: xy, arrow: wy, triangle: yy },
      My = { line: function line(t, e, n, i, r) {
      r.x1 = t, r.y1 = e + i / 2, r.x2 = t + n, r.y2 = e + i / 2;
    }, rect: function rect(t, e, n, i, r) {
      r.x = t, r.y = e, r.width = n, r.height = i;
    }, roundRect: function roundRect(t, e, n, i, r) {
      r.x = t, r.y = e, r.width = n, r.height = i, r.r = Math.min(n, i) / 4;
    }, square: function square(t, e, n, i, r) {
      var a = Math.min(n, i);r.x = t, r.y = e, r.width = a, r.height = a;
    }, circle: function circle(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.r = Math.min(n, i) / 2;
    }, diamond: function diamond(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;
    }, pin: function pin(t, e, n, i, r) {
      r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;
    }, arrow: function arrow(t, e, n, i, r) {
      r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;
    }, triangle: function triangle(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;
    } },
      Sy = {};f(by, function (t, e) {
    Sy[e] = new t();
  });var Cy = Hr({ type: "symbol", shape: { symbolType: "", x: 0, y: 0, width: 0, height: 0 }, beforeBrush: function beforeBrush() {
      var t = this.style,
          e = this.shape;"pin" === e.symbolType && "inside" === t.textPosition && (t.textPosition = ["50%", "40%"], t.textAlign = "center", t.textVerticalAlign = "middle");
    }, buildPath: function buildPath(t, e, n) {
      var i = e.symbolType,
          r = Sy[i];"none" !== e.symbolType && (r || (i = "rect", r = Sy[i]), My[i](e.x, e.y, e.width, e.height, r.shape), r.buildPath(t, r.shape, n));
    } }),
      Iy = { isDimensionStacked: ou, enableDataStack: au, getStackedDimension: su },
      Ty = (Object.freeze || Object)({ createList: Gu, getLayoutRect: ho, dataStack: Iy, createScale: Hu, mixinAxisModelCommonMethods: Wu, completeDimensions: nu, createDimensions: Hm, createSymbol: Vu }),
      ky = 1e-8;Uu.prototype = { constructor: Uu, properties: null, getBoundingRect: function getBoundingRect() {
      var t = this._rect;if (t) return t;for (var e = Number.MAX_VALUE, n = [e, e], i = [-e, -e], r = [], a = [], o = this.geometries, s = 0; s < o.length; s++) {
        if ("polygon" === o[s].type) {
          var l = o[s].exterior;dr(l, r, a), oe(n, n, r), se(i, i, a);
        }
      }return 0 === s && (n[0] = n[1] = i[0] = i[1] = 0), this._rect = new rn(n[0], n[1], i[0] - n[0], i[1] - n[1]);
    }, contain: function contain(t) {
      var e = this.getBoundingRect(),
          n = this.geometries;if (!e.contain(t[0], t[1])) return !1;t: for (var i = 0, r = n.length; r > i; i++) {
        if ("polygon" === n[i].type) {
          var a = n[i].exterior,
              o = n[i].interiors;if (qu(a, t[0], t[1])) {
            for (var s = 0; s < (o ? o.length : 0); s++) {
              if (qu(o[s])) continue t;
            }return !0;
          }
        }
      }return !1;
    }, transformTo: function transformTo(t, e, n, i) {
      var r = this.getBoundingRect(),
          a = r.width / r.height;n ? i || (i = n / a) : n = a * i;for (var o = new rn(t, e, n, i), s = r.calculateTransform(o), l = this.geometries, u = 0; u < l.length; u++) {
        if ("polygon" === l[u].type) {
          for (var h = l[u].exterior, c = l[u].interiors, d = 0; d < h.length; d++) {
            ae(h[d], h[d], s);
          }for (var f = 0; f < (c ? c.length : 0); f++) {
            for (var d = 0; d < c[f].length; d++) {
              ae(c[f][d], c[f][d], s);
            }
          }
        }
      }r = this._rect, r.copy(o), this.center = [r.x + r.width / 2, r.y + r.height / 2];
    } };var Dy = function Dy(t) {
    return Xu(t), p(v(t.features, function (t) {
      return t.geometry && t.properties && t.geometry.coordinates.length > 0;
    }), function (t) {
      var e = t.properties,
          n = t.geometry,
          i = n.coordinates,
          r = [];"Polygon" === n.type && r.push({ type: "polygon", exterior: i[0], interiors: i.slice(1) }), "MultiPolygon" === n.type && f(i, function (t) {
        t[0] && r.push({ type: "polygon", exterior: t[0], interiors: t.slice(1) });
      });var a = new Uu(e.name, r, e.cp);return a.properties = e, a;
    });
  },
      Ay = Vi(),
      Py = [0, 1],
      Ly = function Ly(t, e, n) {
    this.dim = t, this.scale = e, this._extent = n || [0, 0], this.inverse = !1, this.onBand = !1;
  };Ly.prototype = { constructor: Ly, contain: function contain(t) {
      var e = this._extent,
          n = Math.min(e[0], e[1]),
          i = Math.max(e[0], e[1]);return t >= n && i >= t;
    }, containData: function containData(t) {
      return this.contain(this.dataToCoord(t));
    }, getExtent: function getExtent() {
      return this._extent.slice();
    }, getPixelPrecision: function getPixelPrecision(t) {
      return Wa(t || this.scale.getExtent(), this._extent);
    }, setExtent: function setExtent(t, e) {
      var n = this._extent;n[0] = t, n[1] = e;
    }, dataToCoord: function dataToCoord(t, e) {
      var n = this._extent,
          i = this.scale;return t = i.normalize(t), this.onBand && "ordinal" === i.type && (n = n.slice(), hh(n, i.count())), za(t, Py, n, e);
    }, coordToData: function coordToData(t, e) {
      var n = this._extent,
          i = this.scale;this.onBand && "ordinal" === i.type && (n = n.slice(), hh(n, i.count()));var r = za(t, n, Py, e);return this.scale.scale(r);
    }, pointToData: function pointToData() {}, getTicksCoords: function getTicksCoords(t) {
      t = t || {};var e = t.tickModel || this.getTickModel(),
          n = $u(this, e),
          i = n.ticks,
          r = p(i, function (t) {
        return { coord: this.dataToCoord(t), tickValue: t };
      }, this),
          a = e.get("alignWithLabel");return ch(this, r, n.tickCategoryInterval, a, t.clamp), r;
    }, getViewLabels: function getViewLabels() {
      return Zu(this).labels;
    }, getLabelModel: function getLabelModel() {
      return this.model.getModel("axisLabel");
    }, getTickModel: function getTickModel() {
      return this.model.getModel("axisTick");
    }, getBandWidth: function getBandWidth() {
      var t = this._extent,
          e = this.scale.getExtent(),
          n = e[1] - e[0] + (this.onBand ? 1 : 0);0 === n && (n = 1);var i = Math.abs(t[1] - t[0]);return Math.abs(i) / n;
    }, isHorizontal: null, getRotate: null, calculateCategoryInterval: function calculateCategoryInterval() {
      return ah(this);
    } };var Oy = Dy,
      Ry = {};f(["map", "each", "filter", "indexOf", "inherits", "reduce", "filter", "bind", "curry", "isArray", "isString", "isObject", "isFunction", "extend", "defaults", "clone", "merge"], function (t) {
    Ry[t] = Bc[t];
  }), wv.extend({ type: "series.line", dependencies: ["grid", "polar"], getInitialData: function getInitialData() {
      return lu(this.getSource(), this);
    }, defaultOption: { zlevel: 0, z: 2, coordinateSystem: "cartesian2d", legendHoverLink: !0, hoverAnimation: !0, clipOverflow: !0, label: { position: "top" }, lineStyle: { width: 2, type: "solid" }, step: !1, smooth: !1, smoothMonotone: null, symbol: "emptyCircle", symbolSize: 4, symbolRotate: null, showSymbol: !0, showAllSymbol: "auto", connectNulls: !1, sampling: "none", animationEasing: "linear", progressive: 0, hoverLayerThreshold: 1 / 0 } });var Ey = fh.prototype,
      By = fh.getSymbolSize = function (t, e) {
    var n = t.getItemVisual(e, "symbolSize");return n instanceof Array ? n.slice() : [+n, +n];
  };Ey._createSymbol = function (t, e, n, i, r) {
    this.removeAll();var a = e.getItemVisual(n, "color"),
        o = Vu(t, -1, -1, 2, 2, a, r);o.attr({ z2: 100, culling: !0, scale: ph(i) }), o.drift = gh, this._symbolType = t, this.add(o);
  }, Ey.stopSymbolAnimation = function (t) {
    this.childAt(0).stopAnimation(t);
  }, Ey.getSymbolPath = function () {
    return this.childAt(0);
  }, Ey.getScale = function () {
    return this.childAt(0).scale;
  }, Ey.highlight = function () {
    this.childAt(0).trigger("emphasis");
  }, Ey.downplay = function () {
    this.childAt(0).trigger("normal");
  }, Ey.setZ = function (t, e) {
    var n = this.childAt(0);n.zlevel = t, n.z = e;
  }, Ey.setDraggable = function (t) {
    var e = this.childAt(0);e.draggable = t, e.cursor = t ? "move" : "pointer";
  }, Ey.updateData = function (t, e, n) {
    this.silent = !1;var i = t.getItemVisual(e, "symbol") || "circle",
        r = t.hostModel,
        a = By(t, e),
        o = i !== this._symbolType;if (o) {
      var s = t.getItemVisual(e, "symbolKeepAspect");this._createSymbol(i, t, e, a, s);
    } else {
      var l = this.childAt(0);l.silent = !1, wa(l, { scale: ph(a) }, r, e);
    }if (this._updateCommon(t, e, a, n), o) {
      var l = this.childAt(0),
          u = n && n.fadeIn,
          h = { scale: l.scale.slice() };u && (h.style = { opacity: l.style.opacity }), l.scale = [0, 0], u && (l.style.opacity = 0), ba(l, h, r, e);
    }this._seriesModel = r;
  };var zy = ["itemStyle"],
      Ny = ["emphasis", "itemStyle"],
      Fy = ["label"],
      Vy = ["emphasis", "label"];Ey._updateCommon = function (t, e, n, i) {
    function r(e) {
      return b ? t.getName(e) : dh(t, e);
    }var a = this.childAt(0),
        s = t.hostModel,
        l = t.getItemVisual(e, "color");"image" !== a.type && a.useStyle({ strokeNoScale: !0 });
    var u = i && i.itemStyle,
        h = i && i.hoverItemStyle,
        c = i && i.symbolRotate,
        d = i && i.symbolOffset,
        f = i && i.labelModel,
        p = i && i.hoverLabelModel,
        g = i && i.hoverAnimation,
        v = i && i.cursorStyle;if (!i || t.hasItemOption) {
      var m = i && i.itemModel ? i.itemModel : t.getItemModel(e);u = m.getModel(zy).getItemStyle(["color"]), h = m.getModel(Ny).getItemStyle(), c = m.getShallow("symbolRotate"), d = m.getShallow("symbolOffset"), f = m.getModel(Fy), p = m.getModel(Vy), g = m.getShallow("hoverAnimation"), v = m.getShallow("cursor");
    } else h = o({}, h);var y = a.style;a.attr("rotation", (c || 0) * Math.PI / 180 || 0), d && a.attr("position", [Na(d[0], n[0]), Na(d[1], n[1])]), v && a.attr("cursor", v), a.setColor(l, i && i.symbolInnerColor), a.setStyle(u);var _ = t.getItemVisual(e, "opacity");null != _ && (y.opacity = _);var x = t.getItemVisual(e, "liftZ"),
        w = a.__z2Origin;null != x ? null == w && (a.__z2Origin = a.z2, a.z2 += x) : null != w && (a.z2 = w, a.__z2Origin = null);var b = i && i.useNameLabel;ha(y, h, f, p, { labelFetcher: s, labelDataIndex: e, defaultText: r, isRectText: !0, autoColor: l }), a.off("mouseover").off("mouseout").off("emphasis").off("normal"), a.hoverStyle = h, ua(a);var M = ph(n);if (g && s.isAnimationEnabled()) {
      var S = function S() {
        if (!this.incremental) {
          var t = M[1] / M[0];this.animateTo({ scale: [Math.max(1.1 * M[0], M[0] + 3), Math.max(1.1 * M[1], M[1] + 3 * t)] }, 400, "elasticOut");
        }
      },
          C = function C() {
        this.incremental || this.animateTo({ scale: M }, 400, "elasticOut");
      };a.on("mouseover", S).on("mouseout", C).on("emphasis", S).on("normal", C);
    }
  }, Ey.fadeOut = function (t, e) {
    var n = this.childAt(0);this.silent = n.silent = !0, !(e && e.keepLabel) && (n.style.text = null), wa(n, { style: { opacity: 0 }, scale: [0, 0] }, this._seriesModel, this.dataIndex, t);
  }, h(fh, Cd);var Gy = vh.prototype;Gy.updateData = function (t, e) {
    e = yh(e);var n = this.group,
        i = t.hostModel,
        r = this._data,
        a = this._symbolCtor,
        o = _h(t);r || n.removeAll(), t.diff(r).add(function (i) {
      var r = t.getItemLayout(i);if (mh(t, r, i, e)) {
        var s = new a(t, i, o);s.attr("position", r), t.setItemGraphicEl(i, s), n.add(s);
      }
    }).update(function (s, l) {
      var u = r.getItemGraphicEl(l),
          h = t.getItemLayout(s);return mh(t, h, s, e) ? (u ? (u.updateData(t, s, o), wa(u, { position: h }, i)) : (u = new a(t, s), u.attr("position", h)), n.add(u), void t.setItemGraphicEl(s, u)) : void n.remove(u);
    }).remove(function (t) {
      var e = r.getItemGraphicEl(t);e && e.fadeOut(function () {
        n.remove(e);
      });
    }).execute(), this._data = t;
  }, Gy.isPersistent = function () {
    return !0;
  }, Gy.updateLayout = function () {
    var t = this._data;t && t.eachItemGraphicEl(function (e, n) {
      var i = t.getItemLayout(n);e.attr("position", i);
    });
  }, Gy.incrementalPrepareUpdate = function (t) {
    this._seriesScope = _h(t), this._data = null, this.group.removeAll();
  }, Gy.incrementalUpdate = function (t, e, n) {
    function i(t) {
      t.isGroup || (t.incremental = t.useHoverLayer = !0);
    }n = yh(n);for (var r = t.start; r < t.end; r++) {
      var a = e.getItemLayout(r);if (mh(e, a, r, n)) {
        var o = new this._symbolCtor(e, r, this._seriesScope);o.traverse(i), o.attr("position", a), this.group.add(o), e.setItemGraphicEl(r, o);
      }
    }
  }, Gy.remove = function (t) {
    var e = this.group,
        n = this._data;n && t ? n.eachItemGraphicEl(function (t) {
      t.fadeOut(function () {
        e.remove(t);
      });
    }) : e.removeAll();
  };var Hy = function Hy(t, e, n, i, r, a, o, s) {
    for (var l = Mh(t, e), u = [], h = [], c = [], d = [], f = [], p = [], g = [], v = xh(r, e, o), m = xh(a, t, s), y = 0; y < l.length; y++) {
      var _ = l[y],
          x = !0;switch (_.cmd) {case "=":
          var w = t.getItemLayout(_.idx),
              b = e.getItemLayout(_.idx1);(isNaN(w[0]) || isNaN(w[1])) && (w = b.slice()), u.push(w), h.push(b), c.push(n[_.idx]), d.push(i[_.idx1]), g.push(e.getRawIndex(_.idx1));break;case "+":
          var M = _.idx;u.push(r.dataToPoint([e.get(v.dataDimsForPoint[0], M), e.get(v.dataDimsForPoint[1], M)])), h.push(e.getItemLayout(M).slice()), c.push(bh(v, r, e, M)), d.push(i[M]), g.push(e.getRawIndex(M));break;case "-":
          var M = _.idx,
              S = t.getRawIndex(M);S !== M ? (u.push(t.getItemLayout(M)), h.push(a.dataToPoint([t.get(m.dataDimsForPoint[0], M), t.get(m.dataDimsForPoint[1], M)])), c.push(n[M]), d.push(bh(m, a, t, M)), g.push(S)) : x = !1;}x && (f.push(_), p.push(p.length));
    }p.sort(function (t, e) {
      return g[t] - g[e];
    });for (var C = [], I = [], T = [], k = [], D = [], y = 0; y < p.length; y++) {
      var M = p[y];C[y] = u[M], I[y] = h[M], T[y] = c[M], k[y] = d[M], D[y] = f[M];
    }return { current: C, next: I, stackedOnCurrent: T, stackedOnNext: k, status: D };
  },
      Wy = oe,
      jy = se,
      qy = U,
      Uy = H,
      Xy = [],
      Yy = [],
      Zy = [],
      $y = Pr.extend({ type: "ec-polyline", shape: { points: [], smooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, style: { fill: null, stroke: "#000" }, brush: Vp(Pr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.points,
          i = 0,
          r = n.length,
          a = kh(n, e.smoothConstraint);if (e.connectNulls) {
        for (; r > 0 && Sh(n[r - 1]); r--) {}for (; r > i && Sh(n[i]); i++) {}
      }for (; r > i;) {
        i += Ch(t, n, i, r, r, 1, a.min, a.max, e.smooth, e.smoothMonotone, e.connectNulls) + 1;
      }
    } }),
      Ky = Pr.extend({ type: "ec-polygon", shape: { points: [], stackedOnPoints: [], smooth: 0, stackedOnSmooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, brush: Vp(Pr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.points,
          i = e.stackedOnPoints,
          r = 0,
          a = n.length,
          o = e.smoothMonotone,
          s = kh(n, e.smoothConstraint),
          l = kh(i, e.smoothConstraint);if (e.connectNulls) {
        for (; a > 0 && Sh(n[a - 1]); a--) {}for (; a > r && Sh(n[r]); r++) {}
      }for (; a > r;) {
        var u = Ch(t, n, r, a, a, 1, s.min, s.max, e.smooth, o, e.connectNulls);Ch(t, i, r + u - 1, u, a, -1, l.min, l.max, e.stackedOnSmooth, o, e.connectNulls), r += u + 1, t.closePath();
      }
    } });Cs.extend({ type: "line", init: function init() {
      var t = new Cd(),
          e = new vh();this.group.add(e.group), this._symbolDraw = e, this._lineGroup = t;
    }, render: function render(t, e, n) {
      var i = t.coordinateSystem,
          r = this.group,
          a = t.getData(),
          o = t.getModel("lineStyle"),
          l = t.getModel("areaStyle"),
          u = a.mapArray(a.getItemLayout),
          h = "polar" === i.type,
          c = this._coordSys,
          d = this._symbolDraw,
          f = this._polyline,
          p = this._polygon,
          g = this._lineGroup,
          v = t.get("animation"),
          m = !l.isEmpty(),
          y = l.get("origin"),
          _ = xh(i, a, y),
          x = Lh(i, a, _),
          w = t.get("showSymbol"),
          b = w && !h && Nh(t, a, i),
          M = this._data;M && M.eachItemGraphicEl(function (t, e) {
        t.__temp && (r.remove(t), M.setItemGraphicEl(e, null));
      }), w || d.remove(), r.add(g);var S = !h && t.get("step");f && c.type === i.type && S === this._step ? (m && !p ? p = this._newPolygon(u, x, i, v) : p && !m && (g.remove(p), p = this._polygon = null), g.setClipPath(Eh(i, !1, !1, t)), w && d.updateData(a, { isIgnore: b, clipShape: Eh(i, !1, !0, t) }), a.eachItemGraphicEl(function (t) {
        t.stopAnimation(!0);
      }), Dh(this._stackedOnPoints, x) && Dh(this._points, u) || (v ? this._updateAnimation(a, x, i, n, S, y) : (S && (u = Bh(u, i, S), x = Bh(x, i, S)), f.setShape({ points: u }), p && p.setShape({ points: u, stackedOnPoints: x })))) : (w && d.updateData(a, { isIgnore: b, clipShape: Eh(i, !1, !0, t) }), S && (u = Bh(u, i, S), x = Bh(x, i, S)), f = this._newPolyline(u, i, v), m && (p = this._newPolygon(u, x, i, v)), g.setClipPath(Eh(i, !0, !1, t)));var C = zh(a, i) || a.getVisual("color");f.useStyle(s(o.getLineStyle(), { fill: "none", stroke: C, lineJoin: "bevel" }));var I = t.get("smooth");if (I = Ah(t.get("smooth")), f.setShape({ smooth: I, smoothMonotone: t.get("smoothMonotone"), connectNulls: t.get("connectNulls") }), p) {
        var T = a.getCalculationInfo("stackedOnSeries"),
            k = 0;p.useStyle(s(l.getAreaStyle(), { fill: C, opacity: .7, lineJoin: "bevel" })), T && (k = Ah(T.get("smooth"))), p.setShape({ smooth: I, stackedOnSmooth: k, smoothMonotone: t.get("smoothMonotone"), connectNulls: t.get("connectNulls") });
      }this._data = a, this._coordSys = i, this._stackedOnPoints = x, this._points = u, this._step = S, this._valueOrigin = y;
    }, dispose: function dispose() {}, highlight: function highlight(t, e, n, i) {
      var r = t.getData(),
          a = Fi(r, i);if (!(a instanceof Array) && null != a && a >= 0) {
        var o = r.getItemGraphicEl(a);if (!o) {
          var s = r.getItemLayout(a);if (!s) return;o = new fh(r, a), o.position = s, o.setZ(t.get("zlevel"), t.get("z")), o.ignore = isNaN(s[0]) || isNaN(s[1]), o.__temp = !0, r.setItemGraphicEl(a, o), o.stopSymbolAnimation(!0), this.group.add(o);
        }o.highlight();
      } else Cs.prototype.highlight.call(this, t, e, n, i);
    }, downplay: function downplay(t, e, n, i) {
      var r = t.getData(),
          a = Fi(r, i);if (null != a && a >= 0) {
        var o = r.getItemGraphicEl(a);o && (o.__temp ? (r.setItemGraphicEl(a, null), this.group.remove(o)) : o.downplay());
      } else Cs.prototype.downplay.call(this, t, e, n, i);
    }, _newPolyline: function _newPolyline(t) {
      var e = this._polyline;return e && this._lineGroup.remove(e), e = new $y({ shape: { points: t }, silent: !0, z2: 10 }), this._lineGroup.add(e), this._polyline = e, e;
    }, _newPolygon: function _newPolygon(t, e) {
      var n = this._polygon;return n && this._lineGroup.remove(n), n = new Ky({ shape: { points: t, stackedOnPoints: e }, silent: !0 }), this._lineGroup.add(n), this._polygon = n, n;
    }, _updateAnimation: function _updateAnimation(t, e, n, i, r, a) {
      var o = this._polyline,
          s = this._polygon,
          l = t.hostModel,
          u = Hy(this._data, t, this._stackedOnPoints, e, this._coordSys, n, this._valueOrigin, a),
          h = u.current,
          c = u.stackedOnCurrent,
          d = u.next,
          f = u.stackedOnNext;r && (h = Bh(u.current, n, r), c = Bh(u.stackedOnCurrent, n, r), d = Bh(u.next, n, r), f = Bh(u.stackedOnNext, n, r)), o.shape.__points = u.current, o.shape.points = h, wa(o, { shape: { points: d } }, l), s && (s.setShape({ points: h, stackedOnPoints: c }), wa(s, { shape: { points: d, stackedOnPoints: f } }, l));for (var p = [], g = u.status, v = 0; v < g.length; v++) {
        var m = g[v].cmd;if ("=" === m) {
          var y = t.getItemGraphicEl(g[v].idx1);y && p.push({ el: y, ptIdx: v });
        }
      }o.animators && o.animators.length && o.animators[0].during(function () {
        for (var t = 0; t < p.length; t++) {
          var e = p[t].el;e.attr("position", o.shape.__points[p[t].ptIdx]);
        }
      });
    }, remove: function remove() {
      var t = this.group,
          e = this._data;this._lineGroup.removeAll(), this._symbolDraw.remove(!0), e && e.eachItemGraphicEl(function (n, i) {
        n.__temp && (t.remove(n), e.setItemGraphicEl(i, null));
      }), this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
    } });var Qy = function Qy(t, e, n) {
    return { seriesType: t, performRawSeries: !0, reset: function reset(t, i) {
        function r(e, n) {
          if ("function" == typeof s) {
            var i = t.getRawValue(n),
                r = t.getDataParams(n);e.setItemVisual(n, "symbolSize", s(i, r));
          }if (e.hasItemOption) {
            var a = e.getItemModel(n),
                o = a.getShallow("symbol", !0),
                l = a.getShallow("symbolSize", !0),
                u = a.getShallow("symbolKeepAspect", !0);null != o && e.setItemVisual(n, "symbol", o), null != l && e.setItemVisual(n, "symbolSize", l), null != u && e.setItemVisual(n, "symbolKeepAspect", u);
          }
        }var a = t.getData(),
            o = t.get("symbol") || e,
            s = t.get("symbolSize"),
            l = t.get("symbolKeepAspect");if (a.setVisual({ legendSymbol: n || o, symbol: o, symbolSize: s, symbolKeepAspect: l }), !i.isSeriesFiltered(t)) {
          var u = "function" == typeof s;return { dataEach: a.hasItemOption || u ? r : null };
        }
      } };
  },
      Jy = function Jy(t) {
    return { seriesType: t, plan: Sv(), reset: function reset(t) {
        function e(t, e) {
          for (var n = t.end - t.start, r = a && new Float32Array(n * s), l = t.start, u = 0, h = [], c = []; l < t.end; l++) {
            var d;if (1 === s) {
              var f = e.get(o[0], l);d = !isNaN(f) && i.dataToPoint(f, null, c);
            } else {
              var f = h[0] = e.get(o[0], l),
                  p = h[1] = e.get(o[1], l);d = !isNaN(f) && !isNaN(p) && i.dataToPoint(h, null, c);
            }a ? (r[u++] = d ? d[0] : 0 / 0, r[u++] = d ? d[1] : 0 / 0) : e.setItemLayout(l, d && d.slice() || [0 / 0, 0 / 0]);
          }a && e.setLayout("symbolPoints", r);
        }var n = t.getData(),
            i = t.coordinateSystem,
            r = t.pipelineContext,
            a = r.large;if (i) {
          var o = p(i.dimensions, function (t) {
            return n.mapDimension(t);
          }).slice(0, 2),
              s = o.length,
              l = n.getCalculationInfo("stackResultDimension");return ou(n, o[0]) && (o[0] = l), ou(n, o[1]) && (o[1] = l), s && { progress: e };
        }
      } };
  },
      t_ = { average: function average(t) {
      for (var e = 0, n = 0, i = 0; i < t.length; i++) {
        isNaN(t[i]) || (e += t[i], n++);
      }return 0 === n ? 0 / 0 : e / n;
    }, sum: function sum(t) {
      for (var e = 0, n = 0; n < t.length; n++) {
        e += t[n] || 0;
      }return e;
    }, max: function max(t) {
      for (var e = -1 / 0, n = 0; n < t.length; n++) {
        t[n] > e && (e = t[n]);
      }return isFinite(e) ? e : 0 / 0;
    }, min: function min(t) {
      for (var e = 1 / 0, n = 0; n < t.length; n++) {
        t[n] < e && (e = t[n]);
      }return isFinite(e) ? e : 0 / 0;
    }, nearest: function nearest(t) {
      return t[0];
    } },
      e_ = function e_(t) {
    return Math.round(t.length / 2);
  },
      n_ = function n_(t) {
    return { seriesType: t, modifyOutputEnd: !0, reset: function reset(t) {
        var e = t.getData(),
            n = t.get("sampling"),
            i = t.coordinateSystem;if ("cartesian2d" === i.type && n) {
          var r = i.getBaseAxis(),
              a = i.getOtherAxis(r),
              o = r.getExtent(),
              s = o[1] - o[0],
              l = Math.round(e.count() / s);if (l > 1) {
            var u;"string" == typeof n ? u = t_[n] : "function" == typeof n && (u = n), u && t.setData(e.downSample(e.mapDimension(a.dim), 1 / l, u, e_));
          }
        }
      } };
  },
      i_ = function i_(t) {
    this._axes = {}, this._dimList = [], this.name = t || "";
  };i_.prototype = { constructor: i_, type: "cartesian", getAxis: function getAxis(t) {
      return this._axes[t];
    }, getAxes: function getAxes() {
      return p(this._dimList, Vh, this);
    }, getAxesByScale: function getAxesByScale(t) {
      return t = t.toLowerCase(), v(this.getAxes(), function (e) {
        return e.scale.type === t;
      });
    }, addAxis: function addAxis(t) {
      var e = t.dim;this._axes[e] = t, this._dimList.push(e);
    }, dataToCoord: function dataToCoord(t) {
      return this._dataCoordConvert(t, "dataToCoord");
    }, coordToData: function coordToData(t) {
      return this._dataCoordConvert(t, "coordToData");
    }, _dataCoordConvert: function _dataCoordConvert(t, e) {
      for (var n = this._dimList, i = t instanceof Array ? [] : {}, r = 0; r < n.length; r++) {
        var a = n[r],
            o = this._axes[a];i[a] = o[e](t[a]);
      }return i;
    } }, Gh.prototype = { constructor: Gh, type: "cartesian2d", dimensions: ["x", "y"], getBaseAxis: function getBaseAxis() {
      return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAxis("x");
    }, containPoint: function containPoint(t) {
      var e = this.getAxis("x"),
          n = this.getAxis("y");return e.contain(e.toLocalCoord(t[0])) && n.contain(n.toLocalCoord(t[1]));
    }, containData: function containData(t) {
      return this.getAxis("x").containData(t[0]) && this.getAxis("y").containData(t[1]);
    }, dataToPoint: function dataToPoint(t, e, n) {
      var i = this.getAxis("x"),
          r = this.getAxis("y");return n = n || [], n[0] = i.toGlobalCoord(i.dataToCoord(t[0])), n[1] = r.toGlobalCoord(r.dataToCoord(t[1])), n;
    }, clampData: function clampData(t, e) {
      var n = this.getAxis("x").scale,
          i = this.getAxis("y").scale,
          r = n.getExtent(),
          a = i.getExtent(),
          o = n.parse(t[0]),
          s = i.parse(t[1]);return e = e || [], e[0] = Math.min(Math.max(Math.min(r[0], r[1]), o), Math.max(r[0], r[1])), e[1] = Math.min(Math.max(Math.min(a[0], a[1]), s), Math.max(a[0], a[1])), e;
    }, pointToData: function pointToData(t, e) {
      var n = this.getAxis("x"),
          i = this.getAxis("y");return e = e || [], e[0] = n.coordToData(n.toLocalCoord(t[0])), e[1] = i.coordToData(i.toLocalCoord(t[1])), e;
    }, getOtherAxis: function getOtherAxis(t) {
      return this.getAxis("x" === t.dim ? "y" : "x");
    } }, h(Gh, i_);var r_ = function r_(t, e, n, i, r) {
    Ly.call(this, t, e, n), this.type = i || "value", this.position = r || "bottom";
  };r_.prototype = { constructor: r_, index: 0, getAxesOnZeroOf: null, model: null, isHorizontal: function isHorizontal() {
      var t = this.position;return "top" === t || "bottom" === t;
    }, getGlobalExtent: function getGlobalExtent(t) {
      var e = this.getExtent();return e[0] = this.toGlobalCoord(e[0]), e[1] = this.toGlobalCoord(e[1]), t && e[0] > e[1] && e.reverse(), e;
    }, getOtherAxis: function getOtherAxis() {
      this.grid.getOtherAxis();
    }, pointToData: function pointToData(t, e) {
      return this.coordToData(this.toLocalCoord(t["x" === this.dim ? 0 : 1]), e);
    }, toLocalCoord: null, toGlobalCoord: null }, h(r_, Ly);var a_ = { show: !0, zlevel: 0, z: 0, inverse: !1, name: "", nameLocation: "end", nameRotate: null, nameTruncate: { maxWidth: null, ellipsis: "...", placeholder: "." }, nameTextStyle: {}, nameGap: 15, silent: !1, triggerEvent: !1, tooltip: { show: !1 }, axisPointer: {}, axisLine: { show: !0, onZero: !0, onZeroAxisIndex: null, lineStyle: { color: "#333", width: 1, type: "solid" }, symbol: ["none", "none"], symbolSize: [10, 15] }, axisTick: { show: !0, inside: !1, length: 5, lineStyle: { width: 1 } }, axisLabel: { show: !0, inside: !1, rotate: 0, showMinLabel: null, showMaxLabel: null, margin: 8, fontSize: 12 }, splitLine: { show: !0, lineStyle: { color: ["#ccc"], width: 1, type: "solid" } }, splitArea: { show: !1, areaStyle: { color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"] } } },
      o_ = {};o_.categoryAxis = r({ boundaryGap: !0, deduplication: null, splitLine: { show: !1 }, axisTick: { alignWithLabel: !1, interval: "auto" }, axisLabel: { interval: "auto" } }, a_), o_.valueAxis = r({ boundaryGap: [0, 0], splitNumber: 5 }, a_), o_.timeAxis = s({ scale: !0, min: "dataMin", max: "dataMax" }, o_.valueAxis), o_.logAxis = s({ scale: !0, logBase: 10 }, o_.valueAxis);var s_ = ["value", "category", "time", "log"],
      l_ = function l_(t, e, n, i) {
    f(s_, function (o) {
      e.extend({ type: t + "Axis." + o, mergeDefaultAndTheme: function mergeDefaultAndTheme(e, i) {
          var a = this.layoutMode,
              s = a ? fo(e) : {},
              l = i.getTheme();r(e, l.get(o + "Axis")), r(e, this.getDefaultOption()), e.type = n(t, e), a && co(e, s, a);
        }, optionUpdated: function optionUpdated() {
          var t = this.option;"category" === t.type && (this.__ordinalMeta = du.createByAxisModel(this));
        }, getCategories: function getCategories(t) {
          var e = this.option;return "category" === e.type ? t ? e.data : this.__ordinalMeta.categories : void 0;
        }, getOrdinalMeta: function getOrdinalMeta() {
          return this.__ordinalMeta;
        }, defaultOption: a([{}, o_[o + "Axis"], i], !0) });
    }), Rg.registerSubTypeDefaulter(t + "Axis", _(n, t));
  },
      u_ = Rg.extend({ type: "cartesian2dAxis", axis: null, init: function init() {
      u_.superApply(this, "init", arguments), this.resetRange();
    }, mergeOption: function mergeOption() {
      u_.superApply(this, "mergeOption", arguments), this.resetRange();
    }, restoreData: function restoreData() {
      u_.superApply(this, "restoreData", arguments), this.resetRange();
    }, getCoordSysModel: function getCoordSysModel() {
      return this.ecModel.queryComponents({ mainType: "grid", index: this.option.gridIndex, id: this.option.gridId })[0];
    } });r(u_.prototype, my);var h_ = { offset: 0 };l_("x", u_, Hh, h_), l_("y", u_, Hh, h_), Rg.extend({ type: "grid", dependencies: ["xAxis", "yAxis"], layoutMode: "box", coordinateSystem: null, defaultOption: { show: !1, zlevel: 0, z: 0, left: "10%", top: 60, right: "10%", bottom: 60, containLabel: !1, backgroundColor: "rgba(0,0,0,0)", borderWidth: 1, borderColor: "#ccc" } });var c_ = jh.prototype;c_.type = "grid", c_.axisPointerEnabled = !0, c_.getRect = function () {
    return this._rect;
  }, c_.update = function (t, e) {
    var n = this._axesMap;this._updateScale(t, this.model), f(n.x, function (t) {
      Lu(t.scale, t.model);
    }), f(n.y, function (t) {
      Lu(t.scale, t.model);
    }), f(n.x, function (t) {
      qh(n, "y", t);
    }), f(n.y, function (t) {
      qh(n, "x", t);
    }), this.resize(this.model, e);
  }, c_.resize = function (t, e, n) {
    function i() {
      f(a, function (t) {
        var e = t.isHorizontal(),
            n = e ? [0, r.width] : [0, r.height],
            i = t.inverse ? 1 : 0;t.setExtent(n[i], n[1 - i]), Xh(t, e ? r.x : r.y);
      });
    }var r = ho(t.getBoxLayoutParams(), { width: e.getWidth(), height: e.getHeight() });this._rect = r;var a = this._axesList;i(), !n && t.get("containLabel") && (f(a, function (t) {
      if (!t.model.get("axisLabel.inside")) {
        var e = zu(t);if (e) {
          var n = t.isHorizontal() ? "height" : "width",
              i = t.model.get("axisLabel.margin");r[n] -= e[n] + i, "top" === t.position ? r.y += e.height + i : "left" === t.position && (r.x += e.width + i);
        }
      }
    }), i());
  }, c_.getAxis = function (t, e) {
    var n = this._axesMap[t];if (null != n) {
      if (null == e) for (var i in n) {
        if (n.hasOwnProperty(i)) return n[i];
      }return n[e];
    }
  }, c_.getAxes = function () {
    return this._axesList.slice();
  }, c_.getCartesian = function (t, e) {
    if (null != t && null != e) {
      var n = "x" + t + "y" + e;return this._coordsMap[n];
    }M(t) && (e = t.yAxisIndex, t = t.xAxisIndex);for (var i = 0, r = this._coordsList; i < r.length; i++) {
      if (r[i].getAxis("x").index === t || r[i].getAxis("y").index === e) return r[i];
    }
  }, c_.getCartesians = function () {
    return this._coordsList.slice();
  }, c_.convertToPixel = function (t, e, n) {
    var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.dataToPoint(n) : i.axis ? i.axis.toGlobalCoord(i.axis.dataToCoord(n)) : null;
  }, c_.convertFromPixel = function (t, e, n) {
    var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.pointToData(n) : i.axis ? i.axis.coordToData(i.axis.toLocalCoord(n)) : null;
  }, c_._findConvertTarget = function (t, e) {
    var n,
        i,
        r = e.seriesModel,
        a = e.xAxisModel || r && r.getReferringComponents("xAxis")[0],
        o = e.yAxisModel || r && r.getReferringComponents("yAxis")[0],
        s = e.gridModel,
        l = this._coordsList;if (r) n = r.coordinateSystem, u(l, n) < 0 && (n = null);else if (a && o) n = this.getCartesian(a.componentIndex, o.componentIndex);else if (a) i = this.getAxis("x", a.componentIndex);else if (o) i = this.getAxis("y", o.componentIndex);else if (s) {
      var h = s.coordinateSystem;h === this && (n = this._coordsList[0]);
    }return { cartesian: n, axis: i };
  }, c_.containPoint = function (t) {
    var e = this._coordsList[0];return e ? e.containPoint(t) : void 0;
  }, c_._initCartesian = function (t, e) {
    function n(n) {
      return function (o, s) {
        if (Wh(o, t, e)) {
          var l = o.get("position");"x" === n ? "top" !== l && "bottom" !== l && (l = "bottom", i[l] && (l = "top" === l ? "bottom" : "top")) : "left" !== l && "right" !== l && (l = "left", i[l] && (l = "left" === l ? "right" : "left")), i[l] = !0;var u = new r_(n, Ou(o), [0, 0], o.get("type"), l),
              h = "category" === u.type;u.onBand = h && o.get("boundaryGap"), u.inverse = o.get("inverse"), o.axis = u, u.model = o, u.grid = this, u.index = s, this._axesList.push(u), r[n][s] = u, a[n]++;
        }
      };
    }var i = { left: !1, right: !1, top: !1, bottom: !1 },
        r = { x: {}, y: {} },
        a = { x: 0, y: 0 };return e.eachComponent("xAxis", n("x"), this), e.eachComponent("yAxis", n("y"), this), a.x && a.y ? (this._axesMap = r, void f(r.x, function (e, n) {
      f(r.y, function (i, r) {
        var a = "x" + n + "y" + r,
            o = new Gh(a);o.grid = this, o.model = t, this._coordsMap[a] = o, this._coordsList.push(o), o.addAxis(e), o.addAxis(i);
      }, this);
    }, this)) : (this._axesMap = {}, void (this._axesList = []));
  }, c_._updateScale = function (t, e) {
    function n(t, e) {
      f(t.mapDimension(e.dim, !0), function (n) {
        e.scale.unionExtentFromData(t, su(t, n));
      });
    }f(this._axesList, function (t) {
      t.scale.setExtent(1 / 0, -1 / 0);
    }), t.eachSeries(function (i) {
      if (Zh(i)) {
        var r = Yh(i, t),
            a = r[0],
            o = r[1];if (!Wh(a, e, t) || !Wh(o, e, t)) return;var s = this.getCartesian(a.componentIndex, o.componentIndex),
            l = i.getData(),
            u = s.getAxis("x"),
            h = s.getAxis("y");"list" === l.type && (n(l, u, i), n(l, h, i));
      }
    }, this);
  }, c_.getTooltipAxes = function (t) {
    var e = [],
        n = [];return f(this.getCartesians(), function (i) {
      var r = null != t && "auto" !== t ? i.getAxis(t) : i.getBaseAxis(),
          a = i.getOtherAxis(r);u(e, r) < 0 && e.push(r), u(n, a) < 0 && n.push(a);
    }), { baseAxes: e, otherAxes: n };
  };var d_ = ["xAxis", "yAxis"];jh.create = function (t, e) {
    var n = [];return t.eachComponent("grid", function (i, r) {
      var a = new jh(i, t, e);a.name = "grid_" + r, a.resize(i, e, !0), i.coordinateSystem = a, n.push(a);
    }), t.eachSeries(function (e) {
      if (Zh(e)) {
        var n = Yh(e, t),
            i = n[0],
            r = n[1],
            a = i.getCoordSysModel(),
            o = a.coordinateSystem;e.coordinateSystem = o.getCartesian(i.componentIndex, r.componentIndex);
      }
    }), n;
  }, jh.dimensions = jh.prototype.dimensions = Gh.prototype.dimensions, Vo.register("cartesian2d", jh);var f_ = Math.PI,
      p_ = function p_(t, e) {
    this.opt = e, this.axisModel = t, s(e, { labelOffset: 0, nameDirection: 1, tickDirection: 1, labelDirection: 1, silent: !0 }), this.group = new Cd();var n = new Cd({ position: e.position.slice(), rotation: e.rotation });n.updateTransform(), this._transform = n.transform, this._dumbGroup = n;
  };p_.prototype = { constructor: p_, hasBuilder: function hasBuilder(t) {
      return !!g_[t];
    }, add: function add(t) {
      g_[t].call(this);
    }, getGroup: function getGroup() {
      return this.group;
    } };var g_ = { axisLine: function axisLine() {
      var t = this.opt,
          e = this.axisModel;if (e.get("axisLine.show")) {
        var n = this.axisModel.axis.getExtent(),
            i = this._transform,
            r = [n[0], 0],
            a = [n[1], 0];i && (ae(r, r, i), ae(a, a, i));var s = o({ lineCap: "round" }, e.getModel("axisLine.lineStyle").getLineStyle());this.group.add(new Yp(Yr({ anid: "line", shape: { x1: r[0], y1: r[1], x2: a[0], y2: a[1] }, style: s, strokeContainThreshold: t.strokeContainThreshold || 5, silent: !0, z2: 1 })));var l = e.get("axisLine.symbol"),
            u = e.get("axisLine.symbolSize"),
            h = e.get("axisLine.symbolOffset") || 0;if ("number" == typeof h && (h = [h, h]), null != l) {
          "string" == typeof l && (l = [l, l]), ("string" == typeof u || "number" == typeof u) && (u = [u, u]);var c = u[0],
              d = u[1];f([{ rotate: t.rotation + Math.PI / 2, offset: h[0], r: 0 }, { rotate: t.rotation - Math.PI / 2, offset: h[1], r: Math.sqrt((r[0] - a[0]) * (r[0] - a[0]) + (r[1] - a[1]) * (r[1] - a[1])) }], function (e, n) {
            if ("none" !== l[n] && null != l[n]) {
              var i = Vu(l[n], -c / 2, -d / 2, c, d, s.stroke, !0),
                  a = e.r + e.offset,
                  o = [r[0] + a * Math.cos(t.rotation), r[1] - a * Math.sin(t.rotation)];i.attr({ rotation: e.rotate, position: o, silent: !0 }), this.group.add(i);
            }
          }, this);
        }
      }
    }, axisTickLabel: function axisTickLabel() {
      var t = this.axisModel,
          e = this.opt,
          n = ic(this, t, e),
          i = rc(this, t, e);Jh(t, i, n);
    }, axisName: function axisName() {
      var t = this.opt,
          e = this.axisModel,
          n = k(t.axisName, e.get("name"));if (n) {
        var i,
            r = e.get("nameLocation"),
            a = t.nameDirection,
            s = e.getModel("nameTextStyle"),
            l = e.get("nameGap") || 0,
            u = this.axisModel.axis.getExtent(),
            h = u[0] > u[1] ? -1 : 1,
            c = ["start" === r ? u[0] - h * l : "end" === r ? u[1] + h * l : (u[0] + u[1]) / 2, nc(r) ? t.labelOffset + a * l : 0],
            d = e.get("nameRotate");null != d && (d = d * f_ / 180);var f;nc(r) ? i = v_(t.rotation, null != d ? d : t.rotation, a) : (i = Kh(t, r, d || 0, u), f = t.axisNameAvailableWidth, null != f && (f = Math.abs(f / Math.sin(i.rotation)), !isFinite(f) && (f = null)));var p = s.getFont(),
            g = e.get("nameTruncate", !0) || {},
            v = g.ellipsis,
            m = k(t.nameTruncateMaxWidth, g.maxWidth, f),
            y = null != v && null != m ? Cg(n, m, p, v, { minChar: 2, placeholder: g.placeholder }) : n,
            _ = e.get("tooltip", !0),
            x = e.mainType,
            w = { componentType: x, name: n, $vars: ["name"] };w[x + "Index"] = e.componentIndex;var b = new zp({ anid: "name", __fullText: n, __truncatedText: y, position: c, rotation: i.rotation, silent: Qh(e), z2: 1, tooltip: _ && _.show ? o({ content: n, formatter: function formatter() {
              return n;
            }, formatterParams: w }, _) : null });ca(b.style, s, { text: y, textFont: p, textFill: s.getTextColor() || e.get("axisLine.lineStyle.color"), textAlign: i.textAlign, textVerticalAlign: i.textVerticalAlign }), e.get("triggerEvent") && (b.eventData = $h(e), b.eventData.targetType = "axisName", b.eventData.name = n), this._dumbGroup.add(b), b.updateTransform(), this.group.add(b), b.decomposeTransform();
      }
    } },
      v_ = p_.innerTextLayout = function (t, e, n) {
    var i,
        r,
        a = qa(e - t);return Ua(a) ? (r = n > 0 ? "top" : "bottom", i = "center") : Ua(a - f_) ? (r = n > 0 ? "bottom" : "top", i = "center") : (r = "middle", i = a > 0 && f_ > a ? n > 0 ? "right" : "left" : n > 0 ? "left" : "right"), { rotation: a, textAlign: i, textVerticalAlign: r };
  },
      m_ = Ll({ type: "axis", _axisPointer: null, axisPointerClass: null, render: function render(t, e, n, i) {
      this.axisPointerClass && ac(t), m_.superApply(this, "render", arguments), hc(this, t, e, n, i, !0);
    }, updateAxisPointer: function updateAxisPointer(t, e, n, i) {
      hc(this, t, e, n, i, !1);
    }, remove: function remove(t, e) {
      var n = this._axisPointer;n && n.remove(e), m_.superApply(this, "remove", arguments);
    }, dispose: function dispose(t, e) {
      cc(this, e), m_.superApply(this, "dispose", arguments);
    } }),
      y_ = [];m_.registerAxisPointerClass = function (t, e) {
    y_[t] = e;
  }, m_.getAxisPointerClass = function (t) {
    return t && y_[t];
  };var __ = ["axisLine", "axisTickLabel", "axisName"],
      x_ = ["splitArea", "splitLine"],
      w_ = m_.extend({ type: "cartesianAxis", axisPointerClass: "CartesianAxisPointer", render: function render(t, e, n, i) {
      this.group.removeAll();var r = this._axisGroup;if (this._axisGroup = new Cd(), this.group.add(this._axisGroup), t.get("show")) {
        var a = t.getCoordSysModel(),
            o = dc(a, t),
            s = new p_(t, o);f(__, s.add, s), this._axisGroup.add(s.getGroup()), f(x_, function (e) {
          t.get(e + ".show") && this["_" + e](t, a);
        }, this), Ia(r, this._axisGroup, t), w_.superCall(this, "render", t, e, n, i);
      }
    }, remove: function remove() {
      this._splitAreaColors = null;
    }, _splitLine: function _splitLine(t, e) {
      var n = t.axis;if (!n.scale.isBlank()) {
        var i = t.getModel("splitLine"),
            r = i.getModel("lineStyle"),
            a = r.get("color");a = x(a) ? a : [a];for (var o = e.coordinateSystem.getRect(), l = n.isHorizontal(), u = 0, h = n.getTicksCoords({ tickModel: i }), c = [], d = [], f = r.getLineStyle(), p = 0; p < h.length; p++) {
          var g = n.toGlobalCoord(h[p].coord);l ? (c[0] = g, c[1] = o.y, d[0] = g, d[1] = o.y + o.height) : (c[0] = o.x, c[1] = g, d[0] = o.x + o.width, d[1] = g);var v = u++ % a.length,
              m = h[p].tickValue;this._axisGroup.add(new Yp(Yr({ anid: null != m ? "line_" + h[p].tickValue : null, shape: { x1: c[0], y1: c[1], x2: d[0], y2: d[1] }, style: s({ stroke: a[v] }, f), silent: !0 })));
        }
      }
    }, _splitArea: function _splitArea(t, e) {
      var n = t.axis;if (!n.scale.isBlank()) {
        var i = t.getModel("splitArea"),
            r = i.getModel("areaStyle"),
            a = r.get("color"),
            o = e.coordinateSystem.getRect(),
            l = n.getTicksCoords({ tickModel: i, clamp: !0 });if (l.length) {
          var u = a.length,
              h = this._splitAreaColors,
              c = N(),
              d = 0;if (h) for (var f = 0; f < l.length; f++) {
            var p = h.get(l[f].tickValue);if (null != p) {
              d = (p + (u - 1) * f) % u;break;
            }
          }var g = n.toGlobalCoord(l[0].coord),
              v = r.getAreaStyle();a = x(a) ? a : [a];for (var f = 1; f < l.length; f++) {
            var m,
                y,
                _,
                w,
                b = n.toGlobalCoord(l[f].coord);n.isHorizontal() ? (m = g, y = o.y, _ = b - m, w = o.height, g = m + _) : (m = o.x, y = g, _ = o.width, w = b - y, g = y + w);var M = l[f - 1].tickValue;null != M && c.set(M, d), this._axisGroup.add(new Xp({ anid: null != M ? "area_" + M : null, shape: { x: m, y: y, width: _, height: w }, style: s({ fill: a[d] }, v), silent: !0 })), d = (d + 1) % u;
          }this._splitAreaColors = c;
        }
      }
    } });w_.extend({ type: "xAxis" }), w_.extend({ type: "yAxis" }), Ll({ type: "grid", render: function render(t) {
      this.group.removeAll(), t.get("show") && this.group.add(new Xp({ shape: t.coordinateSystem.getRect(), style: s({ fill: t.get("backgroundColor") }, t.getItemStyle()), silent: !0, z2: -1 }));
    } }), wl(function (t) {
    t.xAxis && t.yAxis && !t.grid && (t.grid = {});
  }), kl(Qy("line", "circle", "line")), Tl(Jy("line")), bl(sm.PROCESSOR.STATISTIC, n_("line")), Pl({ type: "title", layoutMode: { type: "box", ignoreSize: !0 }, defaultOption: { zlevel: 0, z: 6, show: !0, text: "", target: "blank", subtext: "", subtarget: "blank", left: 0, top: 0, backgroundColor: "rgba(0,0,0,0)", borderColor: "#ccc", borderWidth: 0, padding: 5, itemGap: 10, textStyle: { fontSize: 18, fontWeight: "bolder", color: "#333" }, subtextStyle: { color: "#aaa" } } }), Ll({ type: "title", render: function render(t, e, n) {
      if (this.group.removeAll(), t.get("show")) {
        var i = this.group,
            r = t.getModel("textStyle"),
            a = t.getModel("subtextStyle"),
            o = t.get("textAlign"),
            s = t.get("textBaseline"),
            l = new zp({ style: ca({}, r, { text: t.get("text"), textFill: r.getTextColor() }, { disableBox: !0 }), z2: 10 }),
            u = l.getBoundingRect(),
            h = t.get("subtext"),
            c = new zp({ style: ca({}, a, { text: h, textFill: a.getTextColor(), y: u.height + t.get("itemGap"), textVerticalAlign: "top" }, { disableBox: !0 }), z2: 10 }),
            d = t.get("link"),
            f = t.get("sublink");l.silent = !d, c.silent = !f, d && l.on("click", function () {
          window.open(d, "_" + t.get("target"));
        }), f && c.on("click", function () {
          window.open(f, "_" + t.get("subtarget"));
        }), i.add(l), h && i.add(c);var p = i.getBoundingRect(),
            g = t.getBoxLayoutParams();g.width = p.width, g.height = p.height;var v = ho(g, { width: n.getWidth(), height: n.getHeight() }, t.get("padding"));o || (o = t.get("left") || t.get("right"), "middle" === o && (o = "center"), "right" === o ? v.x += v.width : "center" === o && (v.x += v.width / 2)), s || (s = t.get("top") || t.get("bottom"), "center" === s && (s = "middle"), "bottom" === s ? v.y += v.height : "middle" === s && (v.y += v.height / 2), s = s || "top"), i.attr("position", [v.x, v.y]);var m = { textAlign: o, textVerticalAlign: s };l.setStyle(m), c.setStyle(m), p = i.getBoundingRect();var y = v.margin,
            _ = t.getItemStyle(["color", "opacity"]);_.fill = t.get("backgroundColor");var x = new Xp({ shape: { x: p.x - y[3], y: p.y - y[0], width: p.width + y[1] + y[3], height: p.height + y[0] + y[2], r: t.get("borderRadius") }, style: _, silent: !0 });Zr(x), i.add(x);
      }
    } });var b_ = Pl({ type: "legend.plain", dependencies: ["series"], layoutMode: { type: "box", ignoreSize: !0 }, init: function init(t, e, n) {
      this.mergeDefaultAndTheme(t, n), t.selected = t.selected || {};
    }, mergeOption: function mergeOption(t) {
      b_.superCall(this, "mergeOption", t);
    }, optionUpdated: function optionUpdated() {
      this._updateData(this.ecModel);var t = this._data;if (t[0] && "single" === this.get("selectedMode")) {
        for (var e = !1, n = 0; n < t.length; n++) {
          var i = t[n].get("name");if (this.isSelected(i)) {
            this.select(i), e = !0;break;
          }
        }!e && this.select(t[0].get("name"));
      }
    }, _updateData: function _updateData(t) {
      var e = [],
          n = [];t.eachRawSeries(function (i) {
        var r = i.name;n.push(r);var a;if (i.legendDataProvider) {
          var o = i.legendDataProvider(),
              s = o.mapArray(o.getName);t.isSeriesFiltered(i) || (n = n.concat(s)), s.length ? e = e.concat(s) : a = !0;
        } else a = !0;a && zi(i) && e.push(i.name);
      }), this._availableNames = n;var i = this.get("data") || e,
          r = p(i, function (t) {
        return ("string" == typeof t || "number" == typeof t) && (t = { name: t }), new Aa(t, this, this.ecModel);
      }, this);this._data = r;
    }, getData: function getData() {
      return this._data;
    }, select: function select(t) {
      var e = this.option.selected,
          n = this.get("selectedMode");if ("single" === n) {
        var i = this._data;f(i, function (t) {
          e[t.get("name")] = !1;
        });
      }e[t] = !0;
    }, unSelect: function unSelect(t) {
      "single" !== this.get("selectedMode") && (this.option.selected[t] = !1);
    }, toggleSelected: function toggleSelected(t) {
      var e = this.option.selected;e.hasOwnProperty(t) || (e[t] = !0), this[e[t] ? "unSelect" : "select"](t);
    }, isSelected: function isSelected(t) {
      var e = this.option.selected;return !(e.hasOwnProperty(t) && !e[t]) && u(this._availableNames, t) >= 0;
    }, defaultOption: { zlevel: 0, z: 4, show: !0, orient: "horizontal", left: "center", top: 0, align: "auto", backgroundColor: "rgba(0,0,0,0)", borderColor: "#ccc", borderRadius: 0, borderWidth: 0, padding: 5, itemGap: 10, itemWidth: 25, itemHeight: 14, inactiveColor: "#ccc", textStyle: { color: "#333" }, selectedMode: !0, tooltip: { show: !1 } } });Sl("legendToggleSelect", "legendselectchanged", _(fc, "toggleSelected")), Sl("legendSelect", "legendselected", _(fc, "select")), Sl("legendUnSelect", "legendunselected", _(fc, "unSelect"));var M_ = _,
      S_ = f,
      C_ = Cd,
      I_ = Ll({ type: "legend.plain", newlineDisabled: !1, init: function init() {
      this.group.add(this._contentGroup = new C_()), this._backgroundEl;
    }, getContentGroup: function getContentGroup() {
      return this._contentGroup;
    }, render: function render(t, e, n) {
      if (this.resetInner(), t.get("show", !0)) {
        var i = t.get("align");i && "auto" !== i || (i = "right" === t.get("left") && "vertical" === t.get("orient") ? "right" : "left"), this.renderInner(i, t, e, n);var r = t.getBoxLayoutParams(),
            a = { width: n.getWidth(), height: n.getHeight() },
            o = t.get("padding"),
            l = ho(r, a, o),
            u = this.layoutInner(t, i, l),
            h = ho(s({ width: u.width, height: u.height }, r), a, o);this.group.attr("position", [h.x - u.x, h.y - u.y]), this.group.add(this._backgroundEl = pc(u, t));
      }
    }, resetInner: function resetInner() {
      this.getContentGroup().removeAll(), this._backgroundEl && this.group.remove(this._backgroundEl);
    }, renderInner: function renderInner(t, e, n, i) {
      var r = this.getContentGroup(),
          a = N(),
          o = e.get("selectedMode"),
          s = [];n.eachRawSeries(function (t) {
        !t.get("legendHoverLink") && s.push(t.id);
      }), S_(e.getData(), function (l, u) {
        var h = l.get("name");if (!this.newlineDisabled && ("" === h || "\n" === h)) return void r.add(new C_({ newline: !0 }));var c = n.getSeriesByName(h)[0];if (!a.get(h)) if (c) {
          var d = c.getData(),
              f = d.getVisual("color");"function" == typeof f && (f = f(c.getDataParams(0)));var p = d.getVisual("legendSymbol") || "roundRect",
              g = d.getVisual("symbol"),
              v = this._createItem(h, u, l, e, p, g, t, f, o);v.on("click", M_(gc, h, i)).on("mouseover", M_(vc, c, null, i, s)).on("mouseout", M_(mc, c, null, i, s)), a.set(h, !0);
        } else n.eachRawSeries(function (n) {
          if (!a.get(h) && n.legendDataProvider) {
            var r = n.legendDataProvider(),
                c = r.indexOfName(h);if (0 > c) return;var d = r.getItemVisual(c, "color"),
                f = "roundRect",
                p = this._createItem(h, u, l, e, f, null, t, d, o);p.on("click", M_(gc, h, i)).on("mouseover", M_(vc, n, h, i, s)).on("mouseout", M_(mc, n, h, i, s)), a.set(h, !0);
          }
        }, this);
      }, this);
    }, _createItem: function _createItem(t, e, n, i, r, a, s, l, u) {
      var h = i.get("itemWidth"),
          c = i.get("itemHeight"),
          d = i.get("inactiveColor"),
          f = i.get("symbolKeepAspect"),
          p = i.isSelected(t),
          g = new C_(),
          v = n.getModel("textStyle"),
          m = n.get("icon"),
          y = n.getModel("tooltip"),
          _ = y.parentModel;
      if (r = m || r, g.add(Vu(r, 0, 0, h, c, p ? l : d, null == f ? !0 : f)), !m && a && (a !== r || "none" == a)) {
        var x = .8 * c;"none" === a && (a = "circle"), g.add(Vu(a, (h - x) / 2, (c - x) / 2, x, x, p ? l : d, null == f ? !0 : f));
      }var w = "left" === s ? h + 5 : -5,
          b = s,
          M = i.get("formatter"),
          S = t;"string" == typeof M && M ? S = M.replace("{name}", null != t ? t : "") : "function" == typeof M && (S = M(t)), g.add(new zp({ style: ca({}, v, { text: S, x: w, y: c / 2, textFill: p ? v.getTextColor() : d, textAlign: b, textVerticalAlign: "middle" }) }));var C = new Xp({ shape: g.getBoundingRect(), invisible: !0, tooltip: y.get("show") ? o({ content: t, formatter: _.get("formatter", !0) || function () {
            return t;
          }, formatterParams: { componentType: "legend", legendIndex: i.componentIndex, name: t, $vars: ["name"] } }, y.option) : null });return g.add(C), g.eachChild(function (t) {
        t.silent = !0;
      }), C.silent = !u, this.getContentGroup().add(g), ua(g), g.__legendDataIndex = e, g;
    }, layoutInner: function layoutInner(t, e, n) {
      var i = this.getContentGroup();Pg(t.get("orient"), i, t.get("itemGap"), n.width, n.height);var r = i.getBoundingRect();return i.attr("position", [-r.x, -r.y]), this.group.getBoundingRect();
    } }),
      T_ = function T_(t) {
    var e = t.findComponents({ mainType: "legend" });e && e.length && t.filterSeries(function (t) {
      for (var n = 0; n < e.length; n++) {
        if (!e[n].isSelected(t.name)) return !1;
      }return !0;
    });
  };bl(T_), Rg.registerSubTypeDefaulter("legend", function () {
    return "plain";
  });var k_ = b_.extend({ type: "legend.scroll", setScrollDataIndex: function setScrollDataIndex(t) {
      this.option.scrollDataIndex = t;
    }, defaultOption: { scrollDataIndex: 0, pageButtonItemGap: 5, pageButtonGap: null, pageButtonPosition: "end", pageFormatter: "{current}/{total}", pageIcons: { horizontal: ["M0,0L12,-10L12,10z", "M0,0L-12,-10L-12,10z"], vertical: ["M0,0L20,0L10,-20z", "M0,0L20,0L10,20z"] }, pageIconColor: "#2f4554", pageIconInactiveColor: "#aaa", pageIconSize: 15, pageTextStyle: { color: "#333" }, animationDurationUpdate: 800 }, init: function init(t, e, n, i) {
      var r = fo(t);k_.superCall(this, "init", t, e, n, i), yc(this, t, r);
    }, mergeOption: function mergeOption(t, e) {
      k_.superCall(this, "mergeOption", t, e), yc(this, this.option, t);
    }, getOrient: function getOrient() {
      return "vertical" === this.get("orient") ? { index: 1, name: "vertical" } : { index: 0, name: "horizontal" };
    } }),
      D_ = Cd,
      A_ = ["width", "height"],
      P_ = ["x", "y"],
      L_ = I_.extend({ type: "legend.scroll", newlineDisabled: !0, init: function init() {
      L_.superCall(this, "init"), this._currentIndex = 0, this.group.add(this._containerGroup = new D_()), this._containerGroup.add(this.getContentGroup()), this.group.add(this._controllerGroup = new D_()), this._showController;
    }, resetInner: function resetInner() {
      L_.superCall(this, "resetInner"), this._controllerGroup.removeAll(), this._containerGroup.removeClipPath(), this._containerGroup.__rectSize = null;
    }, renderInner: function renderInner(t, e, n, i) {
      function r(t, n) {
        var r = t + "DataIndex",
            l = Da(e.get("pageIcons", !0)[e.getOrient().name][n], { onclick: y(a._pageGo, a, r, e, i) }, { x: -s[0] / 2, y: -s[1] / 2, width: s[0], height: s[1] });l.name = t, o.add(l);
      }var a = this;L_.superCall(this, "renderInner", t, e, n, i);var o = this._controllerGroup,
          s = e.get("pageIconSize", !0);x(s) || (s = [s, s]), r("pagePrev", 0);var l = e.getModel("pageTextStyle");o.add(new zp({ name: "pageText", style: { textFill: l.getTextColor(), font: l.getFont(), textVerticalAlign: "middle", textAlign: "center" }, silent: !0 })), r("pageNext", 1);
    }, layoutInner: function layoutInner(t, e, n) {
      var i = this.getContentGroup(),
          r = this._containerGroup,
          a = this._controllerGroup,
          o = t.getOrient().index,
          s = A_[o],
          l = A_[1 - o],
          u = P_[1 - o];Pg(t.get("orient"), i, t.get("itemGap"), o ? n.width : null, o ? null : n.height), Pg("horizontal", a, t.get("pageButtonItemGap", !0));var h = i.getBoundingRect(),
          c = a.getBoundingRect(),
          d = this._showController = h[s] > n[s],
          f = [-h.x, -h.y];f[o] = i.position[o];var p = [0, 0],
          g = [-c.x, -c.y],
          v = D(t.get("pageButtonGap", !0), t.get("itemGap", !0));if (d) {
        var m = t.get("pageButtonPosition", !0);"end" === m ? g[o] += n[s] - c[s] : p[o] += c[s] + v;
      }g[1 - o] += h[l] / 2 - c[l] / 2, i.attr("position", f), r.attr("position", p), a.attr("position", g);var y = this.group.getBoundingRect(),
          y = { x: 0, y: 0 };if (y[s] = d ? n[s] : h[s], y[l] = Math.max(h[l], c[l]), y[u] = Math.min(0, c[u] + g[1 - o]), r.__rectSize = n[s], d) {
        var _ = { x: 0, y: 0 };_[s] = Math.max(n[s] - c[s] - v, 0), _[l] = y[l], r.setClipPath(new Xp({ shape: _ })), r.__rectSize = _[s];
      } else a.eachChild(function (t) {
        t.attr({ invisible: !0, silent: !0 });
      });var x = this._getPageInfo(t);return null != x.pageIndex && wa(i, { position: x.contentPosition }, d ? t : !1), this._updatePageInfoView(t, x), y;
    }, _pageGo: function _pageGo(t, e, n) {
      var i = this._getPageInfo(e)[t];null != i && n.dispatchAction({ type: "legendScroll", scrollDataIndex: i, legendId: e.id });
    }, _updatePageInfoView: function _updatePageInfoView(t, e) {
      var n = this._controllerGroup;f(["pagePrev", "pageNext"], function (i) {
        var r = null != e[i + "DataIndex"],
            a = n.childOfName(i);a && (a.setStyle("fill", r ? t.get("pageIconColor", !0) : t.get("pageIconInactiveColor", !0)), a.cursor = r ? "pointer" : "default");
      });var i = n.childOfName("pageText"),
          r = t.get("pageFormatter"),
          a = e.pageIndex,
          o = null != a ? a + 1 : 0,
          s = e.pageCount;i && r && i.setStyle("text", b(r) ? r.replace("{current}", o).replace("{total}", s) : r({ current: o, total: s }));
    }, _getPageInfo: function _getPageInfo(t) {
      function e(t) {
        var e = t.getBoundingRect().clone();return e[f] += t.position[h], e;
      }var n,
          i,
          r,
          a,
          o = t.get("scrollDataIndex", !0),
          s = this.getContentGroup(),
          l = s.getBoundingRect(),
          u = this._containerGroup.__rectSize,
          h = t.getOrient().index,
          c = A_[h],
          d = A_[1 - h],
          f = P_[h],
          p = s.position.slice();this._showController ? s.eachChild(function (t) {
        t.__legendDataIndex === o && (a = t);
      }) : a = s.childAt(0);var g = u ? Math.ceil(l[c] / u) : 0;if (a) {
        var v = a.getBoundingRect(),
            m = a.position[h] + v[f];p[h] = -m - l[f], n = Math.floor(g * (m + v[f] + u / 2) / l[c]), n = l[c] && g ? Math.max(0, Math.min(g - 1, n)) : -1;var y = { x: 0, y: 0 };y[c] = u, y[d] = l[d], y[f] = -p[h] - l[f];var _,
            x = s.children();if (s.eachChild(function (t, n) {
          var i = e(t);i.intersect(y) && (null == _ && (_ = n), r = t.__legendDataIndex), n === x.length - 1 && i[f] + i[c] <= y[f] + y[c] && (r = null);
        }), null != _) {
          var w = x[_],
              b = e(w);if (y[f] = b[f] + b[c] - y[c], 0 >= _ && b[f] >= y[f]) i = null;else {
            for (; _ > 0 && e(x[_ - 1]).intersect(y);) {
              _--;
            }i = x[_].__legendDataIndex;
          }
        }
      }return { contentPosition: p, pageIndex: n, pageCount: g, pagePrevDataIndex: i, pageNextDataIndex: r };
    } });Sl("legendScroll", "legendscroll", function (t, e) {
    var n = t.scrollDataIndex;null != n && e.eachComponent({ mainType: "legend", subType: "scroll", query: t }, function (t) {
      t.setScrollDataIndex(n);
    });
  }), t.version = Kv, t.dependencies = Qv, t.PRIORITY = sm, t.init = pl, t.connect = gl, t.disConnect = vl, t.disconnect = km, t.dispose = ml, t.getInstanceByDom = yl, t.getInstanceById = _l, t.registerTheme = xl, t.registerPreprocessor = wl, t.registerProcessor = bl, t.registerPostUpdate = Ml, t.registerAction = Sl, t.registerCoordinateSystem = Cl, t.getCoordinateSystemDimensions = Il, t.registerLayout = Tl, t.registerVisual = kl, t.registerLoading = Al, t.extendComponentModel = Pl, t.extendComponentView = Ll, t.extendSeriesModel = Ol, t.extendChartView = Rl, t.setCanvasCreator = El, t.registerMap = Bl, t.getMap = zl, t.dataTool = Dm, t.zrender = wf, t.graphic = lg, t.number = _g, t.format = Tg, t.throttle = As, t.helper = Ty, t.matrix = Zc, t.vector = Hc, t.color = dd, t.parseGeoJSON = Dy, t.parseGeoJson = Oy, t.util = Ry, t.List = Fm, t.Model = Aa, t.Axis = Ly, t.env = bc;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVjaGFydHMuanMiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZWNoYXJ0cyIsIm4iLCJpIiwibWF0Y2giLCJyIiwiYSIsIm8iLCJ0ZXN0IiwiZmlyZWZveCIsInZlcnNpb24iLCJpZSIsImVkZ2UiLCJ3ZUNoYXQiLCJicm93c2VyIiwib3MiLCJub2RlIiwiY2FudmFzU3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsInN2Z1N1cHBvcnRlZCIsIlNWR1JlY3QiLCJ0b3VjaEV2ZW50c1N1cHBvcnRlZCIsIndpbmRvdyIsInBvaW50ZXJFdmVudHNTdXBwb3J0ZWQiLCJSYyIsIkxjIiwiQ2MiLCJjYWxsIiwiQiIsImxlbmd0aCIsIlNjIiwiY29uc3RydWN0b3IiLCJmcm9tIiwiTWMiLCJJIiwicyIsImhhc093blByb3BlcnR5IiwiTSIsIngiLCJTIiwibCIsIk9jIiwidSIsImluZGV4T2YiLCJoIiwicHJvdG90eXBlIiwic3VwZXJDbGFzcyIsImMiLCJkIiwiZiIsImZvckVhY2giLCJUYyIsInAiLCJtYXAiLCJBYyIsInB1c2giLCJnIiwicmVkdWNlIiwiUGMiLCJ2IiwiZmlsdGVyIiwia2MiLCJtIiwieSIsIkRjIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJjb25jYXQiLCJfIiwidyIsImIiLCJDIiwibm9kZVR5cGUiLCJvd25lckRvY3VtZW50IiwiVCIsImsiLCJEIiwiQSIsIlAiLCJGdW5jdGlvbiIsIkwiLCJPIiwiRXJyb3IiLCJSIiwidHJpbSIsInJlcGxhY2UiLCJFIiwiRWMiLCJ6Iiwic2V0IiwiZWFjaCIsIk4iLCJGIiwiViIsIkciLCJ6YyIsIkgiLCJXIiwiaiIsInEiLCJVIiwiWCIsIlkiLCJNYXRoIiwic3FydCIsIloiLCIkIiwiSyIsIlEiLCJKIiwidGUiLCJlZSIsIm5lIiwicmUiLCJhZSIsIm9lIiwibWluIiwic2UiLCJtYXgiLCJsZSIsIm9uIiwiX2RyYWdTdGFydCIsIl9kcmFnIiwiX2RyYWdFbmQiLCJ1ZSIsInRhcmdldCIsInRvcFRhcmdldCIsImhlIiwidHlwZSIsImV2ZW50IiwiY2FuY2VsQnViYmxlIiwib2Zmc2V0WCIsInpyWCIsIm9mZnNldFkiLCJ6clkiLCJnZXN0dXJlRXZlbnQiLCJwaW5jaFgiLCJwaW5jaFkiLCJwaW5jaFNjYWxlIiwid2hlZWxEZWx0YSIsInpyRGVsdGEiLCJ6ckJ5VG91Y2giLCJ3aGljaCIsImNlIiwiZGUiLCJyZWN0SG92ZXIiLCJjbGlwUGF0aCIsImNvbnRhaW4iLCJzaWxlbnQiLCJwYXJlbnQiLCJxYyIsImZlIiwiWWMiLCJwZSIsImdlIiwidmUiLCJtZSIsInllIiwic2luIiwiY29zIiwiX2UiLCJ4ZSIsIndlIiwiYmUiLCJLYyIsIk1lIiwiX3RhcmdldCIsIl9saWZlIiwibGlmZSIsIl9kZWxheSIsImRlbGF5IiwiX2luaXRpYWxpemVkIiwibG9vcCIsImdhcCIsImVhc2luZyIsIm9uZnJhbWUiLCJvbmRlc3Ryb3kiLCJvbnJlc3RhcnQiLCJfcGF1c2VkVGltZSIsIl9wYXVzZWQiLCJTZSIsInJvdW5kIiwiQ2UiLCJJZSIsIlRlIiwiY2hhckF0IiwicGFyc2VGbG9hdCIsInBhcnNlSW50Iiwia2UiLCJEZSIsIkFlIiwiUGUiLCJMZSIsIk9lIiwidWQiLCJsZCIsInB1dCIsInNsaWNlIiwiUmUiLCJnZXQiLCJ0b0xvd2VyQ2FzZSIsInNkIiwic3Vic3RyIiwic3BsaXQiLCJwb3AiLCJFZSIsIkJlIiwiemUiLCJXZSIsIk5lIiwidG9TdHJpbmciLCJGZSIsImZsb29yIiwiY2VpbCIsIlZlIiwiY29sb3IiLCJsZWZ0SW5kZXgiLCJyaWdodEluZGV4IiwidmFsdWUiLCJHZSIsIkhlIiwiamUiLCJxZSIsIlVlIiwiWGUiLCJZZSIsIlplIiwiZmQiLCJpc05hTiIsIiRlIiwiS2UiLCJRZSIsIkplIiwidG4iLCJqb2luIiwiZW4iLCJubiIsIl9nZXR0ZXIiLCJfc2V0dGVyIiwic29ydCIsInRpbWUiLCJfbG9vcCIsInJuIiwid2lkdGgiLCJoZWlnaHQiLCJhbiIsIklkIiwic24iLCJsbiIsInVuIiwiaG4iLCJjbiIsIlRkIiwibWVyZ2VSdW5zIiwiZm9yY2VNZXJnZVJ1bnMiLCJwdXNoUnVuIiwiZG4iLCJmbiIsInpsZXZlbCIsInoyIiwicG4iLCJ4MiIsInkyIiwiZ2xvYmFsIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJnbiIsImNyZWF0ZVJhZGlhbEdyYWRpZW50Iiwidm4iLCJtbiIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0Iiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJzZXRBdHRyaWJ1dGUiLCJ5biIsIkZkIiwiaW1hZ2UiLCJfbiIsIl9fenJJbWFnZVNyYyIsImhvc3RFbCIsImNiIiwiY2JQYXlsb2FkIiwid24iLCJwZW5kaW5nIiwiSW1hZ2UiLCJvbmxvYWQiLCJ4biIsIl9fY2FjaGVkSW1nT2JqIiwic3JjIiwiZGlydHkiLCJibiIsImpkIiwiVmQiLCJSbiIsIkdkIiwiSGQiLCJNbiIsIkNuIiwiU24iLCJFbiIsIm91dGVySGVpZ2h0IiwiSW4iLCJUbiIsImxpbmVIZWlnaHQiLCJCbiIsInJpY2giLCJ0cnVuY2F0ZSIsImZvbnQiLCJ0ZXh0QWxpZ24iLCJ0ZXh0UGFkZGluZyIsIm91dGVyV2lkdGgiLCJrbiIsInRleHRWZXJ0aWNhbEFsaWduIiwiRG4iLCJBbiIsIlBuIiwibWF4SXRlcmF0aW9ucyIsIm1pbkNoYXIiLCJjbkNoYXJXaWR0aCIsImFzY0NoYXJXaWR0aCIsInBsYWNlaG9sZGVyIiwiZWxsaXBzaXMiLCJlbGxpcHNpc1dpZHRoIiwiY29udGVudFdpZHRoIiwiY29udGFpbmVyV2lkdGgiLCJMbiIsImNoYXJDb2RlQXQiLCJPbiIsInFkIiwibWVhc3VyZVRleHQiLCJsaW5lcyIsIldkIiwibGFzdEluZGV4IiwiZXhlYyIsImluZGV4Iiwiem4iLCJzdWJzdHJpbmciLCJ0b2tlbnMiLCJzdHlsZU5hbWUiLCJ0ZXh0SGVpZ2h0IiwidGV4dExpbmVIZWlnaHQiLCJ0ZXh0V2lkdGgiLCJ0ZXh0IiwicGVyY2VudFdpZHRoIiwidGV4dEJhY2tncm91bmRDb2xvciIsImlzTGluZUhvbGRlciIsIk5uIiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwiZm9udFN0eWxlIiwiZm9udFdlaWdodCIsInRleHRGb250IiwiRm4iLCJBcnJheSIsIm1vdmVUbyIsImxpbmVUbyIsImFyYyIsIlBJIiwiVm4iLCJHbiIsIlVkIiwidGV4dEJhc2VsaW5lIiwiWGQiLCJIbiIsImpuIiwiV24iLCJRbiIsIl9fdGV4dENvdGVudEJsb2NrIiwiX19kaXJ0eSIsIktuIiwiYmFzZVgiLCJiYXNlWSIsIlVuIiwiWW4iLCJabiIsIm5pIiwidGV4dFNoYWRvd0JsdXIiLCJ0ZXh0U2hhZG93Q29sb3IiLCJ0ZXh0U2hhZG93T2Zmc2V0WCIsInRleHRTaGFkb3dPZmZzZXRZIiwidGV4dFN0cm9rZVdpZHRoIiwiSm4iLCJ0ZXh0U3Ryb2tlIiwidGkiLCJ0ZXh0RmlsbCIsInN0cm9rZVRleHQiLCJmaWxsVGV4dCIsInFuIiwiWG4iLCJ0ZXh0Um90YXRpb24iLCJ0ZXh0T3JpZ2luIiwidHJhbnNsYXRlIiwicm90YXRlIiwidGV4dEJvcmRlcldpZHRoIiwidGV4dEJvcmRlckNvbG9yIiwidGV4dEJveFNoYWRvd0JsdXIiLCJ0ZXh0Qm94U2hhZG93Q29sb3IiLCJ0ZXh0Qm94U2hhZG93T2Zmc2V0WCIsInRleHRCb3hTaGFkb3dPZmZzZXRZIiwiYmVnaW5QYXRoIiwidGV4dEJvcmRlclJhZGl1cyIsInJlY3QiLCJjbG9zZVBhdGgiLCJmaWxsIiwiJG4iLCJkcmF3SW1hZ2UiLCJzdHJva2UiLCJ0ZXh0UG9zaXRpb24iLCJlaSIsInRleHREaXN0YW5jZSIsInRleHRPZmZzZXQiLCJBZCIsImNvbG9yU3RvcHMiLCJsYXN0SW5kZXhPZiIsImlpIiwicmkiLCJ3ZCIsIkxkIiwiX3JlY3QiLCJfX2NsaXBQYXRocyIsImFpIiwib2kiLCJzaSIsIl9fYnVpbHRpbl9fIiwicmVzaXplIiwicmVmcmVzaCIsImxpIiwidGYiLCJjb3B5IiwiZ2V0Qm91bmRpbmdSZWN0IiwidHJhbnNmb3JtIiwiYXBwbHlUcmFuc2Zvcm0iLCJlZiIsImludGVyc2VjdCIsInVpIiwiaGkiLCJzZXRUcmFuc2Zvcm0iLCJidWlsZFBhdGgiLCJzaGFwZSIsImNsaXAiLCJyZXN0b3JlVHJhbnNmb3JtIiwiY2kiLCJjc3NUZXh0IiwiZGkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJmaSIsImJjIiwicGkiLCJsYXllclgiLCJsYXllclkiLCJjbGllbnRYIiwiY2xpZW50WSIsImdpIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiZGV0YWlsIiwiYnV0dG9uIiwiYWYiLCJ2aSIsInJmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwibWkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJ5aSIsIl9pIiwieGkiLCJ3aSIsIl9nZXN0dXJlTWdyIiwiY2xlYXIiLCJyZWNvZ25pemUiLCJoYW5kbGVyIiwiZmluZEhvdmVyIiwiZG9tIiwiZGlzcGF0Y2hUb0VsZW1lbnQiLCJiaSIsIl90b3VjaGluZyIsImNsZWFyVGltZW91dCIsIl90b3VjaFRpbWVyIiwic2V0VGltZW91dCIsIk1pIiwicG9pbnRlclR5cGUiLCJTaSIsImNmIiwiX2hhbmRsZXJzIiwicGYiLCJmZiIsImhmIiwiQ2kiLCJzZiIsIklpIiwieGYiLCJ4YyIsInlmIiwiaWQiLCJUaSIsImRpc3Bvc2UiLCJraSIsIkRpIiwibWYiLCJBaSIsIlBpIiwiTGkiLCJlbXBoYXNpcyIsIk9pIiwiTWYiLCJTZiIsIkRhdGUiLCJSaSIsIkVpIiwiZXhpc3QiLCJiZiIsIm9wdGlvbiIsIm5hbWUiLCJOaSIsIkJpIiwia2V5SW5mbyIsIkNmIiwiemkiLCJGaSIsImRhdGFJbmRleEluc2lkZSIsImRhdGFJbmRleCIsImluZGV4T2ZSYXdJbmRleCIsImluZGV4T2ZOYW1lIiwiVmkiLCJUZiIsInJhbmRvbSIsInRvRml4ZWQiLCJHaSIsImRlZmF1bHRNYWluVHlwZSIsIkhpIiwiaW5jbHVkZU1haW5UeXBlcyIsIm1haW5UeXBlIiwicXVlcnlDb21wb25lbnRzIiwiV2kiLCJqaSIsImdldEF0dHJpYnV0ZSIsInFpIiwibWFpbiIsInN1YiIsImtmIiwiVWkiLCJYaSIsIiRjb25zdHJ1Y3RvciIsImV4dGVuZCIsInN1cGVyQ2FsbCIsIlppIiwic3VwZXJBcHBseSIsIiRpIiwiWWkiLCJBZiIsImlzSW5zdGFuY2UiLCJLaSIsIkRmIiwicmVnaXN0ZXJDbGFzcyIsImdldENsYXNzIiwiZ2V0Q2xhc3Nlc0J5TWFpblR5cGUiLCJoYXNDbGFzcyIsImdldEFsbENsYXNzTWFpblR5cGVzIiwiaGFzU3ViVHlwZXMiLCJwYXJzZUNsYXNzVHlwZSIsInJlZ2lzdGVyV2hlbkV4dGVuZCIsIlFpIiwiTmYiLCJKaSIsInRyIiwiZXIiLCJuciIsInpmIiwiQmYiLCJHZiIsImFjb3MiLCJWZiIsImlyIiwicnIiLCJhciIsIkhmIiwiV2YiLCJHYyIsIkZmIiwiamYiLCJvciIsInNyIiwibHIiLCJ1ciIsImhyIiwiY3IiLCJkciIsInFmIiwiVWYiLCJmciIsInByIiwiSmYiLCJ0cCIsImdyIiwidnIiLCJhYnMiLCJaZiIsIiRmIiwiWWYiLCJYZiIsIktmIiwiUWYiLCJtciIsInlyIiwiX3IiLCJ4ciIsInBwIiwid3IiLCJncCIsImF0YW4yIiwiYnIiLCJNciIsInlwIiwiU3IiLCJ4cCIsIkNyIiwiX3AiLCJJciIsIlRyIiwibXAiLCJrciIsInZwIiwiRHIiLCJBciIsIlByIiwicGF0aCIsIkxyIiwiT3AiLCJMcCIsIlBwIiwiQXAiLCJCcCIsIkVwIiwiYWRkRGF0YSIsIk9yIiwiRHAiLCJSZWdFeHAiLCJmcCIsIkNNRCIsInNoaWZ0IiwibGVuIiwiZGF0YSIsInRvU3RhdGljIiwiUnIiLCJzZXREYXRhIiwicmVidWlsZFBhdGgiLCJrcCIsIkVyIiwiQnIiLCJ6ciIsImNyZWF0ZVBhdGhQcm94eSIsIl9fZGlydHlQYXRoIiwiYXBwZW5kUGF0aCIsIk5yIiwiRnIiLCJwb2ludHMiLCJzbW9vdGgiLCJqcCIsInNtb290aENvbnN0cmFpbnQiLCJiZXppZXJDdXJ2ZVRvIiwiV3AiLCJWciIsImNweDIiLCJjcHkyIiwieDEiLCJjcHgxIiwieTEiLCJjcHkxIiwiR3IiLCJfZGlzcGxheWFibGVzIiwiX3RlbXBvcmFyeURpc3BsYXlhYmxlcyIsIl9jdXJzb3IiLCJub3RDbGVhciIsIkhyIiwiV3IiLCJqciIsIlVyIiwiWHIiLCJxciIsInNldFN0eWxlIiwiY2FsY3VsYXRlVHJhbnNmb3JtIiwiWXIiLCJsaW5lV2lkdGgiLCJpZyIsIiRyIiwiWnIiLCJLciIsIlFyIiwiSnIiLCJfX2hvdmVyU3RsRGlydHkiLCJfX2hvdmVyU3RsIiwiX19ub3JtYWxTdGwiLCJ0YSIsIl9faXNIb3ZlciIsInVzZUhvdmVyTGF5ZXIiLCJfX3pyIiwiYWRkSG92ZXIiLCJpbnNpZGVSb2xsYmFja09wdCIsInlhIiwiZXh0ZW5kRnJvbSIsIm1hIiwiaW5zaWRlT3JpZ2luYWxUZXh0UG9zaXRpb24iLCJhdXRvQ29sb3IiLCJlYSIsInJlbW92ZUhvdmVyIiwibmEiLCJ0cmF2ZXJzZSIsImlhIiwicmEiLCJob3ZlclN0eWxlIiwiYWEiLCJfX2hvdmVyU2lsZW50T25Ub3VjaCIsIl9faXNFbXBoYXNpcyIsIm9hIiwic2EiLCJsYSIsInVhIiwiaG92ZXJTaWxlbnRPblRvdWNoIiwiaGEiLCJvZyIsImxhYmVsRmV0Y2hlciIsImxhYmVsRGF0YUluZGV4IiwibGFiZWxEaW1JbmRleCIsImdldFNoYWxsb3ciLCJnZXRGb3JtYXR0ZWRMYWJlbCIsImRlZmF1bHRUZXh0IiwiY2EiLCJmYSIsImhvc3QiLCJkYSIsImlzUmVjdFRleHQiLCJlY01vZGVsIiwidGV4dFN0eWxlIiwicGEiLCJnZXRNb2RlbCIsImdhIiwiZm9yY2VSaWNoIiwicGFyZW50TW9kZWwiLCJ2YSIsImluc2lkZVJvbGxiYWNrIiwidGV4dFRhZyIsImRpc2FibGVCb3giLCJ1c2VJbnNpZGVTdHlsZSIsIl9hIiwieGEiLCJpc0FuaW1hdGlvbkVuYWJsZWQiLCJnZXRBbmltYXRpb25EZWxheVBhcmFtcyIsImFuaW1hdGVUbyIsInN0b3BBbmltYXRpb24iLCJhdHRyIiwid2EiLCJiYSIsIk1hIiwiZ2V0TG9jYWxUcmFuc2Zvcm0iLCJTYSIsIlFjIiwiQ2EiLCJJYSIsImlzR3JvdXAiLCJhbmlkIiwicm90YXRpb24iLCJUYSIsInJnIiwiYWciLCJrYSIsIkRhIiwic3Ryb2tlTm9TY2FsZSIsIkFhIiwiUGEiLCJMYSIsInBnIiwiZ2V0UGFyZW50IiwiT2EiLCJnZyIsIlJhIiwicmVnaXN0ZXJTdWJUeXBlRGVmYXVsdGVyIiwiZGV0ZXJtaW5lU3ViVHlwZSIsIkVhIiwib3JpZ2luYWxEZXBzIiwiZW50cnlDb3VudCIsInByZWRlY2Vzc29yIiwic3VjY2Vzc29yIiwiZ3JhcGgiLCJub0VudHJ5TGlzdCIsInRvcG9sb2dpY2FsVHJhdmVsIiwiQmEiLCJ6YSIsIk5hIiwiRmEiLCJWYSIsIkdhIiwiSGEiLCJXYSIsImxvZyIsIkxOMTAiLCJpc0Zpbml0ZSIsImphIiwicG93IiwiTnVtYmVyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJxYSIsIlVhIiwidmciLCJYYSIsInlnIiwidG9VcHBlckNhc2UiLCJVVEMiLCJZYSIsIlphIiwiJGEiLCJLYSIsIlFhIiwiaW50ZXJ2YWwiLCJjbG9zZSIsInNwbGljZSIsIkphIiwidG8iLCJlbyIsIm5vIiwid2ciLCJiZyIsImlvIiwiJHZhcnMiLCJNZyIsIlNnIiwicm8iLCJhbyIsImV4dHJhQ3NzVGV4dCIsIm9vIiwic28iLCJsbyIsInVvIiwiZWFjaENoaWxkIiwiY2hpbGRBdCIsIm5ld2xpbmUiLCJobyIsInhnIiwicmlnaHQiLCJib3R0b20iLCJhc3BlY3QiLCJtYXJnaW4iLCJjbyIsImtnIiwiaWdub3JlU2l6ZSIsIkFnIiwiZm8iLCJwbyIsIkRnIiwiZ28iLCJSZyIsImRlcGVuZGVuY2llcyIsInVuc2hpZnQiLCJ2byIsIm1vIiwiY29vcmRTeXNOYW1lIiwiY29vcmRTeXNEaW1zIiwiYXhpc01hcCIsImNhdGVnb3J5QXhpc01hcCIsIkZnIiwieW8iLCJfbyIsImZyb21EYXRhc2V0Iiwic291cmNlRm9ybWF0IiwiV2ciLCJqZyIsInNlcmllc0xheW91dEJ5IiwiVWciLCJkaW1lbnNpb25zRGVmaW5lIiwiZW5jb2RlRGVmaW5lIiwic3RhcnRJbmRleCIsImRpbWVuc2lvbnNEZXRlY3RDb3VudCIsInhvIiwic291cmNlIiwicWciLCJHZyIsIkhnIiwiWWciLCJ3byIsImJvIiwiZGF0YXNldE1hcCIsIk1vIiwiVmciLCJzb3VyY2VIZWFkZXIiLCJkaW1lbnNpb25zIiwiRG8iLCJTbyIsImVuY29kZSIsImtvIiwiQ28iLCJJbyIsIlhnIiwiVG8iLCJwb3RlbnRpYWxOYW1lRGltSW5kZXgiLCJkaXNwbGF5TmFtZSIsImNvdW50Iiwic3ViVHlwZSIsInVpZCIsImNhdGVnb3J5V2F5RGltIiwidmFsdWVXYXlEaW0iLCJmaXJzdENhdGVnb3J5RGltSW5kZXgiLCJQbyIsIml0ZW1OYW1lIiwic2VyaWVzTmFtZSIsImdldENvbXBvbmVudCIsImRhdGFzZXRJbmRleCIsIkFvIiwiTG8iLCJzZWlyZXNJbmRleCIsInNlcmllc0lkIiwiY29tcG9uZW50SW5kZXgiLCJPbyIsImNvbG9yTGF5ZXIiLCJSbyIsIlpnIiwiX2NvbXBvbmVudHNNYXAiLCJzZXJpZXMiLCJfc2VyaWVzSW5kaWNlcyIsIl9zZXJpZXNJbmRpY2VzTWFwIiwiX3RoZW1lIiwiQmciLCJtZXJnZU9wdGlvbiIsIkVvIiwiQm8iLCJ6byIsIk5vIiwiRm8iLCJLZyIsIlZvIiwiX2Nvb3JkaW5hdGVTeXN0ZW1zIiwiR28iLCJfYXBpIiwiX3RpbWVsaW5lT3B0aW9ucyIsIl9tZWRpYUxpc3QiLCJfbWVkaWFEZWZhdWx0IiwiX2N1cnJlbnRNZWRpYUluZGljZXMiLCJfb3B0aW9uQmFja3VwIiwiX25ld0Jhc2VPcHRpb24iLCJIbyIsInRpbWVsaW5lIiwiYmFzZU9wdGlvbiIsIm9wdGlvbnMiLCJtZWRpYSIsIkpnIiwicXVlcnkiLCJ0aW1lbGluZU9wdGlvbnMiLCJtZWRpYURlZmF1bHQiLCJtZWRpYUxpc3QiLCJXbyIsImFzcGVjdHJhdGlvIiwiaXYiLCJqbyIsInFvIiwiVW8iLCJldiIsIm52IiwiWG8iLCJpdGVtU3R5bGUiLCJvdiIsIm5vcm1hbCIsIllvIiwiWm8iLCIkbyIsImF2IiwiSWYiLCJLbyIsIlFvIiwibWFya1BvaW50IiwibWFya0xpbmUiLCJtYXJrQXJlYSIsIm5vZGVzIiwibGlua3MiLCJlZGdlcyIsImNhdGVnb3JpZXMiLCJicmVhZGNydW1iIiwibGV2ZWxzIiwibGVhdmVzIiwiSm8iLCJ0cyIsImVzIiwibnMiLCJpcyIsImx2IiwicnMiLCJzdGFja1Jlc3VsdERpbWVuc2lvbiIsInN0YWNrZWRPdmVyRGltZW5zaW9uIiwiaXNTdGFja2VkQnlJbmRleCIsInN0YWNrZWREaW1lbnNpb24iLCJnZXRSYXdJbmRleCIsInN0YWNrZWRCeURpbWVuc2lvbiIsInJhd0luZGV4T2YiLCJnZXRCeVJhd0luZGV4IiwiaG9zdE1vZGVsIiwiYXMiLCJzZXJpZXNEYXRhVG9Tb3VyY2UiLCJfc291cmNlIiwiX2RhdGEiLCJfb2Zmc2V0IiwiX2RpbVNpemUiLCJmdiIsInNzIiwibHMiLCJ1cyIsImhzIiwiY3MiLCJfZGltZW5zaW9uSW5mb3MiLCJvcmRpbmFsTWV0YSIsInBhcnNlQW5kQ29sbGVjdCIsImRzIiwiZ2V0UmF3RGF0YUl0ZW0iLCJnZXRQcm92aWRlciIsImdldFNvdXJjZSIsImdldERpbWVuc2lvbkluZm8iLCJwdiIsImZzIiwicHMiLCJfcmVzZXQiLCJyZXNldCIsIl9wbGFuIiwicGxhbiIsIl9jb3VudCIsIl9vbkRpcnR5Iiwib25EaXJ0eSIsIl9kaXJ0eSIsImNvbnRleHQiLCJncyIsIl92IiwiX2NhbGxpbmdQcm9ncmVzcyIsInN0YXJ0IiwiZW5kIiwibmV4dCIsInZzIiwiX2R1ZUluZGV4IiwiX291dHB1dER1ZUVuZCIsIl9kdWVFbmQiLCJfc2V0dGVkT3V0cHV0RW5kIiwicHJvZ3Jlc3MiLCJmb3JjZUZpcnN0UHJvZ3Jlc3MiLCJfcHJvZ3Jlc3MiLCJfbW9kQnkiLCJfbW9kRGF0YUNvdW50IiwiX2Rvd25zdHJlYW0iLCJtcyIsInlzIiwiZ2V0UmF3RGF0YSIsIm1hcERpbWVuc2lvbiIsIl9zIiwibW9kZWwiLCJ4cyIsImNsb25lU2hhbGxvdyIsIndzIiwib3V0cHV0RGF0YSIsImJzIiwiQ0hBTkdBQkxFX01FVEhPRFMiLCJ3cmFwTWV0aG9kIiwiTXMiLCJTcyIsInNldE91dHB1dEVuZCIsInNjaGVkdWxlciIsImdldFBpcGVsaW5lIiwiY3VycmVudFRhc2siLCJhZ2VudFN0dWJNYXAiLCJDcyIsImdyb3VwIiwiQ2QiLCJyZW5kZXJUYXNrIiwia3MiLCJEcyIsInZpZXciLCJJcyIsInRyaWdnZXIiLCJjaGlsZENvdW50IiwiVHMiLCJnZXRJdGVtR3JhcGhpY0VsIiwiZWFjaEl0ZW1HcmFwaGljRWwiLCJJdiIsImFwaSIsInBheWxvYWQiLCJwaXBlbGluZUNvbnRleHQiLCJwcm9ncmVzc2l2ZVJlbmRlciIsIkN2IiwidXBkYXRlTWV0aG9kIiwia3YiLCJBcyIsImdldFRpbWUiLCJkZWJvdW5jZU5leHRDYWxsIiwiUHMiLCJlY0luc3RhbmNlIiwidW5maW5pc2hlZCIsIl9kYXRhUHJvY2Vzc29ySGFuZGxlcnMiLCJfdmlzdWFsSGFuZGxlcnMiLCJfYWxsSGFuZGxlcnMiLCJfc3RhZ2VUYXNrTWFwIiwiTHMiLCJzZXREaXJ0eSIsImRpcnR5TWFwIiwiX19waXBlbGluZSIsInZpc3VhbFR5cGUiLCJzZXJpZXNUYXNrTWFwIiwib3ZlcmFsbFRhc2siLCJFdiIsImdldFBlcmZvcm1BcmdzIiwiYmxvY2siLCJwZXJmb3JtIiwic2tpcCIsInBlcmZvcm1SYXdTZXJpZXMiLCJpc1Nlcmllc0ZpbHRlcmVkIiwiT3MiLCJGcyIsIlZzIiwiSHMiLCJ1c2VDbGVhclZpc3VhbCIsImlzVmlzdWFsIiwiaXNMYXlvdXQiLCJXcyIsInNlcmllc1R5cGUiLCJnZXRUYXJnZXRTZXJpZXMiLCJjcmVhdGVPbkFsbFNlcmllcyIsImVhY2hSYXdTZXJpZXMiLCJlYWNoUmF3U2VyaWVzQnlUeXBlIiwiX3BpcGVsaW5lTWFwIiwicmVtb3ZlS2V5IiwiUnMiLCJCcyIsIk5zIiwib3ZlcmFsbFByb2dyZXNzIiwibW9kaWZ5T3V0cHV0RW5kIiwiYWdlbnQiLCJfX2Jsb2NrIiwiRXMiLCJvdmVyYWxsUmVzZXQiLCJnZXRTZXJpZXMiLCJ6cyIsImdldERvd25zdHJlYW0iLCJjbGVhckFsbFZpc3VhbCIsInJlc2V0RGVmaW5lcyIsIkdzIiwiQnYiLCJkYXRhRWFjaCIsImhlYWQiLCJ0YWlsIiwicGlwZSIsIl9faWR4SW5QaXBlbGluZSIsImpzIiwienYiLCJOdiIsIkZ2IiwicXMiLCJVcyIsImpjIiwiWHMiLCJZcyIsIl9fcHJpbyIsInhtIiwiX2RvbSIsIl96ciIsInJlbmRlcmVyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIl90aHJvdHRsZWRackZsdXNoIiwiZmx1c2giLCJodiIsIl9jaGFydHNWaWV3cyIsIl9jaGFydHNNYXAiLCJfY29tcG9uZW50c1ZpZXdzIiwiX2Nvb3JkU3lzTWdyIiwiZGwiLCJfbSIsInZtIiwiX3NjaGVkdWxlciIsIl9tZXNzYWdlQ2VudGVyIiwiX2luaXRFdmVudHMiLCJfcGVuZGluZ0FjdGlvbnMiLCJhbmltYXRpb24iLCJfb25mcmFtZSIsIm5sIiwiWnMiLCJfbW9kZWwiLCJnZXRDb29yZGluYXRlU3lzdGVtcyIsIiRzIiwicmVzdG9yZVBpcGVsaW5lcyIsInByZXBhcmVTdGFnZVRhc2tzIiwiaWwiLCJLcyIsIl9fYWxpdmUiLCJfX21vZGVsIiwiWHYiLCJleGNsdWRlU2VyaWVzSWQiLCJlYWNoQ29tcG9uZW50IiwiX192aWV3SWQiLCJRcyIsImVhY2hTZXJpZXMiLCJ1cGRhdGVTdHJlYW1Nb2RlcyIsIkpzIiwiZXNjYXBlQ29ubmVjdCIsInBtIiwiYWN0aW9uSW5mbyIsInVwZGF0ZSIsIiR2IiwibG0iLCJiYXRjaCIsImFjdGlvbiIsInVtIiwiZG0iLCJ0bCIsImVsIiwiaXNGaW5pc2hlZCIsImJ2IiwiaW5pdCIsImFkZCIsIl9faWQiLCJfX2VjQ29tcG9uZW50SW5mbyIsInByZXBhcmVWaWV3IiwicmVtb3ZlIiwicmwiLCJjbGVhckNvbG9yUGFsZXR0ZSIsImFsIiwib2wiLCJzbCIsInJlbmRlciIsImNsIiwidXBkYXRlUGF5bG9hZCIsImhsIiwidWwiLCJQdiIsImxsIiwieW0iLCJzdG9yYWdlIiwiYmxlbmQiLCJlYWNoUGVuZGluZ0Rpc3BsYXlhYmxlIiwiZ2V0Q29tcG9uZW50QnlFbGVtZW50IiwiZmwiLCJnbSIsIk1tIiwibWFrZUFjdGlvbkZyb21FdmVudCIsImJtIiwiZGlzcGF0Y2hBY3Rpb24iLCJwbCIsInlsIiwiU20iLCJJbSIsImdsIiwiQ20iLCJ2bCIsIm1sIiwiaXNEaXNwb3NlZCIsIl9sIiwieGwiLCJ3bCIsIm1tIiwiYmwiLCJEbCIsInRtIiwiTWwiLCJTbCIsIlp2IiwiVXYiLCJobSIsIkNsIiwicmVnaXN0ZXIiLCJJbCIsImdldERpbWVuc2lvbnNJbmZvIiwiVGwiLCJubSIsImtsIiwicm0iLCJZdiIsIndyYXBTdGFnZUhhbmRsZXIiLCJfX3JhdyIsIkFsIiwid20iLCJQbCIsIkxsIiwiT2wiLCJ3diIsIlJsIiwiRWwiLCJCbCIsImdlb0pzb24iLCJmZWF0dXJlcyIsInNwZWNpYWxBcmVhcyIsIkpTT04iLCJwYXJzZSIsIlRtIiwiemwiLCJObCIsIkZsIiwiX29sZCIsIl9uZXciLCJfb2xkS2V5R2V0dGVyIiwiX25ld0tleUdldHRlciIsIlZsIiwiR2wiLCJjb29yZERpbSIsImNvb3JkRGltSW5kZXgiLCJpc0V4dHJhQ29vcmQiLCJXbCIsImRlZmF1bHRUb29sdGlwIiwib3RoZXJEaW1zIiwiZGF0YURpbXNPbkNvb3JkIiwiZW5jb2RlRmlyc3REaW1Ob3RFeHRyYSIsImxhYmVsIiwidG9vbHRpcCIsImRlZmF1bHRlZExhYmVsIiwiZGVmYXVsdGVkVG9vbHRpcCIsIkhsIiwiamwiLCJfcmF3Q291bnQiLCJFbSIsIkJtIiwicWwiLCJVbCIsInptIiwiX193cmFwcGVkTWV0aG9kcyIsIk5tIiwiX2NhbGN1bGF0aW9uSW5mbyIsIlhsIiwiX2ludmVydGVkSW5kaWNlc01hcCIsIllsIiwiX2NodW5rU2l6ZSIsIl9zdG9yYWdlIiwiWmwiLCIkbCIsIl9pbmRpY2VzIiwiS2wiLCJfaWRMaXN0IiwiX2lkRGltSWR4IiwiT20iLCJRbCIsIkpsIiwiRm0iLCJ0dSIsIl9yYXdFeHRlbnQiLCJldSIsIl9leHRlbnQiLCJudSIsIkFtIiwiZGltc0RlZiIsImVuY29kZURlZiIsIml1IiwiZGltQ291bnQiLCJnZW5lcmF0ZUNvb3JkIiwiZ2VuZXJhdGVDb29yZENvdW50IiwicnUiLCJhdSIsImJ5SW5kZXgiLCJzdGFja2VkQ29vcmREaW1lbnNpb24iLCJjcmVhdGVJbnZlcnRlZEluZGljZXMiLCJpc0NhbGN1bGF0aW9uQ29vcmQiLCJvdSIsImdldENhbGN1bGF0aW9uSW5mbyIsInN1IiwibHUiLCJIbSIsImNvb3JkRGltZW5zaW9ucyIsImdldE9yZGluYWxNZXRhIiwic2V0Q2FsY3VsYXRpb25JbmZvIiwidXUiLCJkZWZhdWx0RGltVmFsdWVHZXR0ZXIiLCJoYXNJdGVtT3B0aW9uIiwiaW5pdERhdGEiLCJodSIsImN1IiwiX3NldHRpbmciLCJfaW50ZXJ2YWwiLCJkdSIsIl9uZWVkQ29sbGVjdCIsIm5lZWRDb2xsZWN0IiwiX2RlZHVwbGljYXRpb24iLCJkZWR1cGxpY2F0aW9uIiwiX21hcCIsImZ1IiwicHUiLCJndSIsImludGVydmFsUHJlY2lzaW9uIiwidnUiLCJuaWNlVGlja0V4dGVudCIsIlVtIiwieXUiLCJtdSIsIl91IiwieHUiLCJabSIsInNlcmllc0luZGV4Iiwid3UiLCJkaW0iLCJidSIsImVhY2hTZXJpZXNCeVR5cGUiLCJJdSIsIlR1IiwiTXUiLCJnZXREYXRhIiwiY29vcmRpbmF0ZVN5c3RlbSIsImdldEJhc2VBeGlzIiwiZ2V0RXh0ZW50IiwiZ2V0QmFuZFdpZHRoIiwiYmFuZFdpZHRoIiwiYmFyV2lkdGgiLCJiYXJNYXhXaWR0aCIsImJhckdhcCIsImJhckNhdGVnb3J5R2FwIiwiYXhpc0tleSIsInN0YWNrSWQiLCJTdSIsInJlbWFpbmVkV2lkdGgiLCJhdXRvV2lkdGhDb3VudCIsImNhdGVnb3J5R2FwIiwic3RhY2tzIiwibWF4V2lkdGgiLCJvZmZzZXQiLCJDdSIsImxhcmdlIiwia3UiLCJnZXRBeGVzT25aZXJvT2YiLCJ0b0dsb2JhbENvb3JkIiwiZGF0YVRvQ29vcmQiLCJnZXRHbG9iYWxFeHRlbnQiLCJEdSIsImN5IiwiaHkiLCJBdSIsImdldE1pbiIsImdldE1heCIsImdldENhdGVnb3JpZXMiLCJzZXRCbGFuayIsImdldE5lZWRDcm9zc1plcm8iLCJheGlzIiwiUHUiLCJMdSIsImJhc2UiLCJzZXRFeHRlbnQiLCJuaWNlRXh0ZW50Iiwic3BsaXROdW1iZXIiLCJmaXhNaW4iLCJmaXhNYXgiLCJtaW5JbnRlcnZhbCIsIm1heEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJPdSIsInFtIiwiWW0iLCJjcmVhdGUiLCJSdSIsInNjYWxlIiwiRXUiLCJnZXRMYWJlbE1vZGVsIiwiQnUiLCJnZXRMYWJlbCIsInp1IiwiaXNCbGFuayIsImdldFRpY2tzIiwiZ2V0VGV4dFJlY3QiLCJOdSIsInVuaW9uIiwicGxhaW4iLCJGdSIsInN5bWJvbFR5cGUiLCJfX2lzRW1wdHlCcnVzaCIsIlZ1IiwiQ3kiLCJzZXRDb2xvciIsIkd1IiwiSHUiLCJteSIsIld1IiwianUiLCJreSIsInF1IiwiVXUiLCJnZW9tZXRyaWVzIiwiY2VudGVyIiwiWHUiLCJVVEY4RW5jb2RpbmciLCJVVEY4U2NhbGUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiZW5jb2RlT2Zmc2V0cyIsIll1IiwiWnUiLCJLdSIsInRoIiwiJHUiLCJKdSIsInRpY2tzIiwiUXUiLCJsYWJlbHMiLCJsYWJlbENhdGVnb3J5SW50ZXJ2YWwiLCJlaCIsInVoIiwibmgiLCJsaCIsInJoIiwic2giLCJpaCIsInRpY2tWYWx1ZSIsInRpY2tDYXRlZ29yeUludGVydmFsIiwiZm9ybWF0dGVkTGFiZWwiLCJyYXdMYWJlbCIsIkF5Iiwia2V5IiwiYXV0b0ludGVydmFsIiwiY2FsY3VsYXRlQ2F0ZWdvcnlJbnRlcnZhbCIsImFoIiwib2giLCJheGlzUm90YXRlIiwibGFiZWxSb3RhdGUiLCJsYXN0QXV0b0ludGVydmFsIiwibGFzdFRpY2tDb3VudCIsImdldFJvdGF0ZSIsImlzSG9yaXpvbnRhbCIsImdldEZvbnQiLCJoaCIsImNoIiwib25CYW5kIiwiY29vcmQiLCJkaCIsImZoIiwidXBkYXRlRGF0YSIsInBoIiwiZ2giLCJkcmlmdCIsInZoIiwiX3N5bWJvbEN0b3IiLCJtaCIsImlzSWdub3JlIiwiY2xpcFNoYXBlIiwiZ2V0SXRlbVZpc3VhbCIsInloIiwiX2giLCJnZXRJdGVtU3R5bGUiLCJob3Zlckl0ZW1TdHlsZSIsInN5bWJvbFJvdGF0ZSIsInN5bWJvbE9mZnNldCIsImhvdmVyQW5pbWF0aW9uIiwibGFiZWxNb2RlbCIsImhvdmVyTGFiZWxNb2RlbCIsImN1cnNvclN0eWxlIiwieGgiLCJnZXRPdGhlckF4aXMiLCJ3aCIsImRhdGFEaW1zRm9yUG9pbnQiLCJ2YWx1ZVN0YXJ0IiwidmFsdWVBeGlzRGltIiwiYmFzZUF4aXNEaW0iLCJzdGFja2VkIiwidmFsdWVEaW0iLCJiYXNlRGltIiwiYmFzZURhdGFPZmZzZXQiLCJiaCIsImRhdGFUb1BvaW50IiwiTWgiLCJkaWZmIiwiY21kIiwiaWR4IiwiaWR4MSIsImV4ZWN1dGUiLCJTaCIsIkNoIiwiSWgiLCJUaCIsIlV5IiwiWXkiLCJaeSIsIlh5IiwiVmMiLCJxeSIsImp5IiwiV3kiLCJraCIsIkRoIiwiQWgiLCJQaCIsIkxoIiwiT2giLCJnZXRBeGlzIiwiWHAiLCJSaCIsImdldEFuZ2xlQXhpcyIsImdldFJhZGl1c0F4aXMiLCJyZXZlcnNlIiwiR3AiLCJjeCIsInIwIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiY2xvY2t3aXNlIiwiaW52ZXJzZSIsIkVoIiwiQmgiLCJ6aCIsImdldFZpc3VhbCIsImRpbWVuc2lvbiIsInN0b3BzIiwib3V0ZXJDb2xvcnMiLCJ0ZyIsIk5oIiwiZ2V0QXhlc0J5U2NhbGUiLCJGaCIsImdldFZpZXdMYWJlbHMiLCJnZXRTeW1ib2xTaXplIiwiVmgiLCJfYXhlcyIsIkdoIiwiaV8iLCJIaCIsIldoIiwiZ2V0Q29vcmRTeXNNb2RlbCIsImpoIiwiX2Nvb3Jkc01hcCIsIl9jb29yZHNMaXN0IiwiX2F4ZXNNYXAiLCJfYXhlc0xpc3QiLCJfaW5pdENhcnRlc2lhbiIsInFoIiwiVWgiLCJYaCIsInRvTG9jYWxDb29yZCIsIlloIiwiZF8iLCJnZXRSZWZlcnJpbmdDb21wb25lbnRzIiwiWmgiLCIkaCIsImNvbXBvbmVudFR5cGUiLCJLaCIsImZfIiwiUWgiLCJzaG93IiwiSmgiLCJ0YyIsImVjIiwiaWdub3JlIiwiY2xvbmUiLCJuYyIsImljIiwiZ2V0VGlja3NDb29yZHMiLCJfdHJhbnNmb3JtIiwidGlja0RpcmVjdGlvbiIsIllwIiwiZ2V0TGluZVN0eWxlIiwicmMiLCJheGlzTGFiZWxTaG93Iiwidl8iLCJsYWJlbERpcmVjdGlvbiIsImdldFRleHRDb2xvciIsImxhYmVsT2Zmc2V0IiwienAiLCJldmVudERhdGEiLCJ0YXJnZXRUeXBlIiwiX2R1bWJHcm91cCIsInVwZGF0ZVRyYW5zZm9ybSIsImRlY29tcG9zZVRyYW5zZm9ybSIsImFjIiwib2MiLCJheGlzUG9pbnRlck1vZGVsIiwibGMiLCJzdGF0dXMiLCJjb29yZFN5c0F4ZXNJbmZvIiwiYXhlc0luZm8iLCJ1YyIsInNjIiwiaGMiLCJtXyIsImdldEF4aXNQb2ludGVyQ2xhc3MiLCJheGlzUG9pbnRlckNsYXNzIiwiX2F4aXNQb2ludGVyIiwiY2MiLCJkYyIsImdldFJlY3QiLCJvblplcm8iLCJuYW1lRGlyZWN0aW9uIiwibGFiZWxJbnNpZGUiLCJmYyIsImlzU2VsZWN0ZWQiLCJzZWxlY3RlZCIsInBjIiwiZ2MiLCJ2YyIsImdldFpyIiwiZ2V0RGlzcGxheUxpc3QiLCJtYyIsInljIiwiZ2V0T3JpZW50IiwiX2MiLCJ3YyIsInd4IiwiZ2V0U3lzdGVtSW5mb1N5bmMiLCJ3eGEiLCJzZWxmIiwid29ya2VyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiT2JqZWN0IiwiSWMiLCJjcmVhdGVDYW52YXMiLCJCYyIsImZyZWV6ZSIsIiRvdmVycmlkZSIsIm1lcmdlIiwibWVyZ2VBbGwiLCJkZWZhdWx0cyIsImluaGVyaXRzIiwibWl4aW4iLCJpc0FycmF5TGlrZSIsImZpbmQiLCJiaW5kIiwiY3VycnkiLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsImlzU3RyaW5nIiwiaXNPYmplY3QiLCJpc0J1aWx0SW5PYmplY3QiLCJpc1R5cGVkQXJyYXkiLCJpc0RvbSIsImVxTmFOIiwicmV0cmlldmUiLCJyZXRyaWV2ZTIiLCJyZXRyaWV2ZTMiLCJub3JtYWxpemVDc3NBcnJheSIsImFzc2VydCIsInNldEFzUHJpbWl0aXZlIiwiaXNQcmltaXRpdmUiLCJjcmVhdGVIYXNoTWFwIiwiY29uY2F0QXJyYXkiLCJub29wIiwiRmxvYXQzMkFycmF5IiwiTmMiLCJGYyIsIkhjIiwic2NhbGVBbmRBZGQiLCJsZW5TcXVhcmUiLCJsZW5ndGhTcXVhcmUiLCJtdWwiLCJkaXYiLCJkb3QiLCJub3JtYWxpemUiLCJkaXN0YW5jZSIsImRpc3QiLCJkaXN0YW5jZVNxdWFyZSIsImRpc3RTcXVhcmUiLCJuZWdhdGUiLCJsZXJwIiwiZHJhZ2dhYmxlIiwiX2RyYWdnaW5nVGFyZ2V0IiwiZHJhZ2dpbmciLCJfeCIsIl95IiwiX2Ryb3BUYXJnZXQiLCJXYyIsIl8kaGFuZGxlcnMiLCJvbmUiLCJjdHgiLCJpc1NpbGVudCIsIm9mZiIsInRyaWdnZXJXaXRoQ29udGV4dCIsIlVjIiwiWGMiLCJwYWludGVyIiwicGFpbnRlclJvb3QiLCJwcm94eSIsIl9ob3ZlcmVkIiwiX2xhc3RUb3VjaE1vbWVudCIsIl9sYXN0WCIsIl9sYXN0WSIsInNldEhhbmRsZXJQcm94eSIsIm1vdXNlbW92ZSIsInNldEN1cnNvciIsImN1cnNvciIsIm1vdXNlb3V0IiwidG9FbGVtZW50IiwicmVsYXRlZFRhcmdldCIsInBhcmVudE5vZGUiLCJkaXNwYXRjaCIsInNldEN1cnNvclN0eWxlIiwiZWFjaE90aGVyTGF5ZXIiLCJfZG93bkVsIiwiX2Rvd25Qb2ludCIsIl91cEVsIiwiWmMiLCJpZGVudGl0eSIsImludmVydCIsIiRjIiwib3JpZ2luIiwiSmMiLCJuZWVkTG9jYWxUcmFuc2Zvcm0iLCJpbnZUcmFuc2Zvcm0iLCJkcHIiLCJ0ZCIsImdldEdsb2JhbFNjYWxlIiwidHJhbnNmb3JtQ29vcmRUb0xvY2FsIiwidHJhbnNmb3JtQ29vcmRUb0dsb2JhbCIsImVkIiwibGluZWFyIiwicXVhZHJhdGljSW4iLCJxdWFkcmF0aWNPdXQiLCJxdWFkcmF0aWNJbk91dCIsImN1YmljSW4iLCJjdWJpY091dCIsImN1YmljSW5PdXQiLCJxdWFydGljSW4iLCJxdWFydGljT3V0IiwicXVhcnRpY0luT3V0IiwicXVpbnRpY0luIiwicXVpbnRpY091dCIsInF1aW50aWNJbk91dCIsInNpbnVzb2lkYWxJbiIsInNpbnVzb2lkYWxPdXQiLCJzaW51c29pZGFsSW5PdXQiLCJleHBvbmVudGlhbEluIiwiZXhwb25lbnRpYWxPdXQiLCJleHBvbmVudGlhbEluT3V0IiwiY2lyY3VsYXJJbiIsImNpcmN1bGFyT3V0IiwiY2lyY3VsYXJJbk91dCIsImVsYXN0aWNJbiIsImFzaW4iLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwiYmFja0luIiwiYmFja091dCIsImJhY2tJbk91dCIsImJvdW5jZUluIiwiYm91bmNlT3V0IiwiYm91bmNlSW5PdXQiLCJzdGVwIiwiX3N0YXJ0VGltZSIsImZpcmUiLCJyZXN0YXJ0IiwiX25lZWRzUmVtb3ZlIiwicGF1c2UiLCJyZXN1bWUiLCJuZCIsIl9sZW4iLCJpbnNlcnQiLCJyZCIsImluc2VydEVudHJ5IiwicHJldiIsImFkIiwiX2xpc3QiLCJfbWF4U2l6ZSIsIl9sYXN0UmVtb3ZlZEVudHJ5Iiwib2QiLCJ0cmFuc3BhcmVudCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJoZCIsImNkIiwiZGQiLCJsaWZ0IiwidG9IZXgiLCJmYXN0TGVycCIsImZhc3RNYXBUb0NvbG9yIiwibWFwVG9Db2xvciIsIm1vZGlmeUhTTCIsIm1vZGlmeUFscGhhIiwic3RyaW5naWZ5IiwicGQiLCJfdHJhY2tzIiwiX2NsaXBDb3VudCIsIl9kb25lTGlzdCIsIl9vbmZyYW1lTGlzdCIsIl9jbGlwTGlzdCIsIndoZW4iLCJkdXJpbmciLCJpc1BhdXNlZCIsIl9kb25lQ2FsbGJhY2siLCJhZGRDbGlwIiwic3RvcCIsInJlbW92ZUNsaXAiLCJkb25lIiwiZ2V0Q2xpcHMiLCJnZCIsInZkIiwibWQiLCJ5ZCIsImNvbnNvbGUiLCJfZCIsInhkIiwiYW5pbWF0b3JzIiwiYW5pbWF0ZSIsImFkZEFuaW1hdG9yIiwiX2FuaW1hdGVUb1NoYWxsb3ciLCJiZWZvcmVVcGRhdGUiLCJhZnRlclVwZGF0ZSIsImF0dHJLViIsImhpZGUiLCJzZXRDbGlwUGF0aCIsImFkZFNlbGZUb1pyIiwicmVtb3ZlQ2xpcFBhdGgiLCJfX2NsaXBUYXJnZXQiLCJyZW1vdmVTZWxmRnJvbVpyIiwicmVtb3ZlQW5pbWF0b3IiLCJiZCIsIk1kIiwiU2QiLCJfY2hpbGRyZW4iLCJfX3N0b3JhZ2UiLCJjaGlsZHJlbiIsImNoaWxkT2ZOYW1lIiwiX2RvQWRkIiwiYWRkQmVmb3JlIiwiYWRkVG9TdG9yYWdlIiwiYWRkQ2hpbGRyZW5Ub1N0b3JhZ2UiLCJkZWxGcm9tU3RvcmFnZSIsImRlbENoaWxkcmVuRnJvbVN0b3JhZ2UiLCJyZW1vdmVBbGwiLCJpbnZpc2libGUiLCJrZCIsIl9yb290cyIsIl9kaXNwbGF5TGlzdCIsIl9kaXNwbGF5TGlzdExlbiIsInVwZGF0ZURpc3BsYXlMaXN0IiwiX3VwZGF0ZUFuZEFkZERpc3BsYXlhYmxlIiwiYWRkUm9vdCIsImRlbFJvb3QiLCJfcmVuZGVyTGlzdCIsImRpc3BsYXlhYmxlU29ydEZ1bmMiLCJEZCIsInNoYWRvd0JsdXIiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsIlBkIiwib3BhY2l0eSIsImxpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJ0ZXh0UmVjdCIsInRyYW5zZm9ybVRleHQiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsImdsb2JhbEFscGhhIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiaGFzU3Ryb2tlIiwiZ2V0TGluZVNjYWxlIiwiaGFzRmlsbCIsImdldEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiT2QiLCJSZCIsIkVkIiwiQmQiLCJyZXBlYXQiLCJnZXRDYW52YXNQYXR0ZXJuIiwiY3JlYXRlUGF0dGVybiIsInpkIiwib25zZWxlY3RzdGFydCIsInBhZGRpbmciLCJkb21CYWNrIiwiY3R4QmFjayIsImNvbmZpZyIsImNsZWFyQ29sb3IiLCJtb3Rpb25CbHVyIiwibGFzdEZyYW1lQWxwaGEiLCJfX3VzZWQiLCJfX2RyYXdJbmRleCIsIl9fc3RhcnRJbmRleCIsIl9fZW5kSW5kZXgiLCJpbmNyZW1lbnRhbCIsImdldEVsZW1lbnRDb3VudCIsImluaXRDb250ZXh0IiwiY3JlYXRlQmFja0J1ZmZlciIsImNsZWFyUmVjdCIsIl9fY2FudmFzR3JhZGllbnQiLCJzYXZlIiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwiTmQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1pZGRsZSIsIllkIiwiWmQiLCJkcmF3UmVjdFRleHQiLCJjdWxsaW5nIiwicHJvZ3Jlc3NpdmUiLCJpbnBsYWNlIiwiYmVmb3JlQnJ1c2giLCJhZnRlckJydXNoIiwiYnJ1c2giLCJyZWN0Q29udGFpbiIsImFuaW1hdGVTdHlsZSIsInVzZVN0eWxlIiwiX2ltYWdlIiwic1dpZHRoIiwic0hlaWdodCIsInN4Iiwic3kiLCIkZCIsIktkIiwiUWQiLCJKZCIsIm5mIiwibm9kZU5hbWUiLCJfb3B0cyIsIl9zaW5nbGVDYW52YXMiLCJyb290IiwiaW5uZXJIVE1MIiwiX3psZXZlbExpc3QiLCJfbGF5ZXJzIiwiX2xheWVyQ29uZmlnIiwiX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyIsIl93aWR0aCIsIl9oZWlnaHQiLCJfZG9tUm9vdCIsIl9nZXRTaXplIiwiYXBwZW5kQ2hpbGQiLCJfaG92ZXJsYXllciIsIl9ob3ZlckVsZW1lbnRzIiwiZ2V0VHlwZSIsImlzU2luZ2xlQ2FudmFzIiwiZ2V0Vmlld3BvcnRSb290IiwiZ2V0Vmlld3BvcnRSb290T2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIl9yZWRyYXdJZCIsIl9wYWludExpc3QiLCJfYmFja2dyb3VuZENvbG9yIiwicmVmcmVzaEhvdmVyIiwiX19ob3Zlck1pciIsIl9fZnJvbSIsImNsZWFySG92ZXIiLCJnZXRMYXllciIsIl9kb1BhaW50RWwiLCJnZXRIb3ZlckxheWVyIiwiX3VwZGF0ZUxheWVyU3RhdHVzIiwiX2RvUGFpbnRMaXN0IiwiX2NvbXBvc2l0ZU1hbnVhbGx5IiwiZWFjaEJ1aWx0aW5MYXllciIsInZpcnR1YWwiLCJub3ciLCJlcnJvciIsInByZXZFbENsaXBQYXRocyIsImRyYXciLCJwcmV2RWwiLCJpbnNlcnRMYXllciIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImVhY2hMYXllciIsImdldExheWVycyIsIl9jbGVhckxheWVyIiwic2V0QmFja2dyb3VuZENvbG9yIiwiY29uZmlnTGF5ZXIiLCJkZWxMYXllciIsInJlbW92ZUNoaWxkIiwiZGlzcGxheSIsIl9wcm9ncmVzc2l2ZUxheWVycyIsImNsZWFyTGF5ZXIiLCJnZXRSZW5kZXJlZENhbnZhcyIsInBpeGVsUmF0aW8iLCJiYWNrZ3JvdW5kQ29sb3IiLCJyZW5kZXJUb0NhbnZhcyIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhdGhUb0ltYWdlIiwib2YiLCJzdGFnZSIsIl9jbGlwcyIsIl9ydW5uaW5nIiwiX3RpbWUiLCJfcGF1c2VTdGFydCIsIl91cGRhdGUiLCJfc3RhcnRMb29wIiwiZ2V0dGVyIiwic2V0dGVyIiwiX3RyYWNrIiwiX2RvVHJhY2siLCJfcmVjb2duaXplIiwidG91Y2hlcyIsImxmIiwicGluY2giLCJ1ZiIsImRmIiwicG9pbnRlcmRvd24iLCJwb2ludGVydXAiLCJwb2ludGVybW92ZSIsInBvaW50ZXJvdXQiLCJ0b3VjaHN0YXJ0IiwibW91c2Vkb3duIiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJtb3VzZXVwIiwiY2xpY2siLCJnZiIsInZmIiwiY2FudmFzIiwiX2YiLCJ2bWwiLCJfbmVlZHNSZWZyZXNoIiwiZ2V0SWQiLCJyZWZyZXNoSW1tZWRpYXRlbHkiLCJfbmVlZHNSZWZyZXNoSG92ZXIiLCJyZWZyZXNoSG92ZXJJbW1lZGlhdGVseSIsImNsZWFyQW5pbWF0aW9uIiwid2YiLCJnZXRJbnN0YW5jZSIsInJlZ2lzdGVyUGFpbnRlciIsIlBmIiwiTGYiLCJPZiIsImdldExpbmVEYXNoIiwiUmYiLCJFZiIsImdldEFyZWFTdHlsZSIsImVwIiwibnAiLCJpcCIsInJwIiwiYXAiLCJvcCIsInNwIiwibHAiLCJ1cCIsImhwIiwiY3AiLCJkcCIsIl9zYXZlRGF0YSIsIl9jdHgiLCJfeGkiLCJfeWkiLCJfeDAiLCJfeTAiLCJfdXgiLCJfdXkiLCJfbGluZURhc2giLCJfZGFzaE9mZnNldCIsIl9kYXNoSWR4IiwiX2Rhc2hTdW0iLCJzZXRTY2FsZSIsIl9uZWVkc0Rhc2giLCJfZGFzaGVkTGluZVRvIiwiX2Rhc2hlZEJlemllclRvIiwicXVhZHJhdGljQ3VydmVUbyIsIl9kYXNoZWRRdWFkcmF0aWNUbyIsImFyY1RvIiwic2V0TGluZURhc2giLCJzZXRMaW5lRGFzaE9mZnNldCIsIl9leHBhbmREYXRhIiwiX3ByZXZDbWQiLCJNQVhfVkFMVUUiLCJ3cCIsImJwIiwiTXAiLCJzdHJva2VDb250YWluVGhyZXNob2xkIiwiX2ZpbGxHcmFkaWVudCIsIl9zdHJva2VHcmFkaWVudCIsIl9yZWN0V2l0aFN0cm9rZSIsImFuaW1hdGVTaGFwZSIsInNldFNoYXBlIiwiU3AiLCJDcCIsIklwIiwiVHAiLCJScCIsInNoYWRvd0NvbG9yIiwiTnAiLCJGcCIsIlZwIiwiSHAiLCJxcCIsIlVwIiwicGVyY2VudCIsInBvaW50QXQiLCJacCIsIiRwIiwidGFuZ2VudEF0IiwiS3AiLCJRcCIsInBhdGhzIiwiX3VwZGF0ZVBhdGhEaXJ0eSIsIkpwIiwiZWciLCJjbGVhckRpc3BsYXlibGVzIiwiYWRkRGlzcGxheWFibGUiLCJhZGREaXNwbGF5YWJsZXMiLCJuZyIsInNnIiwibGciLCJleHRlbmRTaGFwZSIsImV4dGVuZFBhdGgiLCJtYWtlUGF0aCIsIm1ha2VJbWFnZSIsIm1lcmdlUGF0aCIsInJlc2l6ZVBhdGgiLCJzdWJQaXhlbE9wdGltaXplTGluZSIsInN1YlBpeGVsT3B0aW1pemVSZWN0Iiwic3ViUGl4ZWxPcHRpbWl6ZSIsInNldEhvdmVyU3R5bGUiLCJzZXRMYWJlbFN0eWxlIiwic2V0VGV4dFN0eWxlIiwic2V0VGV4dCIsInVwZGF0ZVByb3BzIiwiaW5pdFByb3BzIiwiZ2V0VHJhbnNmb3JtIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiZ3JvdXBUcmFuc2l0aW9uIiwiY2xpcFBvaW50c0J5UmVjdCIsImNsaXBSZWN0QnlSZWN0IiwiY3JlYXRlSWNvbiIsIkdyb3VwIiwiVGV4dCIsIkNpcmNsZSIsIlNlY3RvciIsIlJpbmciLCJQb2x5Z29uIiwiUG9seWxpbmUiLCJSZWN0IiwiTGluZSIsIkJlemllckN1cnZlIiwiQXJjIiwiSW5jcmVtZW50YWxEaXNwbGF5YWJsZSIsIkNvbXBvdW5kUGF0aCIsIkxpbmVhckdyYWRpZW50IiwiUmFkaWFsR3JhZGllbnQiLCJCb3VuZGluZ1JlY3QiLCJ1ZyIsImhnIiwiY2ciLCJkZyIsImdldEJvcmRlckxpbmVEYXNoIiwiZmciLCJwYXJzZVBhdGgiLCJpc0VtcHR5IiwicmVzdG9yZURhdGEiLCJzZXRSZWFkT25seSIsImN1c3RvbWl6ZUdldFBhcmVudCIsIm1nIiwiX2ciLCJsaW5lYXJNYXAiLCJwYXJzZVBlcmNlbnQiLCJhc2MiLCJnZXRQcmVjaXNpb24iLCJnZXRQcmVjaXNpb25TYWZlIiwiZ2V0UGl4ZWxQcmVjaXNpb24iLCJnZXRQZXJjZW50V2l0aFByZWNpc2lvbiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyZW1SYWRpYW4iLCJpc1JhZGlhbkFyb3VuZFplcm8iLCJwYXJzZURhdGUiLCJxdWFudGl0eSIsIm5pY2UiLCJxdWFudGlsZSIsInJlZm9ybUludGVydmFscyIsImlzTnVtZXJpYyIsIkNnIiwiSWciLCJUZyIsImFkZENvbW1hcyIsInRvQ2FtZWxDYXNlIiwiZW5jb2RlSFRNTCIsImZvcm1hdFRwbCIsImZvcm1hdFRwbFNpbXBsZSIsImdldFRvb2x0aXBNYXJrZXIiLCJmb3JtYXRUaW1lIiwiY2FwaXRhbEZpcnN0IiwidHJ1bmNhdGVUZXh0IiwiUGciLCJMZyIsImdldEJveExheW91dFBhcmFtcyIsIk9nIiwiZGVmYXVsdE9wdGlvbiIsImRlcGVuZGVudE1vZGVscyIsImxheW91dE1vZGUiLCJtZXJnZURlZmF1bHRBbmRUaGVtZSIsImdldFRoZW1lIiwiZ2V0RGVmYXVsdE9wdGlvbiIsIm9wdGlvblVwZGF0ZWQiLCJFZyIsInBsYXRmb3JtIiwiZ3JhZGllbnRDb2xvciIsImJsZW5kTW9kZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRHVyYXRpb25VcGRhdGUiLCJhbmltYXRpb25FYXNpbmciLCJhbmltYXRpb25FYXNpbmdVcGRhdGUiLCJhbmltYXRpb25UaHJlc2hvbGQiLCJwcm9ncmVzc2l2ZVRocmVzaG9sZCIsImhvdmVyTGF5ZXJUaHJlc2hvbGQiLCJ1c2VVVEMiLCJ6ZyIsIk5nIiwiY29sb3JJZHgiLCJjb2xvck5hbWVNYXAiLCJnZXRDb2xvckZyb21QYWxldHRlIiwiY2FydGVzaWFuMmQiLCJzaW5nbGVBeGlzIiwicG9sYXIiLCJmaW5kQXhpc01vZGVsIiwiZ2VvIiwicGFyYWxsZWwiLCJwYXJhbGxlbEF4aXNJbmRleCIsIiRnIiwiX29wdGlvbk1hbmFnZXIiLCJzZXRPcHRpb24iLCJyZXNldE9wdGlvbiIsIm1vdW50T3B0aW9uIiwiZ2V0VGltZWxpbmVPcHRpb24iLCJnZXRNZWRpYU9wdGlvbiIsImdldE9wdGlvbiIsImZpbmRDb21wb25lbnRzIiwiZ2V0U2VyaWVzQnlOYW1lIiwiZ2V0U2VyaWVzQnlJbmRleCIsImdldFNlcmllc0J5VHlwZSIsImdldFNlcmllc0NvdW50IiwiZ2V0Q3VycmVudFNlcmllc0luZGljZXMiLCJmaWx0ZXJTZXJpZXMiLCJRZyIsInR2IiwiZ2V0Q3VycmVudEluZGV4IiwicnYiLCJzdiIsImF4aXNQb2ludGVyIiwicGFyYWxsZWxBeGlzRGVmYXVsdCIsImNhbGVuZGFyIiwicmFkYXIiLCJyZWdpb25zIiwidG9vbGJveCIsImZlYXR1cmUiLCJ1diIsImNsb2NrV2lzZSIsImRhdGFSYW5nZSIsInZpc3VhbE1hcCIsImN2Iiwic2VyaWVzTW9kZWwiLCJkdiIsInB1cmUiLCJwZXJzaXN0ZW50IiwiYXJyYXlSb3dzX2NvbHVtbiIsImdldEl0ZW0iLCJhcHBlbmREYXRhIiwiYXJyYXlSb3dzX3JvdyIsIm9iamVjdFJvd3MiLCJrZXllZENvbHVtbnMiLCJvcmlnaW5hbCIsInR5cGVkQXJyYXkiLCJjbGVhbiIsImFycmF5Um93cyIsImd2IiwiX3Jhd0RhdGEiLCJ2diIsIm12IiwiZ2V0RGF0YVBhcmFtcyIsImdldFJhd1ZhbHVlIiwiZ2V0TmFtZSIsImNvbXBvbmVudFN1YlR5cGUiLCJkYXRhVHlwZSIsIm1hcmtlciIsImdldEl0ZW1Nb2RlbCIsImZvcm1hdFRvb2x0aXAiLCJ5diIsIl91cHN0cmVhbSIsIm1vZEJ5IiwibW9kRGF0YUNvdW50IiwiX2Rpc3Bvc2VkIiwiZ2V0VXBzdHJlYW0iLCJ4diIsImxlZ2VuZERhdGFQcm92aWRlciIsInZpc3VhbENvbG9yQWNjZXNzUGF0aCIsImRhdGFUYXNrIiwiZ2V0SW5pdGlhbERhdGEiLCJkYXRhQmVmb3JlUHJvY2Vzc2VkIiwiZmlsbERhdGFUZXh0U3R5bGUiLCJnZXRMaW5rZWREYXRhIiwiY29vcmREaW1Ub0RhdGFEaW0iLCJnZXRQcm9ncmVzc2l2ZSIsImdldFByb2dyZXNzaXZlVGhyZXNob2xkIiwiZ2V0QXhpc1Rvb2x0aXBEYXRhIiwiZ2V0VG9vbHRpcFBvc2l0aW9uIiwicGlwZVRhc2siLCJwcmV2ZW50SW5jcmVtZW50YWwiLCJNdiIsInVwZGF0ZVZpZXciLCJ1cGRhdGVMYXlvdXQiLCJ1cGRhdGVWaXN1YWwiLCJTdiIsImhpZ2hsaWdodCIsImRvd25wbGF5IiwiaW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyIiwiaW5jcmVtZW50YWxSZW5kZXIiLCJUdiIsIm1hcmtVcGRhdGVNZXRob2QiLCJEdiIsInNldFZpc3VhbCIsInNldEl0ZW1WaXN1YWwiLCJBdiIsInRpdGxlIiwicG9seWdvbiIsImxpbmVYIiwibGluZVkiLCJrZWVwIiwiZGF0YVZpZXciLCJsYW5nIiwiZGF0YVpvb20iLCJ6b29tIiwiYmFjayIsIm1hZ2ljVHlwZSIsImxpbmUiLCJiYXIiLCJzdGFjayIsInRpbGVkIiwic2F2ZUFzSW1hZ2UiLCJ0eXBlTmFtZXMiLCJwaWUiLCJzY2F0dGVyIiwiZWZmZWN0U2NhdHRlciIsInRyZWUiLCJ0cmVlbWFwIiwiYm94cGxvdCIsImNhbmRsZXN0aWNrIiwiaGVhdG1hcCIsInNhbmtleSIsImZ1bm5lbCIsImdhdWdlIiwicGljdG9yaWFsQmFyIiwidGhlbWVSaXZlciIsInN1bmJ1cnN0IiwiYXJpYSIsImdlbmVyYWwiLCJ3aXRoVGl0bGUiLCJ3aXRob3V0VGl0bGUiLCJzaW5nbGUiLCJwcmVmaXgiLCJ3aXRoTmFtZSIsIndpdGhvdXROYW1lIiwibXVsdGlwbGUiLCJzZXBhcmF0b3IiLCJhbGxEYXRhIiwicGFydGlhbERhdGEiLCJzZXJpZXNDb3VudCIsImRpc3BsYXlDbnQiLCJMdiIsIk92IiwidGV4dENvbG9yIiwibWFza0NvbG9yIiwibGluZUNhcCIsIlJ2IiwicHJvZ3Jlc3NpdmVFbmFibGVkIiwiYmxvY2tJbmRleCIsInRocmVzaG9sZCIsInBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3MiLCJwZXJmb3JtVmlzdWFsVGFza3MiLCJwZXJmb3JtU2VyaWVzVGFza3MiLCJWdiIsIkd2IiwiSHYiLCJXdiIsImF4aXNMaW5lIiwibGluZVN0eWxlIiwiYXhpc1RpY2siLCJheGlzTGFiZWwiLCJzcGxpdExpbmUiLCJzcGxpdEFyZWEiLCJhcmVhU3R5bGUiLCJqdiIsInF2IiwiY3Jvc3NTdHlsZSIsImxlZ2VuZCIsImljb25TdHlsZSIsImJvcmRlckNvbG9yIiwiY29udHJvbFN0eWxlIiwidGltZUF4aXMiLCJsb2dBeGlzIiwidmFsdWVBeGlzIiwiY2F0ZWdvcnlBeGlzIiwic3ltYm9sIiwiY29sb3IwIiwiYm9yZGVyQ29sb3IwIiwiS3YiLCJRdiIsInpyZW5kZXIiLCJKdiIsImVtIiwiaW0iLCJhbSIsIm9tIiwic20iLCJQUk9DRVNTT1IiLCJGSUxURVIiLCJTVEFUSVNUSUMiLCJWSVNVQUwiLCJMQVlPVVQiLCJHTE9CQUwiLCJDSEFSVCIsIkNPTVBPTkVOVCIsIkJSVVNIIiwiY20iLCJnZXREb20iLCJsYXp5VXBkYXRlIiwibm90TWVyZ2UiLCJzZXRUaGVtZSIsImdldERldmljZVBpeGVsUmF0aW8iLCJnZXRTdmdEYXRhVXJsIiwicGF0aFRvRGF0YVVybCIsImdldERhdGFVUkwiLCJleGNsdWRlQ29tcG9uZW50cyIsInRvRGF0YVVSTCIsImdldENvbm5lY3RlZERhdGFVUkwiLCJjb252ZXJ0VG9QaXhlbCIsImNvbnZlcnRGcm9tUGl4ZWwiLCJjb250YWluUGl4ZWwiLCJjb250YWluUG9pbnQiLCJnZXRWaWV3T2ZDb21wb25lbnRNb2RlbCIsImdldFZpZXdPZlNlcmllc01vZGVsIiwicHJlcGFyZUFuZFVwZGF0ZSIsIl9sb2FkaW5nRlgiLCJzaG93TG9hZGluZyIsImhpZGVMb2FkaW5nIiwiZm0iLCJkYXRhTW9kZWwiLCJrbSIsIkRtIiwiX2FkZCIsIl9yZW1vdmUiLCJQbSIsIkxtIiwiUm0iLCJGbG9hdDY0QXJyYXkiLCJJbnQzMkFycmF5Iiwib3JkaW5hbCIsIm51bWJlciIsIlVpbnQzMkFycmF5IiwiVWludDE2QXJyYXkiLCJfbmFtZUxpc3QiLCJfb3B0aW9uTW9kZWxzIiwiX3Zpc3VhbCIsIl9sYXlvdXQiLCJfaXRlbVZpc3VhbHMiLCJoYXNJdGVtVmlzdWFsIiwiX2l0ZW1MYXlvdXRzIiwiX2dyYXBoaWNFbHMiLCJfY2h1bmtDb3VudCIsIl9hcHByb3hpbWF0ZUV4dGVudCIsIl9kaW1lbnNpb25zU3VtbWFyeSIsIlZtIiwiZ2V0RGltZW5zaW9uIiwiZ2V0RGltZW5zaW9uc09uQ29vcmQiLCJfbmFtZVJlcGVhdENvdW50IiwiX2RpbVZhbHVlR2V0dGVyIiwiX2luaXREYXRhRnJvbVByb3ZpZGVyIiwiX25hbWVEaW1JZHgiLCJpdGVtSWQiLCJnZXRJbmRpY2VzIiwiYnVmZmVyIiwiX2dldEZhc3QiLCJnZXRWYWx1ZXMiLCJoYXNWYWx1ZSIsImdldERhdGFFeHRlbnQiLCJnZXRBcHByb3hpbWF0ZUV4dGVudCIsInNldEFwcHJveGltYXRlRXh0ZW50IiwiZ2V0U3VtIiwiZ2V0TWVkaWFuIiwiaW5kaWNlc09mTmVhcmVzdCIsImZpbHRlclNlbGYiLCJzZWxlY3RSYW5nZSIsIm1hcEFycmF5IiwiZG93blNhbXBsZSIsInNldExheW91dCIsImdldExheW91dCIsImdldEl0ZW1MYXlvdXQiLCJzZXRJdGVtTGF5b3V0IiwiY2xlYXJJdGVtTGF5b3V0cyIsIkdtIiwic2V0SXRlbUdyYXBoaWNFbCIsIlRSQU5TRkVSQUJMRV9NRVRIT0RTIiwiZGltZW5zaW9uc0NvdW50IiwiZ2V0U2V0dGluZyIsInVuaW9uRXh0ZW50IiwidW5pb25FeHRlbnRGcm9tRGF0YSIsIl9pc0JsYW5rIiwiY3JlYXRlQnlBeGlzTW9kZWwiLCJkZWRwbGljYXRpb24iLCJXbSIsImdldE9yZGluYWwiLCJqbSIsIl9vcmRpbmFsTWV0YSIsIm5pY2VUaWNrcyIsIlhtIiwiX2ludGVydmFsUHJlY2lzaW9uIiwiZ2V0SW50ZXJ2YWwiLCJfbmljZUV4dGVudCIsInByZWNpc2lvbiIsIiRtIiwiS20iLCJRbSIsImxhcmdlUG9pbnRzIiwidmFsdWVBeGlzU3RhcnQiLCJ2YWx1ZUF4aXNIb3Jpem9udGFsIiwiSm0iLCJ0eSIsImV5IiwibnkiLCJpeSIsInJ5IiwiYXkiLCJveSIsIl9zdGVwTHZsIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImx5IiwidXkiLCJkeSIsImZ5IiwicHkiLCJneSIsInZ5IiwiX29yaWdpbmFsU2NhbGUiLCJfX2ZpeE1pbiIsIl9fZml4TWF4IiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwic2V0UmFuZ2UiLCJyZXNldFJhbmdlIiwieXkiLCJ4eSIsInd5IiwiYnkiLCJyb3VuZFJlY3QiLCJzcXVhcmUiLCJjaXJjbGUiLCJkaWFtb25kIiwicGluIiwiYXJyb3ciLCJ0cmlhbmdsZSIsIk15IiwiU3kiLCJJeSIsImlzRGltZW5zaW9uU3RhY2tlZCIsImVuYWJsZURhdGFTdGFjayIsImdldFN0YWNrZWREaW1lbnNpb24iLCJUeSIsImNyZWF0ZUxpc3QiLCJnZXRMYXlvdXRSZWN0IiwiZGF0YVN0YWNrIiwiY3JlYXRlU2NhbGUiLCJtaXhpbkF4aXNNb2RlbENvbW1vbk1ldGhvZHMiLCJjb21wbGV0ZURpbWVuc2lvbnMiLCJjcmVhdGVEaW1lbnNpb25zIiwiY3JlYXRlU3ltYm9sIiwicHJvcGVydGllcyIsImV4dGVyaW9yIiwiaW50ZXJpb3JzIiwidHJhbnNmb3JtVG8iLCJEeSIsIlB5IiwiTHkiLCJjb250YWluRGF0YSIsImNvb3JkVG9EYXRhIiwicG9pbnRUb0RhdGEiLCJ0aWNrTW9kZWwiLCJnZXRUaWNrTW9kZWwiLCJjbGFtcCIsIk95IiwiUnkiLCJsZWdlbmRIb3ZlckxpbmsiLCJjbGlwT3ZlcmZsb3ciLCJzbW9vdGhNb25vdG9uZSIsInN5bWJvbFNpemUiLCJzaG93U3ltYm9sIiwic2hvd0FsbFN5bWJvbCIsImNvbm5lY3ROdWxscyIsInNhbXBsaW5nIiwiRXkiLCJCeSIsIl9jcmVhdGVTeW1ib2wiLCJfc3ltYm9sVHlwZSIsInN0b3BTeW1ib2xBbmltYXRpb24iLCJnZXRTeW1ib2xQYXRoIiwiZ2V0U2NhbGUiLCJzZXRaIiwic2V0RHJhZ2dhYmxlIiwiX3VwZGF0ZUNvbW1vbiIsImZhZGVJbiIsIl9zZXJpZXNNb2RlbCIsInp5IiwiTnkiLCJGeSIsIlZ5IiwiaXRlbU1vZGVsIiwic3ltYm9sSW5uZXJDb2xvciIsIl9fejJPcmlnaW4iLCJ1c2VOYW1lTGFiZWwiLCJmYWRlT3V0Iiwia2VlcExhYmVsIiwiR3kiLCJpc1BlcnNpc3RlbnQiLCJpbmNyZW1lbnRhbFByZXBhcmVVcGRhdGUiLCJfc2VyaWVzU2NvcGUiLCJpbmNyZW1lbnRhbFVwZGF0ZSIsIkh5IiwiY3VycmVudCIsInN0YWNrZWRPbkN1cnJlbnQiLCJzdGFja2VkT25OZXh0IiwiJHkiLCJLeSIsInN0YWNrZWRPblBvaW50cyIsInN0YWNrZWRPblNtb290aCIsIl9zeW1ib2xEcmF3IiwiX2xpbmVHcm91cCIsIl9jb29yZFN5cyIsIl9wb2x5bGluZSIsIl9wb2x5Z29uIiwiX190ZW1wIiwiX3N0ZXAiLCJfbmV3UG9seWdvbiIsIl9zdGFja2VkT25Qb2ludHMiLCJfcG9pbnRzIiwiX3VwZGF0ZUFuaW1hdGlvbiIsIl9uZXdQb2x5bGluZSIsImxpbmVKb2luIiwiX3ZhbHVlT3JpZ2luIiwiX19wb2ludHMiLCJwdElkeCIsIlF5IiwibGVnZW5kU3ltYm9sIiwic3ltYm9sS2VlcEFzcGVjdCIsIkp5IiwidF8iLCJhdmVyYWdlIiwic3VtIiwibmVhcmVzdCIsImVfIiwibl8iLCJfZGltTGlzdCIsImdldEF4ZXMiLCJhZGRBeGlzIiwiX2RhdGFDb29yZENvbnZlcnQiLCJjbGFtcERhdGEiLCJyXyIsImdyaWQiLCJhXyIsIm5hbWVMb2NhdGlvbiIsIm5hbWVSb3RhdGUiLCJuYW1lVHJ1bmNhdGUiLCJuYW1lVGV4dFN0eWxlIiwibmFtZUdhcCIsInRyaWdnZXJFdmVudCIsIm9uWmVyb0F4aXNJbmRleCIsImluc2lkZSIsInNob3dNaW5MYWJlbCIsInNob3dNYXhMYWJlbCIsIm9fIiwiYm91bmRhcnlHYXAiLCJhbGlnbldpdGhMYWJlbCIsImxvZ0Jhc2UiLCJzXyIsImxfIiwiX19vcmRpbmFsTWV0YSIsInVfIiwiZ3JpZEluZGV4IiwiZ3JpZElkIiwiaF8iLCJjb250YWluTGFiZWwiLCJib3JkZXJXaWR0aCIsImNfIiwiYXhpc1BvaW50ZXJFbmFibGVkIiwiX3VwZGF0ZVNjYWxlIiwiZ2V0Q2FydGVzaWFuIiwieUF4aXNJbmRleCIsInhBeGlzSW5kZXgiLCJnZXRDYXJ0ZXNpYW5zIiwiX2ZpbmRDb252ZXJ0VGFyZ2V0IiwiY2FydGVzaWFuIiwieEF4aXNNb2RlbCIsInlBeGlzTW9kZWwiLCJncmlkTW9kZWwiLCJnZXRUb29sdGlwQXhlcyIsImJhc2VBeGVzIiwib3RoZXJBeGVzIiwicF8iLCJvcHQiLCJheGlzTW9kZWwiLCJoYXNCdWlsZGVyIiwiZ18iLCJnZXRHcm91cCIsImF4aXNUaWNrTGFiZWwiLCJheGlzTmFtZSIsImF4aXNOYW1lQXZhaWxhYmxlV2lkdGgiLCJuYW1lVHJ1bmNhdGVNYXhXaWR0aCIsIl9fZnVsbFRleHQiLCJfX3RydW5jYXRlZFRleHQiLCJjb250ZW50IiwiZm9ybWF0dGVyIiwiZm9ybWF0dGVyUGFyYW1zIiwiaW5uZXJUZXh0TGF5b3V0IiwidXBkYXRlQXhpc1BvaW50ZXIiLCJ5XyIsInJlZ2lzdGVyQXhpc1BvaW50ZXJDbGFzcyIsIl9fIiwieF8iLCJ3XyIsIl9heGlzR3JvdXAiLCJfc3BsaXRBcmVhQ29sb3JzIiwiX3NwbGl0TGluZSIsIl9zcGxpdEFyZWEiLCJ4QXhpcyIsInlBeGlzIiwic3VidGV4dCIsInN1YnRhcmdldCIsIml0ZW1HYXAiLCJzdWJ0ZXh0U3R5bGUiLCJvcGVuIiwiYl8iLCJfdXBkYXRlRGF0YSIsInNlbGVjdCIsIl9hdmFpbGFibGVOYW1lcyIsInVuU2VsZWN0IiwidG9nZ2xlU2VsZWN0ZWQiLCJvcmllbnQiLCJhbGlnbiIsImJvcmRlclJhZGl1cyIsIml0ZW1XaWR0aCIsIml0ZW1IZWlnaHQiLCJpbmFjdGl2ZUNvbG9yIiwic2VsZWN0ZWRNb2RlIiwiTV8iLCJTXyIsIkNfIiwiSV8iLCJuZXdsaW5lRGlzYWJsZWQiLCJfY29udGVudEdyb3VwIiwiX2JhY2tncm91bmRFbCIsImdldENvbnRlbnRHcm91cCIsInJlc2V0SW5uZXIiLCJyZW5kZXJJbm5lciIsImxheW91dElubmVyIiwiX2NyZWF0ZUl0ZW0iLCJsZWdlbmRJbmRleCIsIl9fbGVnZW5kRGF0YUluZGV4IiwiVF8iLCJrXyIsInNldFNjcm9sbERhdGFJbmRleCIsInNjcm9sbERhdGFJbmRleCIsInBhZ2VCdXR0b25JdGVtR2FwIiwicGFnZUJ1dHRvbkdhcCIsInBhZ2VCdXR0b25Qb3NpdGlvbiIsInBhZ2VGb3JtYXR0ZXIiLCJwYWdlSWNvbnMiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJwYWdlSWNvbkNvbG9yIiwicGFnZUljb25JbmFjdGl2ZUNvbG9yIiwicGFnZUljb25TaXplIiwicGFnZVRleHRTdHlsZSIsIkRfIiwiQV8iLCJQXyIsIkxfIiwiX2N1cnJlbnRJbmRleCIsIl9jb250YWluZXJHcm91cCIsIl9jb250cm9sbGVyR3JvdXAiLCJfc2hvd0NvbnRyb2xsZXIiLCJfX3JlY3RTaXplIiwib25jbGljayIsIl9wYWdlR28iLCJfZ2V0UGFnZUluZm8iLCJwYWdlSW5kZXgiLCJjb250ZW50UG9zaXRpb24iLCJfdXBkYXRlUGFnZUluZm9WaWV3IiwibGVnZW5kSWQiLCJwYWdlQ291bnQiLCJ0b3RhbCIsInBhZ2VQcmV2RGF0YUluZGV4IiwicGFnZU5leHREYXRhSW5kZXgiLCJQUklPUklUWSIsImNvbm5lY3QiLCJkaXNDb25uZWN0IiwiZGlzY29ubmVjdCIsImdldEluc3RhbmNlQnlEb20iLCJnZXRJbnN0YW5jZUJ5SWQiLCJyZWdpc3RlclRoZW1lIiwicmVnaXN0ZXJQcmVwcm9jZXNzb3IiLCJyZWdpc3RlclByb2Nlc3NvciIsInJlZ2lzdGVyUG9zdFVwZGF0ZSIsInJlZ2lzdGVyQWN0aW9uIiwicmVnaXN0ZXJDb29yZGluYXRlU3lzdGVtIiwiZ2V0Q29vcmRpbmF0ZVN5c3RlbURpbWVuc2lvbnMiLCJyZWdpc3RlckxheW91dCIsInJlZ2lzdGVyVmlzdWFsIiwicmVnaXN0ZXJMb2FkaW5nIiwiZXh0ZW5kQ29tcG9uZW50TW9kZWwiLCJleHRlbmRDb21wb25lbnRWaWV3IiwiZXh0ZW5kU2VyaWVzTW9kZWwiLCJleHRlbmRDaGFydFZpZXciLCJzZXRDYW52YXNDcmVhdG9yIiwicmVnaXN0ZXJNYXAiLCJnZXRNYXAiLCJkYXRhVG9vbCIsImdyYXBoaWMiLCJmb3JtYXQiLCJ0aHJvdHRsZSIsImhlbHBlciIsIm1hdHJpeCIsInZlY3RvciIsInBhcnNlR2VvSlNPTiIsInBhcnNlR2VvSnNvbiIsInV0aWwiLCJMaXN0IiwiTW9kZWwiLCJBeGlzIiwiZW52Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLHNCQUFpQkMsT0FBakIseUNBQWlCQSxPQUFqQixNQUEwQixlQUFhLE9BQU9DLE1BQTlDLEdBQXFERixFQUFFQyxPQUFGLENBQXJELEdBQWdFLGNBQVksT0FBT0UsTUFBbkIsSUFBMkJBLE9BQU9DLEdBQWxDLEdBQXNDRCxPQUFPLENBQUMsU0FBRCxDQUFQLEVBQW1CSCxDQUFuQixDQUF0QyxHQUE0REEsRUFBRUQsRUFBRU0sT0FBRixHQUFVLEVBQVosQ0FBNUg7QUFBNEksQ0FBMUosWUFBZ0ssVUFBU04sQ0FBVCxFQUFXO0FBQUM7QUFBYSxXQUFTQyxDQUFULENBQVdELENBQVgsRUFBYTtBQUFDLFFBQUlDLElBQUUsRUFBTjtBQUFBLFFBQVNNLElBQUUsRUFBWDtBQUFBLFFBQWNDLElBQUVSLEVBQUVTLEtBQUYsQ0FBUSxtQkFBUixDQUFoQjtBQUFBLFFBQTZDQyxJQUFFVixFQUFFUyxLQUFGLENBQVEsZ0JBQVIsS0FBMkJULEVBQUVTLEtBQUYsQ0FBUSwyQkFBUixDQUExRTtBQUFBLFFBQStHRSxJQUFFWCxFQUFFUyxLQUFGLENBQVEsZ0JBQVIsQ0FBakg7QUFBQSxRQUEySUcsSUFBRSxrQkFBa0JDLElBQWxCLENBQXVCYixDQUF2QixDQUE3SSxDQUF1SyxPQUFPUSxNQUFJRCxFQUFFTyxPQUFGLEdBQVUsQ0FBQyxDQUFYLEVBQWFQLEVBQUVRLE9BQUYsR0FBVVAsRUFBRSxDQUFGLENBQTNCLEdBQWlDRSxNQUFJSCxFQUFFUyxFQUFGLEdBQUssQ0FBQyxDQUFOLEVBQVFULEVBQUVRLE9BQUYsR0FBVUwsRUFBRSxDQUFGLENBQXRCLENBQWpDLEVBQTZEQyxNQUFJSixFQUFFVSxJQUFGLEdBQU8sQ0FBQyxDQUFSLEVBQVVWLEVB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bUYsRUFBRStqRixPQUFGLEdBQVV2WCxFQUF6dUIsRUFBNHVCeHNFLEVBQUVtK0YsT0FBRixHQUFVeHNCLEVBQXR2QixFQUF5dkIzeEUsRUFBRWluRixNQUFGLEdBQVNwUyxFQUFsd0IsRUFBcXdCNzBFLEVBQUVvK0YsTUFBRixHQUFTcG9CLEVBQTl3QixFQUFpeEJoMkUsRUFBRXErRixRQUFGLEdBQVdoNkQsRUFBNXhCLEVBQSt4QnJrQyxFQUFFcytGLE1BQUYsR0FBU3JRLEVBQXh5QixFQUEyeUJqdUYsRUFBRXUrRixNQUFGLEdBQVM3dUMsRUFBcHpCLEVBQXV6QjF2RCxFQUFFdytGLE1BQUYsR0FBU2h5QyxFQUFoMEIsRUFBbTBCeHNELEVBQUU4TixLQUFGLEdBQVFrdkQsRUFBMzBCLEVBQTgwQmg5RCxFQUFFeStGLFlBQUYsR0FBZTNQLEVBQTcxQixFQUFnMkI5dUYsRUFBRTArRixZQUFGLEdBQWVuUCxFQUEvMkIsRUFBazNCdnZGLEVBQUUyK0YsSUFBRixHQUFPblAsRUFBejNCLEVBQTQzQnh2RixFQUFFNCtGLElBQUYsR0FBT2pyRCxFQUFuNEIsRUFBczRCM3pDLEVBQUU2K0YsS0FBRixHQUFRbnVFLEVBQTk0QixFQUFpNUIxd0IsRUFBRTgrRixJQUFGLEdBQU85UCxFQUF4NUIsRUFBMjVCaHZGLEVBQUUrK0YsR0FBRixHQUFNeGlGLEVBQWo2QjtBQUFvNkIsQ0FUcGdOLENBQUQiLCJmaWxlIjoiZWNoYXJ0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP2UoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLGUpOmUodC5lY2hhcnRzPXt9KX0odGhpcyxmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQpe3ZhciBlPXt9LG49e30saT10Lm1hdGNoKC9GaXJlZm94XFwvKFtcXGQuXSspLykscj10Lm1hdGNoKC9NU0lFXFxzKFtcXGQuXSspLyl8fHQubWF0Y2goL1RyaWRlbnRcXC8uKz9ydjooKFtcXGQuXSspKS8pLGE9dC5tYXRjaCgvRWRnZVxcLyhbXFxkLl0rKS8pLG89L21pY3JvbWVzc2VuZ2VyL2kudGVzdCh0KTtyZXR1cm4gaSYmKG4uZmlyZWZveD0hMCxuLnZlcnNpb249aVsxXSksciYmKG4uaWU9ITAsbi52ZXJzaW9uPXJbMV0pLGEmJihuLmVkZ2U9ITAsbi52ZXJzaW9uPWFbMV0pLG8mJihuLndlQ2hhdD0hMCkse2Jyb3dzZXI6bixvczplLG5vZGU6ITEsY2FudmFzU3VwcG9ydGVkOiEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0LHN2Z1N1cHBvcnRlZDpcInVuZGVmaW5lZFwiIT10eXBlb2YgU1ZHUmVjdCx0b3VjaEV2ZW50c1N1cHBvcnRlZDpcIm9udG91Y2hzdGFydFwiaW4gd2luZG93JiYhbi5pZSYmIW4uZWRnZSxwb2ludGVyRXZlbnRzU3VwcG9ydGVkOlwib25wb2ludGVyZG93blwiaW4gd2luZG93JiYobi5lZGdlfHxuLmllJiZuLnZlcnNpb24+PTExKX19ZnVuY3Rpb24gbih0LGUpe1wiY3JlYXRlQ2FudmFzXCI9PT10JiYoUmM9bnVsbCksTGNbdF09ZX1mdW5jdGlvbiBpKHQpe2lmKG51bGw9PXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybiB0O3ZhciBlPXQsbj1DYy5jYWxsKHQpO2lmKFwiW29iamVjdCBBcnJheV1cIj09PW4pe2lmKCFCKHQpKXtlPVtdO2Zvcih2YXIgcj0wLGE9dC5sZW5ndGg7YT5yO3IrKyllW3JdPWkodFtyXSl9fWVsc2UgaWYoU2Nbbl0pe2lmKCFCKHQpKXt2YXIgbz10LmNvbnN0cnVjdG9yO2lmKHQuY29uc3RydWN0b3IuZnJvbSllPW8uZnJvbSh0KTtlbHNle2U9bmV3IG8odC5sZW5ndGgpO2Zvcih2YXIgcj0wLGE9dC5sZW5ndGg7YT5yO3IrKyllW3JdPWkodFtyXSl9fX1lbHNlIGlmKCFNY1tuXSYmIUIodCkmJiFJKHQpKXtlPXt9O2Zvcih2YXIgcyBpbiB0KXQuaGFzT3duUHJvcGVydHkocykmJihlW3NdPWkodFtzXSkpfXJldHVybiBlfWZ1bmN0aW9uIHIodCxlLG4pe2lmKCFNKGUpfHwhTSh0KSlyZXR1cm4gbj9pKGUpOnQ7Zm9yKHZhciBhIGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eShhKSl7dmFyIG89dFthXSxzPWVbYV07IU0ocyl8fCFNKG8pfHx4KHMpfHx4KG8pfHxJKHMpfHxJKG8pfHxTKHMpfHxTKG8pfHxCKHMpfHxCKG8pPyFuJiZhIGluIHR8fCh0W2FdPWkoZVthXSwhMCkpOnIobyxzLG4pfXJldHVybiB0fWZ1bmN0aW9uIGEodCxlKXtmb3IodmFyIG49dFswXSxpPTEsYT10Lmxlbmd0aDthPmk7aSsrKW49cihuLHRbaV0sZSk7cmV0dXJuIG59ZnVuY3Rpb24gbyh0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pO3JldHVybiB0fWZ1bmN0aW9uIHModCxlLG4pe2Zvcih2YXIgaSBpbiBlKWUuaGFzT3duUHJvcGVydHkoaSkmJihuP251bGwhPWVbaV06bnVsbD09dFtpXSkmJih0W2ldPWVbaV0pO3JldHVybiB0fWZ1bmN0aW9uIGwoKXtyZXR1cm4gUmN8fChSYz1PYygpLmdldENvbnRleHQoXCIyZFwiKSksUmN9ZnVuY3Rpb24gdSh0LGUpe2lmKHQpe2lmKHQuaW5kZXhPZilyZXR1cm4gdC5pbmRleE9mKGUpO2Zvcih2YXIgbj0wLGk9dC5sZW5ndGg7aT5uO24rKylpZih0W25dPT09ZSlyZXR1cm4gbn1yZXR1cm4tMX1mdW5jdGlvbiBoKHQsZSl7ZnVuY3Rpb24gbigpe312YXIgaT10LnByb3RvdHlwZTtuLnByb3RvdHlwZT1lLnByb3RvdHlwZSx0LnByb3RvdHlwZT1uZXcgbjtmb3IodmFyIHIgaW4gaSl0LnByb3RvdHlwZVtyXT1pW3JdO3QucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQsdC5zdXBlckNsYXNzPWV9ZnVuY3Rpb24gYyh0LGUsbil7dD1cInByb3RvdHlwZVwiaW4gdD90LnByb3RvdHlwZTp0LGU9XCJwcm90b3R5cGVcImluIGU/ZS5wcm90b3R5cGU6ZSxzKHQsZSxuKX1mdW5jdGlvbiBkKHQpe3JldHVybiB0P1wic3RyaW5nXCI9PXR5cGVvZiB0PyExOlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aDp2b2lkIDB9ZnVuY3Rpb24gZih0LGUsbil7aWYodCYmZSlpZih0LmZvckVhY2gmJnQuZm9yRWFjaD09PVRjKXQuZm9yRWFjaChlLG4pO2Vsc2UgaWYodC5sZW5ndGg9PT0rdC5sZW5ndGgpZm9yKHZhciBpPTAscj10Lmxlbmd0aDtyPmk7aSsrKWUuY2FsbChuLHRbaV0saSx0KTtlbHNlIGZvcih2YXIgYSBpbiB0KXQuaGFzT3duUHJvcGVydHkoYSkmJmUuY2FsbChuLHRbYV0sYSx0KX1mdW5jdGlvbiBwKHQsZSxuKXtpZih0JiZlKXtpZih0Lm1hcCYmdC5tYXA9PT1BYylyZXR1cm4gdC5tYXAoZSxuKTtmb3IodmFyIGk9W10scj0wLGE9dC5sZW5ndGg7YT5yO3IrKylpLnB1c2goZS5jYWxsKG4sdFtyXSxyLHQpKTtyZXR1cm4gaX19ZnVuY3Rpb24gZyh0LGUsbixpKXtpZih0JiZlKXtpZih0LnJlZHVjZSYmdC5yZWR1Y2U9PT1QYylyZXR1cm4gdC5yZWR1Y2UoZSxuLGkpO2Zvcih2YXIgcj0wLGE9dC5sZW5ndGg7YT5yO3IrKyluPWUuY2FsbChpLG4sdFtyXSxyLHQpO3JldHVybiBufX1mdW5jdGlvbiB2KHQsZSxuKXtpZih0JiZlKXtpZih0LmZpbHRlciYmdC5maWx0ZXI9PT1rYylyZXR1cm4gdC5maWx0ZXIoZSxuKTtmb3IodmFyIGk9W10scj0wLGE9dC5sZW5ndGg7YT5yO3IrKyllLmNhbGwobix0W3JdLHIsdCkmJmkucHVzaCh0W3JdKTtyZXR1cm4gaX19ZnVuY3Rpb24gbSh0LGUsbil7aWYodCYmZSlmb3IodmFyIGk9MCxyPXQubGVuZ3RoO3I+aTtpKyspaWYoZS5jYWxsKG4sdFtpXSxpLHQpKXJldHVybiB0W2ldfWZ1bmN0aW9uIHkodCxlKXt2YXIgbj1EYy5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLG4uY29uY2F0KERjLmNhbGwoYXJndW1lbnRzKSkpfX1mdW5jdGlvbiBfKHQpe3ZhciBlPURjLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KHRoaXMsZS5jb25jYXQoRGMuY2FsbChhcmd1bWVudHMpKSl9fWZ1bmN0aW9uIHgodCl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09Q2MuY2FsbCh0KX1mdW5jdGlvbiB3KHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR9ZnVuY3Rpb24gYih0KXtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT09Q2MuY2FsbCh0KX1mdW5jdGlvbiBNKHQpe3ZhciBlPXR5cGVvZiB0O3JldHVyblwiZnVuY3Rpb25cIj09PWV8fCEhdCYmXCJvYmplY3RcIj09ZX1mdW5jdGlvbiBTKHQpe3JldHVybiEhTWNbQ2MuY2FsbCh0KV19ZnVuY3Rpb24gQyh0KXtyZXR1cm4hIVNjW0NjLmNhbGwodCldfWZ1bmN0aW9uIEkodCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lm5vZGVUeXBlJiZcIm9iamVjdFwiPT10eXBlb2YgdC5vd25lckRvY3VtZW50fWZ1bmN0aW9uIFQodCl7cmV0dXJuIHQhPT10fWZ1bmN0aW9uIGsoKXtmb3IodmFyIHQ9MCxlPWFyZ3VtZW50cy5sZW5ndGg7ZT50O3QrKylpZihudWxsIT1hcmd1bWVudHNbdF0pcmV0dXJuIGFyZ3VtZW50c1t0XX1mdW5jdGlvbiBEKHQsZSl7cmV0dXJuIG51bGwhPXQ/dDplfWZ1bmN0aW9uIEEodCxlLG4pe3JldHVybiBudWxsIT10P3Q6bnVsbCE9ZT9lOm59ZnVuY3Rpb24gUCgpe3JldHVybiBGdW5jdGlvbi5jYWxsLmFwcGx5KERjLGFyZ3VtZW50cyl9ZnVuY3Rpb24gTCh0KXtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm5bdCx0LHQsdF07dmFyIGU9dC5sZW5ndGg7cmV0dXJuIDI9PT1lP1t0WzBdLHRbMV0sdFswXSx0WzFdXTozPT09ZT9bdFswXSx0WzFdLHRbMl0sdFsxXV06dH1mdW5jdGlvbiBPKHQsZSl7aWYoIXQpdGhyb3cgbmV3IEVycm9yKGUpfWZ1bmN0aW9uIFIodCl7cmV0dXJuIG51bGw9PXQ/bnVsbDpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRyaW0/dC50cmltKCk6dC5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcIlwiKX1mdW5jdGlvbiBFKHQpe3RbRWNdPSEwfWZ1bmN0aW9uIEIodCl7cmV0dXJuIHRbRWNdfWZ1bmN0aW9uIHoodCl7ZnVuY3Rpb24gZSh0LGUpe24/aS5zZXQodCxlKTppLnNldChlLHQpfXZhciBuPXgodCksaT10aGlzO3QgaW5zdGFuY2VvZiB6P3QuZWFjaChlKTp0JiZmKHQsZSl9ZnVuY3Rpb24gTih0KXtyZXR1cm4gbmV3IHoodCl9ZnVuY3Rpb24gRih0LGUpe2Zvcih2YXIgbj1uZXcgdC5jb25zdHJ1Y3Rvcih0Lmxlbmd0aCtlLmxlbmd0aCksaT0wO2k8dC5sZW5ndGg7aSsrKW5baV09dFtpXTt2YXIgcj10Lmxlbmd0aDtmb3IoaT0wO2k8ZS5sZW5ndGg7aSsrKW5baStyXT1lW2ldO3JldHVybiBufWZ1bmN0aW9uIFYoKXt9ZnVuY3Rpb24gRyh0LGUpe3ZhciBuPW5ldyB6YygyKTtyZXR1cm4gbnVsbD09dCYmKHQ9MCksbnVsbD09ZSYmKGU9MCksblswXT10LG5bMV09ZSxufWZ1bmN0aW9uIEgodCxlKXtyZXR1cm4gdFswXT1lWzBdLHRbMV09ZVsxXSx0fWZ1bmN0aW9uIFcodCl7dmFyIGU9bmV3IHpjKDIpO3JldHVybiBlWzBdPXRbMF0sZVsxXT10WzFdLGV9ZnVuY3Rpb24gaih0LGUsbil7cmV0dXJuIHRbMF09ZSx0WzFdPW4sdH1mdW5jdGlvbiBxKHQsZSxuKXtyZXR1cm4gdFswXT1lWzBdK25bMF0sdFsxXT1lWzFdK25bMV0sdH1mdW5jdGlvbiBVKHQsZSxuLGkpe3JldHVybiB0WzBdPWVbMF0rblswXSppLHRbMV09ZVsxXStuWzFdKmksdH1mdW5jdGlvbiBYKHQsZSxuKXtyZXR1cm4gdFswXT1lWzBdLW5bMF0sdFsxXT1lWzFdLW5bMV0sdH1mdW5jdGlvbiBZKHQpe3JldHVybiBNYXRoLnNxcnQoWih0KSl9ZnVuY3Rpb24gWih0KXtyZXR1cm4gdFswXSp0WzBdK3RbMV0qdFsxXX1mdW5jdGlvbiAkKHQsZSxuKXtyZXR1cm4gdFswXT1lWzBdKm5bMF0sdFsxXT1lWzFdKm5bMV0sdH1mdW5jdGlvbiBLKHQsZSxuKXtyZXR1cm4gdFswXT1lWzBdL25bMF0sdFsxXT1lWzFdL25bMV0sdH1mdW5jdGlvbiBRKHQsZSl7cmV0dXJuIHRbMF0qZVswXSt0WzFdKmVbMV19ZnVuY3Rpb24gSih0LGUsbil7cmV0dXJuIHRbMF09ZVswXSpuLHRbMV09ZVsxXSpuLHR9ZnVuY3Rpb24gdGUodCxlKXt2YXIgbj1ZKGUpO3JldHVybiAwPT09bj8odFswXT0wLHRbMV09MCk6KHRbMF09ZVswXS9uLHRbMV09ZVsxXS9uKSx0fWZ1bmN0aW9uIGVlKHQsZSl7cmV0dXJuIE1hdGguc3FydCgodFswXS1lWzBdKSoodFswXS1lWzBdKSsodFsxXS1lWzFdKSoodFsxXS1lWzFdKSl9ZnVuY3Rpb24gbmUodCxlKXtyZXR1cm4odFswXS1lWzBdKSoodFswXS1lWzBdKSsodFsxXS1lWzFdKSoodFsxXS1lWzFdKX1mdW5jdGlvbiBpZSh0LGUpe3JldHVybiB0WzBdPS1lWzBdLHRbMV09LWVbMV0sdH1mdW5jdGlvbiByZSh0LGUsbixpKXtyZXR1cm4gdFswXT1lWzBdK2kqKG5bMF0tZVswXSksdFsxXT1lWzFdK2kqKG5bMV0tZVsxXSksdH1mdW5jdGlvbiBhZSh0LGUsbil7dmFyIGk9ZVswXSxyPWVbMV07cmV0dXJuIHRbMF09blswXSppK25bMl0qcituWzRdLHRbMV09blsxXSppK25bM10qcituWzVdLHR9ZnVuY3Rpb24gb2UodCxlLG4pe3JldHVybiB0WzBdPU1hdGgubWluKGVbMF0sblswXSksdFsxXT1NYXRoLm1pbihlWzFdLG5bMV0pLHR9ZnVuY3Rpb24gc2UodCxlLG4pe3JldHVybiB0WzBdPU1hdGgubWF4KGVbMF0sblswXSksdFsxXT1NYXRoLm1heChlWzFdLG5bMV0pLHR9ZnVuY3Rpb24gbGUoKXt0aGlzLm9uKFwibW91c2Vkb3duXCIsdGhpcy5fZHJhZ1N0YXJ0LHRoaXMpLHRoaXMub24oXCJtb3VzZW1vdmVcIix0aGlzLl9kcmFnLHRoaXMpLHRoaXMub24oXCJtb3VzZXVwXCIsdGhpcy5fZHJhZ0VuZCx0aGlzKSx0aGlzLm9uKFwiZ2xvYmFsb3V0XCIsdGhpcy5fZHJhZ0VuZCx0aGlzKX1mdW5jdGlvbiB1ZSh0LGUpe3JldHVybnt0YXJnZXQ6dCx0b3BUYXJnZXQ6ZSYmZS50b3BUYXJnZXR9fWZ1bmN0aW9uIGhlKHQsZSxuKXtyZXR1cm57dHlwZTp0LGV2ZW50Om4sdGFyZ2V0OmUudGFyZ2V0LHRvcFRhcmdldDplLnRvcFRhcmdldCxjYW5jZWxCdWJibGU6ITEsb2Zmc2V0WDpuLnpyWCxvZmZzZXRZOm4uenJZLGdlc3R1cmVFdmVudDpuLmdlc3R1cmVFdmVudCxwaW5jaFg6bi5waW5jaFgscGluY2hZOm4ucGluY2hZLHBpbmNoU2NhbGU6bi5waW5jaFNjYWxlLHdoZWVsRGVsdGE6bi56ckRlbHRhLHpyQnlUb3VjaDpuLnpyQnlUb3VjaCx3aGljaDpuLndoaWNofX1mdW5jdGlvbiBjZSgpe31mdW5jdGlvbiBkZSh0LGUsbil7aWYodFt0LnJlY3RIb3Zlcj9cInJlY3RDb250YWluXCI6XCJjb250YWluXCJdKGUsbikpe2Zvcih2YXIgaSxyPXQ7cjspe2lmKHIuY2xpcFBhdGgmJiFyLmNsaXBQYXRoLmNvbnRhaW4oZSxuKSlyZXR1cm4hMTtyLnNpbGVudCYmKGk9ITApLHI9ci5wYXJlbnR9cmV0dXJuIGk/cWM6ITB9cmV0dXJuITF9ZnVuY3Rpb24gZmUoKXt2YXIgdD1uZXcgWWMoNik7cmV0dXJuIHBlKHQpLHR9ZnVuY3Rpb24gcGUodCl7cmV0dXJuIHRbMF09MSx0WzFdPTAsdFsyXT0wLHRbM109MSx0WzRdPTAsdFs1XT0wLHR9ZnVuY3Rpb24gZ2UodCxlKXtyZXR1cm4gdFswXT1lWzBdLHRbMV09ZVsxXSx0WzJdPWVbMl0sdFszXT1lWzNdLHRbNF09ZVs0XSx0WzVdPWVbNV0sdH1mdW5jdGlvbiB2ZSh0LGUsbil7dmFyIGk9ZVswXSpuWzBdK2VbMl0qblsxXSxyPWVbMV0qblswXStlWzNdKm5bMV0sYT1lWzBdKm5bMl0rZVsyXSpuWzNdLG89ZVsxXSpuWzJdK2VbM10qblszXSxzPWVbMF0qbls0XStlWzJdKm5bNV0rZVs0XSxsPWVbMV0qbls0XStlWzNdKm5bNV0rZVs1XTtyZXR1cm4gdFswXT1pLHRbMV09cix0WzJdPWEsdFszXT1vLHRbNF09cyx0WzVdPWwsdH1mdW5jdGlvbiBtZSh0LGUsbil7cmV0dXJuIHRbMF09ZVswXSx0WzFdPWVbMV0sdFsyXT1lWzJdLHRbM109ZVszXSx0WzRdPWVbNF0rblswXSx0WzVdPWVbNV0rblsxXSx0fWZ1bmN0aW9uIHllKHQsZSxuKXt2YXIgaT1lWzBdLHI9ZVsyXSxhPWVbNF0sbz1lWzFdLHM9ZVszXSxsPWVbNV0sdT1NYXRoLnNpbihuKSxoPU1hdGguY29zKG4pO3JldHVybiB0WzBdPWkqaCtvKnUsdFsxXT0taSp1K28qaCx0WzJdPXIqaCtzKnUsdFszXT0tcip1K2gqcyx0WzRdPWgqYSt1KmwsdFs1XT1oKmwtdSphLHR9ZnVuY3Rpb24gX2UodCxlLG4pe3ZhciBpPW5bMF0scj1uWzFdO3JldHVybiB0WzBdPWVbMF0qaSx0WzFdPWVbMV0qcix0WzJdPWVbMl0qaSx0WzNdPWVbM10qcix0WzRdPWVbNF0qaSx0WzVdPWVbNV0qcix0fWZ1bmN0aW9uIHhlKHQsZSl7dmFyIG49ZVswXSxpPWVbMl0scj1lWzRdLGE9ZVsxXSxvPWVbM10scz1lWzVdLGw9bipvLWEqaTtyZXR1cm4gbD8obD0xL2wsdFswXT1vKmwsdFsxXT0tYSpsLHRbMl09LWkqbCx0WzNdPW4qbCx0WzRdPShpKnMtbypyKSpsLHRbNV09KGEqci1uKnMpKmwsdCk6bnVsbH1mdW5jdGlvbiB3ZSh0KXt2YXIgZT1mZSgpO3JldHVybiBnZShlLHQpLGV9ZnVuY3Rpb24gYmUodCl7cmV0dXJuIHQ+S2N8fC1LYz50fWZ1bmN0aW9uIE1lKHQpe3RoaXMuX3RhcmdldD10LnRhcmdldCx0aGlzLl9saWZlPXQubGlmZXx8MWUzLHRoaXMuX2RlbGF5PXQuZGVsYXl8fDAsdGhpcy5faW5pdGlhbGl6ZWQ9ITEsdGhpcy5sb29wPW51bGw9PXQubG9vcD8hMTp0Lmxvb3AsdGhpcy5nYXA9dC5nYXB8fDAsdGhpcy5lYXNpbmc9dC5lYXNpbmd8fFwiTGluZWFyXCIsdGhpcy5vbmZyYW1lPXQub25mcmFtZSx0aGlzLm9uZGVzdHJveT10Lm9uZGVzdHJveSx0aGlzLm9ucmVzdGFydD10Lm9ucmVzdGFydCx0aGlzLl9wYXVzZWRUaW1lPTAsdGhpcy5fcGF1c2VkPSExfWZ1bmN0aW9uIFNlKHQpe3JldHVybiB0PU1hdGgucm91bmQodCksMD50PzA6dD4yNTU/MjU1OnR9ZnVuY3Rpb24gQ2UodCl7cmV0dXJuIHQ9TWF0aC5yb3VuZCh0KSwwPnQ/MDp0PjM2MD8zNjA6dH1mdW5jdGlvbiBJZSh0KXtyZXR1cm4gMD50PzA6dD4xPzE6dH1mdW5jdGlvbiBUZSh0KXtyZXR1cm4gU2UodC5sZW5ndGgmJlwiJVwiPT09dC5jaGFyQXQodC5sZW5ndGgtMSk/cGFyc2VGbG9hdCh0KS8xMDAqMjU1OnBhcnNlSW50KHQsMTApKX1mdW5jdGlvbiBrZSh0KXtyZXR1cm4gSWUodC5sZW5ndGgmJlwiJVwiPT09dC5jaGFyQXQodC5sZW5ndGgtMSk/cGFyc2VGbG9hdCh0KS8xMDA6cGFyc2VGbG9hdCh0KSl9ZnVuY3Rpb24gRGUodCxlLG4pe3JldHVybiAwPm4/bis9MTpuPjEmJihuLT0xKSwxPjYqbj90KyhlLXQpKm4qNjoxPjIqbj9lOjI+MypuP3QrKGUtdCkqKDIvMy1uKSo2OnR9ZnVuY3Rpb24gQWUodCxlLG4pe3JldHVybiB0KyhlLXQpKm59ZnVuY3Rpb24gUGUodCxlLG4saSxyKXtyZXR1cm4gdFswXT1lLHRbMV09bix0WzJdPWksdFszXT1yLHR9ZnVuY3Rpb24gTGUodCxlKXtyZXR1cm4gdFswXT1lWzBdLHRbMV09ZVsxXSx0WzJdPWVbMl0sdFszXT1lWzNdLHR9ZnVuY3Rpb24gT2UodCxlKXt1ZCYmTGUodWQsZSksdWQ9bGQucHV0KHQsdWR8fGUuc2xpY2UoKSl9ZnVuY3Rpb24gUmUodCxlKXtpZih0KXtlPWV8fFtdO3ZhciBuPWxkLmdldCh0KTtpZihuKXJldHVybiBMZShlLG4pO3QrPVwiXCI7dmFyIGk9dC5yZXBsYWNlKC8gL2csXCJcIikudG9Mb3dlckNhc2UoKTtpZihpIGluIHNkKXJldHVybiBMZShlLHNkW2ldKSxPZSh0LGUpLGU7aWYoXCIjXCIhPT1pLmNoYXJBdCgwKSl7dmFyIHI9aS5pbmRleE9mKFwiKFwiKSxhPWkuaW5kZXhPZihcIilcIik7aWYoLTEhPT1yJiZhKzE9PT1pLmxlbmd0aCl7dmFyIG89aS5zdWJzdHIoMCxyKSxzPWkuc3Vic3RyKHIrMSxhLShyKzEpKS5zcGxpdChcIixcIiksbD0xO3N3aXRjaChvKXtjYXNlXCJyZ2JhXCI6aWYoNCE9PXMubGVuZ3RoKXJldHVybiB2b2lkIFBlKGUsMCwwLDAsMSk7bD1rZShzLnBvcCgpKTtjYXNlXCJyZ2JcIjpyZXR1cm4gMyE9PXMubGVuZ3RoP3ZvaWQgUGUoZSwwLDAsMCwxKTooUGUoZSxUZShzWzBdKSxUZShzWzFdKSxUZShzWzJdKSxsKSxPZSh0LGUpLGUpO2Nhc2VcImhzbGFcIjpyZXR1cm4gNCE9PXMubGVuZ3RoP3ZvaWQgUGUoZSwwLDAsMCwxKTooc1szXT1rZShzWzNdKSxFZShzLGUpLE9lKHQsZSksZSk7Y2FzZVwiaHNsXCI6cmV0dXJuIDMhPT1zLmxlbmd0aD92b2lkIFBlKGUsMCwwLDAsMSk6KEVlKHMsZSksT2UodCxlKSxlKTtkZWZhdWx0OnJldHVybn19UGUoZSwwLDAsMCwxKX1lbHNle2lmKDQ9PT1pLmxlbmd0aCl7dmFyIHU9cGFyc2VJbnQoaS5zdWJzdHIoMSksMTYpO3JldHVybiB1Pj0wJiY0MDk1Pj11PyhQZShlLCgzODQwJnUpPj40fCgzODQwJnUpPj44LDI0MCZ1fCgyNDAmdSk+PjQsMTUmdXwoMTUmdSk8PDQsMSksT2UodCxlKSxlKTp2b2lkIFBlKGUsMCwwLDAsMSl9aWYoNz09PWkubGVuZ3RoKXt2YXIgdT1wYXJzZUludChpLnN1YnN0cigxKSwxNik7cmV0dXJuIHU+PTAmJjE2Nzc3MjE1Pj11PyhQZShlLCgxNjcxMTY4MCZ1KT4+MTYsKDY1MjgwJnUpPj44LDI1NSZ1LDEpLE9lKHQsZSksZSk6dm9pZCBQZShlLDAsMCwwLDEpfX19fWZ1bmN0aW9uIEVlKHQsZSl7dmFyIG49KHBhcnNlRmxvYXQodFswXSklMzYwKzM2MCklMzYwLzM2MCxpPWtlKHRbMV0pLHI9a2UodFsyXSksYT0uNT49cj9yKihpKzEpOnIraS1yKmksbz0yKnItYTtyZXR1cm4gZT1lfHxbXSxQZShlLFNlKDI1NSpEZShvLGEsbisxLzMpKSxTZSgyNTUqRGUobyxhLG4pKSxTZSgyNTUqRGUobyxhLG4tMS8zKSksMSksND09PXQubGVuZ3RoJiYoZVszXT10WzNdKSxlfWZ1bmN0aW9uIEJlKHQpe2lmKHQpe3ZhciBlLG4saT10WzBdLzI1NSxyPXRbMV0vMjU1LGE9dFsyXS8yNTUsbz1NYXRoLm1pbihpLHIsYSkscz1NYXRoLm1heChpLHIsYSksbD1zLW8sdT0ocytvKS8yO2lmKDA9PT1sKWU9MCxuPTA7ZWxzZXtuPS41PnU/bC8ocytvKTpsLygyLXMtbyk7dmFyIGg9KChzLWkpLzYrbC8yKS9sLGM9KChzLXIpLzYrbC8yKS9sLGQ9KChzLWEpLzYrbC8yKS9sO2k9PT1zP2U9ZC1jOnI9PT1zP2U9MS8zK2gtZDphPT09cyYmKGU9Mi8zK2MtaCksMD5lJiYoZSs9MSksZT4xJiYoZS09MSl9dmFyIGY9WzM2MCplLG4sdV07cmV0dXJuIG51bGwhPXRbM10mJmYucHVzaCh0WzNdKSxmfX1mdW5jdGlvbiB6ZSh0LGUpe3ZhciBuPVJlKHQpO2lmKG4pe2Zvcih2YXIgaT0wOzM+aTtpKyspbltpXT0wPmU/bltpXSooMS1lKXwwOigyNTUtbltpXSkqZStuW2ldfDAsbltpXT4yNTU/bltpXT0yNTU6dFtpXTwwJiYobltpXT0wKTtyZXR1cm4gV2Uobiw0PT09bi5sZW5ndGg/XCJyZ2JhXCI6XCJyZ2JcIil9fWZ1bmN0aW9uIE5lKHQpe3ZhciBlPVJlKHQpO3JldHVybiBlPygoMTw8MjQpKyhlWzBdPDwxNikrKGVbMV08PDgpKyArZVsyXSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpOnZvaWQgMH1mdW5jdGlvbiBGZSh0LGUsbil7aWYoZSYmZS5sZW5ndGgmJnQ+PTAmJjE+PXQpe249bnx8W107dmFyIGk9dCooZS5sZW5ndGgtMSkscj1NYXRoLmZsb29yKGkpLGE9TWF0aC5jZWlsKGkpLG89ZVtyXSxzPWVbYV0sbD1pLXI7cmV0dXJuIG5bMF09U2UoQWUob1swXSxzWzBdLGwpKSxuWzFdPVNlKEFlKG9bMV0sc1sxXSxsKSksblsyXT1TZShBZShvWzJdLHNbMl0sbCkpLG5bM109SWUoQWUob1szXSxzWzNdLGwpKSxufX1mdW5jdGlvbiBWZSh0LGUsbil7aWYoZSYmZS5sZW5ndGgmJnQ+PTAmJjE+PXQpe3ZhciBpPXQqKGUubGVuZ3RoLTEpLHI9TWF0aC5mbG9vcihpKSxhPU1hdGguY2VpbChpKSxvPVJlKGVbcl0pLHM9UmUoZVthXSksbD1pLXIsdT1XZShbU2UoQWUob1swXSxzWzBdLGwpKSxTZShBZShvWzFdLHNbMV0sbCkpLFNlKEFlKG9bMl0sc1syXSxsKSksSWUoQWUob1szXSxzWzNdLGwpKV0sXCJyZ2JhXCIpO3JldHVybiBuP3tjb2xvcjp1LGxlZnRJbmRleDpyLHJpZ2h0SW5kZXg6YSx2YWx1ZTppfTp1fX1mdW5jdGlvbiBHZSh0LGUsbixpKXtyZXR1cm4gdD1SZSh0KSx0Pyh0PUJlKHQpLG51bGwhPWUmJih0WzBdPUNlKGUpKSxudWxsIT1uJiYodFsxXT1rZShuKSksbnVsbCE9aSYmKHRbMl09a2UoaSkpLFdlKEVlKHQpLFwicmdiYVwiKSk6dm9pZCAwfWZ1bmN0aW9uIEhlKHQsZSl7cmV0dXJuIHQ9UmUodCksdCYmbnVsbCE9ZT8odFszXT1JZShlKSxXZSh0LFwicmdiYVwiKSk6dm9pZCAwfWZ1bmN0aW9uIFdlKHQsZSl7aWYodCYmdC5sZW5ndGgpe3ZhciBuPXRbMF0rXCIsXCIrdFsxXStcIixcIit0WzJdO3JldHVybihcInJnYmFcIj09PWV8fFwiaHN2YVwiPT09ZXx8XCJoc2xhXCI9PT1lKSYmKG4rPVwiLFwiK3RbM10pLGUrXCIoXCIrbitcIilcIn19ZnVuY3Rpb24gamUodCxlKXtyZXR1cm4gdFtlXX1mdW5jdGlvbiBxZSh0LGUsbil7dFtlXT1ufWZ1bmN0aW9uIFVlKHQsZSxuKXtyZXR1cm4oZS10KSpuK3R9ZnVuY3Rpb24gWGUodCxlLG4pe3JldHVybiBuPi41P2U6dH1mdW5jdGlvbiBZZSh0LGUsbixpLHIpe3ZhciBhPXQubGVuZ3RoO2lmKDE9PXIpZm9yKHZhciBvPTA7YT5vO28rKylpW29dPVVlKHRbb10sZVtvXSxuKTtlbHNlIGZvcih2YXIgcz1hJiZ0WzBdLmxlbmd0aCxvPTA7YT5vO28rKylmb3IodmFyIGw9MDtzPmw7bCsrKWlbb11bbF09VWUodFtvXVtsXSxlW29dW2xdLG4pfWZ1bmN0aW9uIFplKHQsZSxuKXt2YXIgaT10Lmxlbmd0aCxyPWUubGVuZ3RoO2lmKGkhPT1yKXt2YXIgYT1pPnI7aWYoYSl0Lmxlbmd0aD1yO2Vsc2UgZm9yKHZhciBvPWk7cj5vO28rKyl0LnB1c2goMT09PW4/ZVtvXTpmZC5jYWxsKGVbb10pKX1mb3IodmFyIHM9dFswXSYmdFswXS5sZW5ndGgsbz0wO288dC5sZW5ndGg7bysrKWlmKDE9PT1uKWlzTmFOKHRbb10pJiYodFtvXT1lW29dKTtlbHNlIGZvcih2YXIgbD0wO3M+bDtsKyspaXNOYU4odFtvXVtsXSkmJih0W29dW2xdPWVbb11bbF0pfWZ1bmN0aW9uICRlKHQsZSxuKXtpZih0PT09ZSlyZXR1cm4hMDt2YXIgaT10Lmxlbmd0aDtpZihpIT09ZS5sZW5ndGgpcmV0dXJuITE7aWYoMT09PW4pe2Zvcih2YXIgcj0wO2k+cjtyKyspaWYodFtyXSE9PWVbcl0pcmV0dXJuITF9ZWxzZSBmb3IodmFyIGE9dFswXS5sZW5ndGgscj0wO2k+cjtyKyspZm9yKHZhciBvPTA7YT5vO28rKylpZih0W3JdW29dIT09ZVtyXVtvXSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZSh0LGUsbixpLHIsYSxvLHMsbCl7dmFyIHU9dC5sZW5ndGg7aWYoMT09bClmb3IodmFyIGg9MDt1Pmg7aCsrKXNbaF09UWUodFtoXSxlW2hdLG5baF0saVtoXSxyLGEsbyk7ZWxzZSBmb3IodmFyIGM9dFswXS5sZW5ndGgsaD0wO3U+aDtoKyspZm9yKHZhciBkPTA7Yz5kO2QrKylzW2hdW2RdPVFlKHRbaF1bZF0sZVtoXVtkXSxuW2hdW2RdLGlbaF1bZF0scixhLG8pfWZ1bmN0aW9uIFFlKHQsZSxuLGkscixhLG8pe3ZhciBzPS41KihuLXQpLGw9LjUqKGktZSk7cmV0dXJuKDIqKGUtbikrcytsKSpvKygtMyooZS1uKS0yKnMtbCkqYStzKnIrZX1mdW5jdGlvbiBKZSh0KXtpZihkKHQpKXt2YXIgZT10Lmxlbmd0aDtpZihkKHRbMF0pKXtmb3IodmFyIG49W10saT0wO2U+aTtpKyspbi5wdXNoKGZkLmNhbGwodFtpXSkpO3JldHVybiBufXJldHVybiBmZC5jYWxsKHQpfXJldHVybiB0fWZ1bmN0aW9uIHRuKHQpe3JldHVybiB0WzBdPU1hdGguZmxvb3IodFswXSksdFsxXT1NYXRoLmZsb29yKHRbMV0pLHRbMl09TWF0aC5mbG9vcih0WzJdKSxcInJnYmEoXCIrdC5qb2luKFwiLFwiKStcIilcIn1mdW5jdGlvbiBlbih0KXt2YXIgZT10W3QubGVuZ3RoLTFdLnZhbHVlO3JldHVybiBkKGUmJmVbMF0pPzI6MX1mdW5jdGlvbiBubih0LGUsbixpLHIsYSl7dmFyIG89dC5fZ2V0dGVyLHM9dC5fc2V0dGVyLGw9XCJzcGxpbmVcIj09PWUsdT1pLmxlbmd0aDtpZih1KXt2YXIgaCxjPWlbMF0udmFsdWUsZj1kKGMpLHA9ITEsZz0hMSx2PWY/ZW4oaSk6MDtpLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC50aW1lLWUudGltZX0pLGg9aVt1LTFdLnRpbWU7Zm9yKHZhciBtPVtdLHk9W10sXz1pWzBdLnZhbHVlLHg9ITAsdz0wO3U+dzt3Kyspe20ucHVzaChpW3ddLnRpbWUvaCk7dmFyIGI9aVt3XS52YWx1ZTtpZihmJiYkZShiLF8sdil8fCFmJiZiPT09X3x8KHg9ITEpLF89YixcInN0cmluZ1wiPT10eXBlb2YgYil7dmFyIE09UmUoYik7TT8oYj1NLHA9ITApOmc9ITB9eS5wdXNoKGIpfWlmKGF8fCF4KXtmb3IodmFyIFM9eVt1LTFdLHc9MDt1LTE+dzt3KyspZj9aZSh5W3ddLFMsdik6IWlzTmFOKHlbd10pfHxpc05hTihTKXx8Z3x8cHx8KHlbd109Uyk7ZiYmWmUobyh0Ll90YXJnZXQsciksUyx2KTt2YXIgQyxJLFQsayxELEEsUD0wLEw9MDtpZihwKXZhciBPPVswLDAsMCwwXTt2YXIgUj1mdW5jdGlvbih0LGUpe3ZhciBuO2lmKDA+ZSluPTA7ZWxzZSBpZihMPmUpe2ZvcihDPU1hdGgubWluKFArMSx1LTEpLG49QztuPj0wJiYhKG1bbl08PWUpO24tLSk7bj1NYXRoLm1pbihuLHUtMil9ZWxzZXtmb3Iobj1QO3U+biYmIShtW25dPmUpO24rKyk7bj1NYXRoLm1pbihuLTEsdS0yKX1QPW4sTD1lO3ZhciBpPW1bbisxXS1tW25dO2lmKDAhPT1pKWlmKEk9KGUtbVtuXSkvaSxsKWlmKGs9eVtuXSxUPXlbMD09PW4/bjpuLTFdLEQ9eVtuPnUtMj91LTE6bisxXSxBPXlbbj51LTM/dS0xOm4rMl0sZilLZShULGssRCxBLEksSSpJLEkqSSpJLG8odCxyKSx2KTtlbHNle3ZhciBhO2lmKHApYT1LZShULGssRCxBLEksSSpJLEkqSSpJLE8sMSksYT10bihPKTtlbHNle2lmKGcpcmV0dXJuIFhlKGssRCxJKTthPVFlKFQsayxELEEsSSxJKkksSSpJKkkpfXModCxyLGEpfWVsc2UgaWYoZilZZSh5W25dLHlbbisxXSxJLG8odCxyKSx2KTtlbHNle3ZhciBhO2lmKHApWWUoeVtuXSx5W24rMV0sSSxPLDEpLGE9dG4oTyk7ZWxzZXtpZihnKXJldHVybiBYZSh5W25dLHlbbisxXSxJKTthPVVlKHlbbl0seVtuKzFdLEkpfXModCxyLGEpfX0sRT1uZXcgTWUoe3RhcmdldDp0Ll90YXJnZXQsbGlmZTpoLGxvb3A6dC5fbG9vcCxkZWxheTp0Ll9kZWxheSxvbmZyYW1lOlIsb25kZXN0cm95Om59KTtyZXR1cm4gZSYmXCJzcGxpbmVcIiE9PWUmJihFLmVhc2luZz1lKSxFfX19ZnVuY3Rpb24gcm4odCxlLG4saSl7MD5uJiYodCs9bixuPS1uKSwwPmkmJihlKz1pLGk9LWkpLHRoaXMueD10LHRoaXMueT1lLHRoaXMud2lkdGg9bix0aGlzLmhlaWdodD1pfWZ1bmN0aW9uIGFuKHQpe2Zvcih2YXIgZT0wO3Q+PUlkOyllfD0xJnQsdD4+PTE7cmV0dXJuIHQrZX1mdW5jdGlvbiBvbih0LGUsbixpKXt2YXIgcj1lKzE7aWYocj09PW4pcmV0dXJuIDE7aWYoaSh0W3IrK10sdFtlXSk8MCl7Zm9yKDtuPnImJmkodFtyXSx0W3ItMV0pPDA7KXIrKztzbih0LGUscil9ZWxzZSBmb3IoO24+ciYmaSh0W3JdLHRbci0xXSk+PTA7KXIrKztyZXR1cm4gci1lfWZ1bmN0aW9uIHNuKHQsZSxuKXtmb3Iobi0tO24+ZTspe3ZhciBpPXRbZV07dFtlKytdPXRbbl0sdFtuLS1dPWl9fWZ1bmN0aW9uIGxuKHQsZSxuLGkscil7Zm9yKGk9PT1lJiZpKys7bj5pO2krKyl7Zm9yKHZhciBhLG89dFtpXSxzPWUsbD1pO2w+czspYT1zK2w+Pj4xLHIobyx0W2FdKTwwP2w9YTpzPWErMTt2YXIgdT1pLXM7c3dpdGNoKHUpe2Nhc2UgMzp0W3MrM109dFtzKzJdO2Nhc2UgMjp0W3MrMl09dFtzKzFdO2Nhc2UgMTp0W3MrMV09dFtzXTticmVhaztkZWZhdWx0OmZvcig7dT4wOyl0W3MrdV09dFtzK3UtMV0sdS0tfXRbc109b319ZnVuY3Rpb24gdW4odCxlLG4saSxyLGEpe3ZhciBvPTAscz0wLGw9MTtpZihhKHQsZVtuK3JdKT4wKXtmb3Iocz1pLXI7cz5sJiZhKHQsZVtuK3IrbF0pPjA7KW89bCxsPShsPDwxKSsxLDA+PWwmJihsPXMpO2w+cyYmKGw9cyksbys9cixsKz1yfWVsc2V7Zm9yKHM9cisxO3M+bCYmYSh0LGVbbityLWxdKTw9MDspbz1sLGw9KGw8PDEpKzEsMD49bCYmKGw9cyk7bD5zJiYobD1zKTt2YXIgdT1vO289ci1sLGw9ci11fWZvcihvKys7bD5vOyl7dmFyIGg9bysobC1vPj4+MSk7YSh0LGVbbitoXSk+MD9vPWgrMTpsPWh9cmV0dXJuIGx9ZnVuY3Rpb24gaG4odCxlLG4saSxyLGEpe3ZhciBvPTAscz0wLGw9MTtpZihhKHQsZVtuK3JdKTwwKXtmb3Iocz1yKzE7cz5sJiZhKHQsZVtuK3ItbF0pPDA7KW89bCxsPShsPDwxKSsxLDA+PWwmJihsPXMpO2w+cyYmKGw9cyk7dmFyIHU9bztvPXItbCxsPXItdX1lbHNle2ZvcihzPWktcjtzPmwmJmEodCxlW24rcitsXSk+PTA7KW89bCxsPShsPDwxKSsxLDA+PWwmJihsPXMpO2w+cyYmKGw9cyksbys9cixsKz1yfWZvcihvKys7bD5vOyl7dmFyIGg9bysobC1vPj4+MSk7YSh0LGVbbitoXSk8MD9sPWg6bz1oKzF9cmV0dXJuIGx9ZnVuY3Rpb24gY24odCxlKXtmdW5jdGlvbiBuKHQsZSl7bFtjXT10LHVbY109ZSxjKz0xfWZ1bmN0aW9uIGkoKXtmb3IoO2M+MTspe3ZhciB0PWMtMjtpZih0Pj0xJiZ1W3QtMV08PXVbdF0rdVt0KzFdfHx0Pj0yJiZ1W3QtMl08PXVbdF0rdVt0LTFdKXVbdC0xXTx1W3QrMV0mJnQtLTtlbHNlIGlmKHVbdF0+dVt0KzFdKWJyZWFrO2EodCl9fWZ1bmN0aW9uIHIoKXtmb3IoO2M+MTspe3ZhciB0PWMtMjt0PjAmJnVbdC0xXTx1W3QrMV0mJnQtLSxhKHQpfX1mdW5jdGlvbiBhKG4pe3ZhciBpPWxbbl0scj11W25dLGE9bFtuKzFdLGg9dVtuKzFdO3Vbbl09citoLG49PT1jLTMmJihsW24rMV09bFtuKzJdLHVbbisxXT11W24rMl0pLGMtLTt2YXIgZD1obih0W2FdLHQsaSxyLDAsZSk7aSs9ZCxyLT1kLDAhPT1yJiYoaD11bih0W2krci0xXSx0LGEsaCxoLTEsZSksMCE9PWgmJihoPj1yP28oaSxyLGEsaCk6cyhpLHIsYSxoKSkpfWZ1bmN0aW9uIG8obixpLHIsYSl7dmFyIG89MDtmb3Iobz0wO2k+bztvKyspZFtvXT10W24rb107dmFyIHM9MCxsPXIsdT1uO2lmKHRbdSsrXT10W2wrK10sMCE9PS0tYSl7aWYoMT09PWkpe2ZvcihvPTA7YT5vO28rKyl0W3Urb109dFtsK29dO3JldHVybiB2b2lkKHRbdSthXT1kW3NdKX1mb3IodmFyIGMsZixwLGc9aDs7KXtjPTAsZj0wLHA9ITE7ZG8gaWYoZSh0W2xdLGRbc10pPDApe2lmKHRbdSsrXT10W2wrK10sZisrLGM9MCwwPT09LS1hKXtwPSEwO2JyZWFrfX1lbHNlIGlmKHRbdSsrXT1kW3MrK10sYysrLGY9MCwxPT09LS1pKXtwPSEwO2JyZWFrfXdoaWxlKGc+KGN8ZikpO2lmKHApYnJlYWs7ZG97aWYoYz1obih0W2xdLGQscyxpLDAsZSksMCE9PWMpe2ZvcihvPTA7Yz5vO28rKyl0W3Urb109ZFtzK29dO2lmKHUrPWMscys9YyxpLT1jLDE+PWkpe3A9ITA7YnJlYWt9fWlmKHRbdSsrXT10W2wrK10sMD09PS0tYSl7cD0hMDticmVha31pZihmPXVuKGRbc10sdCxsLGEsMCxlKSwwIT09Zil7Zm9yKG89MDtmPm87bysrKXRbdStvXT10W2wrb107aWYodSs9ZixsKz1mLGEtPWYsMD09PWEpe3A9ITA7YnJlYWt9fWlmKHRbdSsrXT1kW3MrK10sMT09PS0taSl7cD0hMDticmVha31nLS19d2hpbGUoYz49VGR8fGY+PVRkKTtpZihwKWJyZWFrOzA+ZyYmKGc9MCksZys9Mn1pZihoPWcsMT5oJiYoaD0xKSwxPT09aSl7Zm9yKG89MDthPm87bysrKXRbdStvXT10W2wrb107dFt1K2FdPWRbc119ZWxzZXtpZigwPT09aSl0aHJvdyBuZXcgRXJyb3I7Zm9yKG89MDtpPm87bysrKXRbdStvXT1kW3Mrb119fWVsc2UgZm9yKG89MDtpPm87bysrKXRbdStvXT1kW3Mrb119ZnVuY3Rpb24gcyhuLGkscixhKXt2YXIgbz0wO2ZvcihvPTA7YT5vO28rKylkW29dPXRbcitvXTt2YXIgcz1uK2ktMSxsPWEtMSx1PXIrYS0xLGM9MCxmPTA7aWYodFt1LS1dPXRbcy0tXSwwIT09LS1pKXtpZigxPT09YSl7Zm9yKHUtPWkscy09aSxmPXUrMSxjPXMrMSxvPWktMTtvPj0wO28tLSl0W2Yrb109dFtjK29dO3JldHVybiB2b2lkKHRbdV09ZFtsXSl9Zm9yKHZhciBwPWg7Oyl7dmFyIGc9MCx2PTAsbT0hMTtkbyBpZihlKGRbbF0sdFtzXSk8MCl7aWYodFt1LS1dPXRbcy0tXSxnKyssdj0wLDA9PT0tLWkpe209ITA7YnJlYWt9fWVsc2UgaWYodFt1LS1dPWRbbC0tXSx2KyssZz0wLDE9PT0tLWEpe209ITA7YnJlYWt9d2hpbGUocD4oZ3x2KSk7aWYobSlicmVhaztkb3tpZihnPWktaG4oZFtsXSx0LG4saSxpLTEsZSksMCE9PWcpe2Zvcih1LT1nLHMtPWcsaS09ZyxmPXUrMSxjPXMrMSxvPWctMTtvPj0wO28tLSl0W2Yrb109dFtjK29dO2lmKDA9PT1pKXttPSEwO2JyZWFrfX1pZih0W3UtLV09ZFtsLS1dLDE9PT0tLWEpe209ITA7YnJlYWt9aWYodj1hLXVuKHRbc10sZCwwLGEsYS0xLGUpLDAhPT12KXtmb3IodS09dixsLT12LGEtPXYsZj11KzEsYz1sKzEsbz0wO3Y+bztvKyspdFtmK29dPWRbYytvXTtpZigxPj1hKXttPSEwO2JyZWFrfX1pZih0W3UtLV09dFtzLS1dLDA9PT0tLWkpe209ITA7YnJlYWt9cC0tfXdoaWxlKGc+PVRkfHx2Pj1UZCk7aWYobSlicmVhazswPnAmJihwPTApLHArPTJ9aWYoaD1wLDE+aCYmKGg9MSksMT09PWEpe2Zvcih1LT1pLHMtPWksZj11KzEsYz1zKzEsbz1pLTE7bz49MDtvLS0pdFtmK29dPXRbYytvXTt0W3VdPWRbbF19ZWxzZXtpZigwPT09YSl0aHJvdyBuZXcgRXJyb3I7Zm9yKGM9dS0oYS0xKSxvPTA7YT5vO28rKyl0W2Mrb109ZFtvXX19ZWxzZSBmb3IoYz11LShhLTEpLG89MDthPm87bysrKXRbYytvXT1kW29dfXZhciBsLHUsaD1UZCxjPTAsZD1bXTtsPVtdLHU9W10sdGhpcy5tZXJnZVJ1bnM9aSx0aGlzLmZvcmNlTWVyZ2VSdW5zPXIsdGhpcy5wdXNoUnVuPW59ZnVuY3Rpb24gZG4odCxlLG4saSl7bnx8KG49MCksaXx8KGk9dC5sZW5ndGgpO3ZhciByPWktbjtpZighKDI+cikpe3ZhciBhPTA7aWYoSWQ+cilyZXR1cm4gYT1vbih0LG4saSxlKSx2b2lkIGxuKHQsbixpLG4rYSxlKTt2YXIgbz1uZXcgY24odCxlKSxzPWFuKHIpO2Rve2lmKGE9b24odCxuLGksZSkscz5hKXt2YXIgbD1yO2w+cyYmKGw9cyksbG4odCxuLG4rbCxuK2EsZSksYT1sfW8ucHVzaFJ1bihuLGEpLG8ubWVyZ2VSdW5zKCksci09YSxuKz1hfXdoaWxlKDAhPT1yKTtvLmZvcmNlTWVyZ2VSdW5zKCl9fWZ1bmN0aW9uIGZuKHQsZSl7cmV0dXJuIHQuemxldmVsPT09ZS56bGV2ZWw/dC56PT09ZS56P3QuejItZS56Mjp0LnotZS56OnQuemxldmVsLWUuemxldmVsfWZ1bmN0aW9uIHBuKHQsZSxuKXt2YXIgaT1udWxsPT1lLng/MDplLngscj1udWxsPT1lLngyPzE6ZS54MixhPW51bGw9PWUueT8wOmUueSxvPW51bGw9PWUueTI/MDplLnkyO2UuZ2xvYmFsfHwoaT1pKm4ud2lkdGgrbi54LHI9cipuLndpZHRoK24ueCxhPWEqbi5oZWlnaHQrbi55LG89bypuLmhlaWdodCtuLnkpLGk9aXNOYU4oaSk/MDppLHI9aXNOYU4ocik/MTpyLGE9aXNOYU4oYSk/MDphLG89aXNOYU4obyk/MDpvO3ZhciBzPXQuY3JlYXRlTGluZWFyR3JhZGllbnQoaSxhLHIsbyk7cmV0dXJuIHN9ZnVuY3Rpb24gZ24odCxlLG4pe3ZhciBpPW4ud2lkdGgscj1uLmhlaWdodCxhPU1hdGgubWluKGksciksbz1udWxsPT1lLng/LjU6ZS54LHM9bnVsbD09ZS55Py41OmUueSxsPW51bGw9PWUucj8uNTplLnI7ZS5nbG9iYWx8fChvPW8qaStuLngscz1zKnIrbi55LGwqPWEpO3ZhciB1PXQuY3JlYXRlUmFkaWFsR3JhZGllbnQobyxzLDAsbyxzLGwpO3JldHVybiB1fWZ1bmN0aW9uIHZuKCl7cmV0dXJuITF9ZnVuY3Rpb24gbW4odCxlLG4pe3ZhciBpPU9jKCkscj1lLmdldFdpZHRoKCksYT1lLmdldEhlaWdodCgpLG89aS5zdHlsZTtyZXR1cm4gbyYmKG8ucG9zaXRpb249XCJhYnNvbHV0ZVwiLG8ubGVmdD0wLG8udG9wPTAsby53aWR0aD1yK1wicHhcIixvLmhlaWdodD1hK1wicHhcIixpLnNldEF0dHJpYnV0ZShcImRhdGEtenItZG9tLWlkXCIsdCkpLGkud2lkdGg9cipuLGkuaGVpZ2h0PWEqbixpfWZ1bmN0aW9uIHluKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZT1GZC5nZXQodCk7cmV0dXJuIGUmJmUuaW1hZ2V9cmV0dXJuIHR9ZnVuY3Rpb24gX24odCxlLG4saSxyKXtpZih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYoZSYmZS5fX3pySW1hZ2VTcmM9PT10fHwhbilyZXR1cm4gZTt2YXIgYT1GZC5nZXQodCksbz17aG9zdEVsOm4sY2I6aSxjYlBheWxvYWQ6cn07cmV0dXJuIGE/KGU9YS5pbWFnZSwhd24oZSkmJmEucGVuZGluZy5wdXNoKG8pKTooIWUmJihlPW5ldyBJbWFnZSksZS5vbmxvYWQ9eG4sRmQucHV0KHQsZS5fX2NhY2hlZEltZ09iaj17aW1hZ2U6ZSxwZW5kaW5nOltvXX0pLGUuc3JjPWUuX196ckltYWdlU3JjPXQpLGV9cmV0dXJuIHR9cmV0dXJuIGV9ZnVuY3Rpb24geG4oKXt2YXIgdD10aGlzLl9fY2FjaGVkSW1nT2JqO3RoaXMub25sb2FkPXRoaXMuX19jYWNoZWRJbWdPYmo9bnVsbDtmb3IodmFyIGU9MDtlPHQucGVuZGluZy5sZW5ndGg7ZSsrKXt2YXIgbj10LnBlbmRpbmdbZV0saT1uLmNiO2kmJmkodGhpcyxuLmNiUGF5bG9hZCksbi5ob3N0RWwuZGlydHkoKX10LnBlbmRpbmcubGVuZ3RoPTB9ZnVuY3Rpb24gd24odCl7cmV0dXJuIHQmJnQud2lkdGgmJnQuaGVpZ2h0fWZ1bmN0aW9uIGJuKHQsZSl7ZT1lfHxqZDt2YXIgbj10K1wiOlwiK2U7aWYoVmRbbl0pcmV0dXJuIFZkW25dO2Zvcih2YXIgaT0odCtcIlwiKS5zcGxpdChcIlxcblwiKSxyPTAsYT0wLG89aS5sZW5ndGg7bz5hO2ErKylyPU1hdGgubWF4KFJuKGlbYV0sZSkud2lkdGgscik7cmV0dXJuIEdkPkhkJiYoR2Q9MCxWZD17fSksR2QrKyxWZFtuXT1yLHJ9ZnVuY3Rpb24gTW4odCxlLG4saSxyLGEsbyl7cmV0dXJuIGE/Q24odCxlLG4saSxyLGEsbyk6U24odCxlLG4saSxyLG8pfWZ1bmN0aW9uIFNuKHQsZSxuLGkscixhKXt2YXIgbz1Fbih0LGUscixhKSxzPWJuKHQsZSk7ciYmKHMrPXJbMV0rclszXSk7dmFyIGw9by5vdXRlckhlaWdodCx1PUluKDAscyxuKSxoPVRuKDAsbCxpKSxjPW5ldyBybih1LGgscyxsKTtyZXR1cm4gYy5saW5lSGVpZ2h0PW8ubGluZUhlaWdodCxjfWZ1bmN0aW9uIENuKHQsZSxuLGkscixhLG8pe3ZhciBzPUJuKHQse3JpY2g6YSx0cnVuY2F0ZTpvLGZvbnQ6ZSx0ZXh0QWxpZ246bix0ZXh0UGFkZGluZzpyfSksbD1zLm91dGVyV2lkdGgsdT1zLm91dGVySGVpZ2h0LGg9SW4oMCxsLG4pLGM9VG4oMCx1LGkpO3JldHVybiBuZXcgcm4oaCxjLGwsdSl9ZnVuY3Rpb24gSW4odCxlLG4pe3JldHVyblwicmlnaHRcIj09PW4/dC09ZTpcImNlbnRlclwiPT09biYmKHQtPWUvMiksdH1mdW5jdGlvbiBUbih0LGUsbil7cmV0dXJuXCJtaWRkbGVcIj09PW4/dC09ZS8yOlwiYm90dG9tXCI9PT1uJiYodC09ZSksdH1mdW5jdGlvbiBrbih0LGUsbil7dmFyIGk9ZS54LHI9ZS55LGE9ZS5oZWlnaHQsbz1lLndpZHRoLHM9YS8yLGw9XCJsZWZ0XCIsdT1cInRvcFwiO3N3aXRjaCh0KXtjYXNlXCJsZWZ0XCI6aS09bixyKz1zLGw9XCJyaWdodFwiLHU9XCJtaWRkbGVcIjticmVhaztjYXNlXCJyaWdodFwiOmkrPW4rbyxyKz1zLHU9XCJtaWRkbGVcIjticmVhaztjYXNlXCJ0b3BcIjppKz1vLzIsci09bixsPVwiY2VudGVyXCIsdT1cImJvdHRvbVwiO2JyZWFrO2Nhc2VcImJvdHRvbVwiOmkrPW8vMixyKz1hK24sbD1cImNlbnRlclwiO2JyZWFrO2Nhc2VcImluc2lkZVwiOmkrPW8vMixyKz1zLGw9XCJjZW50ZXJcIix1PVwibWlkZGxlXCI7YnJlYWs7Y2FzZVwiaW5zaWRlTGVmdFwiOmkrPW4scis9cyx1PVwibWlkZGxlXCI7YnJlYWs7Y2FzZVwiaW5zaWRlUmlnaHRcIjppKz1vLW4scis9cyxsPVwicmlnaHRcIix1PVwibWlkZGxlXCI7YnJlYWs7Y2FzZVwiaW5zaWRlVG9wXCI6aSs9by8yLHIrPW4sbD1cImNlbnRlclwiO2JyZWFrO2Nhc2VcImluc2lkZUJvdHRvbVwiOmkrPW8vMixyKz1hLW4sbD1cImNlbnRlclwiLHU9XCJib3R0b21cIjticmVhaztjYXNlXCJpbnNpZGVUb3BMZWZ0XCI6aSs9bixyKz1uO2JyZWFrO2Nhc2VcImluc2lkZVRvcFJpZ2h0XCI6aSs9by1uLHIrPW4sbD1cInJpZ2h0XCI7YnJlYWs7Y2FzZVwiaW5zaWRlQm90dG9tTGVmdFwiOmkrPW4scis9YS1uLHU9XCJib3R0b21cIjticmVhaztjYXNlXCJpbnNpZGVCb3R0b21SaWdodFwiOmkrPW8tbixyKz1hLW4sbD1cInJpZ2h0XCIsdT1cImJvdHRvbVwifXJldHVybnt4OmkseTpyLHRleHRBbGlnbjpsLHRleHRWZXJ0aWNhbEFsaWduOnV9fWZ1bmN0aW9uIERuKHQsZSxuLGkscil7aWYoIWUpcmV0dXJuXCJcIjt2YXIgYT0odCtcIlwiKS5zcGxpdChcIlxcblwiKTtyPUFuKGUsbixpLHIpO2Zvcih2YXIgbz0wLHM9YS5sZW5ndGg7cz5vO28rKylhW29dPVBuKGFbb10scik7cmV0dXJuIGEuam9pbihcIlxcblwiKX1mdW5jdGlvbiBBbih0LGUsbixpKXtpPW8oe30saSksaS5mb250PWU7dmFyIG49RChuLFwiLi4uXCIpO2kubWF4SXRlcmF0aW9ucz1EKGkubWF4SXRlcmF0aW9ucywyKTt2YXIgcj1pLm1pbkNoYXI9RChpLm1pbkNoYXIsMCk7aS5jbkNoYXJXaWR0aD1ibihcIuWbvVwiLGUpO3ZhciBhPWkuYXNjQ2hhcldpZHRoPWJuKFwiYVwiLGUpO2kucGxhY2Vob2xkZXI9RChpLnBsYWNlaG9sZGVyLFwiXCIpO2Zvcih2YXIgcz10PU1hdGgubWF4KDAsdC0xKSxsPTA7cj5sJiZzPj1hO2wrKylzLT1hO3ZhciB1PWJuKG4pO3JldHVybiB1PnMmJihuPVwiXCIsdT0wKSxzPXQtdSxpLmVsbGlwc2lzPW4saS5lbGxpcHNpc1dpZHRoPXUsaS5jb250ZW50V2lkdGg9cyxpLmNvbnRhaW5lcldpZHRoPXQsaX1mdW5jdGlvbiBQbih0LGUpe3ZhciBuPWUuY29udGFpbmVyV2lkdGgsaT1lLmZvbnQscj1lLmNvbnRlbnRXaWR0aDtpZighbilyZXR1cm5cIlwiO3ZhciBhPWJuKHQsaSk7aWYobj49YSlyZXR1cm4gdDtmb3IodmFyIG89MDs7bysrKXtpZihyPj1hfHxvPj1lLm1heEl0ZXJhdGlvbnMpe3QrPWUuZWxsaXBzaXM7YnJlYWt9dmFyIHM9MD09PW8/TG4odCxyLGUuYXNjQ2hhcldpZHRoLGUuY25DaGFyV2lkdGgpOmE+MD9NYXRoLmZsb29yKHQubGVuZ3RoKnIvYSk6MDt0PXQuc3Vic3RyKDAscyksYT1ibih0LGkpfXJldHVyblwiXCI9PT10JiYodD1lLnBsYWNlaG9sZGVyKSx0fWZ1bmN0aW9uIExuKHQsZSxuLGkpe2Zvcih2YXIgcj0wLGE9MCxvPXQubGVuZ3RoO28+YSYmZT5yO2ErKyl7dmFyIHM9dC5jaGFyQ29kZUF0KGEpO3IrPXM+PTAmJjEyNz49cz9uOml9cmV0dXJuIGF9ZnVuY3Rpb24gT24odCl7cmV0dXJuIGJuKFwi5Zu9XCIsdCl9ZnVuY3Rpb24gUm4odCxlKXtyZXR1cm4gcWQubWVhc3VyZVRleHQodCxlKX1mdW5jdGlvbiBFbih0LGUsbixpKXtudWxsIT10JiYodCs9XCJcIik7dmFyIHI9T24oZSksYT10P3Quc3BsaXQoXCJcXG5cIik6W10sbz1hLmxlbmd0aCpyLHM9bztpZihuJiYocys9blswXStuWzJdKSx0JiZpKXt2YXIgbD1pLm91dGVySGVpZ2h0LHU9aS5vdXRlcldpZHRoO2lmKG51bGwhPWwmJnM+bCl0PVwiXCIsYT1bXTtlbHNlIGlmKG51bGwhPXUpZm9yKHZhciBoPUFuKHUtKG4/blsxXStuWzNdOjApLGUsaS5lbGxpcHNpcyx7bWluQ2hhcjppLm1pbkNoYXIscGxhY2Vob2xkZXI6aS5wbGFjZWhvbGRlcn0pLGM9MCxkPWEubGVuZ3RoO2Q+YztjKyspYVtjXT1QbihhW2NdLGgpfXJldHVybntsaW5lczphLGhlaWdodDpvLG91dGVySGVpZ2h0OnMsbGluZUhlaWdodDpyfX1mdW5jdGlvbiBCbih0LGUpe3ZhciBuPXtsaW5lczpbXSx3aWR0aDowLGhlaWdodDowfTtpZihudWxsIT10JiYodCs9XCJcIiksIXQpcmV0dXJuIG47Zm9yKHZhciBpLHI9V2QubGFzdEluZGV4PTA7bnVsbCE9KGk9V2QuZXhlYyh0KSk7KXt2YXIgYT1pLmluZGV4O2E+ciYmem4obix0LnN1YnN0cmluZyhyLGEpKSx6bihuLGlbMl0saVsxXSkscj1XZC5sYXN0SW5kZXh9cjx0Lmxlbmd0aCYmem4obix0LnN1YnN0cmluZyhyLHQubGVuZ3RoKSk7dmFyIG89bi5saW5lcyxzPTAsbD0wLHU9W10saD1lLnRleHRQYWRkaW5nLGM9ZS50cnVuY2F0ZSxkPWMmJmMub3V0ZXJXaWR0aCxmPWMmJmMub3V0ZXJIZWlnaHQ7aCYmKG51bGwhPWQmJihkLT1oWzFdK2hbM10pLG51bGwhPWYmJihmLT1oWzBdK2hbMl0pKTtmb3IodmFyIHA9MDtwPG8ubGVuZ3RoO3ArKyl7Zm9yKHZhciBnPW9bcF0sdj0wLG09MCx5PTA7eTxnLnRva2Vucy5sZW5ndGg7eSsrKXt2YXIgXz1nLnRva2Vuc1t5XSx4PV8uc3R5bGVOYW1lJiZlLnJpY2hbXy5zdHlsZU5hbWVdfHx7fSx3PV8udGV4dFBhZGRpbmc9eC50ZXh0UGFkZGluZyxiPV8uZm9udD14LmZvbnR8fGUuZm9udCxNPV8udGV4dEhlaWdodD1EKHgudGV4dEhlaWdodCxPbihiKSk7aWYodyYmKE0rPXdbMF0rd1syXSksXy5oZWlnaHQ9TSxfLmxpbmVIZWlnaHQ9QSh4LnRleHRMaW5lSGVpZ2h0LGUudGV4dExpbmVIZWlnaHQsTSksXy50ZXh0QWxpZ249eCYmeC50ZXh0QWxpZ258fGUudGV4dEFsaWduLF8udGV4dFZlcnRpY2FsQWxpZ249eCYmeC50ZXh0VmVydGljYWxBbGlnbnx8XCJtaWRkbGVcIixudWxsIT1mJiZzK18ubGluZUhlaWdodD5mKXJldHVybntsaW5lczpbXSx3aWR0aDowLGhlaWdodDowfTtfLnRleHRXaWR0aD1ibihfLnRleHQsYik7dmFyIFM9eC50ZXh0V2lkdGgsQz1udWxsPT1TfHxcImF1dG9cIj09PVM7aWYoXCJzdHJpbmdcIj09dHlwZW9mIFMmJlwiJVwiPT09Uy5jaGFyQXQoUy5sZW5ndGgtMSkpXy5wZXJjZW50V2lkdGg9Uyx1LnB1c2goXyksUz0wO2Vsc2V7aWYoQyl7Uz1fLnRleHRXaWR0aDt2YXIgST14LnRleHRCYWNrZ3JvdW5kQ29sb3IsVD1JJiZJLmltYWdlO1QmJihUPXluKFQpLHduKFQpJiYoUz1NYXRoLm1heChTLFQud2lkdGgqTS9ULmhlaWdodCkpKX12YXIgaz13P3dbMV0rd1szXTowO1MrPWs7dmFyIFA9bnVsbCE9ZD9kLW06bnVsbDtudWxsIT1QJiZTPlAmJighQ3x8az5QPyhfLnRleHQ9XCJcIixfLnRleHRXaWR0aD1TPTApOihfLnRleHQ9RG4oXy50ZXh0LFAtayxiLGMuZWxsaXBzaXMse21pbkNoYXI6Yy5taW5DaGFyfSksXy50ZXh0V2lkdGg9Ym4oXy50ZXh0LGIpLFM9Xy50ZXh0V2lkdGgraykpfW0rPV8ud2lkdGg9Uyx4JiYodj1NYXRoLm1heCh2LF8ubGluZUhlaWdodCkpfWcud2lkdGg9bSxnLmxpbmVIZWlnaHQ9dixzKz12LGw9TWF0aC5tYXgobCxtKX1uLm91dGVyV2lkdGg9bi53aWR0aD1EKGUudGV4dFdpZHRoLGwpLG4ub3V0ZXJIZWlnaHQ9bi5oZWlnaHQ9RChlLnRleHRIZWlnaHQscyksaCYmKG4ub3V0ZXJXaWR0aCs9aFsxXStoWzNdLG4ub3V0ZXJIZWlnaHQrPWhbMF0raFsyXSk7Zm9yKHZhciBwPTA7cDx1Lmxlbmd0aDtwKyspe3ZhciBfPXVbcF0sTD1fLnBlcmNlbnRXaWR0aDtfLndpZHRoPXBhcnNlSW50KEwsMTApLzEwMCpsfXJldHVybiBufWZ1bmN0aW9uIHpuKHQsZSxuKXtmb3IodmFyIGk9XCJcIj09PWUscj1lLnNwbGl0KFwiXFxuXCIpLGE9dC5saW5lcyxvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBzPXJbb10sbD17c3R5bGVOYW1lOm4sdGV4dDpzLGlzTGluZUhvbGRlcjohcyYmIWl9O2lmKG8pYS5wdXNoKHt0b2tlbnM6W2xdfSk7ZWxzZXt2YXIgdT0oYVthLmxlbmd0aC0xXXx8KGFbMF09e3Rva2VuczpbXX0pKS50b2tlbnMsaD11Lmxlbmd0aDsxPT09aCYmdVswXS5pc0xpbmVIb2xkZXI/dVswXT1sOihzfHwhaHx8aSkmJnUucHVzaChsKX19fWZ1bmN0aW9uIE5uKHQpe3ZhciBlPSh0LmZvbnRTaXplfHx0LmZvbnRGYW1pbHkpJiZbdC5mb250U3R5bGUsdC5mb250V2VpZ2h0LCh0LmZvbnRTaXplfHwxMikrXCJweFwiLHQuZm9udEZhbWlseXx8XCJzYW5zLXNlcmlmXCJdLmpvaW4oXCIgXCIpO3JldHVybiBlJiZSKGUpfHx0LnRleHRGb250fHx0LmZvbnR9ZnVuY3Rpb24gRm4odCxlKXt2YXIgbixpLHIsYSxvPWUueCxzPWUueSxsPWUud2lkdGgsdT1lLmhlaWdodCxoPWUucjswPmwmJihvKz1sLGw9LWwpLDA+dSYmKHMrPXUsdT0tdSksXCJudW1iZXJcIj09dHlwZW9mIGg/bj1pPXI9YT1oOmggaW5zdGFuY2VvZiBBcnJheT8xPT09aC5sZW5ndGg/bj1pPXI9YT1oWzBdOjI9PT1oLmxlbmd0aD8obj1yPWhbMF0saT1hPWhbMV0pOjM9PT1oLmxlbmd0aD8obj1oWzBdLGk9YT1oWzFdLHI9aFsyXSk6KG49aFswXSxpPWhbMV0scj1oWzJdLGE9aFszXSk6bj1pPXI9YT0wO3ZhciBjO24raT5sJiYoYz1uK2ksbio9bC9jLGkqPWwvYykscithPmwmJihjPXIrYSxyKj1sL2MsYSo9bC9jKSxpK3I+dSYmKGM9aStyLGkqPXUvYyxyKj11L2MpLG4rYT51JiYoYz1uK2Esbio9dS9jLGEqPXUvYyksdC5tb3ZlVG8obytuLHMpLHQubGluZVRvKG8rbC1pLHMpLDAhPT1pJiZ0LmFyYyhvK2wtaSxzK2ksaSwtTWF0aC5QSS8yLDApLHQubGluZVRvKG8rbCxzK3UtciksMCE9PXImJnQuYXJjKG8rbC1yLHMrdS1yLHIsMCxNYXRoLlBJLzIpLHQubGluZVRvKG8rYSxzK3UpLDAhPT1hJiZ0LmFyYyhvK2Escyt1LWEsYSxNYXRoLlBJLzIsTWF0aC5QSSksdC5saW5lVG8obyxzK24pLDAhPT1uJiZ0LmFyYyhvK24scytuLG4sTWF0aC5QSSwxLjUqTWF0aC5QSSl9ZnVuY3Rpb24gVm4odCl7cmV0dXJuIEduKHQpLGYodC5yaWNoLEduKSx0fWZ1bmN0aW9uIEduKHQpe2lmKHQpe3QuZm9udD1Obih0KTt2YXIgZT10LnRleHRBbGlnbjtcIm1pZGRsZVwiPT09ZSYmKGU9XCJjZW50ZXJcIiksdC50ZXh0QWxpZ249bnVsbD09ZXx8VWRbZV0/ZTpcImxlZnRcIjt2YXIgbj10LnRleHRWZXJ0aWNhbEFsaWdufHx0LnRleHRCYXNlbGluZTtcImNlbnRlclwiPT09biYmKG49XCJtaWRkbGVcIiksdC50ZXh0VmVydGljYWxBbGlnbj1udWxsPT1ufHxYZFtuXT9uOlwidG9wXCI7dmFyIGk9dC50ZXh0UGFkZGluZztpJiYodC50ZXh0UGFkZGluZz1MKHQudGV4dFBhZGRpbmcpKX19ZnVuY3Rpb24gSG4odCxlLG4saSxyKXtpLnJpY2g/am4odCxlLG4saSxyKTpXbih0LGUsbixpLHIpfWZ1bmN0aW9uIFduKHQsZSxuLGkscil7dmFyIGE9UW4oZSxcImZvbnRcIixpLmZvbnR8fGpkKSxvPWkudGV4dFBhZGRpbmcscz10Ll9fdGV4dENvdGVudEJsb2NrOyghc3x8dC5fX2RpcnR5KSYmKHM9dC5fX3RleHRDb3RlbnRCbG9jaz1FbihuLGEsbyxpLnRydW5jYXRlKSk7dmFyIGw9cy5vdXRlckhlaWdodCx1PXMubGluZXMsaD1zLmxpbmVIZWlnaHQsYz1LbihsLGksciksZD1jLmJhc2VYLGY9Yy5iYXNlWSxwPWMudGV4dEFsaWduLGc9Yy50ZXh0VmVydGljYWxBbGlnbjtVbihlLGkscixkLGYpO3ZhciB2PVRuKGYsbCxnKSxtPWQseT12LF89WW4oaSk7aWYoX3x8byl7dmFyIHg9Ym4obixhKSx3PXg7byYmKHcrPW9bMV0rb1szXSk7dmFyIGI9SW4oZCx3LHApO18mJlpuKHQsZSxpLGIsdix3LGwpLG8mJihtPW5pKGQscCxvKSx5Kz1vWzBdKX1RbihlLFwidGV4dEFsaWduXCIscHx8XCJsZWZ0XCIpLFFuKGUsXCJ0ZXh0QmFzZWxpbmVcIixcIm1pZGRsZVwiKSxRbihlLFwic2hhZG93Qmx1clwiLGkudGV4dFNoYWRvd0JsdXJ8fDApLFFuKGUsXCJzaGFkb3dDb2xvclwiLGkudGV4dFNoYWRvd0NvbG9yfHxcInRyYW5zcGFyZW50XCIpLFFuKGUsXCJzaGFkb3dPZmZzZXRYXCIsaS50ZXh0U2hhZG93T2Zmc2V0WHx8MCksUW4oZSxcInNoYWRvd09mZnNldFlcIixpLnRleHRTaGFkb3dPZmZzZXRZfHwwKSx5Kz1oLzI7dmFyIE09aS50ZXh0U3Ryb2tlV2lkdGgsUz1KbihpLnRleHRTdHJva2UsTSksQz10aShpLnRleHRGaWxsKTtTJiYoUW4oZSxcImxpbmVXaWR0aFwiLE0pLFFuKGUsXCJzdHJva2VTdHlsZVwiLFMpKSxDJiZRbihlLFwiZmlsbFN0eWxlXCIsQyk7Zm9yKHZhciBJPTA7STx1Lmxlbmd0aDtJKyspUyYmZS5zdHJva2VUZXh0KHVbSV0sbSx5KSxDJiZlLmZpbGxUZXh0KHVbSV0sbSx5KSx5Kz1ofWZ1bmN0aW9uIGpuKHQsZSxuLGkscil7dmFyIGE9dC5fX3RleHRDb3RlbnRCbG9jazsoIWF8fHQuX19kaXJ0eSkmJihhPXQuX190ZXh0Q290ZW50QmxvY2s9Qm4obixpKSkscW4odCxlLGEsaSxyKX1mdW5jdGlvbiBxbih0LGUsbixpLHIpe3ZhciBhPW4ud2lkdGgsbz1uLm91dGVyV2lkdGgscz1uLm91dGVySGVpZ2h0LGw9aS50ZXh0UGFkZGluZyx1PUtuKHMsaSxyKSxoPXUuYmFzZVgsYz11LmJhc2VZLGQ9dS50ZXh0QWxpZ24sZj11LnRleHRWZXJ0aWNhbEFsaWduO1VuKGUsaSxyLGgsYyk7dmFyIHA9SW4oaCxvLGQpLGc9VG4oYyxzLGYpLHY9cCxtPWc7bCYmKHYrPWxbM10sbSs9bFswXSk7dmFyIHk9dithO1luKGkpJiZabih0LGUsaSxwLGcsbyxzKTtmb3IodmFyIF89MDtfPG4ubGluZXMubGVuZ3RoO18rKyl7Zm9yKHZhciB4LHc9bi5saW5lc1tfXSxiPXcudG9rZW5zLE09Yi5sZW5ndGgsUz13LmxpbmVIZWlnaHQsQz13LndpZHRoLEk9MCxUPXYsaz15LEQ9TS0xO00+SSYmKHg9YltJXSwheC50ZXh0QWxpZ258fFwibGVmdFwiPT09eC50ZXh0QWxpZ24pOylYbih0LGUseCxpLFMsbSxULFwibGVmdFwiKSxDLT14LndpZHRoLFQrPXgud2lkdGgsSSsrO2Zvcig7RD49MCYmKHg9YltEXSxcInJpZ2h0XCI9PT14LnRleHRBbGlnbik7KVhuKHQsZSx4LGksUyxtLGssXCJyaWdodFwiKSxDLT14LndpZHRoLGstPXgud2lkdGgsRC0tO2ZvcihUKz0oYS0oVC12KS0oeS1rKS1DKS8yO0Q+PUk7KXg9YltJXSxYbih0LGUseCxpLFMsbSxUK3gud2lkdGgvMixcImNlbnRlclwiKSxUKz14LndpZHRoLEkrKzttKz1TfX1mdW5jdGlvbiBVbih0LGUsbixpLHIpe2lmKG4mJmUudGV4dFJvdGF0aW9uKXt2YXIgYT1lLnRleHRPcmlnaW47XCJjZW50ZXJcIj09PWE/KGk9bi53aWR0aC8yK24ueCxyPW4uaGVpZ2h0LzIrbi55KTphJiYoaT1hWzBdK24ueCxyPWFbMV0rbi55KSx0LnRyYW5zbGF0ZShpLHIpLHQucm90YXRlKC1lLnRleHRSb3RhdGlvbiksdC50cmFuc2xhdGUoLWksLXIpfX1mdW5jdGlvbiBYbih0LGUsbixpLHIsYSxvLHMpe3ZhciBsPWkucmljaFtuLnN0eWxlTmFtZV18fHt9LHU9bi50ZXh0VmVydGljYWxBbGlnbixoPWErci8yO1widG9wXCI9PT11P2g9YStuLmhlaWdodC8yOlwiYm90dG9tXCI9PT11JiYoaD1hK3Itbi5oZWlnaHQvMiksIW4uaXNMaW5lSG9sZGVyJiZZbihsKSYmWm4odCxlLGwsXCJyaWdodFwiPT09cz9vLW4ud2lkdGg6XCJjZW50ZXJcIj09PXM/by1uLndpZHRoLzI6byxoLW4uaGVpZ2h0LzIsbi53aWR0aCxuLmhlaWdodCk7dmFyIGM9bi50ZXh0UGFkZGluZztjJiYobz1uaShvLHMsYyksaC09bi5oZWlnaHQvMi1jWzJdLW4udGV4dEhlaWdodC8yKSxRbihlLFwic2hhZG93Qmx1clwiLEEobC50ZXh0U2hhZG93Qmx1cixpLnRleHRTaGFkb3dCbHVyLDApKSxRbihlLFwic2hhZG93Q29sb3JcIixsLnRleHRTaGFkb3dDb2xvcnx8aS50ZXh0U2hhZG93Q29sb3J8fFwidHJhbnNwYXJlbnRcIiksUW4oZSxcInNoYWRvd09mZnNldFhcIixBKGwudGV4dFNoYWRvd09mZnNldFgsaS50ZXh0U2hhZG93T2Zmc2V0WCwwKSksUW4oZSxcInNoYWRvd09mZnNldFlcIixBKGwudGV4dFNoYWRvd09mZnNldFksaS50ZXh0U2hhZG93T2Zmc2V0WSwwKSksUW4oZSxcInRleHRBbGlnblwiLHMpLFFuKGUsXCJ0ZXh0QmFzZWxpbmVcIixcIm1pZGRsZVwiKSxRbihlLFwiZm9udFwiLG4uZm9udHx8amQpO3ZhciBkPUpuKGwudGV4dFN0cm9rZXx8aS50ZXh0U3Ryb2tlLHApLGY9dGkobC50ZXh0RmlsbHx8aS50ZXh0RmlsbCkscD1EKGwudGV4dFN0cm9rZVdpZHRoLGkudGV4dFN0cm9rZVdpZHRoKTtkJiYoUW4oZSxcImxpbmVXaWR0aFwiLHApLFFuKGUsXCJzdHJva2VTdHlsZVwiLGQpLGUuc3Ryb2tlVGV4dChuLnRleHQsbyxoKSksZiYmKFFuKGUsXCJmaWxsU3R5bGVcIixmKSxlLmZpbGxUZXh0KG4udGV4dCxvLGgpKX1mdW5jdGlvbiBZbih0KXtyZXR1cm4gdC50ZXh0QmFja2dyb3VuZENvbG9yfHx0LnRleHRCb3JkZXJXaWR0aCYmdC50ZXh0Qm9yZGVyQ29sb3J9ZnVuY3Rpb24gWm4odCxlLG4saSxyLGEsbyl7dmFyIHM9bi50ZXh0QmFja2dyb3VuZENvbG9yLGw9bi50ZXh0Qm9yZGVyV2lkdGgsdT1uLnRleHRCb3JkZXJDb2xvcixoPWIocyk7aWYoUW4oZSxcInNoYWRvd0JsdXJcIixuLnRleHRCb3hTaGFkb3dCbHVyfHwwKSxRbihlLFwic2hhZG93Q29sb3JcIixuLnRleHRCb3hTaGFkb3dDb2xvcnx8XCJ0cmFuc3BhcmVudFwiKSxRbihlLFwic2hhZG93T2Zmc2V0WFwiLG4udGV4dEJveFNoYWRvd09mZnNldFh8fDApLFFuKGUsXCJzaGFkb3dPZmZzZXRZXCIsbi50ZXh0Qm94U2hhZG93T2Zmc2V0WXx8MCksaHx8bCYmdSl7ZS5iZWdpblBhdGgoKTt2YXIgYz1uLnRleHRCb3JkZXJSYWRpdXM7Yz9GbihlLHt4OmkseTpyLHdpZHRoOmEsaGVpZ2h0Om8scjpjfSk6ZS5yZWN0KGkscixhLG8pLGUuY2xvc2VQYXRoKCl9aWYoaClRbihlLFwiZmlsbFN0eWxlXCIscyksZS5maWxsKCk7ZWxzZSBpZihNKHMpKXt2YXIgZD1zLmltYWdlO2Q9X24oZCxudWxsLHQsJG4scyksZCYmd24oZCkmJmUuZHJhd0ltYWdlKGQsaSxyLGEsbyl9bCYmdSYmKFFuKGUsXCJsaW5lV2lkdGhcIixsKSxRbihlLFwic3Ryb2tlU3R5bGVcIix1KSxlLnN0cm9rZSgpKX1mdW5jdGlvbiAkbih0LGUpe2UuaW1hZ2U9dH1mdW5jdGlvbiBLbih0LGUsbil7dmFyIGk9ZS54fHwwLHI9ZS55fHwwLGE9ZS50ZXh0QWxpZ24sbz1lLnRleHRWZXJ0aWNhbEFsaWduO2lmKG4pe3ZhciBzPWUudGV4dFBvc2l0aW9uO2lmKHMgaW5zdGFuY2VvZiBBcnJheSlpPW4ueCtlaShzWzBdLG4ud2lkdGgpLHI9bi55K2VpKHNbMV0sbi5oZWlnaHQpO2Vsc2V7dmFyIGw9a24ocyxuLGUudGV4dERpc3RhbmNlKTtpPWwueCxyPWwueSxhPWF8fGwudGV4dEFsaWduLG89b3x8bC50ZXh0VmVydGljYWxBbGlnbn12YXIgdT1lLnRleHRPZmZzZXQ7dSYmKGkrPXVbMF0scis9dVsxXSl9cmV0dXJue2Jhc2VYOmksYmFzZVk6cix0ZXh0QWxpZ246YSx0ZXh0VmVydGljYWxBbGlnbjpvfX1mdW5jdGlvbiBRbih0LGUsbil7cmV0dXJuIHRbZV09QWQodCxlLG4pLHRbZV19ZnVuY3Rpb24gSm4odCxlKXtyZXR1cm4gbnVsbD09dHx8MD49ZXx8XCJ0cmFuc3BhcmVudFwiPT09dHx8XCJub25lXCI9PT10P251bGw6dC5pbWFnZXx8dC5jb2xvclN0b3BzP1wiIzAwMFwiOnR9ZnVuY3Rpb24gdGkodCl7cmV0dXJuIG51bGw9PXR8fFwibm9uZVwiPT09dD9udWxsOnQuaW1hZ2V8fHQuY29sb3JTdG9wcz9cIiMwMDBcIjp0fWZ1bmN0aW9uIGVpKHQsZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dC5sYXN0SW5kZXhPZihcIiVcIik+PTA/cGFyc2VGbG9hdCh0KS8xMDAqZTpwYXJzZUZsb2F0KHQpOnR9ZnVuY3Rpb24gbmkodCxlLG4pe3JldHVyblwicmlnaHRcIj09PWU/dC1uWzFdOlwiY2VudGVyXCI9PT1lP3QrblszXS8yLW5bMV0vMjp0K25bM119ZnVuY3Rpb24gaWkodCxlKXtyZXR1cm4gbnVsbCE9dCYmKHR8fGUudGV4dEJhY2tncm91bmRDb2xvcnx8ZS50ZXh0Qm9yZGVyV2lkdGgmJmUudGV4dEJvcmRlckNvbG9yfHxlLnRleHRQYWRkaW5nKX1mdW5jdGlvbiByaSh0KXt0PXR8fHt9LHdkLmNhbGwodGhpcyx0KTtmb3IodmFyIGUgaW4gdCl0Lmhhc093blByb3BlcnR5KGUpJiZcInN0eWxlXCIhPT1lJiYodGhpc1tlXT10W2VdKTt0aGlzLnN0eWxlPW5ldyBMZCh0LnN0eWxlLHRoaXMpLHRoaXMuX3JlY3Q9bnVsbCx0aGlzLl9fY2xpcFBhdGhzPVtdfWZ1bmN0aW9uIGFpKHQpe3JpLmNhbGwodGhpcyx0KX1mdW5jdGlvbiBvaSh0KXtyZXR1cm4gcGFyc2VJbnQodCwxMCl9ZnVuY3Rpb24gc2kodCl7cmV0dXJuIHQ/dC5fX2J1aWx0aW5fXz8hMDpcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnJlc2l6ZXx8XCJmdW5jdGlvblwiIT10eXBlb2YgdC5yZWZyZXNoPyExOiEwOiExfWZ1bmN0aW9uIGxpKHQsZSxuKXtyZXR1cm4gdGYuY29weSh0LmdldEJvdW5kaW5nUmVjdCgpKSx0LnRyYW5zZm9ybSYmdGYuYXBwbHlUcmFuc2Zvcm0odC50cmFuc2Zvcm0pLGVmLndpZHRoPWUsZWYuaGVpZ2h0PW4sIXRmLmludGVyc2VjdChlZil9ZnVuY3Rpb24gdWkodCxlKXtpZih0PT1lKXJldHVybiExO2lmKCF0fHwhZXx8dC5sZW5ndGghPT1lLmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKylpZih0W25dIT09ZVtuXSlyZXR1cm4hMH1mdW5jdGlvbiBoaSh0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO2kuc2V0VHJhbnNmb3JtKGUpLGUuYmVnaW5QYXRoKCksaS5idWlsZFBhdGgoZSxpLnNoYXBlKSxlLmNsaXAoKSxpLnJlc3RvcmVUcmFuc2Zvcm0oZSl9fWZ1bmN0aW9uIGNpKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gbi5zdHlsZS5jc3NUZXh0PVtcInBvc2l0aW9uOnJlbGF0aXZlXCIsXCJvdmVyZmxvdzpoaWRkZW5cIixcIndpZHRoOlwiK3QrXCJweFwiLFwiaGVpZ2h0OlwiK2UrXCJweFwiLFwicGFkZGluZzowXCIsXCJtYXJnaW46MFwiLFwiYm9yZGVyLXdpZHRoOjBcIl0uam9pbihcIjtcIikrXCI7XCIsbn1mdW5jdGlvbiBkaSh0KXtyZXR1cm4gdC5nZXRCb3VuZGluZ0NsaWVudFJlY3Q/dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTp7bGVmdDowLHRvcDowfX1mdW5jdGlvbiBmaSh0LGUsbixpKXtyZXR1cm4gbj1ufHx7fSxpfHwhYmMuY2FudmFzU3VwcG9ydGVkP3BpKHQsZSxuKTpiYy5icm93c2VyLmZpcmVmb3gmJm51bGwhPWUubGF5ZXJYJiZlLmxheWVyWCE9PWUub2Zmc2V0WD8obi56clg9ZS5sYXllclgsbi56clk9ZS5sYXllclkpOm51bGwhPWUub2Zmc2V0WD8obi56clg9ZS5vZmZzZXRYLG4uenJZPWUub2Zmc2V0WSk6cGkodCxlLG4pLG59ZnVuY3Rpb24gcGkodCxlLG4pe3ZhciBpPWRpKHQpO24uenJYPWUuY2xpZW50WC1pLmxlZnQsbi56clk9ZS5jbGllbnRZLWkudG9wfWZ1bmN0aW9uIGdpKHQsZSxuKXtpZihlPWV8fHdpbmRvdy5ldmVudCxudWxsIT1lLnpyWClyZXR1cm4gZTt2YXIgaT1lLnR5cGUscj1pJiZpLmluZGV4T2YoXCJ0b3VjaFwiKT49MDtpZihyKXt2YXIgYT1cInRvdWNoZW5kXCIhPWk/ZS50YXJnZXRUb3VjaGVzWzBdOmUuY2hhbmdlZFRvdWNoZXNbMF07YSYmZmkodCxhLGUsbil9ZWxzZSBmaSh0LGUsZSxuKSxlLnpyRGVsdGE9ZS53aGVlbERlbHRhP2Uud2hlZWxEZWx0YS8xMjA6LShlLmRldGFpbHx8MCkvMzt2YXIgbz1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmdm9pZCAwIT09byYmYWYudGVzdChlLnR5cGUpJiYoZS53aGljaD0xJm8/MToyJm8/Mzo0Jm8/MjowKSxlfWZ1bmN0aW9uIHZpKHQsZSxuKXtyZj90LmFkZEV2ZW50TGlzdGVuZXIoZSxuKTp0LmF0dGFjaEV2ZW50KFwib25cIitlLG4pfWZ1bmN0aW9uIG1pKHQsZSxuKXtyZj90LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuKTp0LmRldGFjaEV2ZW50KFwib25cIitlLG4pfWZ1bmN0aW9uIHlpKHQpe3ZhciBlPXRbMV1bMF0tdFswXVswXSxuPXRbMV1bMV0tdFswXVsxXTtyZXR1cm4gTWF0aC5zcXJ0KGUqZStuKm4pfWZ1bmN0aW9uIF9pKHQpe3JldHVyblsodFswXVswXSt0WzFdWzBdKS8yLCh0WzBdWzFdK3RbMV1bMV0pLzJdfWZ1bmN0aW9uIHhpKHQpe3JldHVyblwibW91c2V3aGVlbFwiPT09dCYmYmMuYnJvd3Nlci5maXJlZm94P1wiRE9NTW91c2VTY3JvbGxcIjp0fWZ1bmN0aW9uIHdpKHQsZSxuKXt2YXIgaT10Ll9nZXN0dXJlTWdyO1wic3RhcnRcIj09PW4mJmkuY2xlYXIoKTt2YXIgcj1pLnJlY29nbml6ZShlLHQuaGFuZGxlci5maW5kSG92ZXIoZS56clgsZS56clksbnVsbCkudGFyZ2V0LHQuZG9tKTtpZihcImVuZFwiPT09biYmaS5jbGVhcigpLHIpe3ZhciBhPXIudHlwZTtlLmdlc3R1cmVFdmVudD1hLHQuaGFuZGxlci5kaXNwYXRjaFRvRWxlbWVudCh7dGFyZ2V0OnIudGFyZ2V0fSxhLHIuZXZlbnQpfX1mdW5jdGlvbiBiaSh0KXt0Ll90b3VjaGluZz0hMCxjbGVhclRpbWVvdXQodC5fdG91Y2hUaW1lciksdC5fdG91Y2hUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fdG91Y2hpbmc9ITF9LDcwMCl9ZnVuY3Rpb24gTWkodCl7dmFyIGU9dC5wb2ludGVyVHlwZTtyZXR1cm5cInBlblwiPT09ZXx8XCJ0b3VjaFwiPT09ZX1mdW5jdGlvbiBTaSh0KXtmdW5jdGlvbiBlKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuX3RvdWNoaW5nP3ZvaWQgMDp0LmFwcGx5KGUsYXJndW1lbnRzKVxufX1mKGNmLGZ1bmN0aW9uKGUpe3QuX2hhbmRsZXJzW2VdPXkocGZbZV0sdCl9KSxmKGZmLGZ1bmN0aW9uKGUpe3QuX2hhbmRsZXJzW2VdPXkocGZbZV0sdCl9KSxmKGhmLGZ1bmN0aW9uKG4pe3QuX2hhbmRsZXJzW25dPWUocGZbbl0sdCl9KX1mdW5jdGlvbiBDaSh0KXtmdW5jdGlvbiBlKGUsbil7ZihlLGZ1bmN0aW9uKGUpe3ZpKHQseGkoZSksbi5faGFuZGxlcnNbZV0pfSxuKX1qYy5jYWxsKHRoaXMpLHRoaXMuZG9tPXQsdGhpcy5fdG91Y2hpbmc9ITEsdGhpcy5fdG91Y2hUaW1lcix0aGlzLl9nZXN0dXJlTWdyPW5ldyBzZix0aGlzLl9oYW5kbGVycz17fSxTaSh0aGlzKSxiYy5wb2ludGVyRXZlbnRzU3VwcG9ydGVkP2UoZmYsdGhpcyk6KGJjLnRvdWNoRXZlbnRzU3VwcG9ydGVkJiZlKGNmLHRoaXMpLGUoaGYsdGhpcykpfWZ1bmN0aW9uIElpKHQsZSl7dmFyIG49bmV3IHhmKHhjKCksdCxlKTtyZXR1cm4geWZbbi5pZF09bixufWZ1bmN0aW9uIFRpKHQpe2lmKHQpdC5kaXNwb3NlKCk7ZWxzZXtmb3IodmFyIGUgaW4geWYpeWYuaGFzT3duUHJvcGVydHkoZSkmJnlmW2VdLmRpc3Bvc2UoKTt5Zj17fX1yZXR1cm4gdGhpc31mdW5jdGlvbiBraSh0KXtyZXR1cm4geWZbdF19ZnVuY3Rpb24gRGkodCxlKXttZlt0XT1lfWZ1bmN0aW9uIEFpKHQpe2RlbGV0ZSB5Zlt0XX1mdW5jdGlvbiBQaSh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEFycmF5P3Q6bnVsbD09dD9bXTpbdF19ZnVuY3Rpb24gTGkodCxlLG4pe2lmKHQpe3RbZV09dFtlXXx8e30sdC5lbXBoYXNpcz10LmVtcGhhc2lzfHx7fSx0LmVtcGhhc2lzW2VdPXQuZW1waGFzaXNbZV18fHt9O2Zvcih2YXIgaT0wLHI9bi5sZW5ndGg7cj5pO2krKyl7dmFyIGE9bltpXTshdC5lbXBoYXNpc1tlXS5oYXNPd25Qcm9wZXJ0eShhKSYmdFtlXS5oYXNPd25Qcm9wZXJ0eShhKSYmKHQuZW1waGFzaXNbZV1bYV09dFtlXVthXSl9fX1mdW5jdGlvbiBPaSh0KXtyZXR1cm4hTWYodCl8fFNmKHQpfHx0IGluc3RhbmNlb2YgRGF0ZT90OnQudmFsdWV9ZnVuY3Rpb24gUmkodCl7cmV0dXJuIE1mKHQpJiYhKHQgaW5zdGFuY2VvZiBBcnJheSl9ZnVuY3Rpb24gRWkodCxlKXtlPShlfHxbXSkuc2xpY2UoKTt2YXIgbj1wKHR8fFtdLGZ1bmN0aW9uKHQpe3JldHVybntleGlzdDp0fX0pO3JldHVybiBiZihlLGZ1bmN0aW9uKHQsaSl7aWYoTWYodCkpe2Zvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKWlmKCFuW3JdLm9wdGlvbiYmbnVsbCE9dC5pZCYmbltyXS5leGlzdC5pZD09PXQuaWQrXCJcIilyZXR1cm4gbltyXS5vcHRpb249dCx2b2lkKGVbaV09bnVsbCk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBhPW5bcl0uZXhpc3Q7aWYoIShuW3JdLm9wdGlvbnx8bnVsbCE9YS5pZCYmbnVsbCE9dC5pZHx8bnVsbD09dC5uYW1lfHxOaSh0KXx8TmkoYSl8fGEubmFtZSE9PXQubmFtZStcIlwiKSlyZXR1cm4gbltyXS5vcHRpb249dCx2b2lkKGVbaV09bnVsbCl9fX0pLGJmKGUsZnVuY3Rpb24odCl7aWYoTWYodCkpe2Zvcih2YXIgZT0wO2U8bi5sZW5ndGg7ZSsrKXt2YXIgaT1uW2VdLmV4aXN0O2lmKCFuW2VdLm9wdGlvbiYmIU5pKGkpJiZudWxsPT10LmlkKXtuW2VdLm9wdGlvbj10O2JyZWFrfX1lPj1uLmxlbmd0aCYmbi5wdXNoKHtvcHRpb246dH0pfX0pLG59ZnVuY3Rpb24gQmkodCl7dmFyIGU9TigpO2JmKHQsZnVuY3Rpb24odCl7dmFyIG49dC5leGlzdDtuJiZlLnNldChuLmlkLHQpfSksYmYodCxmdW5jdGlvbih0KXt2YXIgbj10Lm9wdGlvbjtPKCFufHxudWxsPT1uLmlkfHwhZS5nZXQobi5pZCl8fGUuZ2V0KG4uaWQpPT09dCxcImlkIGR1cGxpY2F0ZXM6IFwiKyhuJiZuLmlkKSksbiYmbnVsbCE9bi5pZCYmZS5zZXQobi5pZCx0KSwhdC5rZXlJbmZvJiYodC5rZXlJbmZvPXt9KX0pLGJmKHQsZnVuY3Rpb24odCxuKXt2YXIgaT10LmV4aXN0LHI9dC5vcHRpb24sYT10LmtleUluZm87aWYoTWYocikpe2lmKGEubmFtZT1udWxsIT1yLm5hbWU/ci5uYW1lK1wiXCI6aT9pLm5hbWU6Q2YrbixpKWEuaWQ9aS5pZDtlbHNlIGlmKG51bGwhPXIuaWQpYS5pZD1yLmlkK1wiXCI7ZWxzZXt2YXIgbz0wO2RvIGEuaWQ9XCJcXHgwMFwiK2EubmFtZStcIlxceDAwXCIrbysrO3doaWxlKGUuZ2V0KGEuaWQpKX1lLnNldChhLmlkLHQpfX0pfWZ1bmN0aW9uIHppKHQpe3ZhciBlPXQubmFtZTtyZXR1cm4hKCFlfHwhZS5pbmRleE9mKENmKSl9ZnVuY3Rpb24gTmkodCl7cmV0dXJuIE1mKHQpJiZ0LmlkJiYwPT09KHQuaWQrXCJcIikuaW5kZXhPZihcIlxceDAwX2VjX1xceDAwXCIpfWZ1bmN0aW9uIEZpKHQsZSl7cmV0dXJuIG51bGwhPWUuZGF0YUluZGV4SW5zaWRlP2UuZGF0YUluZGV4SW5zaWRlOm51bGwhPWUuZGF0YUluZGV4P3goZS5kYXRhSW5kZXgpP3AoZS5kYXRhSW5kZXgsZnVuY3Rpb24oZSl7cmV0dXJuIHQuaW5kZXhPZlJhd0luZGV4KGUpfSk6dC5pbmRleE9mUmF3SW5kZXgoZS5kYXRhSW5kZXgpOm51bGwhPWUubmFtZT94KGUubmFtZSk/cChlLm5hbWUsZnVuY3Rpb24oZSl7cmV0dXJuIHQuaW5kZXhPZk5hbWUoZSl9KTp0LmluZGV4T2ZOYW1lKGUubmFtZSk6dm9pZCAwfWZ1bmN0aW9uIFZpKCl7dmFyIHQ9XCJfX1xceDAwZWNfaW5uZXJfXCIrVGYrKyArXCJfXCIrTWF0aC5yYW5kb20oKS50b0ZpeGVkKDUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZVt0XXx8KGVbdF09e30pfX1mdW5jdGlvbiBHaSh0LGUsbil7aWYoYihlKSl7dmFyIGk9e307aVtlK1wiSW5kZXhcIl09MCxlPWl9dmFyIHI9biYmbi5kZWZhdWx0TWFpblR5cGU7IXJ8fEhpKGUscitcIkluZGV4XCIpfHxIaShlLHIrXCJJZFwiKXx8SGkoZSxyK1wiTmFtZVwiKXx8KGVbcitcIkluZGV4XCJdPTApO3ZhciBhPXt9O3JldHVybiBiZihlLGZ1bmN0aW9uKGkscil7dmFyIGk9ZVtyXTtpZihcImRhdGFJbmRleFwiPT09cnx8XCJkYXRhSW5kZXhJbnNpZGVcIj09PXIpcmV0dXJuIHZvaWQoYVtyXT1pKTt2YXIgbz1yLm1hdGNoKC9eKFxcdyspKEluZGV4fElkfE5hbWUpJC8pfHxbXSxzPW9bMV0sbD0ob1syXXx8XCJcIikudG9Mb3dlckNhc2UoKTtpZighKCFzfHwhbHx8bnVsbD09aXx8XCJpbmRleFwiPT09bCYmXCJub25lXCI9PT1pfHxuJiZuLmluY2x1ZGVNYWluVHlwZXMmJnUobi5pbmNsdWRlTWFpblR5cGVzLHMpPDApKXt2YXIgaD17bWFpblR5cGU6c307KFwiaW5kZXhcIiE9PWx8fFwiYWxsXCIhPT1pKSYmKGhbbF09aSk7dmFyIGM9dC5xdWVyeUNvbXBvbmVudHMoaCk7YVtzK1wiTW9kZWxzXCJdPWMsYVtzK1wiTW9kZWxcIl09Y1swXX19KSxhfWZ1bmN0aW9uIEhpKHQsZSl7cmV0dXJuIHQmJnQuaGFzT3duUHJvcGVydHkoZSl9ZnVuY3Rpb24gV2kodCxlLG4pe3Quc2V0QXR0cmlidXRlP3Quc2V0QXR0cmlidXRlKGUsbik6dFtlXT1ufWZ1bmN0aW9uIGppKHQsZSl7cmV0dXJuIHQuZ2V0QXR0cmlidXRlP3QuZ2V0QXR0cmlidXRlKGUpOnRbZV19ZnVuY3Rpb24gcWkodCl7dmFyIGU9e21haW46XCJcIixzdWI6XCJcIn07cmV0dXJuIHQmJih0PXQuc3BsaXQoa2YpLGUubWFpbj10WzBdfHxcIlwiLGUuc3ViPXRbMV18fFwiXCIpLGV9ZnVuY3Rpb24gVWkodCl7TygvXlthLXpBLVowLTlfXSsoWy5dW2EtekEtWjAtOV9dKyk/JC8udGVzdCh0KSwnY29tcG9uZW50VHlwZSBcIicrdCsnXCIgaWxsZWdhbCcpfWZ1bmN0aW9uIFhpKHQpe3QuJGNvbnN0cnVjdG9yPXQsdC5leHRlbmQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPWZ1bmN0aW9uKCl7dC4kY29uc3RydWN0b3I/dC4kY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpOmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gbyhuLnByb3RvdHlwZSx0KSxuLmV4dGVuZD10aGlzLmV4dGVuZCxuLnN1cGVyQ2FsbD1aaSxuLnN1cGVyQXBwbHk9JGksaChuLHRoaXMpLG4uc3VwZXJDbGFzcz1lLG59fWZ1bmN0aW9uIFlpKHQpe3ZhciBlPVtcIl9fXFx4MDBpc19jbHpcIixBZisrLE1hdGgucmFuZG9tKCkudG9GaXhlZCgzKV0uam9pbihcIl9cIik7dC5wcm90b3R5cGVbZV09ITAsdC5pc0luc3RhbmNlPWZ1bmN0aW9uKHQpe3JldHVybiEoIXR8fCF0W2VdKX19ZnVuY3Rpb24gWmkodCxlKXt2YXIgbj1QKGFyZ3VtZW50cywyKTtyZXR1cm4gdGhpcy5zdXBlckNsYXNzLnByb3RvdHlwZVtlXS5hcHBseSh0LG4pfWZ1bmN0aW9uICRpKHQsZSxuKXtyZXR1cm4gdGhpcy5zdXBlckNsYXNzLnByb3RvdHlwZVtlXS5hcHBseSh0LG4pfWZ1bmN0aW9uIEtpKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT1pW3QubWFpbl07cmV0dXJuIGUmJmVbRGZdfHwoZT1pW3QubWFpbl09e30sZVtEZl09ITApLGV9ZT1lfHx7fTt2YXIgaT17fTtpZih0LnJlZ2lzdGVyQ2xhc3M9ZnVuY3Rpb24odCxlKXtpZihlKWlmKFVpKGUpLGU9cWkoZSksZS5zdWIpe2lmKGUuc3ViIT09RGYpe3ZhciByPW4oZSk7cltlLnN1Yl09dH19ZWxzZSBpW2UubWFpbl09dDtyZXR1cm4gdH0sdC5nZXRDbGFzcz1mdW5jdGlvbih0LGUsbil7dmFyIHI9aVt0XTtpZihyJiZyW0RmXSYmKHI9ZT9yW2VdOm51bGwpLG4mJiFyKXRocm93IG5ldyBFcnJvcihlP1wiQ29tcG9uZW50IFwiK3QrXCIuXCIrKGV8fFwiXCIpK1wiIG5vdCBleGlzdHMuIExvYWQgaXQgZmlyc3QuXCI6dCtcIi50eXBlIHNob3VsZCBiZSBzcGVjaWZpZWQuXCIpO3JldHVybiByfSx0LmdldENsYXNzZXNCeU1haW5UeXBlPWZ1bmN0aW9uKHQpe3Q9cWkodCk7dmFyIGU9W10sbj1pW3QubWFpbl07cmV0dXJuIG4mJm5bRGZdP2YobixmdW5jdGlvbih0LG4pe24hPT1EZiYmZS5wdXNoKHQpfSk6ZS5wdXNoKG4pLGV9LHQuaGFzQ2xhc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9cWkodCksISFpW3QubWFpbl19LHQuZ2V0QWxsQ2xhc3NNYWluVHlwZXM9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gZihpLGZ1bmN0aW9uKGUsbil7dC5wdXNoKG4pfSksdH0sdC5oYXNTdWJUeXBlcz1mdW5jdGlvbih0KXt0PXFpKHQpO3ZhciBlPWlbdC5tYWluXTtyZXR1cm4gZSYmZVtEZl19LHQucGFyc2VDbGFzc1R5cGU9cWksZS5yZWdpc3RlcldoZW5FeHRlbmQpe3ZhciByPXQuZXh0ZW5kO3ImJih0LmV4dGVuZD1mdW5jdGlvbihlKXt2YXIgbj1yLmNhbGwodGhpcyxlKTtyZXR1cm4gdC5yZWdpc3RlckNsYXNzKG4sZS50eXBlKX0pfXJldHVybiB0fWZ1bmN0aW9uIFFpKHQpe3JldHVybiB0Pi1OZiYmTmY+dH1mdW5jdGlvbiBKaSh0KXtyZXR1cm4gdD5OZnx8LU5mPnR9ZnVuY3Rpb24gdHIodCxlLG4saSxyKXt2YXIgYT0xLXI7cmV0dXJuIGEqYSooYSp0KzMqciplKStyKnIqKHIqaSszKmEqbil9ZnVuY3Rpb24gZXIodCxlLG4saSxyKXt2YXIgYT0xLXI7cmV0dXJuIDMqKCgoZS10KSphKzIqKG4tZSkqcikqYSsoaS1uKSpyKnIpfWZ1bmN0aW9uIG5yKHQsZSxuLGkscixhKXt2YXIgbz1pKzMqKGUtbiktdCxzPTMqKG4tMiplK3QpLGw9MyooZS10KSx1PXQtcixoPXMqcy0zKm8qbCxjPXMqbC05Km8qdSxkPWwqbC0zKnMqdSxmPTA7aWYoUWkoaCkmJlFpKGMpKWlmKFFpKHMpKWFbMF09MDtlbHNle3ZhciBwPS1sL3M7cD49MCYmMT49cCYmKGFbZisrXT1wKX1lbHNle3ZhciBnPWMqYy00KmgqZDtpZihRaShnKSl7dmFyIHY9Yy9oLHA9LXMvbyt2LG09LXYvMjtwPj0wJiYxPj1wJiYoYVtmKytdPXApLG0+PTAmJjE+PW0mJihhW2YrK109bSl9ZWxzZSBpZihnPjApe3ZhciB5PXpmKGcpLF89aCpzKzEuNSpvKigtYyt5KSx4PWgqcysxLjUqbyooLWMteSk7Xz0wPl8/LUJmKC1fLEdmKTpCZihfLEdmKSx4PTA+eD8tQmYoLXgsR2YpOkJmKHgsR2YpO3ZhciBwPSgtcy0oXyt4KSkvKDMqbyk7cD49MCYmMT49cCYmKGFbZisrXT1wKX1lbHNle3ZhciB3PSgyKmgqcy0zKm8qYykvKDIqemYoaCpoKmgpKSxiPU1hdGguYWNvcyh3KS8zLE09emYoaCksUz1NYXRoLmNvcyhiKSxwPSgtcy0yKk0qUykvKDMqbyksbT0oLXMrTSooUytWZipNYXRoLnNpbihiKSkpLygzKm8pLEM9KC1zK00qKFMtVmYqTWF0aC5zaW4oYikpKS8oMypvKTtwPj0wJiYxPj1wJiYoYVtmKytdPXApLG0+PTAmJjE+PW0mJihhW2YrK109bSksQz49MCYmMT49QyYmKGFbZisrXT1DKX19cmV0dXJuIGZ9ZnVuY3Rpb24gaXIodCxlLG4saSxyKXt2YXIgYT02Km4tMTIqZSs2KnQsbz05KmUrMyppLTMqdC05Km4scz0zKmUtMyp0LGw9MDtpZihRaShvKSl7aWYoSmkoYSkpe3ZhciB1PS1zL2E7dT49MCYmMT49dSYmKHJbbCsrXT11KX19ZWxzZXt2YXIgaD1hKmEtNCpvKnM7aWYoUWkoaCkpclswXT0tYS8oMipvKTtlbHNlIGlmKGg+MCl7dmFyIGM9emYoaCksdT0oLWErYykvKDIqbyksZD0oLWEtYykvKDIqbyk7dT49MCYmMT49dSYmKHJbbCsrXT11KSxkPj0wJiYxPj1kJiYocltsKytdPWQpfX1yZXR1cm4gbH1mdW5jdGlvbiBycih0LGUsbixpLHIsYSl7dmFyIG89KGUtdCkqcit0LHM9KG4tZSkqcitlLGw9KGktbikqcituLHU9KHMtbykqcitvLGg9KGwtcykqcitzLGM9KGgtdSkqcit1O2FbMF09dCxhWzFdPW8sYVsyXT11LGFbM109YyxhWzRdPWMsYVs1XT1oLGFbNl09bCxhWzddPWl9ZnVuY3Rpb24gYXIodCxlLG4saSxyLGEsbyxzLGwsdSxoKXt2YXIgYyxkLGYscCxnLHY9LjAwNSxtPTEvMDtIZlswXT1sLEhmWzFdPXU7Zm9yKHZhciB5PTA7MT55O3krPS4wNSlXZlswXT10cih0LG4scixvLHkpLFdmWzFdPXRyKGUsaSxhLHMseSkscD1HYyhIZixXZiksbT5wJiYoYz15LG09cCk7bT0xLzA7Zm9yKHZhciBfPTA7MzI+XyYmIShGZj52KTtfKyspZD1jLXYsZj1jK3YsV2ZbMF09dHIodCxuLHIsbyxkKSxXZlsxXT10cihlLGksYSxzLGQpLHA9R2MoV2YsSGYpLGQ+PTAmJm0+cD8oYz1kLG09cCk6KGpmWzBdPXRyKHQsbixyLG8sZiksamZbMV09dHIoZSxpLGEscyxmKSxnPUdjKGpmLEhmKSwxPj1mJiZtPmc/KGM9ZixtPWcpOnYqPS41KTtyZXR1cm4gaCYmKGhbMF09dHIodCxuLHIsbyxjKSxoWzFdPXRyKGUsaSxhLHMsYykpLHpmKG0pfWZ1bmN0aW9uIG9yKHQsZSxuLGkpe3ZhciByPTEtaTtyZXR1cm4gcioocip0KzIqaSplKStpKmkqbn1mdW5jdGlvbiBzcih0LGUsbixpKXtyZXR1cm4gMiooKDEtaSkqKGUtdCkraSoobi1lKSl9ZnVuY3Rpb24gbHIodCxlLG4saSxyKXt2YXIgYT10LTIqZStuLG89MiooZS10KSxzPXQtaSxsPTA7aWYoUWkoYSkpe2lmKEppKG8pKXt2YXIgdT0tcy9vO3U+PTAmJjE+PXUmJihyW2wrK109dSl9fWVsc2V7dmFyIGg9bypvLTQqYSpzO2lmKFFpKGgpKXt2YXIgdT0tby8oMiphKTt1Pj0wJiYxPj11JiYocltsKytdPXUpfWVsc2UgaWYoaD4wKXt2YXIgYz16ZihoKSx1PSgtbytjKS8oMiphKSxkPSgtby1jKS8oMiphKTt1Pj0wJiYxPj11JiYocltsKytdPXUpLGQ+PTAmJjE+PWQmJihyW2wrK109ZCl9fXJldHVybiBsfWZ1bmN0aW9uIHVyKHQsZSxuKXt2YXIgaT10K24tMiplO3JldHVybiAwPT09aT8uNToodC1lKS9pfWZ1bmN0aW9uIGhyKHQsZSxuLGkscil7dmFyIGE9KGUtdCkqaSt0LG89KG4tZSkqaStlLHM9KG8tYSkqaSthO3JbMF09dCxyWzFdPWEsclsyXT1zLHJbM109cyxyWzRdPW8scls1XT1ufWZ1bmN0aW9uIGNyKHQsZSxuLGkscixhLG8scyxsKXt2YXIgdSxoPS4wMDUsYz0xLzA7SGZbMF09byxIZlsxXT1zO2Zvcih2YXIgZD0wOzE+ZDtkKz0uMDUpe1dmWzBdPW9yKHQsbixyLGQpLFdmWzFdPW9yKGUsaSxhLGQpO3ZhciBmPUdjKEhmLFdmKTtjPmYmJih1PWQsYz1mKX1jPTEvMDtmb3IodmFyIHA9MDszMj5wJiYhKEZmPmgpO3ArKyl7dmFyIGc9dS1oLHY9dStoO1dmWzBdPW9yKHQsbixyLGcpLFdmWzFdPW9yKGUsaSxhLGcpO3ZhciBmPUdjKFdmLEhmKTtpZihnPj0wJiZjPmYpdT1nLGM9ZjtlbHNle2pmWzBdPW9yKHQsbixyLHYpLGpmWzFdPW9yKGUsaSxhLHYpO3ZhciBtPUdjKGpmLEhmKTsxPj12JiZjPm0/KHU9dixjPW0pOmgqPS41fX1yZXR1cm4gbCYmKGxbMF09b3IodCxuLHIsdSksbFsxXT1vcihlLGksYSx1KSksemYoYyl9ZnVuY3Rpb24gZHIodCxlLG4pe2lmKDAhPT10Lmxlbmd0aCl7dmFyIGkscj10WzBdLGE9clswXSxvPXJbMF0scz1yWzFdLGw9clsxXTtmb3IoaT0xO2k8dC5sZW5ndGg7aSsrKXI9dFtpXSxhPXFmKGEsclswXSksbz1VZihvLHJbMF0pLHM9cWYocyxyWzFdKSxsPVVmKGwsclsxXSk7ZVswXT1hLGVbMV09cyxuWzBdPW8sblsxXT1sfX1mdW5jdGlvbiBmcih0LGUsbixpLHIsYSl7clswXT1xZih0LG4pLHJbMV09cWYoZSxpKSxhWzBdPVVmKHQsbiksYVsxXT1VZihlLGkpfWZ1bmN0aW9uIHByKHQsZSxuLGkscixhLG8scyxsLHUpe3ZhciBoLGM9aXIsZD10cixmPWModCxuLHIsbyxKZik7Zm9yKGxbMF09MS8wLGxbMV09MS8wLHVbMF09LTEvMCx1WzFdPS0xLzAsaD0wO2Y+aDtoKyspe3ZhciBwPWQodCxuLHIsbyxKZltoXSk7bFswXT1xZihwLGxbMF0pLHVbMF09VWYocCx1WzBdKX1mb3IoZj1jKGUsaSxhLHMsdHApLGg9MDtmPmg7aCsrKXt2YXIgZz1kKGUsaSxhLHMsdHBbaF0pO2xbMV09cWYoZyxsWzFdKSx1WzFdPVVmKGcsdVsxXSl9bFswXT1xZih0LGxbMF0pLHVbMF09VWYodCx1WzBdKSxsWzBdPXFmKG8sbFswXSksdVswXT1VZihvLHVbMF0pLGxbMV09cWYoZSxsWzFdKSx1WzFdPVVmKGUsdVsxXSksbFsxXT1xZihzLGxbMV0pLHVbMV09VWYocyx1WzFdKX1mdW5jdGlvbiBncih0LGUsbixpLHIsYSxvLHMpe3ZhciBsPXVyLHU9b3IsaD1VZihxZihsKHQsbixyKSwxKSwwKSxjPVVmKHFmKGwoZSxpLGEpLDEpLDApLGQ9dSh0LG4scixoKSxmPXUoZSxpLGEsYyk7b1swXT1xZih0LHIsZCksb1sxXT1xZihlLGEsZiksc1swXT1VZih0LHIsZCksc1sxXT1VZihlLGEsZil9ZnVuY3Rpb24gdnIodCxlLG4saSxyLGEsbyxzLGwpe3ZhciB1PW9lLGg9c2UsYz1NYXRoLmFicyhyLWEpO2lmKDFlLTQ+YyVaZiYmYz4xZS00KXJldHVybiBzWzBdPXQtbixzWzFdPWUtaSxsWzBdPXQrbix2b2lkKGxbMV09ZStpKTtpZigkZlswXT1ZZihyKSpuK3QsJGZbMV09WGYocikqaStlLEtmWzBdPVlmKGEpKm4rdCxLZlsxXT1YZihhKSppK2UsdShzLCRmLEtmKSxoKGwsJGYsS2YpLHIlPVpmLDA+ciYmKHIrPVpmKSxhJT1aZiwwPmEmJihhKz1aZikscj5hJiYhbz9hKz1aZjphPnImJm8mJihyKz1aZiksbyl7dmFyIGQ9YTthPXIscj1kfWZvcih2YXIgZj0wO2E+ZjtmKz1NYXRoLlBJLzIpZj5yJiYoUWZbMF09WWYoZikqbit0LFFmWzFdPVhmKGYpKmkrZSx1KHMsUWYscyksaChsLFFmLGwpKX1mdW5jdGlvbiBtcih0LGUsbixpLHIsYSxvKXtpZigwPT09cilyZXR1cm4hMTt2YXIgcz1yLGw9MCx1PXQ7aWYobz5lK3MmJm8+aStzfHxlLXM+byYmaS1zPm98fGE+dCtzJiZhPm4rc3x8dC1zPmEmJm4tcz5hKXJldHVybiExO2lmKHQ9PT1uKXJldHVybiBNYXRoLmFicyhhLXQpPD1zLzI7bD0oZS1pKS8odC1uKSx1PSh0KmktbiplKS8odC1uKTt2YXIgaD1sKmEtbyt1LGM9aCpoLyhsKmwrMSk7cmV0dXJuIHMvMipzLzI+PWN9ZnVuY3Rpb24geXIodCxlLG4saSxyLGEsbyxzLGwsdSxoKXtpZigwPT09bClyZXR1cm4hMTt2YXIgYz1sO2lmKGg+ZStjJiZoPmkrYyYmaD5hK2MmJmg+cytjfHxlLWM+aCYmaS1jPmgmJmEtYz5oJiZzLWM+aHx8dT50K2MmJnU+bitjJiZ1PnIrYyYmdT5vK2N8fHQtYz51JiZuLWM+dSYmci1jPnUmJm8tYz51KXJldHVybiExO3ZhciBkPWFyKHQsZSxuLGkscixhLG8scyx1LGgsbnVsbCk7cmV0dXJuIGMvMj49ZH1mdW5jdGlvbiBfcih0LGUsbixpLHIsYSxvLHMsbCl7aWYoMD09PW8pcmV0dXJuITE7dmFyIHU9bztpZihsPmUrdSYmbD5pK3UmJmw+YSt1fHxlLXU+bCYmaS11PmwmJmEtdT5sfHxzPnQrdSYmcz5uK3UmJnM+cit1fHx0LXU+cyYmbi11PnMmJnItdT5zKXJldHVybiExO3ZhciBoPWNyKHQsZSxuLGkscixhLHMsbCxudWxsKTtyZXR1cm4gdS8yPj1ofWZ1bmN0aW9uIHhyKHQpe3JldHVybiB0JT1wcCwwPnQmJih0Kz1wcCksdH1mdW5jdGlvbiB3cih0LGUsbixpLHIsYSxvLHMsbCl7aWYoMD09PW8pcmV0dXJuITE7dmFyIHU9bztzLT10LGwtPWU7dmFyIGg9TWF0aC5zcXJ0KHMqcytsKmwpO2lmKGgtdT5ufHxuPmgrdSlyZXR1cm4hMTtpZihNYXRoLmFicyhpLXIpJWdwPDFlLTQpcmV0dXJuITA7aWYoYSl7dmFyIGM9aTtpPXhyKHIpLHI9eHIoYyl9ZWxzZSBpPXhyKGkpLHI9eHIocik7aT5yJiYocis9Z3ApO3ZhciBkPU1hdGguYXRhbjIobCxzKTtyZXR1cm4gMD5kJiYoZCs9Z3ApLGQ+PWkmJnI+PWR8fGQrZ3A+PWkmJnI+PWQrZ3B9ZnVuY3Rpb24gYnIodCxlLG4saSxyLGEpe2lmKGE+ZSYmYT5pfHxlPmEmJmk+YSlyZXR1cm4gMDtpZihpPT09ZSlyZXR1cm4gMDt2YXIgbz1lPmk/MTotMSxzPShhLWUpLyhpLWUpOygxPT09c3x8MD09PXMpJiYobz1lPmk/LjU6LS41KTt2YXIgbD1zKihuLXQpK3Q7cmV0dXJuIGw9PT1yPzEvMDpsPnI/bzowfWZ1bmN0aW9uIE1yKHQsZSl7cmV0dXJuIE1hdGguYWJzKHQtZSk8eXB9ZnVuY3Rpb24gU3IoKXt2YXIgdD14cFswXTt4cFswXT14cFsxXSx4cFsxXT10fWZ1bmN0aW9uIENyKHQsZSxuLGkscixhLG8scyxsLHUpe2lmKHU+ZSYmdT5pJiZ1PmEmJnU+c3x8ZT51JiZpPnUmJmE+dSYmcz51KXJldHVybiAwO3ZhciBoPW5yKGUsaSxhLHMsdSxfcCk7aWYoMD09PWgpcmV0dXJuIDA7Zm9yKHZhciBjLGQsZj0wLHA9LTEsZz0wO2g+ZztnKyspe3ZhciB2PV9wW2ddLG09MD09PXZ8fDE9PT12Py41OjEseT10cih0LG4scixvLHYpO2w+eXx8KDA+cCYmKHA9aXIoZSxpLGEscyx4cCkseHBbMV08eHBbMF0mJnA+MSYmU3IoKSxjPXRyKGUsaSxhLHMseHBbMF0pLHA+MSYmKGQ9dHIoZSxpLGEscyx4cFsxXSkpKSxmKz0yPT1wP3Y8eHBbMF0/ZT5jP206LW06djx4cFsxXT9jPmQ/bTotbTpkPnM/bTotbTp2PHhwWzBdP2U+Yz9tOi1tOmM+cz9tOi1tKX1yZXR1cm4gZn1mdW5jdGlvbiBJcih0LGUsbixpLHIsYSxvLHMpe2lmKHM+ZSYmcz5pJiZzPmF8fGU+cyYmaT5zJiZhPnMpcmV0dXJuIDA7dmFyIGw9bHIoZSxpLGEscyxfcCk7aWYoMD09PWwpcmV0dXJuIDA7dmFyIHU9dXIoZSxpLGEpO2lmKHU+PTAmJjE+PXUpe2Zvcih2YXIgaD0wLGM9b3IoZSxpLGEsdSksZD0wO2w+ZDtkKyspe3ZhciBmPTA9PT1fcFtkXXx8MT09PV9wW2RdPy41OjEscD1vcih0LG4scixfcFtkXSk7bz5wfHwoaCs9X3BbZF08dT9lPmM/ZjotZjpjPmE/ZjotZil9cmV0dXJuIGh9dmFyIGY9MD09PV9wWzBdfHwxPT09X3BbMF0/LjU6MSxwPW9yKHQsbixyLF9wWzBdKTtyZXR1cm4gbz5wPzA6ZT5hP2Y6LWZ9ZnVuY3Rpb24gVHIodCxlLG4saSxyLGEsbyxzKXtpZihzLT1lLHM+bnx8LW4+cylyZXR1cm4gMDt2YXIgbD1NYXRoLnNxcnQobipuLXMqcyk7X3BbMF09LWwsX3BbMV09bDt2YXIgdT1NYXRoLmFicyhpLXIpO2lmKDFlLTQ+dSlyZXR1cm4gMDtpZigxZS00PnUlbXApe2k9MCxyPW1wO3ZhciBoPWE/MTotMTtyZXR1cm4gbz49X3BbMF0rdCYmbzw9X3BbMV0rdD9oOjB9aWYoYSl7dmFyIGw9aTtpPXhyKHIpLHI9eHIobCl9ZWxzZSBpPXhyKGkpLHI9eHIocik7aT5yJiYocis9bXApO2Zvcih2YXIgYz0wLGQ9MDsyPmQ7ZCsrKXt2YXIgZj1fcFtkXTtpZihmK3Q+byl7dmFyIHA9TWF0aC5hdGFuMihzLGYpLGg9YT8xOi0xOzA+cCYmKHA9bXArcCksKHA+PWkmJnI+PXB8fHArbXA+PWkmJnI+PXArbXApJiYocD5NYXRoLlBJLzImJnA8MS41Kk1hdGguUEkmJihoPS1oKSxjKz1oKX19cmV0dXJuIGN9ZnVuY3Rpb24ga3IodCxlLG4saSxyKXtmb3IodmFyIGE9MCxvPTAscz0wLGw9MCx1PTAsaD0wO2g8dC5sZW5ndGg7KXt2YXIgYz10W2grK107c3dpdGNoKGM9PT12cC5NJiZoPjEmJihufHwoYSs9YnIobyxzLGwsdSxpLHIpKSksMT09aCYmKG89dFtoXSxzPXRbaCsxXSxsPW8sdT1zKSxjKXtjYXNlIHZwLk06bD10W2grK10sdT10W2grK10sbz1sLHM9dTticmVhaztjYXNlIHZwLkw6aWYobil7aWYobXIobyxzLHRbaF0sdFtoKzFdLGUsaSxyKSlyZXR1cm4hMH1lbHNlIGErPWJyKG8scyx0W2hdLHRbaCsxXSxpLHIpfHwwO289dFtoKytdLHM9dFtoKytdO2JyZWFrO2Nhc2UgdnAuQzppZihuKXtpZih5cihvLHMsdFtoKytdLHRbaCsrXSx0W2grK10sdFtoKytdLHRbaF0sdFtoKzFdLGUsaSxyKSlyZXR1cm4hMH1lbHNlIGErPUNyKG8scyx0W2grK10sdFtoKytdLHRbaCsrXSx0W2grK10sdFtoXSx0W2grMV0saSxyKXx8MDtvPXRbaCsrXSxzPXRbaCsrXTticmVhaztjYXNlIHZwLlE6aWYobil7aWYoX3IobyxzLHRbaCsrXSx0W2grK10sdFtoXSx0W2grMV0sZSxpLHIpKXJldHVybiEwfWVsc2UgYSs9SXIobyxzLHRbaCsrXSx0W2grK10sdFtoXSx0W2grMV0saSxyKXx8MDtvPXRbaCsrXSxzPXRbaCsrXTticmVhaztjYXNlIHZwLkE6dmFyIGQ9dFtoKytdLGY9dFtoKytdLHA9dFtoKytdLGc9dFtoKytdLHY9dFtoKytdLG09dFtoKytdLHk9KHRbaCsrXSwxLXRbaCsrXSksXz1NYXRoLmNvcyh2KSpwK2QseD1NYXRoLnNpbih2KSpnK2Y7aD4xP2ErPWJyKG8scyxfLHgsaSxyKToobD1fLHU9eCk7dmFyIHc9KGktZCkqZy9wK2Q7aWYobil7aWYod3IoZCxmLGcsdix2K20seSxlLHcscikpcmV0dXJuITB9ZWxzZSBhKz1UcihkLGYsZyx2LHYrbSx5LHcscik7bz1NYXRoLmNvcyh2K20pKnArZCxzPU1hdGguc2luKHYrbSkqZytmO2JyZWFrO2Nhc2UgdnAuUjpsPW89dFtoKytdLHU9cz10W2grK107dmFyIGI9dFtoKytdLE09dFtoKytdLF89bCtiLHg9dStNO2lmKG4pe2lmKG1yKGwsdSxfLHUsZSxpLHIpfHxtcihfLHUsXyx4LGUsaSxyKXx8bXIoXyx4LGwseCxlLGkscil8fG1yKGwseCxsLHUsZSxpLHIpKXJldHVybiEwfWVsc2UgYSs9YnIoXyx1LF8seCxpLHIpLGErPWJyKGwseCxsLHUsaSxyKTticmVhaztjYXNlIHZwLlo6aWYobil7aWYobXIobyxzLGwsdSxlLGkscikpcmV0dXJuITB9ZWxzZSBhKz1icihvLHMsbCx1LGkscik7bz1sLHM9dX19cmV0dXJuIG58fE1yKHMsdSl8fChhKz1icihvLHMsbCx1LGkscil8fDApLDAhPT1hfWZ1bmN0aW9uIERyKHQsZSxuKXtyZXR1cm4ga3IodCwwLCExLGUsbil9ZnVuY3Rpb24gQXIodCxlLG4saSl7cmV0dXJuIGtyKHQsZSwhMCxuLGkpfWZ1bmN0aW9uIFByKHQpe3JpLmNhbGwodGhpcyx0KSx0aGlzLnBhdGg9bnVsbH1mdW5jdGlvbiBMcih0LGUsbixpLHIsYSxvLHMsbCx1LGgpe3ZhciBjPWwqKE9wLzE4MCksZD1McChjKSoodC1uKS8yK1BwKGMpKihlLWkpLzIsZj0tMSpQcChjKSoodC1uKS8yK0xwKGMpKihlLWkpLzIscD1kKmQvKG8qbykrZipmLyhzKnMpO3A+MSYmKG8qPUFwKHApLHMqPUFwKHApKTt2YXIgZz0ocj09PWE/LTE6MSkqQXAoKG8qbypzKnMtbypvKmYqZi1zKnMqZCpkKS8obypvKmYqZitzKnMqZCpkKSl8fDAsdj1nKm8qZi9zLG09ZyotcypkL28seT0odCtuKS8yK0xwKGMpKnYtUHAoYykqbSxfPShlK2kpLzIrUHAoYykqditMcChjKSptLHg9QnAoWzEsMF0sWyhkLXYpL28sKGYtbSkvc10pLHc9WyhkLXYpL28sKGYtbSkvc10sYj1bKC0xKmQtdikvbywoLTEqZi1tKS9zXSxNPUJwKHcsYik7RXAodyxiKTw9LTEmJihNPU9wKSxFcCh3LGIpPj0xJiYoTT0wKSwwPT09YSYmTT4wJiYoTS09MipPcCksMT09PWEmJjA+TSYmKE0rPTIqT3ApLGguYWRkRGF0YSh1LHksXyxvLHMseCxNLGMsYSl9ZnVuY3Rpb24gT3IodCl7aWYoIXQpcmV0dXJuW107dmFyIGUsbj10LnJlcGxhY2UoLy0vZyxcIiAtXCIpLnJlcGxhY2UoLyAgL2csXCIgXCIpLnJlcGxhY2UoLyAvZyxcIixcIikucmVwbGFjZSgvLCwvZyxcIixcIik7Zm9yKGU9MDtlPERwLmxlbmd0aDtlKyspbj1uLnJlcGxhY2UobmV3IFJlZ0V4cChEcFtlXSxcImdcIiksXCJ8XCIrRHBbZV0pO3ZhciBpLHI9bi5zcGxpdChcInxcIiksYT0wLG89MCxzPW5ldyBmcCxsPWZwLkNNRDtmb3IoZT0xO2U8ci5sZW5ndGg7ZSsrKXt2YXIgdSxoPXJbZV0sYz1oLmNoYXJBdCgwKSxkPTAsZj1oLnNsaWNlKDEpLnJlcGxhY2UoL2UsLS9nLFwiZS1cIikuc3BsaXQoXCIsXCIpO2YubGVuZ3RoPjAmJlwiXCI9PT1mWzBdJiZmLnNoaWZ0KCk7Zm9yKHZhciBwPTA7cDxmLmxlbmd0aDtwKyspZltwXT1wYXJzZUZsb2F0KGZbcF0pO2Zvcig7ZDxmLmxlbmd0aCYmIWlzTmFOKGZbZF0pJiYhaXNOYU4oZlswXSk7KXt2YXIgZyx2LG0seSxfLHgsdyxiPWEsTT1vO3N3aXRjaChjKXtjYXNlXCJsXCI6YSs9ZltkKytdLG8rPWZbZCsrXSx1PWwuTCxzLmFkZERhdGEodSxhLG8pO2JyZWFrO2Nhc2VcIkxcIjphPWZbZCsrXSxvPWZbZCsrXSx1PWwuTCxzLmFkZERhdGEodSxhLG8pO2JyZWFrO2Nhc2VcIm1cIjphKz1mW2QrK10sbys9ZltkKytdLHU9bC5NLHMuYWRkRGF0YSh1LGEsbyksYz1cImxcIjticmVhaztjYXNlXCJNXCI6YT1mW2QrK10sbz1mW2QrK10sdT1sLk0scy5hZGREYXRhKHUsYSxvKSxjPVwiTFwiO2JyZWFrO2Nhc2VcImhcIjphKz1mW2QrK10sdT1sLkwscy5hZGREYXRhKHUsYSxvKTticmVhaztjYXNlXCJIXCI6YT1mW2QrK10sdT1sLkwscy5hZGREYXRhKHUsYSxvKTticmVhaztjYXNlXCJ2XCI6bys9ZltkKytdLHU9bC5MLHMuYWRkRGF0YSh1LGEsbyk7YnJlYWs7Y2FzZVwiVlwiOm89ZltkKytdLHU9bC5MLHMuYWRkRGF0YSh1LGEsbyk7YnJlYWs7Y2FzZVwiQ1wiOnU9bC5DLHMuYWRkRGF0YSh1LGZbZCsrXSxmW2QrK10sZltkKytdLGZbZCsrXSxmW2QrK10sZltkKytdKSxhPWZbZC0yXSxvPWZbZC0xXTticmVhaztjYXNlXCJjXCI6dT1sLkMscy5hZGREYXRhKHUsZltkKytdK2EsZltkKytdK28sZltkKytdK2EsZltkKytdK28sZltkKytdK2EsZltkKytdK28pLGErPWZbZC0yXSxvKz1mW2QtMV07YnJlYWs7Y2FzZVwiU1wiOmc9YSx2PW87dmFyIFM9cy5sZW4oKSxDPXMuZGF0YTtpPT09bC5DJiYoZys9YS1DW1MtNF0sdis9by1DW1MtM10pLHU9bC5DLGI9ZltkKytdLE09ZltkKytdLGE9ZltkKytdLG89ZltkKytdLHMuYWRkRGF0YSh1LGcsdixiLE0sYSxvKTticmVhaztjYXNlXCJzXCI6Zz1hLHY9bzt2YXIgUz1zLmxlbigpLEM9cy5kYXRhO2k9PT1sLkMmJihnKz1hLUNbUy00XSx2Kz1vLUNbUy0zXSksdT1sLkMsYj1hK2ZbZCsrXSxNPW8rZltkKytdLGErPWZbZCsrXSxvKz1mW2QrK10scy5hZGREYXRhKHUsZyx2LGIsTSxhLG8pO2JyZWFrO2Nhc2VcIlFcIjpiPWZbZCsrXSxNPWZbZCsrXSxhPWZbZCsrXSxvPWZbZCsrXSx1PWwuUSxzLmFkZERhdGEodSxiLE0sYSxvKTticmVhaztjYXNlXCJxXCI6Yj1mW2QrK10rYSxNPWZbZCsrXStvLGErPWZbZCsrXSxvKz1mW2QrK10sdT1sLlEscy5hZGREYXRhKHUsYixNLGEsbyk7YnJlYWs7Y2FzZVwiVFwiOmc9YSx2PW87dmFyIFM9cy5sZW4oKSxDPXMuZGF0YTtpPT09bC5RJiYoZys9YS1DW1MtNF0sdis9by1DW1MtM10pLGE9ZltkKytdLG89ZltkKytdLHU9bC5RLHMuYWRkRGF0YSh1LGcsdixhLG8pO2JyZWFrO2Nhc2VcInRcIjpnPWEsdj1vO3ZhciBTPXMubGVuKCksQz1zLmRhdGE7aT09PWwuUSYmKGcrPWEtQ1tTLTRdLHYrPW8tQ1tTLTNdKSxhKz1mW2QrK10sbys9ZltkKytdLHU9bC5RLHMuYWRkRGF0YSh1LGcsdixhLG8pO2JyZWFrO2Nhc2VcIkFcIjptPWZbZCsrXSx5PWZbZCsrXSxfPWZbZCsrXSx4PWZbZCsrXSx3PWZbZCsrXSxiPWEsTT1vLGE9ZltkKytdLG89ZltkKytdLHU9bC5BLExyKGIsTSxhLG8seCx3LG0seSxfLHUscyk7YnJlYWs7Y2FzZVwiYVwiOm09ZltkKytdLHk9ZltkKytdLF89ZltkKytdLHg9ZltkKytdLHc9ZltkKytdLGI9YSxNPW8sYSs9ZltkKytdLG8rPWZbZCsrXSx1PWwuQSxMcihiLE0sYSxvLHgsdyxtLHksXyx1LHMpfX0oXCJ6XCI9PT1jfHxcIlpcIj09PWMpJiYodT1sLloscy5hZGREYXRhKHUpKSxpPXV9cmV0dXJuIHMudG9TdGF0aWMoKSxzfWZ1bmN0aW9uIFJyKHQsZSl7dmFyIG49T3IodCk7cmV0dXJuIGU9ZXx8e30sZS5idWlsZFBhdGg9ZnVuY3Rpb24odCl7aWYodC5zZXREYXRhKXt0LnNldERhdGEobi5kYXRhKTt2YXIgZT10LmdldENvbnRleHQoKTtlJiZ0LnJlYnVpbGRQYXRoKGUpfWVsc2V7dmFyIGU9dDtuLnJlYnVpbGRQYXRoKGUpfX0sZS5hcHBseVRyYW5zZm9ybT1mdW5jdGlvbih0KXtrcChuLHQpLHRoaXMuZGlydHkoITApfSxlfWZ1bmN0aW9uIEVyKHQsZSl7cmV0dXJuIG5ldyBQcihScih0LGUpKX1mdW5jdGlvbiBCcih0LGUpe3JldHVybiBQci5leHRlbmQoUnIodCxlKSl9ZnVuY3Rpb24genIodCxlKXtmb3IodmFyIG49W10saT10Lmxlbmd0aCxyPTA7aT5yO3IrKyl7dmFyIGE9dFtyXTthLnBhdGh8fGEuY3JlYXRlUGF0aFByb3h5KCksYS5fX2RpcnR5UGF0aCYmYS5idWlsZFBhdGgoYS5wYXRoLGEuc2hhcGUsITApLG4ucHVzaChhLnBhdGgpfXZhciBvPW5ldyBQcihlKTtyZXR1cm4gby5jcmVhdGVQYXRoUHJveHkoKSxvLmJ1aWxkUGF0aD1mdW5jdGlvbih0KXt0LmFwcGVuZFBhdGgobik7dmFyIGU9dC5nZXRDb250ZXh0KCk7ZSYmdC5yZWJ1aWxkUGF0aChlKX0sb31mdW5jdGlvbiBOcih0LGUsbixpLHIsYSxvKXt2YXIgcz0uNSoobi10KSxsPS41KihpLWUpO3JldHVybigyKihlLW4pK3MrbCkqbysoLTMqKGUtbiktMipzLWwpKmErcypyK2V9ZnVuY3Rpb24gRnIodCxlLG4pe3ZhciBpPWUucG9pbnRzLHI9ZS5zbW9vdGg7aWYoaSYmaS5sZW5ndGg+PTIpe2lmKHImJlwic3BsaW5lXCIhPT1yKXt2YXIgYT1qcChpLHIsbixlLnNtb290aENvbnN0cmFpbnQpO3QubW92ZVRvKGlbMF1bMF0saVswXVsxXSk7Zm9yKHZhciBvPWkubGVuZ3RoLHM9MDsobj9vOm8tMSk+cztzKyspe3ZhciBsPWFbMipzXSx1PWFbMipzKzFdLGg9aVsocysxKSVvXTt0LmJlemllckN1cnZlVG8obFswXSxsWzFdLHVbMF0sdVsxXSxoWzBdLGhbMV0pfX1lbHNle1wic3BsaW5lXCI9PT1yJiYoaT1XcChpLG4pKSx0Lm1vdmVUbyhpWzBdWzBdLGlbMF1bMV0pO2Zvcih2YXIgcz0xLGM9aS5sZW5ndGg7Yz5zO3MrKyl0LmxpbmVUbyhpW3NdWzBdLGlbc11bMV0pfW4mJnQuY2xvc2VQYXRoKCl9fWZ1bmN0aW9uIFZyKHQsZSxuKXt2YXIgaT10LmNweDIscj10LmNweTI7cmV0dXJuIG51bGw9PT1pfHxudWxsPT09cj9bKG4/ZXI6dHIpKHQueDEsdC5jcHgxLHQuY3B4Mix0LngyLGUpLChuP2VyOnRyKSh0LnkxLHQuY3B5MSx0LmNweTIsdC55MixlKV06WyhuP3NyOm9yKSh0LngxLHQuY3B4MSx0LngyLGUpLChuP3NyOm9yKSh0LnkxLHQuY3B5MSx0LnkyLGUpXX1mdW5jdGlvbiBHcih0KXtyaS5jYWxsKHRoaXMsdCksdGhpcy5fZGlzcGxheWFibGVzPVtdLHRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlcz1bXSx0aGlzLl9jdXJzb3I9MCx0aGlzLm5vdENsZWFyPSEwfWZ1bmN0aW9uIEhyKHQpe3JldHVybiBQci5leHRlbmQodCl9ZnVuY3Rpb24gV3IodCxlKXtyZXR1cm4gQnIodCxlKX1mdW5jdGlvbiBqcih0LGUsbixpKXt2YXIgcj1Fcih0LGUpLGE9ci5nZXRCb3VuZGluZ1JlY3QoKTtyZXR1cm4gbiYmKFwiY2VudGVyXCI9PT1pJiYobj1VcihuLGEpKSxYcihyLG4pKSxyfWZ1bmN0aW9uIHFyKHQsZSxuKXt2YXIgaT1uZXcgYWkoe3N0eWxlOntpbWFnZTp0LHg6ZS54LHk6ZS55LHdpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0fSxvbmxvYWQ6ZnVuY3Rpb24odCl7aWYoXCJjZW50ZXJcIj09PW4pe3ZhciByPXt3aWR0aDp0LndpZHRoLGhlaWdodDp0LmhlaWdodH07aS5zZXRTdHlsZShVcihlLHIpKX19fSk7cmV0dXJuIGl9ZnVuY3Rpb24gVXIodCxlKXt2YXIgbixpPWUud2lkdGgvZS5oZWlnaHQscj10LmhlaWdodCppO3I8PXQud2lkdGg/bj10LmhlaWdodDoocj10LndpZHRoLG49ci9pKTt2YXIgYT10LngrdC53aWR0aC8yLG89dC55K3QuaGVpZ2h0LzI7cmV0dXJue3g6YS1yLzIseTpvLW4vMix3aWR0aDpyLGhlaWdodDpufX1mdW5jdGlvbiBYcih0LGUpe2lmKHQuYXBwbHlUcmFuc2Zvcm0pe3ZhciBuPXQuZ2V0Qm91bmRpbmdSZWN0KCksaT1uLmNhbGN1bGF0ZVRyYW5zZm9ybShlKTt0LmFwcGx5VHJhbnNmb3JtKGkpfX1mdW5jdGlvbiBZcih0KXt2YXIgZT10LnNoYXBlLG49dC5zdHlsZS5saW5lV2lkdGg7cmV0dXJuIGlnKDIqZS54MSk9PT1pZygyKmUueDIpJiYoZS54MT1lLngyPSRyKGUueDEsbiwhMCkpLGlnKDIqZS55MSk9PT1pZygyKmUueTIpJiYoZS55MT1lLnkyPSRyKGUueTEsbiwhMCkpLHR9ZnVuY3Rpb24gWnIodCl7dmFyIGU9dC5zaGFwZSxuPXQuc3R5bGUubGluZVdpZHRoLGk9ZS54LHI9ZS55LGE9ZS53aWR0aCxvPWUuaGVpZ2h0O3JldHVybiBlLng9JHIoZS54LG4sITApLGUueT0kcihlLnksbiwhMCksZS53aWR0aD1NYXRoLm1heCgkcihpK2EsbiwhMSktZS54LDA9PT1hPzA6MSksZS5oZWlnaHQ9TWF0aC5tYXgoJHIocitvLG4sITEpLWUueSwwPT09bz8wOjEpLHR9ZnVuY3Rpb24gJHIodCxlLG4pe3ZhciBpPWlnKDIqdCk7cmV0dXJuKGkraWcoZSkpJTI9PT0wP2kvMjooaSsobj8xOi0xKSkvMn1mdW5jdGlvbiBLcih0KXtyZXR1cm4gbnVsbCE9dCYmXCJub25lXCIhPXR9ZnVuY3Rpb24gUXIodCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/emUodCwtLjEpOnR9ZnVuY3Rpb24gSnIodCl7aWYodC5fX2hvdmVyU3RsRGlydHkpe3ZhciBlPXQuc3R5bGUuc3Ryb2tlLG49dC5zdHlsZS5maWxsLGk9dC5fX2hvdmVyU3RsO2kuZmlsbD1pLmZpbGx8fChLcihuKT9RcihuKTpudWxsKSxpLnN0cm9rZT1pLnN0cm9rZXx8KEtyKGUpP1FyKGUpOm51bGwpO3ZhciByPXt9O2Zvcih2YXIgYSBpbiBpKW51bGwhPWlbYV0mJihyW2FdPXQuc3R5bGVbYV0pO3QuX19ub3JtYWxTdGw9cix0Ll9faG92ZXJTdGxEaXJ0eT0hMX19ZnVuY3Rpb24gdGEodCl7aWYoIXQuX19pc0hvdmVyKXtpZihKcih0KSx0LnVzZUhvdmVyTGF5ZXIpdC5fX3pyJiZ0Ll9fenIuYWRkSG92ZXIodCx0Ll9faG92ZXJTdGwpO2Vsc2V7dmFyIGU9dC5zdHlsZSxuPWUuaW5zaWRlUm9sbGJhY2tPcHQ7biYmeWEoZSksZS5leHRlbmRGcm9tKHQuX19ob3ZlclN0bCksbiYmKG1hKGUsZS5pbnNpZGVPcmlnaW5hbFRleHRQb3NpdGlvbixuKSxudWxsPT1lLnRleHRGaWxsJiYoZS50ZXh0RmlsbD1uLmF1dG9Db2xvcikpLHQuZGlydHkoITEpLHQuejIrPTF9dC5fX2lzSG92ZXI9ITB9fWZ1bmN0aW9uIGVhKHQpe2lmKHQuX19pc0hvdmVyKXt2YXIgZT10Ll9fbm9ybWFsU3RsO3QudXNlSG92ZXJMYXllcj90Ll9fenImJnQuX196ci5yZW1vdmVIb3Zlcih0KTooZSYmdC5zZXRTdHlsZShlKSx0LnoyLT0xKSx0Ll9faXNIb3Zlcj0hMX19ZnVuY3Rpb24gbmEodCl7XCJncm91cFwiPT09dC50eXBlP3QudHJhdmVyc2UoZnVuY3Rpb24odCl7XCJncm91cFwiIT09dC50eXBlJiZ0YSh0KX0pOnRhKHQpfWZ1bmN0aW9uIGlhKHQpe1wiZ3JvdXBcIj09PXQudHlwZT90LnRyYXZlcnNlKGZ1bmN0aW9uKHQpe1wiZ3JvdXBcIiE9PXQudHlwZSYmZWEodCl9KTplYSh0KX1mdW5jdGlvbiByYSh0LGUpe3QuX19ob3ZlclN0bD10LmhvdmVyU3R5bGV8fGV8fHt9LHQuX19ob3ZlclN0bERpcnR5PSEwLHQuX19pc0hvdmVyJiZKcih0KX1mdW5jdGlvbiBhYSh0KXt0aGlzLl9faG92ZXJTaWxlbnRPblRvdWNoJiZ0LnpyQnlUb3VjaHx8IXRoaXMuX19pc0VtcGhhc2lzJiZuYSh0aGlzKX1mdW5jdGlvbiBvYSh0KXt0aGlzLl9faG92ZXJTaWxlbnRPblRvdWNoJiZ0LnpyQnlUb3VjaHx8IXRoaXMuX19pc0VtcGhhc2lzJiZpYSh0aGlzKX1mdW5jdGlvbiBzYSgpe3RoaXMuX19pc0VtcGhhc2lzPSEwLG5hKHRoaXMpfWZ1bmN0aW9uIGxhKCl7dGhpcy5fX2lzRW1waGFzaXM9ITEsaWEodGhpcyl9ZnVuY3Rpb24gdWEodCxlLG4pe3QuX19ob3ZlclNpbGVudE9uVG91Y2g9biYmbi5ob3ZlclNpbGVudE9uVG91Y2gsXCJncm91cFwiPT09dC50eXBlP3QudHJhdmVyc2UoZnVuY3Rpb24odCl7XCJncm91cFwiIT09dC50eXBlJiZyYSh0LGUpfSk6cmEodCxlKSx0Lm9uKFwibW91c2VvdmVyXCIsYWEpLm9uKFwibW91c2VvdXRcIixvYSksdC5vbihcImVtcGhhc2lzXCIsc2EpLm9uKFwibm9ybWFsXCIsbGEpfWZ1bmN0aW9uIGhhKHQsZSxuLGkscixhLG8pe3I9cnx8b2c7dmFyIHMsbD1yLmxhYmVsRmV0Y2hlcix1PXIubGFiZWxEYXRhSW5kZXgsaD1yLmxhYmVsRGltSW5kZXgsYz1uLmdldFNoYWxsb3coXCJzaG93XCIpLGQ9aS5nZXRTaGFsbG93KFwic2hvd1wiKTsoY3x8ZCkmJihsJiYocz1sLmdldEZvcm1hdHRlZExhYmVsKHUsXCJub3JtYWxcIixudWxsLGgpKSxudWxsPT1zJiYocz13KHIuZGVmYXVsdFRleHQpP3IuZGVmYXVsdFRleHQodSxyKTpyLmRlZmF1bHRUZXh0KSk7dmFyIGY9Yz9zOm51bGwscD1kP0QobD9sLmdldEZvcm1hdHRlZExhYmVsKHUsXCJlbXBoYXNpc1wiLG51bGwsaCk6bnVsbCxzKTpudWxsOyhudWxsIT1mfHxudWxsIT1wKSYmKGNhKHQsbixhLHIpLGNhKGUsaSxvLHIsITApKSx0LnRleHQ9ZixlLnRleHQ9cH1mdW5jdGlvbiBjYSh0LGUsbixpLHIpe3JldHVybiBmYSh0LGUsaSxyKSxuJiZvKHQsbiksdC5ob3N0JiZ0Lmhvc3QuZGlydHkmJnQuaG9zdC5kaXJ0eSghMSksdH1mdW5jdGlvbiBkYSh0LGUsbil7dmFyIGkscj17aXNSZWN0VGV4dDohMH07bj09PSExP2k9ITA6ci5hdXRvQ29sb3I9bixmYSh0LGUscixpKSx0Lmhvc3QmJnQuaG9zdC5kaXJ0eSYmdC5ob3N0LmRpcnR5KCExKX1mdW5jdGlvbiBmYSh0LGUsbixpKXtpZihuPW58fG9nLG4uaXNSZWN0VGV4dCl7dmFyIHI9ZS5nZXRTaGFsbG93KFwicG9zaXRpb25cIil8fChpP251bGw6XCJpbnNpZGVcIik7XCJvdXRzaWRlXCI9PT1yJiYocj1cInRvcFwiKSx0LnRleHRQb3NpdGlvbj1yLHQudGV4dE9mZnNldD1lLmdldFNoYWxsb3coXCJvZmZzZXRcIik7dmFyIGE9ZS5nZXRTaGFsbG93KFwicm90YXRlXCIpO251bGwhPWEmJihhKj1NYXRoLlBJLzE4MCksdC50ZXh0Um90YXRpb249YSx0LnRleHREaXN0YW5jZT1EKGUuZ2V0U2hhbGxvdyhcImRpc3RhbmNlXCIpLGk/bnVsbDo1KX12YXIgbyxzPWUuZWNNb2RlbCxsPXMmJnMub3B0aW9uLnRleHRTdHlsZSx1PXBhKGUpO2lmKHUpe289e307Zm9yKHZhciBoIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGM9ZS5nZXRNb2RlbChbXCJyaWNoXCIsaF0pO2dhKG9baF09e30sYyxsLG4saSl9fXJldHVybiB0LnJpY2g9byxnYSh0LGUsbCxuLGksITApLG4uZm9yY2VSaWNoJiYhbi50ZXh0U3R5bGUmJihuLnRleHRTdHlsZT17fSksdH1mdW5jdGlvbiBwYSh0KXtmb3IodmFyIGU7dCYmdCE9PXQuZWNNb2RlbDspe3ZhciBuPSh0Lm9wdGlvbnx8b2cpLnJpY2g7aWYobil7ZT1lfHx7fTtmb3IodmFyIGkgaW4gbiluLmhhc093blByb3BlcnR5KGkpJiYoZVtpXT0xKX10PXQucGFyZW50TW9kZWx9cmV0dXJuIGV9ZnVuY3Rpb24gZ2EodCxlLG4saSxyLGEpe2lmKG49IXImJm58fG9nLHQudGV4dEZpbGw9dmEoZS5nZXRTaGFsbG93KFwiY29sb3JcIiksaSl8fG4uY29sb3IsdC50ZXh0U3Ryb2tlPXZhKGUuZ2V0U2hhbGxvdyhcInRleHRCb3JkZXJDb2xvclwiKSxpKXx8bi50ZXh0Qm9yZGVyQ29sb3IsdC50ZXh0U3Ryb2tlV2lkdGg9RChlLmdldFNoYWxsb3coXCJ0ZXh0Qm9yZGVyV2lkdGhcIiksbi50ZXh0Qm9yZGVyV2lkdGgpLCFyKXtpZihhKXt2YXIgbz10LnRleHRQb3NpdGlvbjt0Lmluc2lkZVJvbGxiYWNrPW1hKHQsbyxpKSx0Lmluc2lkZU9yaWdpbmFsVGV4dFBvc2l0aW9uPW8sdC5pbnNpZGVSb2xsYmFja09wdD1pfW51bGw9PXQudGV4dEZpbGwmJih0LnRleHRGaWxsPWkuYXV0b0NvbG9yKX10LmZvbnRTdHlsZT1lLmdldFNoYWxsb3coXCJmb250U3R5bGVcIil8fG4uZm9udFN0eWxlLHQuZm9udFdlaWdodD1lLmdldFNoYWxsb3coXCJmb250V2VpZ2h0XCIpfHxuLmZvbnRXZWlnaHQsdC5mb250U2l6ZT1lLmdldFNoYWxsb3coXCJmb250U2l6ZVwiKXx8bi5mb250U2l6ZSx0LmZvbnRGYW1pbHk9ZS5nZXRTaGFsbG93KFwiZm9udEZhbWlseVwiKXx8bi5mb250RmFtaWx5LHQudGV4dEFsaWduPWUuZ2V0U2hhbGxvdyhcImFsaWduXCIpLHQudGV4dFZlcnRpY2FsQWxpZ249ZS5nZXRTaGFsbG93KFwidmVydGljYWxBbGlnblwiKXx8ZS5nZXRTaGFsbG93KFwiYmFzZWxpbmVcIiksdC50ZXh0TGluZUhlaWdodD1lLmdldFNoYWxsb3coXCJsaW5lSGVpZ2h0XCIpLHQudGV4dFdpZHRoPWUuZ2V0U2hhbGxvdyhcIndpZHRoXCIpLHQudGV4dEhlaWdodD1lLmdldFNoYWxsb3coXCJoZWlnaHRcIiksdC50ZXh0VGFnPWUuZ2V0U2hhbGxvdyhcInRhZ1wiKSxhJiZpLmRpc2FibGVCb3h8fCh0LnRleHRCYWNrZ3JvdW5kQ29sb3I9dmEoZS5nZXRTaGFsbG93KFwiYmFja2dyb3VuZENvbG9yXCIpLGkpLHQudGV4dFBhZGRpbmc9ZS5nZXRTaGFsbG93KFwicGFkZGluZ1wiKSx0LnRleHRCb3JkZXJDb2xvcj12YShlLmdldFNoYWxsb3coXCJib3JkZXJDb2xvclwiKSxpKSx0LnRleHRCb3JkZXJXaWR0aD1lLmdldFNoYWxsb3coXCJib3JkZXJXaWR0aFwiKSx0LnRleHRCb3JkZXJSYWRpdXM9ZS5nZXRTaGFsbG93KFwiYm9yZGVyUmFkaXVzXCIpLHQudGV4dEJveFNoYWRvd0NvbG9yPWUuZ2V0U2hhbGxvdyhcInNoYWRvd0NvbG9yXCIpLHQudGV4dEJveFNoYWRvd0JsdXI9ZS5nZXRTaGFsbG93KFwic2hhZG93Qmx1clwiKSx0LnRleHRCb3hTaGFkb3dPZmZzZXRYPWUuZ2V0U2hhbGxvdyhcInNoYWRvd09mZnNldFhcIiksdC50ZXh0Qm94U2hhZG93T2Zmc2V0WT1lLmdldFNoYWxsb3coXCJzaGFkb3dPZmZzZXRZXCIpKSx0LnRleHRTaGFkb3dDb2xvcj1lLmdldFNoYWxsb3coXCJ0ZXh0U2hhZG93Q29sb3JcIil8fG4udGV4dFNoYWRvd0NvbG9yLHQudGV4dFNoYWRvd0JsdXI9ZS5nZXRTaGFsbG93KFwidGV4dFNoYWRvd0JsdXJcIil8fG4udGV4dFNoYWRvd0JsdXIsdC50ZXh0U2hhZG93T2Zmc2V0WD1lLmdldFNoYWxsb3coXCJ0ZXh0U2hhZG93T2Zmc2V0WFwiKXx8bi50ZXh0U2hhZG93T2Zmc2V0WCx0LnRleHRTaGFkb3dPZmZzZXRZPWUuZ2V0U2hhbGxvdyhcInRleHRTaGFkb3dPZmZzZXRZXCIpfHxuLnRleHRTaGFkb3dPZmZzZXRZfWZ1bmN0aW9uIHZhKHQsZSl7cmV0dXJuXCJhdXRvXCIhPT10P3Q6ZSYmZS5hdXRvQ29sb3I/ZS5hdXRvQ29sb3I6bnVsbH1mdW5jdGlvbiBtYSh0LGUsbil7dmFyIGkscj1uLnVzZUluc2lkZVN0eWxlO3JldHVybiBudWxsPT10LnRleHRGaWxsJiZyIT09ITEmJihyPT09ITB8fG4uaXNSZWN0VGV4dCYmZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJmUuaW5kZXhPZihcImluc2lkZVwiKT49MCkmJihpPXt0ZXh0RmlsbDpudWxsLHRleHRTdHJva2U6dC50ZXh0U3Ryb2tlLHRleHRTdHJva2VXaWR0aDp0LnRleHRTdHJva2VXaWR0aH0sdC50ZXh0RmlsbD1cIiNmZmZcIixudWxsPT10LnRleHRTdHJva2UmJih0LnRleHRTdHJva2U9bi5hdXRvQ29sb3IsbnVsbD09dC50ZXh0U3Ryb2tlV2lkdGgmJih0LnRleHRTdHJva2VXaWR0aD0yKSkpLGl9ZnVuY3Rpb24geWEodCl7dmFyIGU9dC5pbnNpZGVSb2xsYmFjaztlJiYodC50ZXh0RmlsbD1lLnRleHRGaWxsLHQudGV4dFN0cm9rZT1lLnRleHRTdHJva2UsdC50ZXh0U3Ryb2tlV2lkdGg9ZS50ZXh0U3Ryb2tlV2lkdGgpfWZ1bmN0aW9uIF9hKHQsZSl7dmFyIG49ZXx8ZS5nZXRNb2RlbChcInRleHRTdHlsZVwiKTtyZXR1cm4gUihbdC5mb250U3R5bGV8fG4mJm4uZ2V0U2hhbGxvdyhcImZvbnRTdHlsZVwiKXx8XCJcIix0LmZvbnRXZWlnaHR8fG4mJm4uZ2V0U2hhbGxvdyhcImZvbnRXZWlnaHRcIil8fFwiXCIsKHQuZm9udFNpemV8fG4mJm4uZ2V0U2hhbGxvdyhcImZvbnRTaXplXCIpfHwxMikrXCJweFwiLHQuZm9udEZhbWlseXx8biYmbi5nZXRTaGFsbG93KFwiZm9udEZhbWlseVwiKXx8XCJzYW5zLXNlcmlmXCJdLmpvaW4oXCIgXCIpKX1mdW5jdGlvbiB4YSh0LGUsbixpLHIsYSl7XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKGE9cixyPW51bGwpO3ZhciBvPWkmJmkuaXNBbmltYXRpb25FbmFibGVkKCk7aWYobyl7dmFyIHM9dD9cIlVwZGF0ZVwiOlwiXCIsbD1pLmdldFNoYWxsb3coXCJhbmltYXRpb25EdXJhdGlvblwiK3MpLHU9aS5nZXRTaGFsbG93KFwiYW5pbWF0aW9uRWFzaW5nXCIrcyksaD1pLmdldFNoYWxsb3coXCJhbmltYXRpb25EZWxheVwiK3MpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGgmJihoPWgocixpLmdldEFuaW1hdGlvbkRlbGF5UGFyYW1zP2kuZ2V0QW5pbWF0aW9uRGVsYXlQYXJhbXMoZSxyKTpudWxsKSksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmKGw9bChyKSksbD4wP2UuYW5pbWF0ZVRvKG4sbCxofHwwLHUsYSwhIWEpOihlLnN0b3BBbmltYXRpb24oKSxlLmF0dHIobiksYSYmYSgpKX1lbHNlIGUuc3RvcEFuaW1hdGlvbigpLGUuYXR0cihuKSxhJiZhKCl9ZnVuY3Rpb24gd2EodCxlLG4saSxyKXt4YSghMCx0LGUsbixpLHIpfWZ1bmN0aW9uIGJhKHQsZSxuLGkscil7eGEoITEsdCxlLG4saSxyKX1mdW5jdGlvbiBNYSh0LGUpe2Zvcih2YXIgbj1wZShbXSk7dCYmdCE9PWU7KXZlKG4sdC5nZXRMb2NhbFRyYW5zZm9ybSgpLG4pLHQ9dC5wYXJlbnQ7cmV0dXJuIG59ZnVuY3Rpb24gU2EodCxlLG4pe3JldHVybiBlJiYhZChlKSYmKGU9UWMuZ2V0TG9jYWxUcmFuc2Zvcm0oZSkpLG4mJihlPXhlKFtdLGUpKSxhZShbXSx0LGUpfWZ1bmN0aW9uIENhKHQsZSxuKXt2YXIgaT0wPT09ZVs0XXx8MD09PWVbNV18fDA9PT1lWzBdPzE6TWF0aC5hYnMoMiplWzRdL2VbMF0pLHI9MD09PWVbNF18fDA9PT1lWzVdfHwwPT09ZVsyXT8xOk1hdGguYWJzKDIqZVs0XS9lWzJdKSxhPVtcImxlZnRcIj09PXQ/LWk6XCJyaWdodFwiPT09dD9pOjAsXCJ0b3BcIj09PXQ/LXI6XCJib3R0b21cIj09PXQ/cjowXTtyZXR1cm4gYT1TYShhLGUsbiksTWF0aC5hYnMoYVswXSk+TWF0aC5hYnMoYVsxXSk/YVswXT4wP1wicmlnaHRcIjpcImxlZnRcIjphWzFdPjA/XCJib3R0b21cIjpcInRvcFwifWZ1bmN0aW9uIElhKHQsZSxuKXtmdW5jdGlvbiBpKHQpe3ZhciBlPXt9O3JldHVybiB0LnRyYXZlcnNlKGZ1bmN0aW9uKHQpeyF0LmlzR3JvdXAmJnQuYW5pZCYmKGVbdC5hbmlkXT10KX0pLGV9ZnVuY3Rpb24gcih0KXt2YXIgZT17cG9zaXRpb246Vyh0LnBvc2l0aW9uKSxyb3RhdGlvbjp0LnJvdGF0aW9ufTtyZXR1cm4gdC5zaGFwZSYmKGUuc2hhcGU9byh7fSx0LnNoYXBlKSksZX1pZih0JiZlKXt2YXIgYT1pKHQpO2UudHJhdmVyc2UoZnVuY3Rpb24odCl7aWYoIXQuaXNHcm91cCYmdC5hbmlkKXt2YXIgZT1hW3QuYW5pZF07aWYoZSl7dmFyIGk9cih0KTt0LmF0dHIocihlKSksd2EodCxpLG4sdC5kYXRhSW5kZXgpfX19KX19ZnVuY3Rpb24gVGEodCxlKXtyZXR1cm4gcCh0LGZ1bmN0aW9uKHQpe3ZhciBuPXRbMF07bj1yZyhuLGUueCksbj1hZyhuLGUueCtlLndpZHRoKTt2YXIgaT10WzFdO3JldHVybiBpPXJnKGksZS55KSxpPWFnKGksZS55K2UuaGVpZ2h0KSxbbixpXX0pfWZ1bmN0aW9uIGthKHQsZSl7dmFyIG49cmcodC54LGUueCksaT1hZyh0LngrdC53aWR0aCxlLngrZS53aWR0aCkscj1yZyh0LnksZS55KSxhPWFnKHQueSt0LmhlaWdodCxlLnkrZS5oZWlnaHQpO3JldHVybiBpPj1uJiZhPj1yP3t4Om4seTpyLHdpZHRoOmktbixoZWlnaHQ6YS1yfTp2b2lkIDB9ZnVuY3Rpb24gRGEodCxlLG4pe2U9byh7cmVjdEhvdmVyOiEwfSxlKTt2YXIgaT1lLnN0eWxlPXtzdHJva2VOb1NjYWxlOiEwfTtyZXR1cm4gbj1ufHx7eDotMSx5Oi0xLHdpZHRoOjIsaGVpZ2h0OjJ9LHQ/MD09PXQuaW5kZXhPZihcImltYWdlOi8vXCIpPyhpLmltYWdlPXQuc2xpY2UoOCkscyhpLG4pLG5ldyBhaShlKSk6anIodC5yZXBsYWNlKFwicGF0aDovL1wiLFwiXCIpLGUsbixcImNlbnRlclwiKTp2b2lkIDB9ZnVuY3Rpb24gQWEodCxlLG4pe3RoaXMucGFyZW50TW9kZWw9ZSx0aGlzLmVjTW9kZWw9bix0aGlzLm9wdGlvbj10fWZ1bmN0aW9uIFBhKHQsZSxuKXtmb3IodmFyIGk9MDtpPGUubGVuZ3RoJiYoIWVbaV18fCh0PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0P3RbZVtpXV06bnVsbCxudWxsIT10KSk7aSsrKTtyZXR1cm4gbnVsbD09dCYmbiYmKHQ9bi5nZXQoZSkpLHR9ZnVuY3Rpb24gTGEodCxlKXt2YXIgbj1wZyh0KS5nZXRQYXJlbnQ7cmV0dXJuIG4/bi5jYWxsKHQsZSk6dC5wYXJlbnRNb2RlbH1mdW5jdGlvbiBPYSh0KXtyZXR1cm5bdHx8XCJcIixnZysrLE1hdGgucmFuZG9tKCkudG9GaXhlZCg1KV0uam9pbihcIl9cIil9ZnVuY3Rpb24gUmEodCl7dmFyIGU9e307cmV0dXJuIHQucmVnaXN0ZXJTdWJUeXBlRGVmYXVsdGVyPWZ1bmN0aW9uKHQsbil7dD1xaSh0KSxlW3QubWFpbl09bn0sdC5kZXRlcm1pbmVTdWJUeXBlPWZ1bmN0aW9uKG4saSl7dmFyIHI9aS50eXBlO2lmKCFyKXt2YXIgYT1xaShuKS5tYWluO3QuaGFzU3ViVHlwZXMobikmJmVbYV0mJihyPWVbYV0oaSkpfXJldHVybiByfSx0fWZ1bmN0aW9uIEVhKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgbj17fSxhPVtdO3JldHVybiBmKHQsZnVuY3Rpb24obyl7dmFyIHM9aShuLG8pLGw9cy5vcmlnaW5hbERlcHM9ZShvKSxoPXIobCx0KTtzLmVudHJ5Q291bnQ9aC5sZW5ndGgsMD09PXMuZW50cnlDb3VudCYmYS5wdXNoKG8pLGYoaCxmdW5jdGlvbih0KXt1KHMucHJlZGVjZXNzb3IsdCk8MCYmcy5wcmVkZWNlc3Nvci5wdXNoKHQpO3ZhciBlPWkobix0KTt1KGUuc3VjY2Vzc29yLHQpPDAmJmUuc3VjY2Vzc29yLnB1c2gobyl9KX0pLHtncmFwaDpuLG5vRW50cnlMaXN0OmF9fWZ1bmN0aW9uIGkodCxlKXtyZXR1cm4gdFtlXXx8KHRbZV09e3ByZWRlY2Vzc29yOltdLHN1Y2Nlc3NvcjpbXX0pLHRbZV19ZnVuY3Rpb24gcih0LGUpe3ZhciBuPVtdO3JldHVybiBmKHQsZnVuY3Rpb24odCl7dShlLHQpPj0wJiZuLnB1c2godCl9KSxufXQudG9wb2xvZ2ljYWxUcmF2ZWw9ZnVuY3Rpb24odCxlLGkscil7ZnVuY3Rpb24gYSh0KXtsW3RdLmVudHJ5Q291bnQtLSwwPT09bFt0XS5lbnRyeUNvdW50JiZ1LnB1c2godCl9ZnVuY3Rpb24gbyh0KXtoW3RdPSEwLGEodCl9aWYodC5sZW5ndGgpe3ZhciBzPW4oZSksbD1zLmdyYXBoLHU9cy5ub0VudHJ5TGlzdCxoPXt9O2ZvcihmKHQsZnVuY3Rpb24odCl7aFt0XT0hMH0pO3UubGVuZ3RoOyl7dmFyIGM9dS5wb3AoKSxkPWxbY10scD0hIWhbY107cCYmKGkuY2FsbChyLGMsZC5vcmlnaW5hbERlcHMuc2xpY2UoKSksZGVsZXRlIGhbY10pLGYoZC5zdWNjZXNzb3IscD9vOmEpfWYoaCxmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIkNpcmNsZSBkZXBlbmRlbmN5IG1heSBleGlzdHNcIil9KX19fWZ1bmN0aW9uIEJhKHQpe3JldHVybiB0LnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIil9ZnVuY3Rpb24gemEodCxlLG4saSl7dmFyIHI9ZVsxXS1lWzBdLGE9blsxXS1uWzBdO2lmKDA9PT1yKXJldHVybiAwPT09YT9uWzBdOihuWzBdK25bMV0pLzI7aWYoaSlpZihyPjApe2lmKHQ8PWVbMF0pcmV0dXJuIG5bMF07aWYodD49ZVsxXSlyZXR1cm4gblsxXX1lbHNle2lmKHQ+PWVbMF0pcmV0dXJuIG5bMF07aWYodDw9ZVsxXSlyZXR1cm4gblsxXX1lbHNle2lmKHQ9PT1lWzBdKXJldHVybiBuWzBdO2lmKHQ9PT1lWzFdKXJldHVybiBuWzFdfXJldHVybih0LWVbMF0pL3IqYStuWzBdfWZ1bmN0aW9uIE5hKHQsZSl7c3dpdGNoKHQpe2Nhc2VcImNlbnRlclwiOmNhc2VcIm1pZGRsZVwiOnQ9XCI1MCVcIjticmVhaztjYXNlXCJsZWZ0XCI6Y2FzZVwidG9wXCI6dD1cIjAlXCI7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJib3R0b21cIjp0PVwiMTAwJVwifXJldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P0JhKHQpLm1hdGNoKC8lJC8pP3BhcnNlRmxvYXQodCkvMTAwKmU6cGFyc2VGbG9hdCh0KTpudWxsPT10PzAvMDordH1mdW5jdGlvbiBGYSh0LGUsbil7cmV0dXJuIG51bGw9PWUmJihlPTEwKSxlPU1hdGgubWluKE1hdGgubWF4KDAsZSksMjApLHQ9KCt0KS50b0ZpeGVkKGUpLG4/dDordH1mdW5jdGlvbiBWYSh0KXtyZXR1cm4gdC5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQtZX0pLHR9ZnVuY3Rpb24gR2EodCl7aWYodD0rdCxpc05hTih0KSlyZXR1cm4gMDtmb3IodmFyIGU9MSxuPTA7TWF0aC5yb3VuZCh0KmUpL2UhPT10OyllKj0xMCxuKys7cmV0dXJuIG59ZnVuY3Rpb24gSGEodCl7dmFyIGU9dC50b1N0cmluZygpLG49ZS5pbmRleE9mKFwiZVwiKTtpZihuPjApe3ZhciBpPStlLnNsaWNlKG4rMSk7cmV0dXJuIDA+aT8taTowfXZhciByPWUuaW5kZXhPZihcIi5cIik7cmV0dXJuIDA+cj8wOmUubGVuZ3RoLTEtcn1mdW5jdGlvbiBXYSh0LGUpe3ZhciBuPU1hdGgubG9nLGk9TWF0aC5MTjEwLHI9TWF0aC5mbG9vcihuKHRbMV0tdFswXSkvaSksYT1NYXRoLnJvdW5kKG4oTWF0aC5hYnMoZVsxXS1lWzBdKSkvaSksbz1NYXRoLm1pbihNYXRoLm1heCgtcithLDApLDIwKTtyZXR1cm4gaXNGaW5pdGUobyk/bzoyMH1mdW5jdGlvbiBqYSh0LGUsbil7aWYoIXRbZV0pcmV0dXJuIDA7dmFyIGk9Zyh0LGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrKGlzTmFOKGUpPzA6ZSl9LDApO2lmKDA9PT1pKXJldHVybiAwO2Zvcih2YXIgcj1NYXRoLnBvdygxMCxuKSxhPXAodCxmdW5jdGlvbih0KXtyZXR1cm4oaXNOYU4odCk/MDp0KS9pKnIqMTAwfSksbz0xMDAqcixzPXAoYSxmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5mbG9vcih0KX0pLGw9ZyhzLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0sMCksdT1wKGEsZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1zW2VdfSk7bz5sOyl7Zm9yKHZhciBoPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSxjPW51bGwsZD0wLGY9dS5sZW5ndGg7Zj5kOysrZCl1W2RdPmgmJihoPXVbZF0sYz1kKTsrK3NbY10sdVtjXT0wLCsrbH1yZXR1cm4gc1tlXS9yfWZ1bmN0aW9uIHFhKHQpe3ZhciBlPTIqTWF0aC5QSTtyZXR1cm4odCVlK2UpJWV9ZnVuY3Rpb24gVWEodCl7cmV0dXJuIHQ+LXZnJiZ2Zz50fWZ1bmN0aW9uIFhhKHQpe2lmKHQgaW5zdGFuY2VvZiBEYXRlKXJldHVybiB0O2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZT15Zy5leGVjKHQpO2lmKCFlKXJldHVybiBuZXcgRGF0ZSgwLzApO2lmKGVbOF0pe3ZhciBuPStlWzRdfHwwO3JldHVyblwiWlwiIT09ZVs4XS50b1VwcGVyQ2FzZSgpJiYobi09ZVs4XS5zbGljZSgwLDMpKSxuZXcgRGF0ZShEYXRlLlVUQygrZVsxXSwrKGVbMl18fDEpLTEsK2VbM118fDEsbiwrKGVbNV18fDApLCtlWzZdfHwwLCtlWzddfHwwKSl9cmV0dXJuIG5ldyBEYXRlKCtlWzFdLCsoZVsyXXx8MSktMSwrZVszXXx8MSwrZVs0XXx8MCwrKGVbNV18fDApLCtlWzZdfHwwLCtlWzddfHwwKX1yZXR1cm4gbmV3IERhdGUobnVsbD09dD8wLzA6TWF0aC5yb3VuZCh0KSl9ZnVuY3Rpb24gWWEodCl7cmV0dXJuIE1hdGgucG93KDEwLFphKHQpKX1mdW5jdGlvbiBaYSh0KXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZyh0KS9NYXRoLkxOMTApfWZ1bmN0aW9uICRhKHQsZSl7dmFyIG4saT1aYSh0KSxyPU1hdGgucG93KDEwLGkpLGE9dC9yO3JldHVybiBuPWU/MS41PmE/MToyLjU+YT8yOjQ+YT8zOjc+YT81OjEwOjE+YT8xOjI+YT8yOjM+YT8zOjU+YT81OjEwLHQ9bipyLGk+PS0yMD8rdC50b0ZpeGVkKDA+aT8taTowKTp0fWZ1bmN0aW9uIEthKHQsZSl7dmFyIG49KHQubGVuZ3RoLTEpKmUrMSxpPU1hdGguZmxvb3Iobikscj0rdFtpLTFdLGE9bi1pO3JldHVybiBhP3IrYSoodFtpXS1yKTpyfWZ1bmN0aW9uIFFhKHQpe2Z1bmN0aW9uIGUodCxuLGkpe3JldHVybiB0LmludGVydmFsW2ldPG4uaW50ZXJ2YWxbaV18fHQuaW50ZXJ2YWxbaV09PT1uLmludGVydmFsW2ldJiYodC5jbG9zZVtpXS1uLmNsb3NlW2ldPT09KGk/LTE6MSl8fCFpJiZlKHQsbiwxKSl9dC5zb3J0KGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUodCxuLDApPy0xOjF9KTtmb3IodmFyIG49LTEvMCxpPTEscj0wO3I8dC5sZW5ndGg7KXtmb3IodmFyIGE9dFtyXS5pbnRlcnZhbCxvPXRbcl0uY2xvc2Uscz0wOzI+cztzKyspYVtzXTw9biYmKGFbc109bixvW3NdPXM/MToxLWkpLG49YVtzXSxpPW9bc107YVswXT09PWFbMV0mJm9bMF0qb1sxXSE9PTE/dC5zcGxpY2UociwxKTpyKyt9cmV0dXJuIHR9ZnVuY3Rpb24gSmEodCl7cmV0dXJuIHQtcGFyc2VGbG9hdCh0KT49MH1mdW5jdGlvbiB0byh0KXtyZXR1cm4gaXNOYU4odCk/XCItXCI6KHQ9KHQrXCJcIikuc3BsaXQoXCIuXCIpLHRbMF0ucmVwbGFjZSgvKFxcZHsxLDN9KSg/PSg/OlxcZHszfSkrKD8hXFxkKSkvZyxcIiQxLFwiKSsodC5sZW5ndGg+MT9cIi5cIit0WzFdOlwiXCIpKX1mdW5jdGlvbiBlbyh0LGUpe3JldHVybiB0PSh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZyxmdW5jdGlvbih0LGUpe3JldHVybiBlLnRvVXBwZXJDYXNlKCl9KSxlJiZ0JiYodD10LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSkpLHR9ZnVuY3Rpb24gbm8odCl7cmV0dXJuIG51bGw9PXQ/XCJcIjoodCtcIlwiKS5yZXBsYWNlKHdnLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGJnW2VdfSl9ZnVuY3Rpb24gaW8odCxlLG4pe3goZSl8fChlPVtlXSk7dmFyIGk9ZS5sZW5ndGg7aWYoIWkpcmV0dXJuXCJcIjtmb3IodmFyIHI9ZVswXS4kdmFyc3x8W10sYT0wO2E8ci5sZW5ndGg7YSsrKXt2YXIgbz1NZ1thXTt0PXQucmVwbGFjZShTZyhvKSxTZyhvLDApKX1mb3IodmFyIHM9MDtpPnM7cysrKWZvcih2YXIgbD0wO2w8ci5sZW5ndGg7bCsrKXt2YXIgdT1lW3NdW3JbbF1dO3Q9dC5yZXBsYWNlKFNnKE1nW2xdLHMpLG4/bm8odSk6dSl9cmV0dXJuIHR9ZnVuY3Rpb24gcm8odCxlLG4pe3JldHVybiBmKGUsZnVuY3Rpb24oZSxpKXt0PXQucmVwbGFjZShcIntcIitpK1wifVwiLG4/bm8oZSk6ZSl9KSx0fWZ1bmN0aW9uIGFvKHQsZSl7dD1iKHQpP3tjb2xvcjp0LGV4dHJhQ3NzVGV4dDplfTp0fHx7fTt2YXIgbj10LmNvbG9yLGk9dC50eXBlLGU9dC5leHRyYUNzc1RleHQ7cmV0dXJuIG4/XCJzdWJJdGVtXCI9PT1pPyc8c3BhbiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTttYXJnaW4tcmlnaHQ6OHB4O21hcmdpbi1sZWZ0OjNweDtib3JkZXItcmFkaXVzOjRweDt3aWR0aDo0cHg7aGVpZ2h0OjRweDtiYWNrZ3JvdW5kLWNvbG9yOicrbm8obikrXCI7XCIrKGV8fFwiXCIpKydcIj48L3NwYW4+JzonPHNwYW4gc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6NXB4O2JvcmRlci1yYWRpdXM6MTBweDt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtY29sb3I6JytubyhuKStcIjtcIisoZXx8XCJcIikrJ1wiPjwvc3Bhbj4nOlwiXCJ9ZnVuY3Rpb24gb28odCxlKXtyZXR1cm4gdCs9XCJcIixcIjAwMDBcIi5zdWJzdHIoMCxlLXQubGVuZ3RoKSt0fWZ1bmN0aW9uIHNvKHQsZSxuKXsoXCJ3ZWVrXCI9PT10fHxcIm1vbnRoXCI9PT10fHxcInF1YXJ0ZXJcIj09PXR8fFwiaGFsZi15ZWFyXCI9PT10fHxcInllYXJcIj09PXQpJiYodD1cIk1NLWRkXFxueXl5eVwiKTt2YXIgaT1YYShlKSxyPW4/XCJVVENcIjpcIlwiLGE9aVtcImdldFwiK3IrXCJGdWxsWWVhclwiXSgpLG89aVtcImdldFwiK3IrXCJNb250aFwiXSgpKzEscz1pW1wiZ2V0XCIrcitcIkRhdGVcIl0oKSxsPWlbXCJnZXRcIityK1wiSG91cnNcIl0oKSx1PWlbXCJnZXRcIityK1wiTWludXRlc1wiXSgpLGg9aVtcImdldFwiK3IrXCJTZWNvbmRzXCJdKCksYz1pW1wiZ2V0XCIrcitcIk1pbGxpc2Vjb25kc1wiXSgpO3JldHVybiB0PXQucmVwbGFjZShcIk1NXCIsb28obywyKSkucmVwbGFjZShcIk1cIixvKS5yZXBsYWNlKFwieXl5eVwiLGEpLnJlcGxhY2UoXCJ5eVwiLGElMTAwKS5yZXBsYWNlKFwiZGRcIixvbyhzLDIpKS5yZXBsYWNlKFwiZFwiLHMpLnJlcGxhY2UoXCJoaFwiLG9vKGwsMikpLnJlcGxhY2UoXCJoXCIsbCkucmVwbGFjZShcIm1tXCIsb28odSwyKSkucmVwbGFjZShcIm1cIix1KS5yZXBsYWNlKFwic3NcIixvbyhoLDIpKS5yZXBsYWNlKFwic1wiLGgpLnJlcGxhY2UoXCJTU1NcIixvbyhjLDMpKX1mdW5jdGlvbiBsbyh0KXtyZXR1cm4gdD90LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc3Vic3RyKDEpOnR9ZnVuY3Rpb24gdW8odCxlLG4saSxyKXt2YXIgYT0wLG89MDtudWxsPT1pJiYoaT0xLzApLG51bGw9PXImJihyPTEvMCk7dmFyIHM9MDtlLmVhY2hDaGlsZChmdW5jdGlvbihsLHUpe3ZhciBoLGMsZD1sLnBvc2l0aW9uLGY9bC5nZXRCb3VuZGluZ1JlY3QoKSxwPWUuY2hpbGRBdCh1KzEpLGc9cCYmcC5nZXRCb3VuZGluZ1JlY3QoKTtpZihcImhvcml6b250YWxcIj09PXQpe3ZhciB2PWYud2lkdGgrKGc/LWcueCtmLng6MCk7aD1hK3YsaD5pfHxsLm5ld2xpbmU/KGE9MCxoPXYsbys9cytuLHM9Zi5oZWlnaHQpOnM9TWF0aC5tYXgocyxmLmhlaWdodCl9ZWxzZXt2YXIgbT1mLmhlaWdodCsoZz8tZy55K2YueTowKTtjPW8rbSxjPnJ8fGwubmV3bGluZT8oYSs9cytuLG89MCxjPW0scz1mLndpZHRoKTpzPU1hdGgubWF4KHMsZi53aWR0aCl9bC5uZXdsaW5lfHwoZFswXT1hLGRbMV09byxcImhvcml6b250YWxcIj09PXQ/YT1oK246bz1jK24pfSl9ZnVuY3Rpb24gaG8odCxlLG4pe249eGcobnx8MCk7dmFyIGk9ZS53aWR0aCxyPWUuaGVpZ2h0LGE9TmEodC5sZWZ0LGkpLG89TmEodC50b3Ascikscz1OYSh0LnJpZ2h0LGkpLGw9TmEodC5ib3R0b20sciksdT1OYSh0LndpZHRoLGkpLGg9TmEodC5oZWlnaHQsciksYz1uWzJdK25bMF0sZD1uWzFdK25bM10sZj10LmFzcGVjdDtzd2l0Y2goaXNOYU4odSkmJih1PWktcy1kLWEpLGlzTmFOKGgpJiYoaD1yLWwtYy1vKSxudWxsIT1mJiYoaXNOYU4odSkmJmlzTmFOKGgpJiYoZj5pL3I/dT0uOCppOmg9LjgqciksaXNOYU4odSkmJih1PWYqaCksaXNOYU4oaCkmJihoPXUvZikpLGlzTmFOKGEpJiYoYT1pLXMtdS1kKSxpc05hTihvKSYmKG89ci1sLWgtYyksdC5sZWZ0fHx0LnJpZ2h0KXtjYXNlXCJjZW50ZXJcIjphPWkvMi11LzItblszXTtcbmJyZWFrO2Nhc2VcInJpZ2h0XCI6YT1pLXUtZH1zd2l0Y2godC50b3B8fHQuYm90dG9tKXtjYXNlXCJtaWRkbGVcIjpjYXNlXCJjZW50ZXJcIjpvPXIvMi1oLzItblswXTticmVhaztjYXNlXCJib3R0b21cIjpvPXItaC1jfWE9YXx8MCxvPW98fDAsaXNOYU4odSkmJih1PWktZC1hLShzfHwwKSksaXNOYU4oaCkmJihoPXItYy1vLShsfHwwKSk7dmFyIHA9bmV3IHJuKGErblszXSxvK25bMF0sdSxoKTtyZXR1cm4gcC5tYXJnaW49bixwfWZ1bmN0aW9uIGNvKHQsZSxuKXtmdW5jdGlvbiBpKG4saSl7dmFyIG89e30sbD0wLHU9e30saD0wLGM9MjtpZihrZyhuLGZ1bmN0aW9uKGUpe3VbZV09dFtlXX0pLGtnKG4sZnVuY3Rpb24odCl7cihlLHQpJiYob1t0XT11W3RdPWVbdF0pLGEobyx0KSYmbCsrLGEodSx0KSYmaCsrfSksc1tpXSlyZXR1cm4gYShlLG5bMV0pP3VbblsyXV09bnVsbDphKGUsblsyXSkmJih1W25bMV1dPW51bGwpLHU7aWYoaCE9PWMmJmwpe2lmKGw+PWMpcmV0dXJuIG87Zm9yKHZhciBkPTA7ZDxuLmxlbmd0aDtkKyspe3ZhciBmPW5bZF07aWYoIXIobyxmKSYmcih0LGYpKXtvW2ZdPXRbZl07YnJlYWt9fXJldHVybiBvfXJldHVybiB1fWZ1bmN0aW9uIHIodCxlKXtyZXR1cm4gdC5oYXNPd25Qcm9wZXJ0eShlKX1mdW5jdGlvbiBhKHQsZSl7cmV0dXJuIG51bGwhPXRbZV0mJlwiYXV0b1wiIT09dFtlXX1mdW5jdGlvbiBvKHQsZSxuKXtrZyh0LGZ1bmN0aW9uKHQpe2VbdF09blt0XX0pfSFNKG4pJiYobj17fSk7dmFyIHM9bi5pZ25vcmVTaXplOyF4KHMpJiYocz1bcyxzXSk7dmFyIGw9aShBZ1swXSwwKSx1PWkoQWdbMV0sMSk7byhBZ1swXSx0LGwpLG8oQWdbMV0sdCx1KX1mdW5jdGlvbiBmbyh0KXtyZXR1cm4gcG8oe30sdCl9ZnVuY3Rpb24gcG8odCxlKXtyZXR1cm4gZSYmdCYma2coRGcsZnVuY3Rpb24obil7ZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9KSx0fWZ1bmN0aW9uIGdvKHQpe3ZhciBlPVtdO3JldHVybiBmKFJnLmdldENsYXNzZXNCeU1haW5UeXBlKHQpLGZ1bmN0aW9uKHQpe2U9ZS5jb25jYXQodC5wcm90b3R5cGUuZGVwZW5kZW5jaWVzfHxbXSl9KSxlPXAoZSxmdW5jdGlvbih0KXtyZXR1cm4gcWkodCkubWFpbn0pLFwiZGF0YXNldFwiIT09dCYmdShlLFwiZGF0YXNldFwiKTw9MCYmZS51bnNoaWZ0KFwiZGF0YXNldFwiKSxlfWZ1bmN0aW9uIHZvKHQsZSl7Zm9yKHZhciBuPXQubGVuZ3RoLGk9MDtuPmk7aSsrKWlmKHRbaV0ubGVuZ3RoPmUpcmV0dXJuIHRbaV07cmV0dXJuIHRbbi0xXX1mdW5jdGlvbiBtbyh0KXt2YXIgZT10LmdldChcImNvb3JkaW5hdGVTeXN0ZW1cIiksbj17Y29vcmRTeXNOYW1lOmUsY29vcmRTeXNEaW1zOltdLGF4aXNNYXA6TigpLGNhdGVnb3J5QXhpc01hcDpOKCl9LGk9RmdbZV07cmV0dXJuIGk/KGkodCxuLG4uYXhpc01hcCxuLmNhdGVnb3J5QXhpc01hcCksbik6dm9pZCAwfWZ1bmN0aW9uIHlvKHQpe3JldHVyblwiY2F0ZWdvcnlcIj09PXQuZ2V0KFwidHlwZVwiKX1mdW5jdGlvbiBfbyh0KXt0aGlzLmZyb21EYXRhc2V0PXQuZnJvbURhdGFzZXQsdGhpcy5kYXRhPXQuZGF0YXx8KHQuc291cmNlRm9ybWF0PT09V2c/e306W10pLHRoaXMuc291cmNlRm9ybWF0PXQuc291cmNlRm9ybWF0fHxqZyx0aGlzLnNlcmllc0xheW91dEJ5PXQuc2VyaWVzTGF5b3V0Qnl8fFVnLHRoaXMuZGltZW5zaW9uc0RlZmluZT10LmRpbWVuc2lvbnNEZWZpbmUsdGhpcy5lbmNvZGVEZWZpbmU9dC5lbmNvZGVEZWZpbmUmJk4odC5lbmNvZGVEZWZpbmUpLHRoaXMuc3RhcnRJbmRleD10LnN0YXJ0SW5kZXh8fDAsdGhpcy5kaW1lbnNpb25zRGV0ZWN0Q291bnQ9dC5kaW1lbnNpb25zRGV0ZWN0Q291bnR9ZnVuY3Rpb24geG8odCl7dmFyIGU9dC5vcHRpb24uc291cmNlLG49amc7aWYoQyhlKSluPXFnO2Vsc2UgaWYoeChlKSlmb3IodmFyIGk9MCxyPWUubGVuZ3RoO3I+aTtpKyspe3ZhciBhPWVbaV07aWYobnVsbCE9YSl7aWYoeChhKSl7bj1HZzticmVha31pZihNKGEpKXtuPUhnO2JyZWFrfX19ZWxzZSBpZihNKGUpKXtmb3IodmFyIG8gaW4gZSlpZihlLmhhc093blByb3BlcnR5KG8pJiZkKGVbb10pKXtuPVdnO2JyZWFrfX1lbHNlIGlmKG51bGwhPWUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRhXCIpO1lnKHQpLnNvdXJjZUZvcm1hdD1ufWZ1bmN0aW9uIHdvKHQpe3JldHVybiBZZyh0KS5zb3VyY2V9ZnVuY3Rpb24gYm8odCl7WWcodCkuZGF0YXNldE1hcD1OKCl9ZnVuY3Rpb24gTW8odCl7dmFyIGU9dC5vcHRpb24sbj1lLmRhdGEsaT1DKG4pP3FnOlZnLHI9ITEsYT1lLnNlcmllc0xheW91dEJ5LG89ZS5zb3VyY2VIZWFkZXIscz1lLmRpbWVuc2lvbnMsbD1Ebyh0KTtpZihsKXt2YXIgdT1sLm9wdGlvbjtuPXUuc291cmNlLGk9WWcobCkuc291cmNlRm9ybWF0LHI9ITAsYT1hfHx1LnNlcmllc0xheW91dEJ5LG51bGw9PW8mJihvPXUuc291cmNlSGVhZGVyKSxzPXN8fHUuZGltZW5zaW9uc312YXIgaD1TbyhuLGksYSxvLHMpLGM9ZS5lbmNvZGU7IWMmJmwmJihjPWtvKHQsbCxuLGksYSxoKSksWWcodCkuc291cmNlPW5ldyBfbyh7ZGF0YTpuLGZyb21EYXRhc2V0OnIsc2VyaWVzTGF5b3V0Qnk6YSxzb3VyY2VGb3JtYXQ6aSxkaW1lbnNpb25zRGVmaW5lOmguZGltZW5zaW9uc0RlZmluZSxzdGFydEluZGV4Omguc3RhcnRJbmRleCxkaW1lbnNpb25zRGV0ZWN0Q291bnQ6aC5kaW1lbnNpb25zRGV0ZWN0Q291bnQsZW5jb2RlRGVmaW5lOmN9KX1mdW5jdGlvbiBTbyh0LGUsbixpLHIpe2lmKCF0KXJldHVybntkaW1lbnNpb25zRGVmaW5lOkNvKHIpfTt2YXIgYSxvLHM7aWYoZT09PUdnKVwiYXV0b1wiPT09aXx8bnVsbD09aT9JbyhmdW5jdGlvbih0KXtudWxsIT10JiZcIi1cIiE9PXQmJihiKHQpP251bGw9PW8mJihvPTEpOm89MCl9LG4sdCwxMCk6bz1pPzE6MCxyfHwxIT09b3x8KHI9W10sSW8oZnVuY3Rpb24odCxlKXtyW2VdPW51bGwhPXQ/dDpcIlwifSxuLHQpKSxhPXI/ci5sZW5ndGg6bj09PVhnP3QubGVuZ3RoOnRbMF0/dFswXS5sZW5ndGg6bnVsbDtlbHNlIGlmKGU9PT1IZylyfHwocj1Ubyh0KSxzPSEwKTtlbHNlIGlmKGU9PT1XZylyfHwocj1bXSxzPSEwLGYodCxmdW5jdGlvbih0LGUpe3IucHVzaChlKX0pKTtlbHNlIGlmKGU9PT1WZyl7dmFyIGw9T2kodFswXSk7YT14KGwpJiZsLmxlbmd0aHx8MX12YXIgdTtyZXR1cm4gcyYmZihyLGZ1bmN0aW9uKHQsZSl7XCJuYW1lXCI9PT0oTSh0KT90Lm5hbWU6dCkmJih1PWUpfSkse3N0YXJ0SW5kZXg6byxkaW1lbnNpb25zRGVmaW5lOkNvKHIpLGRpbWVuc2lvbnNEZXRlY3RDb3VudDphLHBvdGVudGlhbE5hbWVEaW1JbmRleDp1fX1mdW5jdGlvbiBDbyh0KXtpZih0KXt2YXIgZT1OKCk7cmV0dXJuIHAodCxmdW5jdGlvbih0KXtpZih0PW8oe30sTSh0KT90OntuYW1lOnR9KSxudWxsPT10Lm5hbWUpcmV0dXJuIHQ7dC5uYW1lKz1cIlwiLG51bGw9PXQuZGlzcGxheU5hbWUmJih0LmRpc3BsYXlOYW1lPXQubmFtZSk7dmFyIG49ZS5nZXQodC5uYW1lKTtyZXR1cm4gbj90Lm5hbWUrPVwiLVwiK24uY291bnQrKzplLnNldCh0Lm5hbWUse2NvdW50OjF9KSx0fSl9fWZ1bmN0aW9uIElvKHQsZSxuLGkpe2lmKG51bGw9PWkmJihpPTEvMCksZT09PVhnKWZvcih2YXIgcj0wO3I8bi5sZW5ndGgmJmk+cjtyKyspdChuW3JdP25bcl1bMF06bnVsbCxyKTtlbHNlIGZvcih2YXIgYT1uWzBdfHxbXSxyPTA7cjxhLmxlbmd0aCYmaT5yO3IrKyl0KGFbcl0scil9ZnVuY3Rpb24gVG8odCl7Zm9yKHZhciBlLG49MDtuPHQubGVuZ3RoJiYhKGU9dFtuKytdKTspO2lmKGUpe3ZhciBpPVtdO3JldHVybiBmKGUsZnVuY3Rpb24odCxlKXtpLnB1c2goZSl9KSxpfX1mdW5jdGlvbiBrbyh0LGUsbixpLHIsYSl7dmFyIG89bW8odCkscz17fSxsPVtdLHU9W10saD10LnN1YlR5cGUsYz1OKFtcInBpZVwiLFwibWFwXCIsXCJmdW5uZWxcIl0pLGQ9TihbXCJsaW5lXCIsXCJiYXJcIixcInBpY3RvcmlhbEJhclwiLFwic2NhdHRlclwiLFwiZWZmZWN0U2NhdHRlclwiLFwiY2FuZGxlc3RpY2tcIixcImJveHBsb3RcIl0pO2lmKG8mJm51bGwhPWQuZ2V0KGgpKXt2YXIgcD10LmVjTW9kZWwsZz1ZZyhwKS5kYXRhc2V0TWFwLHY9ZS51aWQrXCJfXCIrcixtPWcuZ2V0KHYpfHxnLnNldCh2LHtjYXRlZ29yeVdheURpbToxLHZhbHVlV2F5RGltOjB9KTtmKG8uY29vcmRTeXNEaW1zLGZ1bmN0aW9uKHQpe2lmKG51bGw9PW8uZmlyc3RDYXRlZ29yeURpbUluZGV4KXt2YXIgZT1tLnZhbHVlV2F5RGltKys7c1t0XT1lLHUucHVzaChlKX1lbHNlIGlmKG8uY2F0ZWdvcnlBeGlzTWFwLmdldCh0KSlzW3RdPTAsbC5wdXNoKDApO2Vsc2V7dmFyIGU9bS5jYXRlZ29yeVdheURpbSsrO3NbdF09ZSx1LnB1c2goZSl9fSl9ZWxzZSBpZihudWxsIT1jLmdldChoKSl7Zm9yKHZhciB5LF89MDs1Pl8mJm51bGw9PXk7XysrKVBvKG4saSxyLGEuZGltZW5zaW9uc0RlZmluZSxhLnN0YXJ0SW5kZXgsXyl8fCh5PV8pO2lmKG51bGwhPXkpe3MudmFsdWU9eTt2YXIgeD1hLnBvdGVudGlhbE5hbWVEaW1JbmRleHx8TWF0aC5tYXgoeS0xLDApO3UucHVzaCh4KSxsLnB1c2goeCl9fXJldHVybiBsLmxlbmd0aCYmKHMuaXRlbU5hbWU9bCksdS5sZW5ndGgmJihzLnNlcmllc05hbWU9dSksc31mdW5jdGlvbiBEbyh0KXt2YXIgZT10Lm9wdGlvbixuPWUuZGF0YTtyZXR1cm4gbj92b2lkIDA6dC5lY01vZGVsLmdldENvbXBvbmVudChcImRhdGFzZXRcIixlLmRhdGFzZXRJbmRleHx8MCl9ZnVuY3Rpb24gQW8odCxlKXtyZXR1cm4gUG8odC5kYXRhLHQuc291cmNlRm9ybWF0LHQuc2VyaWVzTGF5b3V0QnksdC5kaW1lbnNpb25zRGVmaW5lLHQuc3RhcnRJbmRleCxlKX1mdW5jdGlvbiBQbyh0LGUsbixpLHIsYSl7ZnVuY3Rpb24gbyh0KXtyZXR1cm4gbnVsbCE9dCYmaXNGaW5pdGUodCkmJlwiXCIhPT10PyExOmIodCkmJlwiLVwiIT09dD8hMDp2b2lkIDB9dmFyIHMsbD01O2lmKEModCkpcmV0dXJuITE7dmFyIHU7aWYoaSYmKHU9aVthXSx1PU0odSk/dS5uYW1lOnUpLGU9PT1HZylpZihuPT09WGcpe2Zvcih2YXIgaD10W2FdLGM9MDtjPChofHxbXSkubGVuZ3RoJiZsPmM7YysrKWlmKG51bGwhPShzPW8oaFtyK2NdKSkpcmV0dXJuIHN9ZWxzZSBmb3IodmFyIGM9MDtjPHQubGVuZ3RoJiZsPmM7YysrKXt2YXIgZD10W3IrY107aWYoZCYmbnVsbCE9KHM9byhkW2FdKSkpcmV0dXJuIHN9ZWxzZSBpZihlPT09SGcpe2lmKCF1KXJldHVybjtmb3IodmFyIGM9MDtjPHQubGVuZ3RoJiZsPmM7YysrKXt2YXIgZj10W2NdO2lmKGYmJm51bGwhPShzPW8oZlt1XSkpKXJldHVybiBzfX1lbHNlIGlmKGU9PT1XZyl7aWYoIXUpcmV0dXJuO3ZhciBoPXRbdV07aWYoIWh8fEMoaCkpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxoLmxlbmd0aCYmbD5jO2MrKylpZihudWxsIT0ocz1vKGhbY10pKSlyZXR1cm4gc31lbHNlIGlmKGU9PT1WZylmb3IodmFyIGM9MDtjPHQubGVuZ3RoJiZsPmM7YysrKXt2YXIgZj10W2NdLHA9T2koZik7aWYoIXgocCkpcmV0dXJuITE7aWYobnVsbCE9KHM9byhwW2FdKSkpcmV0dXJuIHN9cmV0dXJuITF9ZnVuY3Rpb24gTG8odCxlKXtpZihlKXt2YXIgbj1lLnNlaXJlc0luZGV4LGk9ZS5zZXJpZXNJZCxyPWUuc2VyaWVzTmFtZTtyZXR1cm4gbnVsbCE9biYmdC5jb21wb25lbnRJbmRleCE9PW58fG51bGwhPWkmJnQuaWQhPT1pfHxudWxsIT1yJiZ0Lm5hbWUhPT1yfX1mdW5jdGlvbiBPbyh0LGUpe3ZhciBuPXQuY29sb3ImJiF0LmNvbG9yTGF5ZXI7ZihlLGZ1bmN0aW9uKGUsYSl7XCJjb2xvckxheWVyXCI9PT1hJiZufHxSZy5oYXNDbGFzcyhhKXx8KFwib2JqZWN0XCI9PXR5cGVvZiBlP3RbYV09dFthXT9yKHRbYV0sZSwhMSk6aShlKTpudWxsPT10W2FdJiYodFthXT1lKSl9KX1mdW5jdGlvbiBSbyh0KXt0PXQsdGhpcy5vcHRpb249e30sdGhpcy5vcHRpb25bWmddPTEsdGhpcy5fY29tcG9uZW50c01hcD1OKHtzZXJpZXM6W119KSx0aGlzLl9zZXJpZXNJbmRpY2VzLHRoaXMuX3Nlcmllc0luZGljZXNNYXAsT28odCx0aGlzLl90aGVtZS5vcHRpb24pLHIodCxCZywhMSksdGhpcy5tZXJnZU9wdGlvbih0KX1mdW5jdGlvbiBFbyh0LGUpe3goZSl8fChlPWU/W2VdOltdKTt2YXIgbj17fTtyZXR1cm4gZihlLGZ1bmN0aW9uKGUpe25bZV09KHQuZ2V0KGUpfHxbXSkuc2xpY2UoKX0pLG59ZnVuY3Rpb24gQm8odCxlLG4pe3ZhciBpPWUudHlwZT9lLnR5cGU6bj9uLnN1YlR5cGU6UmcuZGV0ZXJtaW5lU3ViVHlwZSh0LGUpO3JldHVybiBpfWZ1bmN0aW9uIHpvKHQsZSl7dC5fc2VyaWVzSW5kaWNlc01hcD1OKHQuX3Nlcmllc0luZGljZXM9cChlLGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbXBvbmVudEluZGV4fSl8fFtdKX1mdW5jdGlvbiBObyh0LGUpe3JldHVybiBlLmhhc093blByb3BlcnR5KFwic3ViVHlwZVwiKT92KHQsZnVuY3Rpb24odCl7cmV0dXJuIHQuc3ViVHlwZT09PWUuc3ViVHlwZX0pOnR9ZnVuY3Rpb24gRm8odCl7ZihLZyxmdW5jdGlvbihlKXt0aGlzW2VdPXkodFtlXSx0KX0sdGhpcyl9ZnVuY3Rpb24gVm8oKXt0aGlzLl9jb29yZGluYXRlU3lzdGVtcz1bXX1mdW5jdGlvbiBHbyh0KXt0aGlzLl9hcGk9dCx0aGlzLl90aW1lbGluZU9wdGlvbnM9W10sdGhpcy5fbWVkaWFMaXN0PVtdLHRoaXMuX21lZGlhRGVmYXVsdCx0aGlzLl9jdXJyZW50TWVkaWFJbmRpY2VzPVtdLHRoaXMuX29wdGlvbkJhY2t1cCx0aGlzLl9uZXdCYXNlT3B0aW9ufWZ1bmN0aW9uIEhvKHQsZSxuKXt2YXIgaSxyLGE9W10sbz1bXSxzPXQudGltZWxpbmU7aWYodC5iYXNlT3B0aW9uJiYocj10LmJhc2VPcHRpb24pLChzfHx0Lm9wdGlvbnMpJiYocj1yfHx7fSxhPSh0Lm9wdGlvbnN8fFtdKS5zbGljZSgpKSx0Lm1lZGlhKXtyPXJ8fHt9O3ZhciBsPXQubWVkaWE7SmcobCxmdW5jdGlvbih0KXt0JiZ0Lm9wdGlvbiYmKHQucXVlcnk/by5wdXNoKHQpOml8fChpPXQpKX0pfXJldHVybiByfHwocj10KSxyLnRpbWVsaW5lfHwoci50aW1lbGluZT1zKSxKZyhbcl0uY29uY2F0KGEpLmNvbmNhdChwKG8sZnVuY3Rpb24odCl7cmV0dXJuIHQub3B0aW9ufSkpLGZ1bmN0aW9uKHQpe0pnKGUsZnVuY3Rpb24oZSl7ZSh0LG4pfSl9KSx7YmFzZU9wdGlvbjpyLHRpbWVsaW5lT3B0aW9uczphLG1lZGlhRGVmYXVsdDppLG1lZGlhTGlzdDpvfX1mdW5jdGlvbiBXbyh0LGUsbil7dmFyIGk9e3dpZHRoOmUsaGVpZ2h0Om4sYXNwZWN0cmF0aW86ZS9ufSxyPSEwO3JldHVybiBmKHQsZnVuY3Rpb24odCxlKXt2YXIgbj1lLm1hdGNoKGl2KTtpZihuJiZuWzFdJiZuWzJdKXt2YXIgYT1uWzFdLG89blsyXS50b0xvd2VyQ2FzZSgpO2pvKGlbb10sdCxhKXx8KHI9ITEpfX0pLHJ9ZnVuY3Rpb24gam8odCxlLG4pe3JldHVyblwibWluXCI9PT1uP3Q+PWU6XCJtYXhcIj09PW4/ZT49dDp0PT09ZX1mdW5jdGlvbiBxbyh0LGUpe3JldHVybiB0LmpvaW4oXCIsXCIpPT09ZS5qb2luKFwiLFwiKX1mdW5jdGlvbiBVbyh0LGUpe2U9ZXx8e30sSmcoZSxmdW5jdGlvbihlLG4pe2lmKG51bGwhPWUpe3ZhciBpPXRbbl07aWYoUmcuaGFzQ2xhc3Mobikpe2U9UGkoZSksaT1QaShpKTt2YXIgcj1FaShpLGUpO3Rbbl09ZXYocixmdW5jdGlvbih0KXtyZXR1cm4gdC5vcHRpb24mJnQuZXhpc3Q/bnYodC5leGlzdCx0Lm9wdGlvbiwhMCk6dC5leGlzdHx8dC5vcHRpb259KX1lbHNlIHRbbl09bnYoaSxlLCEwKX19KX1mdW5jdGlvbiBYbyh0KXt2YXIgZT10JiZ0Lml0ZW1TdHlsZTtpZihlKWZvcih2YXIgbj0wLGk9b3YubGVuZ3RoO2k+bjtuKyspe3ZhciBhPW92W25dLG89ZS5ub3JtYWwscz1lLmVtcGhhc2lzO28mJm9bYV0mJih0W2FdPXRbYV18fHt9LHRbYV0ubm9ybWFsP3IodFthXS5ub3JtYWwsb1thXSk6dFthXS5ub3JtYWw9b1thXSxvW2FdPW51bGwpLHMmJnNbYV0mJih0W2FdPXRbYV18fHt9LHRbYV0uZW1waGFzaXM/cih0W2FdLmVtcGhhc2lzLHNbYV0pOnRbYV0uZW1waGFzaXM9c1thXSxzW2FdPW51bGwpfX1mdW5jdGlvbiBZbyh0LGUsbil7aWYodCYmdFtlXSYmKHRbZV0ubm9ybWFsfHx0W2VdLmVtcGhhc2lzKSl7dmFyIGk9dFtlXS5ub3JtYWwscj10W2VdLmVtcGhhc2lzO2kmJihuPyh0W2VdLm5vcm1hbD10W2VdLmVtcGhhc2lzPW51bGwscyh0W2VdLGkpKTp0W2VdPWkpLHImJih0LmVtcGhhc2lzPXQuZW1waGFzaXN8fHt9LHQuZW1waGFzaXNbZV09cil9fWZ1bmN0aW9uIFpvKHQpe1lvKHQsXCJpdGVtU3R5bGVcIiksWW8odCxcImxpbmVTdHlsZVwiKSxZbyh0LFwiYXJlYVN0eWxlXCIpLFlvKHQsXCJsYWJlbFwiKSxZbyh0LFwibGFiZWxMaW5lXCIpLFlvKHQsXCJ1cHBlckxhYmVsXCIpLFlvKHQsXCJlZGdlTGFiZWxcIil9ZnVuY3Rpb24gJG8odCxlKXt2YXIgbj1hdih0KSYmdFtlXSxpPWF2KG4pJiZuLnRleHRTdHlsZTtpZihpKWZvcih2YXIgcj0wLGE9SWYubGVuZ3RoO2E+cjtyKyspe3ZhciBlPUlmW3JdO2kuaGFzT3duUHJvcGVydHkoZSkmJihuW2VdPWlbZV0pfX1mdW5jdGlvbiBLbyh0KXt0JiYoWm8odCksJG8odCxcImxhYmVsXCIpLHQuZW1waGFzaXMmJiRvKHQuZW1waGFzaXMsXCJsYWJlbFwiKSl9ZnVuY3Rpb24gUW8odCl7aWYoYXYodCkpe1hvKHQpLFpvKHQpLCRvKHQsXCJsYWJlbFwiKSwkbyh0LFwidXBwZXJMYWJlbFwiKSwkbyh0LFwiZWRnZUxhYmVsXCIpLHQuZW1waGFzaXMmJigkbyh0LmVtcGhhc2lzLFwibGFiZWxcIiksJG8odC5lbXBoYXNpcyxcInVwcGVyTGFiZWxcIiksJG8odC5lbXBoYXNpcyxcImVkZ2VMYWJlbFwiKSk7dmFyIGU9dC5tYXJrUG9pbnQ7ZSYmKFhvKGUpLEtvKGUpKTt2YXIgbj10Lm1hcmtMaW5lO24mJihYbyhuKSxLbyhuKSk7dmFyIGk9dC5tYXJrQXJlYTtpJiZLbyhpKTt2YXIgcj10LmRhdGE7aWYoXCJncmFwaFwiPT09dC50eXBlKXtyPXJ8fHQubm9kZXM7dmFyIGE9dC5saW5rc3x8dC5lZGdlcztpZihhJiYhQyhhKSlmb3IodmFyIG89MDtvPGEubGVuZ3RoO28rKylLbyhhW29dKTtmKHQuY2F0ZWdvcmllcyxmdW5jdGlvbih0KXtabyh0KX0pfWlmKHImJiFDKHIpKWZvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKUtvKHJbb10pO3ZhciBlPXQubWFya1BvaW50O2lmKGUmJmUuZGF0YSlmb3IodmFyIHM9ZS5kYXRhLG89MDtvPHMubGVuZ3RoO28rKylLbyhzW29dKTt2YXIgbj10Lm1hcmtMaW5lO2lmKG4mJm4uZGF0YSlmb3IodmFyIGw9bi5kYXRhLG89MDtvPGwubGVuZ3RoO28rKyl4KGxbb10pPyhLbyhsW29dWzBdKSxLbyhsW29dWzFdKSk6S28obFtvXSk7XCJnYXVnZVwiPT09dC50eXBlPygkbyh0LFwiYXhpc0xhYmVsXCIpLCRvKHQsXCJ0aXRsZVwiKSwkbyh0LFwiZGV0YWlsXCIpKTpcInRyZWVtYXBcIj09PXQudHlwZT8oWW8odC5icmVhZGNydW1iLFwiaXRlbVN0eWxlXCIpLGYodC5sZXZlbHMsZnVuY3Rpb24odCl7Wm8odCl9KSk6XCJ0cmVlXCI9PT10LnR5cGUmJlpvKHQubGVhdmVzKX19ZnVuY3Rpb24gSm8odCl7cmV0dXJuIHgodCk/dDp0P1t0XTpbXX1mdW5jdGlvbiB0cyh0KXtyZXR1cm4oeCh0KT90WzBdOnQpfHx7fX1mdW5jdGlvbiBlcyh0LGUpe2U9ZS5zcGxpdChcIixcIik7Zm9yKHZhciBuPXQsaT0wO2k8ZS5sZW5ndGgmJihuPW4mJm5bZVtpXV0sbnVsbCE9bik7aSsrKTtyZXR1cm4gbn1mdW5jdGlvbiBucyh0LGUsbixpKXtlPWUuc3BsaXQoXCIsXCIpO2Zvcih2YXIgcixhPXQsbz0wO288ZS5sZW5ndGgtMTtvKyspcj1lW29dLG51bGw9PWFbcl0mJihhW3JdPXt9KSxhPWFbcl07KGl8fG51bGw9PWFbZVtvXV0pJiYoYVtlW29dXT1uKX1mdW5jdGlvbiBpcyh0KXtmKGx2LGZ1bmN0aW9uKGUpe2VbMF1pbiB0JiYhKGVbMV1pbiB0KSYmKHRbZVsxXV09dFtlWzBdXSl9KX1mdW5jdGlvbiBycyh0KXtmKHQsZnVuY3Rpb24oZSxuKXt2YXIgaT1bXSxyPVswLzAsMC8wXSxhPVtlLnN0YWNrUmVzdWx0RGltZW5zaW9uLGUuc3RhY2tlZE92ZXJEaW1lbnNpb25dLG89ZS5kYXRhLHM9ZS5pc1N0YWNrZWRCeUluZGV4LGw9by5tYXAoYSxmdW5jdGlvbihhLGwsdSl7dmFyIGg9by5nZXQoZS5zdGFja2VkRGltZW5zaW9uLHUpO2lmKGlzTmFOKGgpKXJldHVybiByO3ZhciBjLGQ7cz9kPW8uZ2V0UmF3SW5kZXgodSk6Yz1vLmdldChlLnN0YWNrZWRCeURpbWVuc2lvbix1KTtmb3IodmFyIGY9MC8wLHA9bi0xO3A+PTA7cC0tKXt2YXIgZz10W3BdO2lmKHN8fChkPWcuZGF0YS5yYXdJbmRleE9mKGcuc3RhY2tlZEJ5RGltZW5zaW9uLGMpKSxkPj0wKXt2YXIgdj1nLmRhdGEuZ2V0QnlSYXdJbmRleChnLnN0YWNrUmVzdWx0RGltZW5zaW9uLGQpO2lmKGg+PTAmJnY+MHx8MD49aCYmMD52KXtoKz12LGY9djticmVha319fXJldHVybiBpWzBdPWgsaVsxXT1mLGl9KTtvLmhvc3RNb2RlbC5zZXREYXRhKGwpLGUuZGF0YT1sfSl9ZnVuY3Rpb24gYXModCxlKXtfby5pc0luc3RhbmNlKHQpfHwodD1fby5zZXJpZXNEYXRhVG9Tb3VyY2UodCkpLHRoaXMuX3NvdXJjZT10O3ZhciBuPXRoaXMuX2RhdGE9dC5kYXRhLGk9dC5zb3VyY2VGb3JtYXQ7aT09PXFnJiYodGhpcy5fb2Zmc2V0PTAsdGhpcy5fZGltU2l6ZT1lLHRoaXMuX2RhdGE9bik7dmFyIHI9ZnZbaT09PUdnP2krXCJfXCIrdC5zZXJpZXNMYXlvdXRCeTppXTtvKHRoaXMscil9ZnVuY3Rpb24gb3MoKXtyZXR1cm4gdGhpcy5fZGF0YS5sZW5ndGh9ZnVuY3Rpb24gc3ModCl7cmV0dXJuIHRoaXMuX2RhdGFbdF19ZnVuY3Rpb24gbHModCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspdGhpcy5fZGF0YS5wdXNoKHRbZV0pfWZ1bmN0aW9uIHVzKHQsZSxuKXtyZXR1cm4gbnVsbCE9bj90W25dOnR9ZnVuY3Rpb24gaHModCxlLG4saSl7cmV0dXJuIGNzKHRbaV0sdGhpcy5fZGltZW5zaW9uSW5mb3NbZV0pfWZ1bmN0aW9uIGNzKHQsZSl7dmFyIG49ZSYmZS50eXBlO2lmKFwib3JkaW5hbFwiPT09bil7dmFyIGk9ZSYmZS5vcmRpbmFsTWV0YTtyZXR1cm4gaT9pLnBhcnNlQW5kQ29sbGVjdCh0KTp0fXJldHVyblwidGltZVwiPT09biYmXCJudW1iZXJcIiE9dHlwZW9mIHQmJm51bGwhPXQmJlwiLVwiIT09dCYmKHQ9K1hhKHQpKSxudWxsPT10fHxcIlwiPT09dD8wLzA6K3R9ZnVuY3Rpb24gZHModCxlLG4pe2lmKHQpe3ZhciBpPXQuZ2V0UmF3RGF0YUl0ZW0oZSk7aWYobnVsbCE9aSl7dmFyIHIsYSxvPXQuZ2V0UHJvdmlkZXIoKS5nZXRTb3VyY2UoKS5zb3VyY2VGb3JtYXQscz10LmdldERpbWVuc2lvbkluZm8obik7cmV0dXJuIHMmJihyPXMubmFtZSxhPXMuaW5kZXgpLHB2W29dKGksZSxhLHIpfX19ZnVuY3Rpb24gZnModCl7cmV0dXJuIG5ldyBwcyh0KX1mdW5jdGlvbiBwcyh0KXt0PXR8fHt9LHRoaXMuX3Jlc2V0PXQucmVzZXQsdGhpcy5fcGxhbj10LnBsYW4sdGhpcy5fY291bnQ9dC5jb3VudCx0aGlzLl9vbkRpcnR5PXQub25EaXJ0eSx0aGlzLl9kaXJ0eT0hMCx0aGlzLmNvbnRleHR9ZnVuY3Rpb24gZ3ModCxlLG4saSxyLGEpe192LnJlc2V0KG4saSxyLGEpLHQuX2NhbGxpbmdQcm9ncmVzcz1lLHQuX2NhbGxpbmdQcm9ncmVzcyh7c3RhcnQ6bixlbmQ6aSxjb3VudDppLW4sbmV4dDpfdi5uZXh0fSx0LmNvbnRleHQpfWZ1bmN0aW9uIHZzKHQsZSl7dC5fZHVlSW5kZXg9dC5fb3V0cHV0RHVlRW5kPXQuX2R1ZUVuZD0wLHQuX3NldHRlZE91dHB1dEVuZD1udWxsO3ZhciBuLGk7IWUmJnQuX3Jlc2V0JiYobj10Ll9yZXNldCh0LmNvbnRleHQpLG4mJm4ucHJvZ3Jlc3MmJihpPW4uZm9yY2VGaXJzdFByb2dyZXNzLG49bi5wcm9ncmVzcykseChuKSYmIW4ubGVuZ3RoJiYobj1udWxsKSksdC5fcHJvZ3Jlc3M9bix0Ll9tb2RCeT10Ll9tb2REYXRhQ291bnQ9bnVsbDt2YXIgcj10Ll9kb3duc3RyZWFtO3JldHVybiByJiZyLmRpcnR5KCksaX1mdW5jdGlvbiBtcyh0KXt2YXIgZT10Lm5hbWU7emkodCl8fCh0Lm5hbWU9eXModCl8fGUpfWZ1bmN0aW9uIHlzKHQpe3ZhciBlPXQuZ2V0UmF3RGF0YSgpLG49ZS5tYXBEaW1lbnNpb24oXCJzZXJpZXNOYW1lXCIsITApLGk9W107cmV0dXJuIGYobixmdW5jdGlvbih0KXt2YXIgbj1lLmdldERpbWVuc2lvbkluZm8odCk7bi5kaXNwbGF5TmFtZSYmaS5wdXNoKG4uZGlzcGxheU5hbWUpfSksaS5qb2luKFwiIFwiKX1mdW5jdGlvbiBfcyh0KXtyZXR1cm4gdC5tb2RlbC5nZXRSYXdEYXRhKCkuY291bnQoKX1mdW5jdGlvbiB4cyh0KXt2YXIgZT10Lm1vZGVsO3JldHVybiBlLnNldERhdGEoZS5nZXRSYXdEYXRhKCkuY2xvbmVTaGFsbG93KCkpLHdzfWZ1bmN0aW9uIHdzKHQsZSl7dC5lbmQ+ZS5vdXRwdXREYXRhLmNvdW50KCkmJmUubW9kZWwuZ2V0UmF3RGF0YSgpLmNsb25lU2hhbGxvdyhlLm91dHB1dERhdGEpfWZ1bmN0aW9uIGJzKHQsZSl7Zih0LkNIQU5HQUJMRV9NRVRIT0RTLGZ1bmN0aW9uKG4pe3Qud3JhcE1ldGhvZChuLF8oTXMsZSkpfSl9ZnVuY3Rpb24gTXModCl7dmFyIGU9U3ModCk7ZSYmZS5zZXRPdXRwdXRFbmQodGhpcy5jb3VudCgpKX1mdW5jdGlvbiBTcyh0KXt2YXIgZT0odC5lY01vZGVsfHx7fSkuc2NoZWR1bGVyLG49ZSYmZS5nZXRQaXBlbGluZSh0LnVpZCk7aWYobil7dmFyIGk9bi5jdXJyZW50VGFzaztpZihpKXt2YXIgcj1pLmFnZW50U3R1Yk1hcDtyJiYoaT1yLmdldCh0LnVpZCkpfXJldHVybiBpfX1mdW5jdGlvbiBDcygpe3RoaXMuZ3JvdXA9bmV3IENkLHRoaXMudWlkPU9hKFwidmlld0NoYXJ0XCIpLHRoaXMucmVuZGVyVGFzaz1mcyh7cGxhbjprcyxyZXNldDpEc30pLHRoaXMucmVuZGVyVGFzay5jb250ZXh0PXt2aWV3OnRoaXN9fWZ1bmN0aW9uIElzKHQsZSl7aWYodCYmKHQudHJpZ2dlcihlKSxcImdyb3VwXCI9PT10LnR5cGUpKWZvcih2YXIgbj0wO248dC5jaGlsZENvdW50KCk7bisrKUlzKHQuY2hpbGRBdChuKSxlKX1mdW5jdGlvbiBUcyh0LGUsbil7dmFyIGk9RmkodCxlKTtudWxsIT1pP2YoUGkoaSksZnVuY3Rpb24oZSl7SXModC5nZXRJdGVtR3JhcGhpY0VsKGUpLG4pfSk6dC5lYWNoSXRlbUdyYXBoaWNFbChmdW5jdGlvbih0KXtJcyh0LG4pfSl9ZnVuY3Rpb24ga3ModCl7cmV0dXJuIEl2KHQubW9kZWwpfWZ1bmN0aW9uIERzKHQpe3ZhciBlPXQubW9kZWwsbj10LmVjTW9kZWwsaT10LmFwaSxyPXQucGF5bG9hZCxhPWUucGlwZWxpbmVDb250ZXh0LnByb2dyZXNzaXZlUmVuZGVyLG89dC52aWV3LHM9ciYmQ3YocikudXBkYXRlTWV0aG9kLGw9YT9cImluY3JlbWVudGFsUHJlcGFyZVJlbmRlclwiOnMmJm9bc10/czpcInJlbmRlclwiO3JldHVyblwicmVuZGVyXCIhPT1sJiZvW2xdKGUsbixpLHIpLGt2W2xdfWZ1bmN0aW9uIEFzKHQsZSxuKXtmdW5jdGlvbiBpKCl7aD0obmV3IERhdGUpLmdldFRpbWUoKSxjPW51bGwsdC5hcHBseShvLHN8fFtdKX12YXIgcixhLG8scyxsLHU9MCxoPTAsYz1udWxsO2U9ZXx8MDt2YXIgZD1mdW5jdGlvbigpe3I9KG5ldyBEYXRlKS5nZXRUaW1lKCksbz10aGlzLHM9YXJndW1lbnRzO3ZhciB0PWx8fGUsZD1sfHxuO2w9bnVsbCxhPXItKGQ/dTpoKS10LGNsZWFyVGltZW91dChjKSxkP2M9c2V0VGltZW91dChpLHQpOmE+PTA/aSgpOmM9c2V0VGltZW91dChpLC1hKSx1PXJ9O3JldHVybiBkLmNsZWFyPWZ1bmN0aW9uKCl7YyYmKGNsZWFyVGltZW91dChjKSxjPW51bGwpfSxkLmRlYm91bmNlTmV4dENhbGw9ZnVuY3Rpb24odCl7bD10fSxkfWZ1bmN0aW9uIFBzKHQsZSxuLGkpe3RoaXMuZWNJbnN0YW5jZT10LHRoaXMuYXBpPWUsdGhpcy51bmZpbmlzaGVkO3ZhciBuPXRoaXMuX2RhdGFQcm9jZXNzb3JIYW5kbGVycz1uLnNsaWNlKCksaT10aGlzLl92aXN1YWxIYW5kbGVycz1pLnNsaWNlKCk7dGhpcy5fYWxsSGFuZGxlcnM9bi5jb25jYXQoaSksdGhpcy5fc3RhZ2VUYXNrTWFwPU4oKX1mdW5jdGlvbiBMcyh0LGUsbixpLHIpe2Z1bmN0aW9uIGEodCxlKXtyZXR1cm4gdC5zZXREaXJ0eSYmKCF0LmRpcnR5TWFwfHx0LmRpcnR5TWFwLmdldChlLl9fcGlwZWxpbmUuaWQpKX1yPXJ8fHt9O3ZhciBvO2YoZSxmdW5jdGlvbihlKXtpZighci52aXN1YWxUeXBlfHxyLnZpc3VhbFR5cGU9PT1lLnZpc3VhbFR5cGUpe3ZhciBzPXQuX3N0YWdlVGFza01hcC5nZXQoZS51aWQpLGw9cy5zZXJpZXNUYXNrTWFwLHU9cy5vdmVyYWxsVGFzaztpZih1KXt2YXIgaCxjPXUuYWdlbnRTdHViTWFwO2MuZWFjaChmdW5jdGlvbih0KXthKHIsdCkmJih0LmRpcnR5KCksaD0hMCl9KSxoJiZ1LmRpcnR5KCksRXYodSxpKTt2YXIgZD10LmdldFBlcmZvcm1BcmdzKHUsci5ibG9jayk7Yy5lYWNoKGZ1bmN0aW9uKHQpe3QucGVyZm9ybShkKX0pLG98PXUucGVyZm9ybShkKX1lbHNlIGwmJmwuZWFjaChmdW5jdGlvbihzKXthKHIscykmJnMuZGlydHkoKTt2YXIgbD10LmdldFBlcmZvcm1BcmdzKHMsci5ibG9jayk7bC5za2lwPSFlLnBlcmZvcm1SYXdTZXJpZXMmJm4uaXNTZXJpZXNGaWx0ZXJlZChzLmNvbnRleHQubW9kZWwpLEV2KHMsaSksb3w9cy5wZXJmb3JtKGwpfSl9fSksdC51bmZpbmlzaGVkfD1vfWZ1bmN0aW9uIE9zKHQsZSxuLGkscil7ZnVuY3Rpb24gYShuKXt2YXIgYT1uLnVpZCxzPW8uZ2V0KGEpfHxvLnNldChhLGZzKHtwbGFuOkZzLHJlc2V0OlZzLGNvdW50OkhzfSkpO3MuY29udGV4dD17bW9kZWw6bixlY01vZGVsOmksYXBpOnIsdXNlQ2xlYXJWaXN1YWw6ZS5pc1Zpc3VhbCYmIWUuaXNMYXlvdXQscGxhbjplLnBsYW4scmVzZXQ6ZS5yZXNldCxzY2hlZHVsZXI6dH0sV3ModCxuLHMpfXZhciBvPW4uc2VyaWVzVGFza01hcHx8KG4uc2VyaWVzVGFza01hcD1OKCkpLHM9ZS5zZXJpZXNUeXBlLGw9ZS5nZXRUYXJnZXRTZXJpZXM7ZS5jcmVhdGVPbkFsbFNlcmllcz9pLmVhY2hSYXdTZXJpZXMoYSk6cz9pLmVhY2hSYXdTZXJpZXNCeVR5cGUocyxhKTpsJiZsKGkscikuZWFjaChhKTt2YXIgdT10Ll9waXBlbGluZU1hcDtvLmVhY2goZnVuY3Rpb24odCxlKXt1LmdldChlKXx8KHQuZGlzcG9zZSgpLG8ucmVtb3ZlS2V5KGUpKX0pfWZ1bmN0aW9uIFJzKHQsZSxuLGkscil7ZnVuY3Rpb24gYShlKXt2YXIgbj1lLnVpZCxpPXMuZ2V0KG4pO2l8fChpPXMuc2V0KG4sZnMoe3Jlc2V0OkJzLG9uRGlydHk6TnN9KSksby5kaXJ0eSgpKSxpLmNvbnRleHQ9e21vZGVsOmUsb3ZlcmFsbFByb2dyZXNzOmgsbW9kaWZ5T3V0cHV0RW5kOmN9LGkuYWdlbnQ9byxpLl9fYmxvY2s9aCxXcyh0LGUsaSl9dmFyIG89bi5vdmVyYWxsVGFzaz1uLm92ZXJhbGxUYXNrfHxmcyh7cmVzZXQ6RXN9KTtvLmNvbnRleHQ9e2VjTW9kZWw6aSxhcGk6cixvdmVyYWxsUmVzZXQ6ZS5vdmVyYWxsUmVzZXQsc2NoZWR1bGVyOnR9O3ZhciBzPW8uYWdlbnRTdHViTWFwPW8uYWdlbnRTdHViTWFwfHxOKCksbD1lLnNlcmllc1R5cGUsdT1lLmdldFRhcmdldFNlcmllcyxoPSEwLGM9ZS5tb2RpZnlPdXRwdXRFbmQ7bD9pLmVhY2hSYXdTZXJpZXNCeVR5cGUobCxhKTp1P3UoaSxyKS5lYWNoKGEpOihoPSExLGYoaS5nZXRTZXJpZXMoKSxhKSk7dmFyIGQ9dC5fcGlwZWxpbmVNYXA7cy5lYWNoKGZ1bmN0aW9uKHQsZSl7ZC5nZXQoZSl8fCh0LmRpc3Bvc2UoKSxvLmRpcnR5KCkscy5yZW1vdmVLZXkoZSkpfSl9ZnVuY3Rpb24gRXModCl7dC5vdmVyYWxsUmVzZXQodC5lY01vZGVsLHQuYXBpLHQucGF5bG9hZCl9ZnVuY3Rpb24gQnModCl7cmV0dXJuIHQub3ZlcmFsbFByb2dyZXNzJiZ6c31mdW5jdGlvbiB6cygpe3RoaXMuYWdlbnQuZGlydHkoKSx0aGlzLmdldERvd25zdHJlYW0oKS5kaXJ0eSgpfWZ1bmN0aW9uIE5zKCl7dGhpcy5hZ2VudCYmdGhpcy5hZ2VudC5kaXJ0eSgpfWZ1bmN0aW9uIEZzKHQpe3JldHVybiB0LnBsYW4mJnQucGxhbih0Lm1vZGVsLHQuZWNNb2RlbCx0LmFwaSx0LnBheWxvYWQpfWZ1bmN0aW9uIFZzKHQpe3QudXNlQ2xlYXJWaXN1YWwmJnQuZGF0YS5jbGVhckFsbFZpc3VhbCgpO3ZhciBlPXQucmVzZXREZWZpbmVzPVBpKHQucmVzZXQodC5tb2RlbCx0LmVjTW9kZWwsdC5hcGksdC5wYXlsb2FkKSk7cmV0dXJuIGUubGVuZ3RoPjE/cChlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIEdzKGUpfSk6QnZ9ZnVuY3Rpb24gR3ModCl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7dmFyIGk9bi5kYXRhLHI9bi5yZXNldERlZmluZXNbdF07aWYociYmci5kYXRhRWFjaClmb3IodmFyIGE9ZS5zdGFydDthPGUuZW5kO2ErKylyLmRhdGFFYWNoKGksYSk7ZWxzZSByJiZyLnByb2dyZXNzJiZyLnByb2dyZXNzKGUsaSl9fWZ1bmN0aW9uIEhzKHQpe3JldHVybiB0LmRhdGEuY291bnQoKX1mdW5jdGlvbiBXcyh0LGUsbil7dmFyIGk9ZS51aWQscj10Ll9waXBlbGluZU1hcC5nZXQoaSk7IXIuaGVhZCYmKHIuaGVhZD1uKSxyLnRhaWwmJnIudGFpbC5waXBlKG4pLHIudGFpbD1uLG4uX19pZHhJblBpcGVsaW5lPXIuY291bnQrKyxuLl9fcGlwZWxpbmU9cn1mdW5jdGlvbiBqcyh0KXt6dj1udWxsO3RyeXt0KE52LEZ2KX1jYXRjaChlKXt9cmV0dXJuIHp2fWZ1bmN0aW9uIHFzKHQsZSl7Zm9yKHZhciBuIGluIGUucHJvdG90eXBlKXRbbl09Vn1mdW5jdGlvbiBVcyh0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLGkpe2U9ZSYmZS50b0xvd2VyQ2FzZSgpLGpjLnByb3RvdHlwZVt0XS5jYWxsKHRoaXMsZSxuLGkpfX1mdW5jdGlvbiBYcygpe2pjLmNhbGwodGhpcyl9ZnVuY3Rpb24gWXModCxlLG4pe2Z1bmN0aW9uIHIodCxlKXtyZXR1cm4gdC5fX3ByaW8tZS5fX3ByaW99bj1ufHx7fSxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9eG1bZV0pLHRoaXMuaWQsdGhpcy5ncm91cCx0aGlzLl9kb209dDt2YXIgYT1cImNhbnZhc1wiLG89dGhpcy5fenI9SWkodCx7cmVuZGVyZXI6bi5yZW5kZXJlcnx8YSxkZXZpY2VQaXhlbFJhdGlvOm4uZGV2aWNlUGl4ZWxSYXRpbyx3aWR0aDpuLndpZHRoLGhlaWdodDpuLmhlaWdodH0pO3RoaXMuX3Rocm90dGxlZFpyRmx1c2g9QXMoeShvLmZsdXNoLG8pLDE3KTt2YXIgZT1pKGUpO2UmJmh2KGUsITApLHRoaXMuX3RoZW1lPWUsdGhpcy5fY2hhcnRzVmlld3M9W10sdGhpcy5fY2hhcnRzTWFwPXt9LHRoaXMuX2NvbXBvbmVudHNWaWV3cz1bXSx0aGlzLl9jb21wb25lbnRzTWFwPXt9LHRoaXMuX2Nvb3JkU3lzTWdyPW5ldyBWbzt2YXIgcz10aGlzLl9hcGk9ZGwodGhpcyk7ZG4oX20sciksZG4odm0sciksdGhpcy5fc2NoZWR1bGVyPW5ldyBQcyh0aGlzLHMsdm0sX20pLGpjLmNhbGwodGhpcyksdGhpcy5fbWVzc2FnZUNlbnRlcj1uZXcgWHMsdGhpcy5faW5pdEV2ZW50cygpLHRoaXMucmVzaXplPXkodGhpcy5yZXNpemUsdGhpcyksdGhpcy5fcGVuZGluZ0FjdGlvbnM9W10sby5hbmltYXRpb24ub24oXCJmcmFtZVwiLHRoaXMuX29uZnJhbWUsdGhpcyksbmwobyx0aGlzKSxFKHRoaXMpfWZ1bmN0aW9uIFpzKHQsZSxuKXt2YXIgaSxyPXRoaXMuX21vZGVsLGE9dGhpcy5fY29vcmRTeXNNZ3IuZ2V0Q29vcmRpbmF0ZVN5c3RlbXMoKTtlPUdpKHIsZSk7Zm9yKHZhciBvPTA7bzxhLmxlbmd0aDtvKyspe3ZhciBzPWFbb107aWYoc1t0XSYmbnVsbCE9KGk9c1t0XShyLGUsbikpKXJldHVybiBpfX1mdW5jdGlvbiAkcyh0KXt2YXIgZT10Ll9tb2RlbCxuPXQuX3NjaGVkdWxlcjtuLnJlc3RvcmVQaXBlbGluZXMoZSksbi5wcmVwYXJlU3RhZ2VUYXNrcygpLGlsKHQsXCJjb21wb25lbnRcIixlLG4pLGlsKHQsXCJjaGFydFwiLGUsbiksbi5wbGFuKCl9ZnVuY3Rpb24gS3ModCxlLG4saSxyKXtmdW5jdGlvbiBhKGkpe2kmJmkuX19hbGl2ZSYmaVtlXSYmaVtlXShpLl9fbW9kZWwsbyx0Ll9hcGksbil9dmFyIG89dC5fbW9kZWw7aWYoIWkpcmV0dXJuIHZvaWQgWHYodC5fY29tcG9uZW50c1ZpZXdzLmNvbmNhdCh0Ll9jaGFydHNWaWV3cyksYSk7dmFyIHM9e307c1tpK1wiSWRcIl09bltpK1wiSWRcIl0sc1tpK1wiSW5kZXhcIl09bltpK1wiSW5kZXhcIl0sc1tpK1wiTmFtZVwiXT1uW2krXCJOYW1lXCJdO3ZhciBsPXttYWluVHlwZTppLHF1ZXJ5OnN9O3ImJihsLnN1YlR5cGU9cik7dmFyIHU9bi5leGNsdWRlU2VyaWVzSWQ7bnVsbCE9dSYmKHU9TihQaSh1KSkpLG8mJm8uZWFjaENvbXBvbmVudChsLGZ1bmN0aW9uKGUpe3UmJm51bGwhPXUuZ2V0KGUuaWQpfHxhKHRbXCJzZXJpZXNcIj09PWk/XCJfY2hhcnRzTWFwXCI6XCJfY29tcG9uZW50c01hcFwiXVtlLl9fdmlld0lkXSl9LHQpfWZ1bmN0aW9uIFFzKHQsZSl7dmFyIG49dC5fY2hhcnRzTWFwLGk9dC5fc2NoZWR1bGVyO2UuZWFjaFNlcmllcyhmdW5jdGlvbih0KXtpLnVwZGF0ZVN0cmVhbU1vZGVzKHQsblt0Ll9fdmlld0lkXSl9KX1mdW5jdGlvbiBKcyh0LGUpe3ZhciBuPXQudHlwZSxpPXQuZXNjYXBlQ29ubmVjdCxyPXBtW25dLGE9ci5hY3Rpb25JbmZvLGw9KGEudXBkYXRlfHxcInVwZGF0ZVwiKS5zcGxpdChcIjpcIiksdT1sLnBvcCgpO2w9bnVsbCE9bFswXSYmJHYobFswXSksdGhpc1tsbV09ITA7dmFyIGg9W3RdLGM9ITE7dC5iYXRjaCYmKGM9ITAsaD1wKHQuYmF0Y2gsZnVuY3Rpb24oZSl7cmV0dXJuIGU9cyhvKHt9LGUpLHQpLGUuYmF0Y2g9bnVsbCxlfSkpO3ZhciBkLGY9W10sZz1cImhpZ2hsaWdodFwiPT09bnx8XCJkb3ducGxheVwiPT09bjtYdihoLGZ1bmN0aW9uKHQpe2Q9ci5hY3Rpb24odCx0aGlzLl9tb2RlbCx0aGlzLl9hcGkpLGQ9ZHx8byh7fSx0KSxkLnR5cGU9YS5ldmVudHx8ZC50eXBlLGYucHVzaChkKSxnP0tzKHRoaXMsdSx0LFwic2VyaWVzXCIpOmwmJktzKHRoaXMsdSx0LGwubWFpbixsLnN1Yil9LHRoaXMpLFwibm9uZVwiPT09dXx8Z3x8bHx8KHRoaXNbdW1dPygkcyh0aGlzKSxkbS51cGRhdGUuY2FsbCh0aGlzLHQpLHRoaXNbdW1dPSExKTpkbVt1XS5jYWxsKHRoaXMsdCkpLGQ9Yz97dHlwZTphLmV2ZW50fHxuLGVzY2FwZUNvbm5lY3Q6aSxiYXRjaDpmfTpmWzBdLHRoaXNbbG1dPSExLCFlJiZ0aGlzLl9tZXNzYWdlQ2VudGVyLnRyaWdnZXIoZC50eXBlLGQpfWZ1bmN0aW9uIHRsKHQpe2Zvcih2YXIgZT10aGlzLl9wZW5kaW5nQWN0aW9ucztlLmxlbmd0aDspe3ZhciBuPWUuc2hpZnQoKTtKcy5jYWxsKHRoaXMsbix0KX19ZnVuY3Rpb24gZWwodCl7IXQmJnRoaXMudHJpZ2dlcihcInVwZGF0ZWRcIil9ZnVuY3Rpb24gbmwodCxlKXt0Lm9uKFwicmVuZGVyZWRcIixmdW5jdGlvbigpe2UudHJpZ2dlcihcInJlbmRlcmVkXCIpLCF0LmFuaW1hdGlvbi5pc0ZpbmlzaGVkKCl8fGVbdW1dfHxlLl9zY2hlZHVsZXIudW5maW5pc2hlZHx8ZS5fcGVuZGluZ0FjdGlvbnMubGVuZ3RofHxlLnRyaWdnZXIoXCJmaW5pc2hlZFwiKX0pfWZ1bmN0aW9uIGlsKHQsZSxuLGkpe2Z1bmN0aW9uIHIodCl7dmFyIGU9XCJfZWNfXCIrdC5pZCtcIl9cIit0LnR5cGUscj1zW2VdO2lmKCFyKXt2YXIgaD0kdih0LnR5cGUpLGM9YT9idi5nZXRDbGFzcyhoLm1haW4saC5zdWIpOkNzLmdldENsYXNzKGguc3ViKTtyPW5ldyBjLHIuaW5pdChuLHUpLHNbZV09cixvLnB1c2gociksbC5hZGQoci5ncm91cCl9dC5fX3ZpZXdJZD1yLl9faWQ9ZSxyLl9fYWxpdmU9ITAsci5fX21vZGVsPXQsci5ncm91cC5fX2VjQ29tcG9uZW50SW5mbz17bWFpblR5cGU6dC5tYWluVHlwZSxpbmRleDp0LmNvbXBvbmVudEluZGV4fSwhYSYmaS5wcmVwYXJlVmlldyhyLHQsbix1KX1mb3IodmFyIGE9XCJjb21wb25lbnRcIj09PWUsbz1hP3QuX2NvbXBvbmVudHNWaWV3czp0Ll9jaGFydHNWaWV3cyxzPWE/dC5fY29tcG9uZW50c01hcDp0Ll9jaGFydHNNYXAsbD10Ll96cix1PXQuX2FwaSxoPTA7aDxvLmxlbmd0aDtoKyspb1toXS5fX2FsaXZlPSExO2E/bi5lYWNoQ29tcG9uZW50KGZ1bmN0aW9uKHQsZSl7XCJzZXJpZXNcIiE9PXQmJnIoZSl9KTpuLmVhY2hTZXJpZXMocik7Zm9yKHZhciBoPTA7aDxvLmxlbmd0aDspe3ZhciBjPW9baF07Yy5fX2FsaXZlP2grKzooIWEmJmMucmVuZGVyVGFzay5kaXNwb3NlKCksbC5yZW1vdmUoYy5ncm91cCksYy5kaXNwb3NlKG4sdSksby5zcGxpY2UoaCwxKSxkZWxldGUgc1tjLl9faWRdLGMuX19pZD1jLmdyb3VwLl9fZWNDb21wb25lbnRJbmZvPW51bGwpfX1mdW5jdGlvbiBybCh0KXt0LmNsZWFyQ29sb3JQYWxldHRlKCksdC5lYWNoU2VyaWVzKGZ1bmN0aW9uKHQpe3QuY2xlYXJDb2xvclBhbGV0dGUoKX0pfWZ1bmN0aW9uIGFsKHQsZSxuLGkpe29sKHQsZSxuLGkpLFh2KHQuX2NoYXJ0c1ZpZXdzLGZ1bmN0aW9uKHQpe3QuX19hbGl2ZT0hMX0pLHNsKHQsZSxuLGkpLFh2KHQuX2NoYXJ0c1ZpZXdzLGZ1bmN0aW9uKHQpe3QuX19hbGl2ZXx8dC5yZW1vdmUoZSxuKX0pfWZ1bmN0aW9uIG9sKHQsZSxuLGkscil7WHYocnx8dC5fY29tcG9uZW50c1ZpZXdzLGZ1bmN0aW9uKHQpe3ZhciByPXQuX19tb2RlbDt0LnJlbmRlcihyLGUsbixpKSxjbChyLHQpfSl9ZnVuY3Rpb24gc2wodCxlLG4saSxyKXt2YXIgYSxvPXQuX3NjaGVkdWxlcjtlLmVhY2hTZXJpZXMoZnVuY3Rpb24oZSl7dmFyIG49dC5fY2hhcnRzTWFwW2UuX192aWV3SWRdO24uX19hbGl2ZT0hMDt2YXIgcz1uLnJlbmRlclRhc2s7by51cGRhdGVQYXlsb2FkKHMsaSksciYmci5nZXQoZS51aWQpJiZzLmRpcnR5KCksYXw9cy5wZXJmb3JtKG8uZ2V0UGVyZm9ybUFyZ3MocykpLG4uZ3JvdXAuc2lsZW50PSEhZS5nZXQoXCJzaWxlbnRcIiksY2woZSxuKSxobChlLG4pfSksby51bmZpbmlzaGVkfD1hLHVsKHQuX3pyLGUpLFB2KHQuX3pyLmRvbSxlKX1mdW5jdGlvbiBsbCh0LGUpe1h2KHltLGZ1bmN0aW9uKG4pe24odCxlKX0pfWZ1bmN0aW9uIHVsKHQsZSl7dmFyIG49dC5zdG9yYWdlLGk9MDtuLnRyYXZlcnNlKGZ1bmN0aW9uKHQpe3QuaXNHcm91cHx8aSsrfSksaT5lLmdldChcImhvdmVyTGF5ZXJUaHJlc2hvbGRcIikmJiFiYy5ub2RlJiZuLnRyYXZlcnNlKGZ1bmN0aW9uKHQpe3QuaXNHcm91cHx8KHQudXNlSG92ZXJMYXllcj0hMCl9KX1mdW5jdGlvbiBobCh0LGUpe3ZhciBuPXQuZ2V0KFwiYmxlbmRNb2RlXCIpfHxudWxsO2UuZ3JvdXAudHJhdmVyc2UoZnVuY3Rpb24odCl7dC5pc0dyb3VwfHx0LnN0eWxlLmJsZW5kIT09biYmdC5zZXRTdHlsZShcImJsZW5kXCIsbiksdC5lYWNoUGVuZGluZ0Rpc3BsYXlhYmxlJiZ0LmVhY2hQZW5kaW5nRGlzcGxheWFibGUoZnVuY3Rpb24odCl7dC5zZXRTdHlsZShcImJsZW5kXCIsbil9KX0pfWZ1bmN0aW9uIGNsKHQsZSl7dmFyIG49dC5nZXQoXCJ6XCIpLGk9dC5nZXQoXCJ6bGV2ZWxcIik7ZS5ncm91cC50cmF2ZXJzZShmdW5jdGlvbih0KXtcImdyb3VwXCIhPT10LnR5cGUmJihudWxsIT1uJiYodC56PW4pLG51bGwhPWkmJih0LnpsZXZlbD1pKSl9KX1mdW5jdGlvbiBkbCh0KXt2YXIgZT10Ll9jb29yZFN5c01ncjtyZXR1cm4gbyhuZXcgRm8odCkse2dldENvb3JkaW5hdGVTeXN0ZW1zOnkoZS5nZXRDb29yZGluYXRlU3lzdGVtcyxlKSxnZXRDb21wb25lbnRCeUVsZW1lbnQ6ZnVuY3Rpb24oZSl7Zm9yKDtlOyl7dmFyIG49ZS5fX2VjQ29tcG9uZW50SW5mbztpZihudWxsIT1uKXJldHVybiB0Ll9tb2RlbC5nZXRDb21wb25lbnQobi5tYWluVHlwZSxuLmluZGV4KTtlPWUucGFyZW50fX19KX1mdW5jdGlvbiBmbCh0KXtmdW5jdGlvbiBlKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07aVthXT1lfX12YXIgbj0wLGk9MSxyPTIsYT1cIl9fY29ubmVjdFVwZGF0ZVN0YXR1c1wiO1h2KGdtLGZ1bmN0aW9uKG8scyl7dC5fbWVzc2FnZUNlbnRlci5vbihzLGZ1bmN0aW9uKG8pe2lmKE1tW3QuZ3JvdXBdJiZ0W2FdIT09bil7aWYobyYmby5lc2NhcGVDb25uZWN0KXJldHVybjt2YXIgcz10Lm1ha2VBY3Rpb25Gcm9tRXZlbnQobyksbD1bXTtYdihibSxmdW5jdGlvbihlKXtlIT09dCYmZS5ncm91cD09PXQuZ3JvdXAmJmwucHVzaChlKX0pLGUobCxuKSxYdihsLGZ1bmN0aW9uKHQpe3RbYV0hPT1pJiZ0LmRpc3BhdGNoQWN0aW9uKHMpfSksZShsLHIpfX0pfSl9ZnVuY3Rpb24gcGwodCxlLG4pe3ZhciBpPXlsKHQpO2lmKGkpcmV0dXJuIGk7dmFyIHI9bmV3IFlzKHQsZSxuKTtyZXR1cm4gci5pZD1cImVjX1wiK1NtKyssYm1bci5pZF09cixXaSh0LEltLHIuaWQpLGZsKHIpLHJ9ZnVuY3Rpb24gZ2wodCl7aWYoeCh0KSl7dmFyIGU9dDt0PW51bGwsWHYoZSxmdW5jdGlvbihlKXtudWxsIT1lLmdyb3VwJiYodD1lLmdyb3VwKX0pLHQ9dHx8XCJnX1wiK0NtKyssWHYoZSxmdW5jdGlvbihlKXtlLmdyb3VwPXR9KX1yZXR1cm4gTW1bdF09ITAsdH1mdW5jdGlvbiB2bCh0KXtNbVt0XT0hMX1mdW5jdGlvbiBtbCh0KXtcInN0cmluZ1wiPT10eXBlb2YgdD90PWJtW3RdOnQgaW5zdGFuY2VvZiBZc3x8KHQ9eWwodCkpLHQgaW5zdGFuY2VvZiBZcyYmIXQuaXNEaXNwb3NlZCgpJiZ0LmRpc3Bvc2UoKX1mdW5jdGlvbiB5bCh0KXtyZXR1cm4gYm1bamkodCxJbSldfWZ1bmN0aW9uIF9sKHQpe3JldHVybiBibVt0XX1mdW5jdGlvbiB4bCh0LGUpe3htW3RdPWV9ZnVuY3Rpb24gd2wodCl7bW0ucHVzaCh0KX1mdW5jdGlvbiBibCh0LGUpe0RsKHZtLHQsZSx0bSl9ZnVuY3Rpb24gTWwodCl7eW0ucHVzaCh0KX1mdW5jdGlvbiBTbCh0LGUsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKG49ZSxlPVwiXCIpO3ZhciBpPVp2KHQpP3QudHlwZTpbdCx0PXtldmVudDplfV1bMF07dC5ldmVudD0odC5ldmVudHx8aSkudG9Mb3dlckNhc2UoKSxlPXQuZXZlbnQsVXYoaG0udGVzdChpKSYmaG0udGVzdChlKSkscG1baV18fChwbVtpXT17YWN0aW9uOm4sYWN0aW9uSW5mbzp0fSksZ21bZV09aX1mdW5jdGlvbiBDbCh0LGUpe1ZvLnJlZ2lzdGVyKHQsZSl9ZnVuY3Rpb24gSWwodCl7dmFyIGU9Vm8uZ2V0KHQpO3JldHVybiBlP2UuZ2V0RGltZW5zaW9uc0luZm8/ZS5nZXREaW1lbnNpb25zSW5mbygpOmUuZGltZW5zaW9ucy5zbGljZSgpOnZvaWQgMH1mdW5jdGlvbiBUbCh0LGUpe0RsKF9tLHQsZSxubSxcImxheW91dFwiKX1mdW5jdGlvbiBrbCh0LGUpe0RsKF9tLHQsZSxybSxcInZpc3VhbFwiKX1mdW5jdGlvbiBEbCh0LGUsbixpLHIpeyhZdihlKXx8WnYoZSkpJiYobj1lLGU9aSk7dmFyIGE9UHMud3JhcFN0YWdlSGFuZGxlcihuLHIpO3JldHVybiBhLl9fcHJpbz1lLGEuX19yYXc9bix0LnB1c2goYSksYX1mdW5jdGlvbiBBbCh0LGUpe3dtW3RdPWV9ZnVuY3Rpb24gUGwodCl7cmV0dXJuIFJnLmV4dGVuZCh0KX1mdW5jdGlvbiBMbCh0KXtyZXR1cm4gYnYuZXh0ZW5kKHQpfWZ1bmN0aW9uIE9sKHQpe3JldHVybiB3di5leHRlbmQodCl9ZnVuY3Rpb24gUmwodCl7cmV0dXJuIENzLmV4dGVuZCh0KX1mdW5jdGlvbiBFbCh0KXtuKFwiY3JlYXRlQ2FudmFzXCIsdCl9ZnVuY3Rpb24gQmwodCxlLG4pe2UuZ2VvSnNvbiYmIWUuZmVhdHVyZXMmJihuPWUuc3BlY2lhbEFyZWFzLGU9ZS5nZW9Kc29uKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEpTT04mJkpTT04ucGFyc2U/SlNPTi5wYXJzZShlKTpuZXcgRnVuY3Rpb24oXCJyZXR1cm4gKFwiK2UrXCIpO1wiKSgpKSxUbVt0XT17Z2VvSnNvbjplLHNwZWNpYWxBcmVhczpufX1mdW5jdGlvbiB6bCh0KXtyZXR1cm4gVG1bdF19ZnVuY3Rpb24gTmwodCl7cmV0dXJuIHR9ZnVuY3Rpb24gRmwodCxlLG4saSxyKXt0aGlzLl9vbGQ9dCx0aGlzLl9uZXc9ZSx0aGlzLl9vbGRLZXlHZXR0ZXI9bnx8TmwsdGhpcy5fbmV3S2V5R2V0dGVyPWl8fE5sLHRoaXMuY29udGV4dD1yfWZ1bmN0aW9uIFZsKHQsZSxuLGkscil7Zm9yKHZhciBhPTA7YTx0Lmxlbmd0aDthKyspe3ZhciBvPVwiX2VjX1wiK3JbaV0odFthXSxhKSxzPWVbb107bnVsbD09cz8obi5wdXNoKG8pLGVbb109YSk6KHMubGVuZ3RofHwoZVtvXT1zPVtzXSkscy5wdXNoKGEpKX19ZnVuY3Rpb24gR2wodCl7dmFyIGU9e30sbj1lLmVuY29kZT17fSxpPU4oKSxyPVtdLGE9W107Zih0LmRpbWVuc2lvbnMsZnVuY3Rpb24oZSl7dmFyIG89dC5nZXREaW1lbnNpb25JbmZvKGUpLHM9by5jb29yZERpbTtpZihzKXt2YXIgbD1uW3NdO24uaGFzT3duUHJvcGVydHkocyl8fChsPW5bc109W10pLGxbby5jb29yZERpbUluZGV4XT1lLG8uaXNFeHRyYUNvb3JkfHwoaS5zZXQocywxKSxXbChvLnR5cGUpJiYoclswXT1lKSksby5kZWZhdWx0VG9vbHRpcCYmYS5wdXNoKGUpfUFtLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgaT1uW2VdO24uaGFzT3duUHJvcGVydHkoZSl8fChpPW5bZV09W10pO3ZhciByPW8ub3RoZXJEaW1zW2VdO251bGwhPXImJnIhPT0hMSYmKGlbcl09by5uYW1lKX0pfSk7dmFyIG89W10scz17fTtpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgaT1uW2VdO3NbZV09aVswXSxvPW8uY29uY2F0KGkpfSksZS5kYXRhRGltc09uQ29vcmQ9byxlLmVuY29kZUZpcnN0RGltTm90RXh0cmE9czt2YXIgbD1uLmxhYmVsO2wmJmwubGVuZ3RoJiYocj1sLnNsaWNlKCkpO3ZhciB1PW4udG9vbHRpcDtyZXR1cm4gdSYmdS5sZW5ndGg/YT11LnNsaWNlKCk6YS5sZW5ndGh8fChhPXIuc2xpY2UoKSksbi5kZWZhdWx0ZWRMYWJlbD1yLG4uZGVmYXVsdGVkVG9vbHRpcD1hLGV9ZnVuY3Rpb24gSGwodCl7cmV0dXJuXCJjYXRlZ29yeVwiPT09dD9cIm9yZGluYWxcIjpcInRpbWVcIj09PXQ/XCJ0aW1lXCI6XCJmbG9hdFwifWZ1bmN0aW9uIFdsKHQpe3JldHVybiEoXCJvcmRpbmFsXCI9PT10fHxcInRpbWVcIj09PXQpfWZ1bmN0aW9uIGpsKHQpe3JldHVybiB0Ll9yYXdDb3VudD42NTUzNT9FbTpCbX1mdW5jdGlvbiBxbCh0KXt2YXIgZT10LmNvbnN0cnVjdG9yO3JldHVybiBlPT09QXJyYXk/dC5zbGljZSgpOm5ldyBlKHQpfWZ1bmN0aW9uIFVsKHQsZSl7Zih6bS5jb25jYXQoZS5fX3dyYXBwZWRNZXRob2RzfHxbXSksZnVuY3Rpb24obil7ZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9KSx0Ll9fd3JhcHBlZE1ldGhvZHM9ZS5fX3dyYXBwZWRNZXRob2RzLGYoTm0sZnVuY3Rpb24obil7dFtuXT1pKGVbbl0pfSksdC5fY2FsY3VsYXRpb25JbmZvPW8oZS5fY2FsY3VsYXRpb25JbmZvKX1mdW5jdGlvbiBYbCh0KXt2YXIgZT10Ll9pbnZlcnRlZEluZGljZXNNYXA7ZihlLGZ1bmN0aW9uKG4saSl7dmFyIHI9dC5fZGltZW5zaW9uSW5mb3NbaV0sYT1yLm9yZGluYWxNZXRhO2lmKGEpe249ZVtpXT1uZXcgRW0oYS5jYXRlZ29yaWVzLmxlbmd0aCk7Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspbltvXT0wLzA7Zm9yKHZhciBvPTA7bzx0Ll9jb3VudDtvKyspblt0LmdldChpLG8pXT1vfX0pfWZ1bmN0aW9uIFlsKHQsZSxuKXt2YXIgaTtpZihudWxsIT1lKXt2YXIgcj10Ll9jaHVua1NpemUsYT1NYXRoLmZsb29yKG4vciksbz1uJXIscz10LmRpbWVuc2lvbnNbZV0sbD10Ll9zdG9yYWdlW3NdW2FdO2lmKGwpe2k9bFtvXTt2YXIgdT10Ll9kaW1lbnNpb25JbmZvc1tzXS5vcmRpbmFsTWV0YTt1JiZ1LmNhdGVnb3JpZXMubGVuZ3RoJiYoaT11LmNhdGVnb3JpZXNbaV0pfX1yZXR1cm4gaX1mdW5jdGlvbiBabCh0KXtyZXR1cm4gdH1mdW5jdGlvbiAkbCh0KXtyZXR1cm4gdDx0aGlzLl9jb3VudCYmdD49MD90aGlzLl9pbmRpY2VzW3RdOi0xfWZ1bmN0aW9uIEtsKHQsZSl7dmFyIG49dC5faWRMaXN0W2VdO3JldHVybiBudWxsPT1uJiYobj1ZbCh0LHQuX2lkRGltSWR4LGUpKSxudWxsPT1uJiYobj1PbStlKSxufWZ1bmN0aW9uIFFsKHQpe3JldHVybiB4KHQpfHwodD1bdF0pLHR9ZnVuY3Rpb24gSmwodCxlKXt2YXIgbj10LmRpbWVuc2lvbnMsaT1uZXcgRm0ocChuLHQuZ2V0RGltZW5zaW9uSW5mbyx0KSx0Lmhvc3RNb2RlbCk7VWwoaSx0KTtmb3IodmFyIHI9aS5fc3RvcmFnZT17fSxhPXQuX3N0b3JhZ2Usbz0wO288bi5sZW5ndGg7bysrKXt2YXIgcz1uW29dO2Fbc10mJih1KGUscyk+PTA/KHJbc109dHUoYVtzXSksaS5fcmF3RXh0ZW50W3NdPWV1KCksaS5fZXh0ZW50W3NdPW51bGwpOnJbc109YVtzXSl9cmV0dXJuIGl9ZnVuY3Rpb24gdHUodCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0Lmxlbmd0aCksbj0wO248dC5sZW5ndGg7bisrKWVbbl09cWwodFtuXSk7cmV0dXJuIGV9ZnVuY3Rpb24gZXUoKXtyZXR1cm5bMS8wLC0xLzBdfWZ1bmN0aW9uIG51KHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuKXtudWxsIT1BbS5nZXQoZSk/dC5vdGhlckRpbXNbZV09bjoodC5jb29yZERpbT1lLHQuY29vcmREaW1JbmRleD1uLGguc2V0KGUsITApKX1fby5pc0luc3RhbmNlKGUpfHwoZT1fby5zZXJpZXNEYXRhVG9Tb3VyY2UoZSkpLG49bnx8e30sdD0odHx8W10pLnNsaWNlKCk7Zm9yKHZhciBhPShuLmRpbXNEZWZ8fFtdKS5zbGljZSgpLGw9TihuLmVuY29kZURlZiksdT1OKCksaD1OKCksYz1bXSxkPWl1KGUsdCxhLG4uZGltQ291bnQpLHA9MDtkPnA7cCsrKXt2YXIgZz1hW3BdPW8oe30sTShhW3BdKT9hW3BdOntuYW1lOmFbcF19KSx2PWcubmFtZSxtPWNbcF09e290aGVyRGltczp7fX07bnVsbCE9diYmbnVsbD09dS5nZXQodikmJihtLm5hbWU9bS5kaXNwbGF5TmFtZT12LHUuc2V0KHYscCkpLG51bGwhPWcudHlwZSYmKG0udHlwZT1nLnR5cGUpLG51bGwhPWcuZGlzcGxheU5hbWUmJihtLmRpc3BsYXlOYW1lPWcuZGlzcGxheU5hbWUpfWwuZWFjaChmdW5jdGlvbih0LGUpe3Q9UGkodCkuc2xpY2UoKTt2YXIgbj1sLnNldChlLFtdKTtmKHQsZnVuY3Rpb24odCxpKXtiKHQpJiYodD11LmdldCh0KSksbnVsbCE9dCYmZD50JiYobltpXT10LHIoY1t0XSxlLGkpKX0pfSk7dmFyIHk9MDtmKHQsZnVuY3Rpb24odCl7dmFyIGUsdCxuLGE7aWYoYih0KSllPXQsdD17fTtlbHNle2U9dC5uYW1lO3ZhciBvPXQub3JkaW5hbE1ldGE7dC5vcmRpbmFsTWV0YT1udWxsLHQ9aSh0KSx0Lm9yZGluYWxNZXRhPW8sbj10LmRpbXNEZWYsYT10Lm90aGVyRGltcyx0Lm5hbWU9dC5jb29yZERpbT10LmNvb3JkRGltSW5kZXg9dC5kaW1zRGVmPXQub3RoZXJEaW1zPW51bGx9dmFyIHU9UGkobC5nZXQoZSkpO2lmKCF1Lmxlbmd0aClmb3IodmFyIGg9MDtoPChuJiZuLmxlbmd0aHx8MSk7aCsrKXtmb3IoO3k8Yy5sZW5ndGgmJm51bGwhPWNbeV0uY29vcmREaW07KXkrKzt5PGMubGVuZ3RoJiZ1LnB1c2goeSsrKX1mKHUsZnVuY3Rpb24oaSxvKXt2YXIgbD1jW2ldO2lmKHIocyhsLHQpLGUsbyksbnVsbD09bC5uYW1lJiZuKXt2YXIgdT1uW29dOyFNKHUpJiYodT17bmFtZTp1fSksbC5uYW1lPWwuZGlzcGxheU5hbWU9dS5uYW1lLGwuZGVmYXVsdFRvb2x0aXA9dS5kZWZhdWx0VG9vbHRpcH1hJiZzKGwub3RoZXJEaW1zLGEpfSl9KTt2YXIgXz1uLmdlbmVyYXRlQ29vcmQseD1uLmdlbmVyYXRlQ29vcmRDb3VudCx3PW51bGwhPXg7eD1fP3h8fDE6MDtmb3IodmFyIFM9X3x8XCJ2YWx1ZVwiLEM9MDtkPkM7QysrKXt2YXIgbT1jW0NdPWNbQ118fHt9LEk9bS5jb29yZERpbTtudWxsPT1JJiYobS5jb29yZERpbT1ydShTLGgsdyksbS5jb29yZERpbUluZGV4PTAsKCFffHwwPj14KSYmKG0uaXNFeHRyYUNvb3JkPSEwKSx4LS0pLG51bGw9PW0ubmFtZSYmKG0ubmFtZT1ydShtLmNvb3JkRGltLHUpKSxudWxsPT1tLnR5cGUmJkFvKGUsQyxtLm5hbWUpJiYobS50eXBlPVwib3JkaW5hbFwiKX1yZXR1cm4gY31mdW5jdGlvbiBpdSh0LGUsbixpKXt2YXIgcj1NYXRoLm1heCh0LmRpbWVuc2lvbnNEZXRlY3RDb3VudHx8MSxlLmxlbmd0aCxuLmxlbmd0aCxpfHwwKTtyZXR1cm4gZihlLGZ1bmN0aW9uKHQpe3ZhciBlPXQuZGltc0RlZjtlJiYocj1NYXRoLm1heChyLGUubGVuZ3RoKSl9KSxyfWZ1bmN0aW9uIHJ1KHQsZSxuKXtpZihufHxudWxsIT1lLmdldCh0KSl7Zm9yKHZhciBpPTA7bnVsbCE9ZS5nZXQodCtpKTspaSsrO3QrPWl9cmV0dXJuIGUuc2V0KHQsITApLHR9ZnVuY3Rpb24gYXUodCxlLG4pe249bnx8e307dmFyIGkscixhLG8scz1uLmJ5SW5kZXgsbD1uLnN0YWNrZWRDb29yZERpbWVuc2lvbix1PSEoIXR8fCF0LmdldChcInN0YWNrXCIpKTtpZihmKGUsZnVuY3Rpb24odCxuKXtiKHQpJiYoZVtuXT10PXtuYW1lOnR9KSx1JiYhdC5pc0V4dHJhQ29vcmQmJihzfHxpfHwhdC5vcmRpbmFsTWV0YXx8KGk9dCkscnx8XCJvcmRpbmFsXCI9PT10LnR5cGV8fFwidGltZVwiPT09dC50eXBlfHxsJiZsIT09dC5jb29yZERpbXx8KHI9dCkpfSksIXJ8fHN8fGl8fChzPSEwKSxyKXthPVwiX19cXHgwMGVjc3RhY2tyZXN1bHRcIixvPVwiX19cXHgwMGVjc3RhY2tlZG92ZXJcIixpJiYoaS5jcmVhdGVJbnZlcnRlZEluZGljZXM9ITApO3ZhciBoPXIuY29vcmREaW0sYz1yLnR5cGUsZD0wO2YoZSxmdW5jdGlvbih0KXt0LmNvb3JkRGltPT09aCYmZCsrfSksZS5wdXNoKHtuYW1lOmEsY29vcmREaW06aCxjb29yZERpbUluZGV4OmQsdHlwZTpjLGlzRXh0cmFDb29yZDohMCxpc0NhbGN1bGF0aW9uQ29vcmQ6ITB9KSxkKyssZS5wdXNoKHtuYW1lOm8sY29vcmREaW06byxjb29yZERpbUluZGV4OmQsdHlwZTpjLGlzRXh0cmFDb29yZDohMCxpc0NhbGN1bGF0aW9uQ29vcmQ6ITB9KX1yZXR1cm57c3RhY2tlZERpbWVuc2lvbjpyJiZyLm5hbWUsc3RhY2tlZEJ5RGltZW5zaW9uOmkmJmkubmFtZSxpc1N0YWNrZWRCeUluZGV4OnMsc3RhY2tlZE92ZXJEaW1lbnNpb246byxzdGFja1Jlc3VsdERpbWVuc2lvbjphfX1mdW5jdGlvbiBvdSh0LGUpe3JldHVybiEhZSYmZT09PXQuZ2V0Q2FsY3VsYXRpb25JbmZvKFwic3RhY2tlZERpbWVuc2lvblwiKX1mdW5jdGlvbiBzdSh0LGUpe3JldHVybiBvdSh0LGUpP3QuZ2V0Q2FsY3VsYXRpb25JbmZvKFwic3RhY2tSZXN1bHREaW1lbnNpb25cIik6ZX1mdW5jdGlvbiBsdSh0LGUsbil7bj1ufHx7fSxfby5pc0luc3RhbmNlKHQpfHwodD1fby5zZXJpZXNEYXRhVG9Tb3VyY2UodCkpO3ZhciBpLHI9ZS5nZXQoXCJjb29yZGluYXRlU3lzdGVtXCIpLGE9Vm8uZ2V0KHIpLG89bW8oZSk7byYmKGk9cChvLmNvb3JkU3lzRGltcyxmdW5jdGlvbih0KXt2YXIgZT17bmFtZTp0fSxuPW8uYXhpc01hcC5nZXQodCk7aWYobil7dmFyIGk9bi5nZXQoXCJ0eXBlXCIpO2UudHlwZT1IbChpKX1yZXR1cm4gZX0pKSxpfHwoaT1hJiYoYS5nZXREaW1lbnNpb25zSW5mbz9hLmdldERpbWVuc2lvbnNJbmZvKCk6YS5kaW1lbnNpb25zLnNsaWNlKCkpfHxbXCJ4XCIsXCJ5XCJdKTt2YXIgcyxsLHU9SG0odCx7Y29vcmREaW1lbnNpb25zOmksZ2VuZXJhdGVDb29yZDpuLmdlbmVyYXRlQ29vcmR9KTtvJiZmKHUsZnVuY3Rpb24odCxlKXt2YXIgbj10LmNvb3JkRGltLGk9by5jYXRlZ29yeUF4aXNNYXAuZ2V0KG4pO2kmJihudWxsPT1zJiYocz1lKSx0Lm9yZGluYWxNZXRhPWkuZ2V0T3JkaW5hbE1ldGEoKSksbnVsbCE9dC5vdGhlckRpbXMuaXRlbU5hbWUmJihsPSEwKX0pLGx8fG51bGw9PXN8fCh1W3NdLm90aGVyRGltcy5pdGVtTmFtZT0wKTt2YXIgaD1hdShlLHUpLGM9bmV3IEZtKHUsZSk7Yy5zZXRDYWxjdWxhdGlvbkluZm8oaCk7dmFyIGQ9bnVsbCE9cyYmdXUodCk/ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIGk9PT1zP246dGhpcy5kZWZhdWx0RGltVmFsdWVHZXR0ZXIodCxlLG4saSl9Om51bGw7cmV0dXJuIGMuaGFzSXRlbU9wdGlvbj0hMSxjLmluaXREYXRhKHQsbnVsbCxkKSxjfWZ1bmN0aW9uIHV1KHQpe2lmKHQuc291cmNlRm9ybWF0PT09Vmcpe3ZhciBlPWh1KHQuZGF0YXx8W10pO3JldHVybiBudWxsIT1lJiYheChPaShlKSl9fWZ1bmN0aW9uIGh1KHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGgmJm51bGw9PXRbZV07KWUrKztyZXR1cm4gdFtlXX1mdW5jdGlvbiBjdSh0KXt0aGlzLl9zZXR0aW5nPXR8fHt9LHRoaXMuX2V4dGVudD1bMS8wLC0xLzBdLHRoaXMuX2ludGVydmFsPTAsdGhpcy5pbml0JiZ0aGlzLmluaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIGR1KHQpe3RoaXMuY2F0ZWdvcmllcz10LmNhdGVnb3JpZXN8fFtdLHRoaXMuX25lZWRDb2xsZWN0PXQubmVlZENvbGxlY3QsdGhpcy5fZGVkdXBsaWNhdGlvbj10LmRlZHVwbGljYXRpb24sdGhpcy5fbWFwfWZ1bmN0aW9uIGZ1KHQpe3JldHVybiB0Ll9tYXB8fCh0Ll9tYXA9Tih0LmNhdGVnb3JpZXMpKX1mdW5jdGlvbiBwdSh0KXtyZXR1cm4gTSh0KSYmbnVsbCE9dC52YWx1ZT90LnZhbHVlOnQrXCJcIn1mdW5jdGlvbiBndSh0LGUsbixpKXt2YXIgcj17fSxhPXRbMV0tdFswXSxvPXIuaW50ZXJ2YWw9JGEoYS9lLCEwKTtudWxsIT1uJiZuPm8mJihvPXIuaW50ZXJ2YWw9biksbnVsbCE9aSYmbz5pJiYobz1yLmludGVydmFsPWkpO3ZhciBzPXIuaW50ZXJ2YWxQcmVjaXNpb249dnUobyksbD1yLm5pY2VUaWNrRXh0ZW50PVtVbShNYXRoLmNlaWwodFswXS9vKSpvLHMpLFVtKE1hdGguZmxvb3IodFsxXS9vKSpvLHMpXTtyZXR1cm4geXUobCx0KSxyfWZ1bmN0aW9uIHZ1KHQpe3JldHVybiBIYSh0KSsyfWZ1bmN0aW9uIG11KHQsZSxuKXt0W2VdPU1hdGgubWF4KE1hdGgubWluKHRbZV0sblsxXSksblswXSl9ZnVuY3Rpb24geXUodCxlKXshaXNGaW5pdGUodFswXSkmJih0WzBdPWVbMF0pLCFpc0Zpbml0ZSh0WzFdKSYmKHRbMV09ZVsxXSksbXUodCwwLGUpLG11KHQsMSxlKSx0WzBdPnRbMV0mJih0WzBdPXRbMV0pfWZ1bmN0aW9uIF91KHQsZSxuLGkpe3ZhciByPVtdO2lmKCF0KXJldHVybiByO3ZhciBhPTFlNDtlWzBdPG5bMF0mJnIucHVzaChlWzBdKTtmb3IodmFyIG89blswXTtvPD1uWzFdJiYoci5wdXNoKG8pLG89VW0obyt0LGkpLG8hPT1yW3IubGVuZ3RoLTFdKTspaWYoci5sZW5ndGg+YSlyZXR1cm5bXTtyZXR1cm4gZVsxXT4oci5sZW5ndGg/cltyLmxlbmd0aC0xXTpuWzFdKSYmci5wdXNoKGVbMV0pLHJ9ZnVuY3Rpb24geHUodCl7cmV0dXJuIHQuZ2V0KFwic3RhY2tcIil8fFptK3Quc2VyaWVzSW5kZXh9ZnVuY3Rpb24gd3UodCl7cmV0dXJuIHQuZGltK3QuaW5kZXh9ZnVuY3Rpb24gYnUodCxlKXt2YXIgbj1bXTtyZXR1cm4gZS5lYWNoU2VyaWVzQnlUeXBlKHQsZnVuY3Rpb24odCl7SXUodCkmJiFUdSh0KSYmbi5wdXNoKHQpfSksbn1mdW5jdGlvbiBNdSh0KXt2YXIgZT1bXTtyZXR1cm4gZih0LGZ1bmN0aW9uKHQpe3ZhciBuPXQuZ2V0RGF0YSgpLGk9dC5jb29yZGluYXRlU3lzdGVtLHI9aS5nZXRCYXNlQXhpcygpLGE9ci5nZXRFeHRlbnQoKSxvPVwiY2F0ZWdvcnlcIj09PXIudHlwZT9yLmdldEJhbmRXaWR0aCgpOk1hdGguYWJzKGFbMV0tYVswXSkvbi5jb3VudCgpLHM9TmEodC5nZXQoXCJiYXJXaWR0aFwiKSxvKSxsPU5hKHQuZ2V0KFwiYmFyTWF4V2lkdGhcIiksbyksdT10LmdldChcImJhckdhcFwiKSxoPXQuZ2V0KFwiYmFyQ2F0ZWdvcnlHYXBcIik7ZS5wdXNoKHtiYW5kV2lkdGg6byxiYXJXaWR0aDpzLGJhck1heFdpZHRoOmwsYmFyR2FwOnUsYmFyQ2F0ZWdvcnlHYXA6aCxheGlzS2V5Ond1KHIpLHN0YWNrSWQ6eHUodCl9KX0pLFN1KGUpfWZ1bmN0aW9uIFN1KHQpe3ZhciBlPXt9O2YodCxmdW5jdGlvbih0KXt2YXIgbj10LmF4aXNLZXksaT10LmJhbmRXaWR0aCxyPWVbbl18fHtiYW5kV2lkdGg6aSxyZW1haW5lZFdpZHRoOmksYXV0b1dpZHRoQ291bnQ6MCxjYXRlZ29yeUdhcDpcIjIwJVwiLGdhcDpcIjMwJVwiLHN0YWNrczp7fX0sYT1yLnN0YWNrcztlW25dPXI7dmFyIG89dC5zdGFja0lkO2Fbb118fHIuYXV0b1dpZHRoQ291bnQrKyxhW29dPWFbb118fHt3aWR0aDowLG1heFdpZHRoOjB9O3ZhciBzPXQuYmFyV2lkdGg7cyYmIWFbb10ud2lkdGgmJihhW29dLndpZHRoPXMscz1NYXRoLm1pbihyLnJlbWFpbmVkV2lkdGgscyksci5yZW1haW5lZFdpZHRoLT1zKTt2YXIgbD10LmJhck1heFdpZHRoO2wmJihhW29dLm1heFdpZHRoPWwpO3ZhciB1PXQuYmFyR2FwO251bGwhPXUmJihyLmdhcD11KTt2YXIgaD10LmJhckNhdGVnb3J5R2FwO251bGwhPWgmJihyLmNhdGVnb3J5R2FwPWgpfSk7dmFyIG49e307cmV0dXJuIGYoZSxmdW5jdGlvbih0LGUpe25bZV09e307dmFyIGk9dC5zdGFja3Mscj10LmJhbmRXaWR0aCxhPU5hKHQuY2F0ZWdvcnlHYXAsciksbz1OYSh0LmdhcCwxKSxzPXQucmVtYWluZWRXaWR0aCxsPXQuYXV0b1dpZHRoQ291bnQsdT0ocy1hKS8obCsobC0xKSpvKTt1PU1hdGgubWF4KHUsMCksZihpLGZ1bmN0aW9uKHQpe3ZhciBlPXQubWF4V2lkdGg7ZSYmdT5lJiYoZT1NYXRoLm1pbihlLHMpLHQud2lkdGgmJihlPU1hdGgubWluKGUsdC53aWR0aCkpLHMtPWUsdC53aWR0aD1lLGwtLSl9KSx1PShzLWEpLyhsKyhsLTEpKm8pLHU9TWF0aC5tYXgodSwwKTt2YXIgaCxjPTA7ZihpLGZ1bmN0aW9uKHQpe3Qud2lkdGh8fCh0LndpZHRoPXUpLGg9dCxjKz10LndpZHRoKigxK28pfSksaCYmKGMtPWgud2lkdGgqbyk7dmFyIGQ9LWMvMjtmKGksZnVuY3Rpb24odCxpKXtuW2VdW2ldPW5bZV1baV18fHtvZmZzZXQ6ZCx3aWR0aDp0LndpZHRofSxkKz10LndpZHRoKigxK28pfSl9KSxufWZ1bmN0aW9uIEN1KHQsZSxuKXtpZih0JiZlKXt2YXIgaT10W3d1KGUpXTtyZXR1cm4gbnVsbCE9aSYmbnVsbCE9biYmKGk9aVt4dShuKV0pLGl9fWZ1bmN0aW9uIEl1KHQpe3JldHVybiB0LmNvb3JkaW5hdGVTeXN0ZW0mJlwiY2FydGVzaWFuMmRcIj09PXQuY29vcmRpbmF0ZVN5c3RlbS50eXBlfWZ1bmN0aW9uIFR1KHQpe3JldHVybiB0LnBpcGVsaW5lQ29udGV4dCYmdC5waXBlbGluZUNvbnRleHQubGFyZ2V9ZnVuY3Rpb24ga3UodCxlLG4pe3JldHVybiB1KHQuZ2V0QXhlc09uWmVyb09mKCksZSk+PTB8fG4/ZS50b0dsb2JhbENvb3JkKGUuZGF0YVRvQ29vcmQoMCkpOmUuZ2V0R2xvYmFsRXh0ZW50KClbMF19ZnVuY3Rpb24gRHUodCxlKXtyZXR1cm4gY3kodCxoeShlKSl9ZnVuY3Rpb24gQXUodCxlKXt2YXIgbixpLHIsYT10LnR5cGUsbz1lLmdldE1pbigpLHM9ZS5nZXRNYXgoKSxsPW51bGwhPW8sdT1udWxsIT1zLGg9dC5nZXRFeHRlbnQoKTtcblwib3JkaW5hbFwiPT09YT9uPWUuZ2V0Q2F0ZWdvcmllcygpLmxlbmd0aDooaT1lLmdldChcImJvdW5kYXJ5R2FwXCIpLHgoaSl8fChpPVtpfHwwLGl8fDBdKSxcImJvb2xlYW5cIj09dHlwZW9mIGlbMF0mJihpPVswLDBdKSxpWzBdPU5hKGlbMF0sMSksaVsxXT1OYShpWzFdLDEpLHI9aFsxXS1oWzBdfHxNYXRoLmFicyhoWzBdKSksbnVsbD09byYmKG89XCJvcmRpbmFsXCI9PT1hP24/MDowLzA6aFswXS1pWzBdKnIpLG51bGw9PXMmJihzPVwib3JkaW5hbFwiPT09YT9uP24tMTowLzA6aFsxXStpWzFdKnIpLFwiZGF0YU1pblwiPT09bz9vPWhbMF06XCJmdW5jdGlvblwiPT10eXBlb2YgbyYmKG89byh7bWluOmhbMF0sbWF4OmhbMV19KSksXCJkYXRhTWF4XCI9PT1zP3M9aFsxXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBzJiYocz1zKHttaW46aFswXSxtYXg6aFsxXX0pKSwobnVsbD09b3x8IWlzRmluaXRlKG8pKSYmKG89MC8wKSwobnVsbD09c3x8IWlzRmluaXRlKHMpKSYmKHM9MC8wKSx0LnNldEJsYW5rKFQobyl8fFQocyl8fFwib3JkaW5hbFwiPT09YSYmIXQuZ2V0T3JkaW5hbE1ldGEoKS5jYXRlZ29yaWVzLmxlbmd0aCksZS5nZXROZWVkQ3Jvc3NaZXJvKCkmJihvPjAmJnM+MCYmIWwmJihvPTApLDA+byYmMD5zJiYhdSYmKHM9MCkpO3ZhciBjPWUuZWNNb2RlbDtpZihjJiZcInRpbWVcIj09PWEpe3ZhciBkLHA9YnUoXCJiYXJcIixjKTtpZihmKHAsZnVuY3Rpb24odCl7ZHw9dC5nZXRCYXNlQXhpcygpPT09ZS5heGlzfSksZCl7dmFyIGc9TXUocCksdj1QdShvLHMsZSxnKTtvPXYubWluLHM9di5tYXh9fXJldHVybltvLHNdfWZ1bmN0aW9uIFB1KHQsZSxuLGkpe3ZhciByPW4uYXhpcy5nZXRFeHRlbnQoKSxhPXJbMV0tclswXSxvPUN1KGksbi5heGlzKTtpZih2b2lkIDA9PT1vKXJldHVybnttaW46dCxtYXg6ZX07dmFyIHM9MS8wO2YobyxmdW5jdGlvbih0KXtzPU1hdGgubWluKHQub2Zmc2V0LHMpfSk7dmFyIGw9LTEvMDtmKG8sZnVuY3Rpb24odCl7bD1NYXRoLm1heCh0Lm9mZnNldCt0LndpZHRoLGwpfSkscz1NYXRoLmFicyhzKSxsPU1hdGguYWJzKGwpO3ZhciB1PXMrbCxoPWUtdCxjPTEtKHMrbCkvYSxkPWgvYy1oO3JldHVybiBlKz1kKihsL3UpLHQtPWQqKHMvdSkse21pbjp0LG1heDplfX1mdW5jdGlvbiBMdSh0LGUpe3ZhciBuPUF1KHQsZSksaT1udWxsIT1lLmdldE1pbigpLHI9bnVsbCE9ZS5nZXRNYXgoKSxhPWUuZ2V0KFwic3BsaXROdW1iZXJcIik7XCJsb2dcIj09PXQudHlwZSYmKHQuYmFzZT1lLmdldChcImxvZ0Jhc2VcIikpO3ZhciBvPXQudHlwZTt0LnNldEV4dGVudChuWzBdLG5bMV0pLHQubmljZUV4dGVudCh7c3BsaXROdW1iZXI6YSxmaXhNaW46aSxmaXhNYXg6cixtaW5JbnRlcnZhbDpcImludGVydmFsXCI9PT1vfHxcInRpbWVcIj09PW8/ZS5nZXQoXCJtaW5JbnRlcnZhbFwiKTpudWxsLG1heEludGVydmFsOlwiaW50ZXJ2YWxcIj09PW98fFwidGltZVwiPT09bz9lLmdldChcIm1heEludGVydmFsXCIpOm51bGx9KTt2YXIgcz1lLmdldChcImludGVydmFsXCIpO251bGwhPXMmJnQuc2V0SW50ZXJ2YWwmJnQuc2V0SW50ZXJ2YWwocyl9ZnVuY3Rpb24gT3UodCxlKXtpZihlPWV8fHQuZ2V0KFwidHlwZVwiKSlzd2l0Y2goZSl7Y2FzZVwiY2F0ZWdvcnlcIjpyZXR1cm4gbmV3IHFtKHQuZ2V0T3JkaW5hbE1ldGE/dC5nZXRPcmRpbmFsTWV0YSgpOnQuZ2V0Q2F0ZWdvcmllcygpLFsxLzAsLTEvMF0pO2Nhc2VcInZhbHVlXCI6cmV0dXJuIG5ldyBZbTtkZWZhdWx0OnJldHVybihjdS5nZXRDbGFzcyhlKXx8WW0pLmNyZWF0ZSh0KX19ZnVuY3Rpb24gUnUodCl7dmFyIGU9dC5zY2FsZS5nZXRFeHRlbnQoKSxuPWVbMF0saT1lWzFdO3JldHVybiEobj4wJiZpPjB8fDA+biYmMD5pKX1mdW5jdGlvbiBFdSh0KXt2YXIgZT10LmdldExhYmVsTW9kZWwoKS5nZXQoXCJmb3JtYXR0ZXJcIiksbj1cImNhdGVnb3J5XCI9PT10LnR5cGU/dC5zY2FsZS5nZXRFeHRlbnQoKVswXTpudWxsO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0LnJlcGxhY2UoXCJ7dmFsdWV9XCIsbnVsbCE9ZT9lOlwiXCIpfX0oZSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZT9mdW5jdGlvbihpLHIpe3JldHVybiBudWxsIT1uJiYocj1pLW4pLGUoQnUodCxpKSxyKX06ZnVuY3Rpb24oZSl7cmV0dXJuIHQuc2NhbGUuZ2V0TGFiZWwoZSl9fWZ1bmN0aW9uIEJ1KHQsZSl7cmV0dXJuXCJjYXRlZ29yeVwiPT09dC50eXBlP3Quc2NhbGUuZ2V0TGFiZWwoZSk6ZX1mdW5jdGlvbiB6dSh0KXt2YXIgZT10Lm1vZGVsLG49dC5zY2FsZTtpZihlLmdldChcImF4aXNMYWJlbC5zaG93XCIpJiYhbi5pc0JsYW5rKCkpe3ZhciBpLHIsYT1cImNhdGVnb3J5XCI9PT10LnR5cGUsbz1uLmdldEV4dGVudCgpO2E/cj1uLmNvdW50KCk6KGk9bi5nZXRUaWNrcygpLHI9aS5sZW5ndGgpO3ZhciBzLGw9dC5nZXRMYWJlbE1vZGVsKCksdT1FdSh0KSxoPTE7cj40MCYmKGg9TWF0aC5jZWlsKHIvNDApKTtmb3IodmFyIGM9MDtyPmM7Yys9aCl7dmFyIGQ9aT9pW2NdOm9bMF0rYyxmPXUoZCkscD1sLmdldFRleHRSZWN0KGYpLGc9TnUocCxsLmdldChcInJvdGF0ZVwiKXx8MCk7cz9zLnVuaW9uKGcpOnM9Z31yZXR1cm4gc319ZnVuY3Rpb24gTnUodCxlKXt2YXIgbj1lKk1hdGguUEkvMTgwLGk9dC5wbGFpbigpLHI9aS53aWR0aCxhPWkuaGVpZ2h0LG89cipNYXRoLmNvcyhuKSthKk1hdGguc2luKG4pLHM9cipNYXRoLnNpbihuKSthKk1hdGguY29zKG4pLGw9bmV3IHJuKGkueCxpLnksbyxzKTtyZXR1cm4gbH1mdW5jdGlvbiBGdSh0LGUpe2lmKFwiaW1hZ2VcIiE9PXRoaXMudHlwZSl7dmFyIG49dGhpcy5zdHlsZSxpPXRoaXMuc2hhcGU7aSYmXCJsaW5lXCI9PT1pLnN5bWJvbFR5cGU/bi5zdHJva2U9dDp0aGlzLl9faXNFbXB0eUJydXNoPyhuLnN0cm9rZT10LG4uZmlsbD1lfHxcIiNmZmZcIik6KG4uZmlsbCYmKG4uZmlsbD10KSxuLnN0cm9rZSYmKG4uc3Ryb2tlPXQpKSx0aGlzLmRpcnR5KCExKX19ZnVuY3Rpb24gVnUodCxlLG4saSxyLGEsbyl7dmFyIHM9MD09PXQuaW5kZXhPZihcImVtcHR5XCIpO3MmJih0PXQuc3Vic3RyKDUsMSkudG9Mb3dlckNhc2UoKSt0LnN1YnN0cig2KSk7dmFyIGw7cmV0dXJuIGw9MD09PXQuaW5kZXhPZihcImltYWdlOi8vXCIpP3FyKHQuc2xpY2UoOCksbmV3IHJuKGUsbixpLHIpLG8/XCJjZW50ZXJcIjpcImNvdmVyXCIpOjA9PT10LmluZGV4T2YoXCJwYXRoOi8vXCIpP2pyKHQuc2xpY2UoNykse30sbmV3IHJuKGUsbixpLHIpLG8/XCJjZW50ZXJcIjpcImNvdmVyXCIpOm5ldyBDeSh7c2hhcGU6e3N5bWJvbFR5cGU6dCx4OmUseTpuLHdpZHRoOmksaGVpZ2h0OnJ9fSksbC5fX2lzRW1wdHlCcnVzaD1zLGwuc2V0Q29sb3I9RnUsbC5zZXRDb2xvcihhKSxsfWZ1bmN0aW9uIEd1KHQpe3JldHVybiBsdSh0LmdldFNvdXJjZSgpLHQpfWZ1bmN0aW9uIEh1KHQsZSl7dmFyIG49ZTtBYS5pc0luc3RhbmNlKGUpfHwobj1uZXcgQWEoZSksYyhuLG15KSk7dmFyIGk9T3Uobik7cmV0dXJuIGkuc2V0RXh0ZW50KHRbMF0sdFsxXSksTHUoaSxuKSxpfWZ1bmN0aW9uIFd1KHQpe2ModCxteSl9ZnVuY3Rpb24ganUodCxlKXtyZXR1cm4gTWF0aC5hYnModC1lKTxreX1mdW5jdGlvbiBxdSh0LGUsbil7dmFyIGk9MCxyPXRbMF07aWYoIXIpcmV0dXJuITE7Zm9yKHZhciBhPTE7YTx0Lmxlbmd0aDthKyspe3ZhciBvPXRbYV07aSs9YnIoclswXSxyWzFdLG9bMF0sb1sxXSxlLG4pLHI9b312YXIgcz10WzBdO3JldHVybiBqdShyWzBdLHNbMF0pJiZqdShyWzFdLHNbMV0pfHwoaSs9YnIoclswXSxyWzFdLHNbMF0sc1sxXSxlLG4pKSwwIT09aX1mdW5jdGlvbiBVdSh0LGUsbil7aWYodGhpcy5uYW1lPXQsdGhpcy5nZW9tZXRyaWVzPWUsbiluPVtuWzBdLG5bMV1dO2Vsc2V7dmFyIGk9dGhpcy5nZXRCb3VuZGluZ1JlY3QoKTtuPVtpLngraS53aWR0aC8yLGkueStpLmhlaWdodC8yXX10aGlzLmNlbnRlcj1ufWZ1bmN0aW9uIFh1KHQpe2lmKCF0LlVURjhFbmNvZGluZylyZXR1cm4gdDt2YXIgZT10LlVURjhTY2FsZTtudWxsPT1lJiYoZT0xMDI0KTtmb3IodmFyIG49dC5mZWF0dXJlcyxpPTA7aTxuLmxlbmd0aDtpKyspZm9yKHZhciByPW5baV0sYT1yLmdlb21ldHJ5LG89YS5jb29yZGluYXRlcyxzPWEuZW5jb2RlT2Zmc2V0cyxsPTA7bDxvLmxlbmd0aDtsKyspe3ZhciB1PW9bbF07aWYoXCJQb2x5Z29uXCI9PT1hLnR5cGUpb1tsXT1ZdSh1LHNbbF0sZSk7ZWxzZSBpZihcIk11bHRpUG9seWdvblwiPT09YS50eXBlKWZvcih2YXIgaD0wO2g8dS5sZW5ndGg7aCsrKXt2YXIgYz11W2hdO3VbaF09WXUoYyxzW2xdW2hdLGUpfX1yZXR1cm4gdC5VVEY4RW5jb2Rpbmc9ITEsdH1mdW5jdGlvbiBZdSh0LGUsbil7Zm9yKHZhciBpPVtdLHI9ZVswXSxhPWVbMV0sbz0wO288dC5sZW5ndGg7bys9Mil7dmFyIHM9dC5jaGFyQ29kZUF0KG8pLTY0LGw9dC5jaGFyQ29kZUF0KG8rMSktNjQ7cz1zPj4xXi0oMSZzKSxsPWw+PjFeLSgxJmwpLHMrPXIsbCs9YSxyPXMsYT1sLGkucHVzaChbcy9uLGwvbl0pfXJldHVybiBpfWZ1bmN0aW9uIFp1KHQpe3JldHVyblwiY2F0ZWdvcnlcIj09PXQudHlwZT9LdSh0KTp0aCh0KX1mdW5jdGlvbiAkdSh0LGUpe3JldHVyblwiY2F0ZWdvcnlcIj09PXQudHlwZT9KdSh0LGUpOnt0aWNrczp0LnNjYWxlLmdldFRpY2tzKCl9fWZ1bmN0aW9uIEt1KHQpe3ZhciBlPXQuZ2V0TGFiZWxNb2RlbCgpLG49UXUodCxlKTtyZXR1cm4hZS5nZXQoXCJzaG93XCIpfHx0LnNjYWxlLmlzQmxhbmsoKT97bGFiZWxzOltdLGxhYmVsQ2F0ZWdvcnlJbnRlcnZhbDpuLmxhYmVsQ2F0ZWdvcnlJbnRlcnZhbH06bn1mdW5jdGlvbiBRdSh0LGUpe3ZhciBuPWVoKHQsXCJsYWJlbHNcIiksaT11aChlKSxyPW5oKG4saSk7aWYocilyZXR1cm4gcjt2YXIgYSxvO3JldHVybiB3KGkpP2E9bGgodCxpKToobz1cImF1dG9cIj09PWk/cmgodCk6aSxhPXNoKHQsbykpLGloKG4saSx7bGFiZWxzOmEsbGFiZWxDYXRlZ29yeUludGVydmFsOm99KX1mdW5jdGlvbiBKdSh0LGUpe3ZhciBuPWVoKHQsXCJ0aWNrc1wiKSxpPXVoKGUpLHI9bmgobixpKTtpZihyKXJldHVybiByO3ZhciBhLG87aWYoKCFlLmdldChcInNob3dcIil8fHQuc2NhbGUuaXNCbGFuaygpKSYmKGE9W10pLHcoaSkpYT1saCh0LGksITApO2Vsc2UgaWYoXCJhdXRvXCI9PT1pKXt2YXIgcz1RdSh0LHQuZ2V0TGFiZWxNb2RlbCgpKTtvPXMubGFiZWxDYXRlZ29yeUludGVydmFsLGE9cChzLmxhYmVscyxmdW5jdGlvbih0KXtyZXR1cm4gdC50aWNrVmFsdWV9KX1lbHNlIG89aSxhPXNoKHQsbywhMCk7cmV0dXJuIGloKG4saSx7dGlja3M6YSx0aWNrQ2F0ZWdvcnlJbnRlcnZhbDpvfSl9ZnVuY3Rpb24gdGgodCl7dmFyIGU9dC5zY2FsZS5nZXRUaWNrcygpLG49RXUodCk7cmV0dXJue2xhYmVsczpwKGUsZnVuY3Rpb24oZSxpKXtyZXR1cm57Zm9ybWF0dGVkTGFiZWw6bihlLGkpLHJhd0xhYmVsOnQuc2NhbGUuZ2V0TGFiZWwoZSksdGlja1ZhbHVlOmV9fSl9fWZ1bmN0aW9uIGVoKHQsZSl7cmV0dXJuIEF5KHQpW2VdfHwoQXkodClbZV09W10pfWZ1bmN0aW9uIG5oKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYodFtuXS5rZXk9PT1lKXJldHVybiB0W25dLnZhbHVlfWZ1bmN0aW9uIGloKHQsZSxuKXtyZXR1cm4gdC5wdXNoKHtrZXk6ZSx2YWx1ZTpufSksbn1mdW5jdGlvbiByaCh0KXt2YXIgZT1BeSh0KS5hdXRvSW50ZXJ2YWw7cmV0dXJuIG51bGwhPWU/ZTpBeSh0KS5hdXRvSW50ZXJ2YWw9dC5jYWxjdWxhdGVDYXRlZ29yeUludGVydmFsKCl9ZnVuY3Rpb24gYWgodCl7dmFyIGU9b2godCksbj1FdSh0KSxpPShlLmF4aXNSb3RhdGUtZS5sYWJlbFJvdGF0ZSkvMTgwKk1hdGguUEkscj10LnNjYWxlLGE9ci5nZXRFeHRlbnQoKSxvPXIuY291bnQoKTtpZihhWzFdLWFbMF08MSlyZXR1cm4gMDt2YXIgcz0xO28+NDAmJihzPU1hdGgubWF4KDEsTWF0aC5mbG9vcihvLzQwKSkpO2Zvcih2YXIgbD1hWzBdLHU9dC5kYXRhVG9Db29yZChsKzEpLXQuZGF0YVRvQ29vcmQobCksaD1NYXRoLmFicyh1Kk1hdGguY29zKGkpKSxjPU1hdGguYWJzKHUqTWF0aC5zaW4oaSkpLGQ9MCxmPTA7bDw9YVsxXTtsKz1zKXt2YXIgcD0wLGc9MCx2PU1uKG4obCksZS5mb250LFwiY2VudGVyXCIsXCJ0b3BcIik7cD0xLjMqdi53aWR0aCxnPTEuMyp2LmhlaWdodCxkPU1hdGgubWF4KGQscCw3KSxmPU1hdGgubWF4KGYsZyw3KX12YXIgbT1kL2gseT1mL2M7aXNOYU4obSkmJihtPTEvMCksaXNOYU4oeSkmJih5PTEvMCk7dmFyIF89TWF0aC5tYXgoMCxNYXRoLmZsb29yKE1hdGgubWluKG0seSkpKSx4PUF5KHQubW9kZWwpLHc9eC5sYXN0QXV0b0ludGVydmFsLGI9eC5sYXN0VGlja0NvdW50O3JldHVybiBudWxsIT13JiZudWxsIT1iJiZNYXRoLmFicyh3LV8pPD0xJiZNYXRoLmFicyhiLW8pPD0xJiZ3Pl8/Xz13Oih4Lmxhc3RUaWNrQ291bnQ9byx4Lmxhc3RBdXRvSW50ZXJ2YWw9XyksX31mdW5jdGlvbiBvaCh0KXt2YXIgZT10LmdldExhYmVsTW9kZWwoKTtyZXR1cm57YXhpc1JvdGF0ZTp0LmdldFJvdGF0ZT90LmdldFJvdGF0ZSgpOnQuaXNIb3Jpem9udGFsJiYhdC5pc0hvcml6b250YWwoKT85MDowLGxhYmVsUm90YXRlOmUuZ2V0KFwicm90YXRlXCIpfHwwLGZvbnQ6ZS5nZXRGb250KCl9fWZ1bmN0aW9uIHNoKHQsZSxuKXtmdW5jdGlvbiBpKHQpe2wucHVzaChuP3Q6e2Zvcm1hdHRlZExhYmVsOnIodCkscmF3TGFiZWw6YS5nZXRMYWJlbCh0KSx0aWNrVmFsdWU6dH0pfXZhciByPUV1KHQpLGE9dC5zY2FsZSxvPWEuZ2V0RXh0ZW50KCkscz10LmdldExhYmVsTW9kZWwoKSxsPVtdLHU9TWF0aC5tYXgoKGV8fDApKzEsMSksaD1vWzBdLGM9YS5jb3VudCgpOzAhPT1oJiZ1PjEmJmMvdT4yJiYoaD1NYXRoLnJvdW5kKE1hdGguY2VpbChoL3UpKnUpKTt2YXIgZD17bWluOnMuZ2V0KFwic2hvd01pbkxhYmVsXCIpLG1heDpzLmdldChcInNob3dNYXhMYWJlbFwiKX07ZC5taW4mJmghPT1vWzBdJiZpKG9bMF0pO2Zvcih2YXIgZj1oO2Y8PW9bMV07Zis9dSlpKGYpO3JldHVybiBkLm1heCYmZiE9PW9bMV0mJmkob1sxXSksbH1mdW5jdGlvbiBsaCh0LGUsbil7dmFyIGk9dC5zY2FsZSxyPUV1KHQpLGE9W107cmV0dXJuIGYoaS5nZXRUaWNrcygpLGZ1bmN0aW9uKHQpe3ZhciBvPWkuZ2V0TGFiZWwodCk7ZSh0LG8pJiZhLnB1c2gobj90Ontmb3JtYXR0ZWRMYWJlbDpyKHQpLHJhd0xhYmVsOm8sdGlja1ZhbHVlOnR9KX0pLGF9ZnVuY3Rpb24gdWgodCl7dmFyIGU9dC5nZXQoXCJpbnRlcnZhbFwiKTtyZXR1cm4gbnVsbD09ZT9cImF1dG9cIjplfWZ1bmN0aW9uIGhoKHQsZSl7dmFyIG49dFsxXS10WzBdLGk9ZSxyPW4vaS8yO3RbMF0rPXIsdFsxXS09cn1mdW5jdGlvbiBjaCh0LGUsbixpLHIpe2Z1bmN0aW9uIGEodCxlKXtyZXR1cm4gaD90PmU6ZT50fXZhciBvPWUubGVuZ3RoO2lmKHQub25CYW5kJiYhaSYmbyl7dmFyIHMsbD10LmdldEV4dGVudCgpO2lmKDE9PT1vKWVbMF0uY29vcmQ9bFswXSxzPWVbMV09e2Nvb3JkOmxbMF19O2Vsc2V7dmFyIHU9ZVsxXS5jb29yZC1lWzBdLmNvb3JkO2YoZSxmdW5jdGlvbih0KXt0LmNvb3JkLT11LzI7dmFyIGU9ZXx8MDtlJTI+MCYmKHQuY29vcmQtPXUvKDIqKGUrMSkpKX0pLHM9e2Nvb3JkOmVbby0xXS5jb29yZCt1fSxlLnB1c2gocyl9dmFyIGg9bFswXT5sWzFdO2EoZVswXS5jb29yZCxsWzBdKSYmKHI/ZVswXS5jb29yZD1sWzBdOmUuc2hpZnQoKSksciYmYShsWzBdLGVbMF0uY29vcmQpJiZlLnVuc2hpZnQoe2Nvb3JkOmxbMF19KSxhKGxbMV0scy5jb29yZCkmJihyP3MuY29vcmQ9bFsxXTplLnBvcCgpKSxyJiZhKHMuY29vcmQsbFsxXSkmJmUucHVzaCh7Y29vcmQ6bFsxXX0pfX1mdW5jdGlvbiBkaCh0LGUpe3ZhciBuPXQubWFwRGltZW5zaW9uKFwiZGVmYXVsdGVkTGFiZWxcIiwhMCksaT1uLmxlbmd0aDtpZigxPT09aSlyZXR1cm4gZHModCxlLG5bMF0pO2lmKGkpe2Zvcih2YXIgcj1bXSxhPTA7YTxuLmxlbmd0aDthKyspe3ZhciBvPWRzKHQsZSxuW2FdKTtyLnB1c2gobyl9cmV0dXJuIHIuam9pbihcIiBcIil9fWZ1bmN0aW9uIGZoKHQsZSxuKXtDZC5jYWxsKHRoaXMpLHRoaXMudXBkYXRlRGF0YSh0LGUsbil9ZnVuY3Rpb24gcGgodCl7cmV0dXJuW3RbMF0vMix0WzFdLzJdfWZ1bmN0aW9uIGdoKHQsZSl7dGhpcy5wYXJlbnQuZHJpZnQodCxlKX1mdW5jdGlvbiB2aCh0KXt0aGlzLmdyb3VwPW5ldyBDZCx0aGlzLl9zeW1ib2xDdG9yPXR8fGZofWZ1bmN0aW9uIG1oKHQsZSxuLGkpe3JldHVybiEoIWV8fGlzTmFOKGVbMF0pfHxpc05hTihlWzFdKXx8aS5pc0lnbm9yZSYmaS5pc0lnbm9yZShuKXx8aS5jbGlwU2hhcGUmJiFpLmNsaXBTaGFwZS5jb250YWluKGVbMF0sZVsxXSl8fFwibm9uZVwiPT09dC5nZXRJdGVtVmlzdWFsKG4sXCJzeW1ib2xcIikpfWZ1bmN0aW9uIHloKHQpe3JldHVybiBudWxsPT10fHxNKHQpfHwodD17aXNJZ25vcmU6dH0pLHR8fHt9fWZ1bmN0aW9uIF9oKHQpe3ZhciBlPXQuaG9zdE1vZGVsO3JldHVybntpdGVtU3R5bGU6ZS5nZXRNb2RlbChcIml0ZW1TdHlsZVwiKS5nZXRJdGVtU3R5bGUoW1wiY29sb3JcIl0pLGhvdmVySXRlbVN0eWxlOmUuZ2V0TW9kZWwoXCJlbXBoYXNpcy5pdGVtU3R5bGVcIikuZ2V0SXRlbVN0eWxlKCksc3ltYm9sUm90YXRlOmUuZ2V0KFwic3ltYm9sUm90YXRlXCIpLHN5bWJvbE9mZnNldDplLmdldChcInN5bWJvbE9mZnNldFwiKSxob3ZlckFuaW1hdGlvbjplLmdldChcImhvdmVyQW5pbWF0aW9uXCIpLGxhYmVsTW9kZWw6ZS5nZXRNb2RlbChcImxhYmVsXCIpLGhvdmVyTGFiZWxNb2RlbDplLmdldE1vZGVsKFwiZW1waGFzaXMubGFiZWxcIiksY3Vyc29yU3R5bGU6ZS5nZXQoXCJjdXJzb3JcIil9fWZ1bmN0aW9uIHhoKHQsZSxuKXt2YXIgaSxyPXQuZ2V0QmFzZUF4aXMoKSxhPXQuZ2V0T3RoZXJBeGlzKHIpLG89d2goYSxuKSxzPXIuZGltLGw9YS5kaW0sdT1lLm1hcERpbWVuc2lvbihsKSxoPWUubWFwRGltZW5zaW9uKHMpLGM9XCJ4XCI9PT1sfHxcInJhZGl1c1wiPT09bD8xOjAsZD1wKHQuZGltZW5zaW9ucyxmdW5jdGlvbih0KXtyZXR1cm4gZS5tYXBEaW1lbnNpb24odCl9KSxmPWUuZ2V0Q2FsY3VsYXRpb25JbmZvKFwic3RhY2tSZXN1bHREaW1lbnNpb25cIik7cmV0dXJuKGl8PW91KGUsZFswXSkpJiYoZFswXT1mKSwoaXw9b3UoZSxkWzFdKSkmJihkWzFdPWYpLHtkYXRhRGltc0ZvclBvaW50OmQsdmFsdWVTdGFydDpvLHZhbHVlQXhpc0RpbTpsLGJhc2VBeGlzRGltOnMsc3RhY2tlZDohIWksdmFsdWVEaW06dSxiYXNlRGltOmgsYmFzZURhdGFPZmZzZXQ6YyxzdGFja2VkT3ZlckRpbWVuc2lvbjplLmdldENhbGN1bGF0aW9uSW5mbyhcInN0YWNrZWRPdmVyRGltZW5zaW9uXCIpfX1mdW5jdGlvbiB3aCh0LGUpe3ZhciBuPTAsaT10LnNjYWxlLmdldEV4dGVudCgpO3JldHVyblwic3RhcnRcIj09PWU/bj1pWzBdOlwiZW5kXCI9PT1lP249aVsxXTppWzBdPjA/bj1pWzBdOmlbMV08MCYmKG49aVsxXSksbn1mdW5jdGlvbiBiaCh0LGUsbixpKXt2YXIgcj0wLzA7dC5zdGFja2VkJiYocj1uLmdldChuLmdldENhbGN1bGF0aW9uSW5mbyhcInN0YWNrZWRPdmVyRGltZW5zaW9uXCIpLGkpKSxpc05hTihyKSYmKHI9dC52YWx1ZVN0YXJ0KTt2YXIgYT10LmJhc2VEYXRhT2Zmc2V0LG89W107cmV0dXJuIG9bYV09bi5nZXQodC5iYXNlRGltLGkpLG9bMS1hXT1yLGUuZGF0YVRvUG9pbnQobyl9ZnVuY3Rpb24gTWgodCxlKXt2YXIgbj1bXTtyZXR1cm4gZS5kaWZmKHQpLmFkZChmdW5jdGlvbih0KXtuLnB1c2goe2NtZDpcIitcIixpZHg6dH0pfSkudXBkYXRlKGZ1bmN0aW9uKHQsZSl7bi5wdXNoKHtjbWQ6XCI9XCIsaWR4OmUsaWR4MTp0fSl9KS5yZW1vdmUoZnVuY3Rpb24odCl7bi5wdXNoKHtjbWQ6XCItXCIsaWR4OnR9KX0pLmV4ZWN1dGUoKSxufWZ1bmN0aW9uIFNoKHQpe3JldHVybiBpc05hTih0WzBdKXx8aXNOYU4odFsxXSl9ZnVuY3Rpb24gQ2godCxlLG4saSxyLGEsbyxzLGwsdSl7cmV0dXJuXCJub25lXCIhPT11JiZ1P0loLmFwcGx5KHRoaXMsYXJndW1lbnRzKTpUaC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gSWgodCxlLG4saSxyLGEsbyxzLGwsdSxoKXtmb3IodmFyIGM9MCxkPW4sZj0wO2k+ZjtmKyspe3ZhciBwPWVbZF07aWYoZD49cnx8MD5kKWJyZWFrO2lmKFNoKHApKXtpZihoKXtkKz1hO2NvbnRpbnVlfWJyZWFrfWlmKGQ9PT1uKXRbYT4wP1wibW92ZVRvXCI6XCJsaW5lVG9cIl0ocFswXSxwWzFdKTtlbHNlIGlmKGw+MCl7dmFyIGc9ZVtjXSx2PVwieVwiPT09dT8xOjAsbT0ocFt2XS1nW3ZdKSpsO1V5KFl5LGcpLFl5W3ZdPWdbdl0rbSxVeShaeSxwKSxaeVt2XT1wW3ZdLW0sdC5iZXppZXJDdXJ2ZVRvKFl5WzBdLFl5WzFdLFp5WzBdLFp5WzFdLHBbMF0scFsxXSl9ZWxzZSB0LmxpbmVUbyhwWzBdLHBbMV0pO2M9ZCxkKz1hfXJldHVybiBmfWZ1bmN0aW9uIFRoKHQsZSxuLGkscixhLG8scyxsLHUsaCl7Zm9yKHZhciBjPTAsZD1uLGY9MDtpPmY7ZisrKXt2YXIgcD1lW2RdO2lmKGQ+PXJ8fDA+ZClicmVhaztpZihTaChwKSl7aWYoaCl7ZCs9YTtjb250aW51ZX1icmVha31pZihkPT09bil0W2E+MD9cIm1vdmVUb1wiOlwibGluZVRvXCJdKHBbMF0scFsxXSksVXkoWXkscCk7ZWxzZSBpZihsPjApe3ZhciBnPWQrYSx2PWVbZ107aWYoaClmb3IoO3YmJlNoKGVbZ10pOylnKz1hLHY9ZVtnXTt2YXIgbT0uNSx5PWVbY10sdj1lW2ddO2lmKCF2fHxTaCh2KSlVeShaeSxwKTtlbHNle1NoKHYpJiYhaCYmKHY9cCksWChYeSx2LHkpO3ZhciBfLHg7aWYoXCJ4XCI9PT11fHxcInlcIj09PXUpe3ZhciB3PVwieFwiPT09dT8wOjE7Xz1NYXRoLmFicyhwW3ddLXlbd10pLHg9TWF0aC5hYnMocFt3XS12W3ddKX1lbHNlIF89VmMocCx5KSx4PVZjKHAsdik7bT14Lyh4K18pLHF5KFp5LHAsWHksLWwqKDEtbSkpfVd5KFl5LFl5LHMpLGp5KFl5LFl5LG8pLFd5KFp5LFp5LHMpLGp5KFp5LFp5LG8pLHQuYmV6aWVyQ3VydmVUbyhZeVswXSxZeVsxXSxaeVswXSxaeVsxXSxwWzBdLHBbMV0pLHF5KFl5LHAsWHksbCptKX1lbHNlIHQubGluZVRvKHBbMF0scFsxXSk7Yz1kLGQrPWF9cmV0dXJuIGZ9ZnVuY3Rpb24ga2godCxlKXt2YXIgbj1bMS8wLDEvMF0saT1bLTEvMCwtMS8wXTtpZihlKWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgYT10W3JdO2FbMF08blswXSYmKG5bMF09YVswXSksYVsxXTxuWzFdJiYoblsxXT1hWzFdKSxhWzBdPmlbMF0mJihpWzBdPWFbMF0pLGFbMV0+aVsxXSYmKGlbMV09YVsxXSl9cmV0dXJue21pbjplP246aSxtYXg6ZT9pOm59fWZ1bmN0aW9uIERoKHQsZSl7aWYodC5sZW5ndGg9PT1lLmxlbmd0aCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl0scj1lW25dO2lmKGlbMF0hPT1yWzBdfHxpWzFdIT09clsxXSlyZXR1cm59cmV0dXJuITB9fWZ1bmN0aW9uIEFoKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0P3Q6dD8uNTowfWZ1bmN0aW9uIFBoKHQpe3ZhciBlPXQuZ2V0R2xvYmFsRXh0ZW50KCk7aWYodC5vbkJhbmQpe3ZhciBuPXQuZ2V0QmFuZFdpZHRoKCkvMi0xLGk9ZVsxXT5lWzBdPzE6LTE7ZVswXSs9aSpuLGVbMV0tPWkqbn1yZXR1cm4gZX1mdW5jdGlvbiBMaCh0LGUsbil7aWYoIW4udmFsdWVEaW0pcmV0dXJuW107Zm9yKHZhciBpPVtdLHI9MCxhPWUuY291bnQoKTthPnI7cisrKWkucHVzaChiaChuLHQsZSxyKSk7cmV0dXJuIGl9ZnVuY3Rpb24gT2godCxlLG4saSl7dmFyIHI9UGgodC5nZXRBeGlzKFwieFwiKSksYT1QaCh0LmdldEF4aXMoXCJ5XCIpKSxvPXQuZ2V0QmFzZUF4aXMoKS5pc0hvcml6b250YWwoKSxzPU1hdGgubWluKHJbMF0sclsxXSksbD1NYXRoLm1pbihhWzBdLGFbMV0pLHU9TWF0aC5tYXgoclswXSxyWzFdKS1zLGg9TWF0aC5tYXgoYVswXSxhWzFdKS1sO2lmKG4pcy09LjUsdSs9LjUsbC09LjUsaCs9LjU7ZWxzZXt2YXIgYz1pLmdldChcImxpbmVTdHlsZS53aWR0aFwiKXx8MixkPWkuZ2V0KFwiY2xpcE92ZXJmbG93XCIpP2MvMjpNYXRoLm1heCh1LGgpO28/KGwtPWQsaCs9MipkKToocy09ZCx1Kz0yKmQpfXZhciBmPW5ldyBYcCh7c2hhcGU6e3g6cyx5Omwsd2lkdGg6dSxoZWlnaHQ6aH19KTtyZXR1cm4gZSYmKGYuc2hhcGVbbz9cIndpZHRoXCI6XCJoZWlnaHRcIl09MCxiYShmLHtzaGFwZTp7d2lkdGg6dSxoZWlnaHQ6aH19LGkpKSxmfWZ1bmN0aW9uIFJoKHQsZSxuLGkpe3ZhciByPXQuZ2V0QW5nbGVBeGlzKCksYT10LmdldFJhZGl1c0F4aXMoKSxvPWEuZ2V0RXh0ZW50KCkuc2xpY2UoKTtvWzBdPm9bMV0mJm8ucmV2ZXJzZSgpO3ZhciBzPXIuZ2V0RXh0ZW50KCksbD1NYXRoLlBJLzE4MDtuJiYob1swXS09LjUsb1sxXSs9LjUpO3ZhciB1PW5ldyBHcCh7c2hhcGU6e2N4OkZhKHQuY3gsMSksY3k6RmEodC5jeSwxKSxyMDpGYShvWzBdLDEpLHI6RmEob1sxXSwxKSxzdGFydEFuZ2xlOi1zWzBdKmwsZW5kQW5nbGU6LXNbMV0qbCxjbG9ja3dpc2U6ci5pbnZlcnNlfX0pO3JldHVybiBlJiYodS5zaGFwZS5lbmRBbmdsZT0tc1swXSpsLGJhKHUse3NoYXBlOntlbmRBbmdsZTotc1sxXSpsfX0saSkpLHV9ZnVuY3Rpb24gRWgodCxlLG4saSl7cmV0dXJuXCJwb2xhclwiPT09dC50eXBlP1JoKHQsZSxuLGkpOk9oKHQsZSxuLGkpfWZ1bmN0aW9uIEJoKHQsZSxuKXtmb3IodmFyIGk9ZS5nZXRCYXNlQXhpcygpLHI9XCJ4XCI9PT1pLmRpbXx8XCJyYWRpdXNcIj09PWkuZGltPzA6MSxhPVtdLG89MDtvPHQubGVuZ3RoLTE7bysrKXt2YXIgcz10W28rMV0sbD10W29dO2EucHVzaChsKTt2YXIgdT1bXTtzd2l0Y2gobil7Y2FzZVwiZW5kXCI6dVtyXT1zW3JdLHVbMS1yXT1sWzEtcl0sYS5wdXNoKHUpO2JyZWFrO2Nhc2VcIm1pZGRsZVwiOnZhciBoPShsW3JdK3Nbcl0pLzIsYz1bXTt1W3JdPWNbcl09aCx1WzEtcl09bFsxLXJdLGNbMS1yXT1zWzEtcl0sYS5wdXNoKHUpLGEucHVzaChjKTticmVhaztkZWZhdWx0OnVbcl09bFtyXSx1WzEtcl09c1sxLXJdLGEucHVzaCh1KX19cmV0dXJuIHRbb10mJmEucHVzaCh0W29dKSxhfWZ1bmN0aW9uIHpoKHQsZSl7dmFyIG49dC5nZXRWaXN1YWwoXCJ2aXN1YWxNZXRhXCIpO2lmKG4mJm4ubGVuZ3RoJiZ0LmNvdW50KCkmJlwiY2FydGVzaWFuMmRcIj09PWUudHlwZSl7Zm9yKHZhciBpLHIsYT1uLmxlbmd0aC0xO2E+PTA7YS0tKXt2YXIgbz1uW2FdLmRpbWVuc2lvbixzPXQuZGltZW5zaW9uc1tvXSxsPXQuZ2V0RGltZW5zaW9uSW5mbyhzKTtpZihpPWwmJmwuY29vcmREaW0sXCJ4XCI9PT1pfHxcInlcIj09PWkpe3I9blthXTticmVha319aWYocil7dmFyIHU9ZS5nZXRBeGlzKGkpLGg9cChyLnN0b3BzLGZ1bmN0aW9uKHQpe3JldHVybntjb29yZDp1LnRvR2xvYmFsQ29vcmQodS5kYXRhVG9Db29yZCh0LnZhbHVlKSksY29sb3I6dC5jb2xvcn19KSxjPWgubGVuZ3RoLGQ9ci5vdXRlckNvbG9ycy5zbGljZSgpO2MmJmhbMF0uY29vcmQ+aFtjLTFdLmNvb3JkJiYoaC5yZXZlcnNlKCksZC5yZXZlcnNlKCkpO3ZhciBnPTEwLHY9aFswXS5jb29yZC1nLG09aFtjLTFdLmNvb3JkK2cseT1tLXY7aWYoLjAwMT55KXJldHVyblwidHJhbnNwYXJlbnRcIjtmKGgsZnVuY3Rpb24odCl7dC5vZmZzZXQ9KHQuY29vcmQtdikveX0pLGgucHVzaCh7b2Zmc2V0OmM/aFtjLTFdLm9mZnNldDouNSxjb2xvcjpkWzFdfHxcInRyYW5zcGFyZW50XCJ9KSxoLnVuc2hpZnQoe29mZnNldDpjP2hbMF0ub2Zmc2V0Oi41LGNvbG9yOmRbMF18fFwidHJhbnNwYXJlbnRcIn0pO3ZhciBfPW5ldyB0ZygwLDAsMCwwLGgsITApO3JldHVybiBfW2ldPXYsX1tpK1wiMlwiXT1tLF99fX1mdW5jdGlvbiBOaCh0LGUsbil7dmFyIGk9dC5nZXQoXCJzaG93QWxsU3ltYm9sXCIpLHI9XCJhdXRvXCI9PT1pO2lmKCFpfHxyKXt2YXIgYT1uLmdldEF4ZXNCeVNjYWxlKFwib3JkaW5hbFwiKVswXTtpZihhJiYoIXJ8fCFGaChhLGUpKSl7dmFyIG89ZS5tYXBEaW1lbnNpb24oYS5kaW0pLHM9e307cmV0dXJuIGYoYS5nZXRWaWV3TGFiZWxzKCksZnVuY3Rpb24odCl7c1t0LnRpY2tWYWx1ZV09MX0pLGZ1bmN0aW9uKHQpe3JldHVybiFzLmhhc093blByb3BlcnR5KGUuZ2V0KG8sdCkpfX19fWZ1bmN0aW9uIEZoKHQsZSl7dmFyIG49dC5nZXRFeHRlbnQoKSxpPU1hdGguYWJzKG5bMV0tblswXSkvdC5zY2FsZS5jb3VudCgpO2lzTmFOKGkpJiYoaT0wKTtmb3IodmFyIHI9ZS5jb3VudCgpLGE9TWF0aC5tYXgoMSxNYXRoLnJvdW5kKHIvNSkpLG89MDtyPm87bys9YSlpZigxLjUqZmguZ2V0U3ltYm9sU2l6ZShlLG8pW3QuaXNIb3Jpem9udGFsKCk/MTowXT5pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIFZoKHQpe3JldHVybiB0aGlzLl9heGVzW3RdfWZ1bmN0aW9uIEdoKHQpe2lfLmNhbGwodGhpcyx0KX1mdW5jdGlvbiBIaCh0LGUpe3JldHVybiBlLnR5cGV8fChlLmRhdGE/XCJjYXRlZ29yeVwiOlwidmFsdWVcIil9ZnVuY3Rpb24gV2godCxlKXtyZXR1cm4gdC5nZXRDb29yZFN5c01vZGVsKCk9PT1lfWZ1bmN0aW9uIGpoKHQsZSxuKXt0aGlzLl9jb29yZHNNYXA9e30sdGhpcy5fY29vcmRzTGlzdD1bXSx0aGlzLl9heGVzTWFwPXt9LHRoaXMuX2F4ZXNMaXN0PVtdLHRoaXMuX2luaXRDYXJ0ZXNpYW4odCxlLG4pLHRoaXMubW9kZWw9dH1mdW5jdGlvbiBxaCh0LGUsbil7bi5nZXRBeGVzT25aZXJvT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gaT9baV06W119O3ZhciBpLHI9dFtlXSxhPW4ubW9kZWwsbz1hLmdldChcImF4aXNMaW5lLm9uWmVyb1wiKSxzPWEuZ2V0KFwiYXhpc0xpbmUub25aZXJvQXhpc0luZGV4XCIpO2lmKG8pe2lmKG51bGwhPXMpcmV0dXJuIHZvaWQoVWgocltzXSkmJihpPXJbc10pKTtmb3IodmFyIGwgaW4gcilpZihyLmhhc093blByb3BlcnR5KGwpJiZVaChyW2xdKSl7aT1yW2xdO2JyZWFrfX19ZnVuY3Rpb24gVWgodCl7cmV0dXJuIHQmJlwiY2F0ZWdvcnlcIiE9PXQudHlwZSYmXCJ0aW1lXCIhPT10LnR5cGUmJlJ1KHQpfWZ1bmN0aW9uIFhoKHQsZSl7dmFyIG49dC5nZXRFeHRlbnQoKSxpPW5bMF0rblsxXTt0LnRvR2xvYmFsQ29vcmQ9XCJ4XCI9PT10LmRpbT9mdW5jdGlvbih0KXtyZXR1cm4gdCtlfTpmdW5jdGlvbih0KXtyZXR1cm4gaS10K2V9LHQudG9Mb2NhbENvb3JkPVwieFwiPT09dC5kaW0/ZnVuY3Rpb24odCl7cmV0dXJuIHQtZX06ZnVuY3Rpb24odCl7cmV0dXJuIGktdCtlfX1mdW5jdGlvbiBZaCh0KXtyZXR1cm4gcChkXyxmdW5jdGlvbihlKXt2YXIgbj10LmdldFJlZmVycmluZ0NvbXBvbmVudHMoZSlbMF07cmV0dXJuIG59KX1mdW5jdGlvbiBaaCh0KXtyZXR1cm5cImNhcnRlc2lhbjJkXCI9PT10LmdldChcImNvb3JkaW5hdGVTeXN0ZW1cIil9ZnVuY3Rpb24gJGgodCl7dmFyIGU9e2NvbXBvbmVudFR5cGU6dC5tYWluVHlwZX07cmV0dXJuIGVbdC5tYWluVHlwZStcIkluZGV4XCJdPXQuY29tcG9uZW50SW5kZXgsZX1mdW5jdGlvbiBLaCh0LGUsbixpKXt2YXIgcixhLG89cWEobi10LnJvdGF0aW9uKSxzPWlbMF0+aVsxXSxsPVwic3RhcnRcIj09PWUmJiFzfHxcInN0YXJ0XCIhPT1lJiZzO3JldHVybiBVYShvLWZfLzIpPyhhPWw/XCJib3R0b21cIjpcInRvcFwiLHI9XCJjZW50ZXJcIik6VWEoby0xLjUqZl8pPyhhPWw/XCJ0b3BcIjpcImJvdHRvbVwiLHI9XCJjZW50ZXJcIik6KGE9XCJtaWRkbGVcIixyPTEuNSpmXz5vJiZvPmZfLzI/bD9cImxlZnRcIjpcInJpZ2h0XCI6bD9cInJpZ2h0XCI6XCJsZWZ0XCIpLHtyb3RhdGlvbjpvLHRleHRBbGlnbjpyLHRleHRWZXJ0aWNhbEFsaWduOmF9fWZ1bmN0aW9uIFFoKHQpe3ZhciBlPXQuZ2V0KFwidG9vbHRpcFwiKTtyZXR1cm4gdC5nZXQoXCJzaWxlbnRcIil8fCEodC5nZXQoXCJ0cmlnZ2VyRXZlbnRcIil8fGUmJmUuc2hvdyl9ZnVuY3Rpb24gSmgodCxlLG4pe3ZhciBpPXQuZ2V0KFwiYXhpc0xhYmVsLnNob3dNaW5MYWJlbFwiKSxyPXQuZ2V0KFwiYXhpc0xhYmVsLnNob3dNYXhMYWJlbFwiKTtlPWV8fFtdLG49bnx8W107dmFyIGE9ZVswXSxvPWVbMV0scz1lW2UubGVuZ3RoLTFdLGw9ZVtlLmxlbmd0aC0yXSx1PW5bMF0saD1uWzFdLGM9bltuLmxlbmd0aC0xXSxkPW5bbi5sZW5ndGgtMl07aT09PSExPyh0YyhhKSx0Yyh1KSk6ZWMoYSxvKSYmKGk/KHRjKG8pLHRjKGgpKToodGMoYSksdGModSkpKSxyPT09ITE/KHRjKHMpLHRjKGMpKTplYyhsLHMpJiYocj8odGMobCksdGMoZCkpOih0YyhzKSx0YyhjKSkpfWZ1bmN0aW9uIHRjKHQpe3QmJih0Lmlnbm9yZT0hMCl9ZnVuY3Rpb24gZWModCxlKXt2YXIgbj10JiZ0LmdldEJvdW5kaW5nUmVjdCgpLmNsb25lKCksaT1lJiZlLmdldEJvdW5kaW5nUmVjdCgpLmNsb25lKCk7aWYobiYmaSl7dmFyIHI9cGUoW10pO3JldHVybiB5ZShyLHIsLXQucm90YXRpb24pLG4uYXBwbHlUcmFuc2Zvcm0odmUoW10scix0LmdldExvY2FsVHJhbnNmb3JtKCkpKSxpLmFwcGx5VHJhbnNmb3JtKHZlKFtdLHIsZS5nZXRMb2NhbFRyYW5zZm9ybSgpKSksbi5pbnRlcnNlY3QoaSl9fWZ1bmN0aW9uIG5jKHQpe3JldHVyblwibWlkZGxlXCI9PT10fHxcImNlbnRlclwiPT09dH1mdW5jdGlvbiBpYyh0LGUsbil7dmFyIGk9ZS5heGlzO2lmKGUuZ2V0KFwiYXhpc1RpY2suc2hvd1wiKSYmIWkuc2NhbGUuaXNCbGFuaygpKXtmb3IodmFyIHI9ZS5nZXRNb2RlbChcImF4aXNUaWNrXCIpLGE9ci5nZXRNb2RlbChcImxpbmVTdHlsZVwiKSxvPXIuZ2V0KFwibGVuZ3RoXCIpLGw9aS5nZXRUaWNrc0Nvb3JkcygpLHU9W10saD1bXSxjPXQuX3RyYW5zZm9ybSxkPVtdLGY9MDtmPGwubGVuZ3RoO2YrKyl7dmFyIHA9bFtmXS5jb29yZDt1WzBdPXAsdVsxXT0wLGhbMF09cCxoWzFdPW4udGlja0RpcmVjdGlvbipvLGMmJihhZSh1LHUsYyksYWUoaCxoLGMpKTt2YXIgZz1uZXcgWXAoWXIoe2FuaWQ6XCJ0aWNrX1wiK2xbZl0udGlja1ZhbHVlLHNoYXBlOnt4MTp1WzBdLHkxOnVbMV0seDI6aFswXSx5MjpoWzFdfSxzdHlsZTpzKGEuZ2V0TGluZVN0eWxlKCkse3N0cm9rZTplLmdldChcImF4aXNMaW5lLmxpbmVTdHlsZS5jb2xvclwiKX0pLHoyOjIsc2lsZW50OiEwfSkpO3QuZ3JvdXAuYWRkKGcpLGQucHVzaChnKX1yZXR1cm4gZH19ZnVuY3Rpb24gcmModCxlLG4pe3ZhciBpPWUuYXhpcyxyPWsobi5heGlzTGFiZWxTaG93LGUuZ2V0KFwiYXhpc0xhYmVsLnNob3dcIikpO2lmKHImJiFpLnNjYWxlLmlzQmxhbmsoKSl7dmFyIGE9ZS5nZXRNb2RlbChcImF4aXNMYWJlbFwiKSxvPWEuZ2V0KFwibWFyZ2luXCIpLHM9aS5nZXRWaWV3TGFiZWxzKCksbD0oayhuLmxhYmVsUm90YXRlLGEuZ2V0KFwicm90YXRlXCIpKXx8MCkqZl8vMTgwLHU9dl8obi5yb3RhdGlvbixsLG4ubGFiZWxEaXJlY3Rpb24pLGg9ZS5nZXRDYXRlZ29yaWVzKCEwKSxjPVtdLGQ9UWgoZSkscD1lLmdldChcInRyaWdnZXJFdmVudFwiKTtyZXR1cm4gZihzLGZ1bmN0aW9uKHIscyl7dmFyIGw9ci50aWNrVmFsdWUsZj1yLmZvcm1hdHRlZExhYmVsLGc9ci5yYXdMYWJlbCx2PWE7aCYmaFtsXSYmaFtsXS50ZXh0U3R5bGUmJih2PW5ldyBBYShoW2xdLnRleHRTdHlsZSxhLGUuZWNNb2RlbCkpO3ZhciBtPXYuZ2V0VGV4dENvbG9yKCl8fGUuZ2V0KFwiYXhpc0xpbmUubGluZVN0eWxlLmNvbG9yXCIpLHk9aS5kYXRhVG9Db29yZChsKSxfPVt5LG4ubGFiZWxPZmZzZXQrbi5sYWJlbERpcmVjdGlvbipvXSx4PW5ldyB6cCh7YW5pZDpcImxhYmVsX1wiK2wscG9zaXRpb246Xyxyb3RhdGlvbjp1LnJvdGF0aW9uLHNpbGVudDpkLHoyOjEwfSk7Y2EoeC5zdHlsZSx2LHt0ZXh0OmYsdGV4dEFsaWduOnYuZ2V0U2hhbGxvdyhcImFsaWduXCIsITApfHx1LnRleHRBbGlnbix0ZXh0VmVydGljYWxBbGlnbjp2LmdldFNoYWxsb3coXCJ2ZXJ0aWNhbEFsaWduXCIsITApfHx2LmdldFNoYWxsb3coXCJiYXNlbGluZVwiLCEwKXx8dS50ZXh0VmVydGljYWxBbGlnbix0ZXh0RmlsbDpcImZ1bmN0aW9uXCI9PXR5cGVvZiBtP20oXCJjYXRlZ29yeVwiPT09aS50eXBlP2c6XCJ2YWx1ZVwiPT09aS50eXBlP2wrXCJcIjpsLHMpOm19KSxwJiYoeC5ldmVudERhdGE9JGgoZSkseC5ldmVudERhdGEudGFyZ2V0VHlwZT1cImF4aXNMYWJlbFwiLHguZXZlbnREYXRhLnZhbHVlPWcpLHQuX2R1bWJHcm91cC5hZGQoeCkseC51cGRhdGVUcmFuc2Zvcm0oKSxjLnB1c2goeCksdC5ncm91cC5hZGQoeCkseC5kZWNvbXBvc2VUcmFuc2Zvcm0oKX0pLGN9fWZ1bmN0aW9uIGFjKHQpe3ZhciBlPW9jKHQpO2lmKGUpe3ZhciBuPWUuYXhpc1BvaW50ZXJNb2RlbCxpPWUuYXhpcy5zY2FsZSxyPW4ub3B0aW9uLGE9bi5nZXQoXCJzdGF0dXNcIiksbz1uLmdldChcInZhbHVlXCIpO251bGwhPW8mJihvPWkucGFyc2UobykpO3ZhciBzPWxjKG4pO251bGw9PWEmJihyLnN0YXR1cz1zP1wic2hvd1wiOlwiaGlkZVwiKTt2YXIgbD1pLmdldEV4dGVudCgpLnNsaWNlKCk7bFswXT5sWzFdJiZsLnJldmVyc2UoKSwobnVsbD09b3x8bz5sWzFdKSYmKG89bFsxXSksbzxsWzBdJiYobz1sWzBdKSxyLnZhbHVlPW8scyYmKHIuc3RhdHVzPWUuYXhpcy5zY2FsZS5pc0JsYW5rKCk/XCJoaWRlXCI6XCJzaG93XCIpfX1mdW5jdGlvbiBvYyh0KXt2YXIgZT0odC5lY01vZGVsLmdldENvbXBvbmVudChcImF4aXNQb2ludGVyXCIpfHx7fSkuY29vcmRTeXNBeGVzSW5mbztyZXR1cm4gZSYmZS5heGVzSW5mb1t1Yyh0KV19ZnVuY3Rpb24gc2ModCl7dmFyIGU9b2ModCk7cmV0dXJuIGUmJmUuYXhpc1BvaW50ZXJNb2RlbH1mdW5jdGlvbiBsYyh0KXtyZXR1cm4hIXQuZ2V0KFwiaGFuZGxlLnNob3dcIil9ZnVuY3Rpb24gdWModCl7cmV0dXJuIHQudHlwZStcInx8XCIrdC5pZH1mdW5jdGlvbiBoYyh0LGUsbixpLHIsYSl7dmFyIG89bV8uZ2V0QXhpc1BvaW50ZXJDbGFzcyh0LmF4aXNQb2ludGVyQ2xhc3MpO2lmKG8pe3ZhciBzPXNjKGUpO3M/KHQuX2F4aXNQb2ludGVyfHwodC5fYXhpc1BvaW50ZXI9bmV3IG8pKS5yZW5kZXIoZSxzLGksYSk6Y2ModCxpKX19ZnVuY3Rpb24gY2ModCxlLG4pe3ZhciBpPXQuX2F4aXNQb2ludGVyO2kmJmkuZGlzcG9zZShlLG4pLHQuX2F4aXNQb2ludGVyPW51bGx9ZnVuY3Rpb24gZGModCxlLG4pe249bnx8e307dmFyIGk9dC5jb29yZGluYXRlU3lzdGVtLHI9ZS5heGlzLGE9e30sbz1yLmdldEF4ZXNPblplcm9PZigpWzBdLHM9ci5wb3NpdGlvbixsPW8/XCJvblplcm9cIjpzLHU9ci5kaW0saD1pLmdldFJlY3QoKSxjPVtoLngsaC54K2gud2lkdGgsaC55LGgueStoLmhlaWdodF0sZD17bGVmdDowLHJpZ2h0OjEsdG9wOjAsYm90dG9tOjEsb25aZXJvOjJ9LGY9ZS5nZXQoXCJvZmZzZXRcIil8fDAscD1cInhcIj09PXU/W2NbMl0tZixjWzNdK2ZdOltjWzBdLWYsY1sxXStmXTtpZihvKXt2YXIgZz1vLnRvR2xvYmFsQ29vcmQoby5kYXRhVG9Db29yZCgwKSk7cFtkLm9uWmVyb109TWF0aC5tYXgoTWF0aC5taW4oZyxwWzFdKSxwWzBdKX1hLnBvc2l0aW9uPVtcInlcIj09PXU/cFtkW2xdXTpjWzBdLFwieFwiPT09dT9wW2RbbF1dOmNbM11dLGEucm90YXRpb249TWF0aC5QSS8yKihcInhcIj09PXU/MDoxKTt2YXIgdj17dG9wOi0xLGJvdHRvbToxLGxlZnQ6LTEscmlnaHQ6MX07YS5sYWJlbERpcmVjdGlvbj1hLnRpY2tEaXJlY3Rpb249YS5uYW1lRGlyZWN0aW9uPXZbc10sYS5sYWJlbE9mZnNldD1vP3BbZFtzXV0tcFtkLm9uWmVyb106MCxlLmdldChcImF4aXNUaWNrLmluc2lkZVwiKSYmKGEudGlja0RpcmVjdGlvbj0tYS50aWNrRGlyZWN0aW9uKSxrKG4ubGFiZWxJbnNpZGUsZS5nZXQoXCJheGlzTGFiZWwuaW5zaWRlXCIpKSYmKGEubGFiZWxEaXJlY3Rpb249LWEubGFiZWxEaXJlY3Rpb24pO3ZhciBtPWUuZ2V0KFwiYXhpc0xhYmVsLnJvdGF0ZVwiKTtyZXR1cm4gYS5sYWJlbFJvdGF0ZT1cInRvcFwiPT09bD8tbTptLGEuejI9MSxhfWZ1bmN0aW9uIGZjKHQsZSxuKXt2YXIgaSxyPXt9LGE9XCJ0b2dnbGVTZWxlY3RlZFwiPT09dDtyZXR1cm4gbi5lYWNoQ29tcG9uZW50KFwibGVnZW5kXCIsZnVuY3Rpb24obil7YSYmbnVsbCE9aT9uW2k/XCJzZWxlY3RcIjpcInVuU2VsZWN0XCJdKGUubmFtZSk6KG5bdF0oZS5uYW1lKSxpPW4uaXNTZWxlY3RlZChlLm5hbWUpKTt2YXIgbz1uLmdldERhdGEoKTtmKG8sZnVuY3Rpb24odCl7dmFyIGU9dC5nZXQoXCJuYW1lXCIpO2lmKFwiXFxuXCIhPT1lJiZcIlwiIT09ZSl7dmFyIGk9bi5pc1NlbGVjdGVkKGUpO3JbZV09ci5oYXNPd25Qcm9wZXJ0eShlKT9yW2VdJiZpOml9fSl9KSx7bmFtZTplLm5hbWUsc2VsZWN0ZWQ6cn19ZnVuY3Rpb24gcGModCxlKXt2YXIgbj14ZyhlLmdldChcInBhZGRpbmdcIikpLGk9ZS5nZXRJdGVtU3R5bGUoW1wiY29sb3JcIixcIm9wYWNpdHlcIl0pO2kuZmlsbD1lLmdldChcImJhY2tncm91bmRDb2xvclwiKTt2YXIgdD1uZXcgWHAoe3NoYXBlOnt4OnQueC1uWzNdLHk6dC55LW5bMF0sd2lkdGg6dC53aWR0aCtuWzFdK25bM10saGVpZ2h0OnQuaGVpZ2h0K25bMF0rblsyXSxyOmUuZ2V0KFwiYm9yZGVyUmFkaXVzXCIpfSxzdHlsZTppLHNpbGVudDohMCx6MjotMX0pO3JldHVybiB0fWZ1bmN0aW9uIGdjKHQsZSl7ZS5kaXNwYXRjaEFjdGlvbih7dHlwZTpcImxlZ2VuZFRvZ2dsZVNlbGVjdFwiLG5hbWU6dH0pfWZ1bmN0aW9uIHZjKHQsZSxuLGkpe3ZhciByPW4uZ2V0WnIoKS5zdG9yYWdlLmdldERpc3BsYXlMaXN0KClbMF07ciYmci51c2VIb3ZlckxheWVyfHxuLmRpc3BhdGNoQWN0aW9uKHt0eXBlOlwiaGlnaGxpZ2h0XCIsc2VyaWVzTmFtZTp0Lm5hbWUsbmFtZTplLGV4Y2x1ZGVTZXJpZXNJZDppfSl9ZnVuY3Rpb24gbWModCxlLG4saSl7dmFyIHI9bi5nZXRacigpLnN0b3JhZ2UuZ2V0RGlzcGxheUxpc3QoKVswXTtyJiZyLnVzZUhvdmVyTGF5ZXJ8fG4uZGlzcGF0Y2hBY3Rpb24oe3R5cGU6XCJkb3ducGxheVwiLHNlcmllc05hbWU6dC5uYW1lLG5hbWU6ZSxleGNsdWRlU2VyaWVzSWQ6aX0pfWZ1bmN0aW9uIHljKHQsZSxuKXt2YXIgaT10LmdldE9yaWVudCgpLHI9WzEsMV07cltpLmluZGV4XT0wLGNvKGUsbix7dHlwZTpcImJveFwiLGlnbm9yZVNpemU6cn0pfXZhciBfYz0yMzExLHhjPWZ1bmN0aW9uKCl7cmV0dXJuIF9jKyt9LHdjPXt9O3djPVwib2JqZWN0XCI9PXR5cGVvZiB3eCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygd3guZ2V0U3lzdGVtSW5mb1N5bmM/e2Jyb3dzZXI6e30sb3M6e30sbm9kZTohMSx3eGE6ITAsY2FudmFzU3VwcG9ydGVkOiEwLHN2Z1N1cHBvcnRlZDohMSx0b3VjaEV2ZW50c1N1cHBvcnRlZDohMH06XCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50JiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj97YnJvd3Nlcjp7fSxvczp7fSxub2RlOiExLHdvcmtlcjohMCxjYW52YXNTdXBwb3J0ZWQ6ITB9OlwidW5kZWZpbmVkXCI9PXR5cGVvZiBuYXZpZ2F0b3I/e2Jyb3dzZXI6e30sb3M6e30sbm9kZTohMCx3b3JrZXI6ITEsY2FudmFzU3VwcG9ydGVkOiEwLHN2Z1N1cHBvcnRlZDohMH06ZShuYXZpZ2F0b3IudXNlckFnZW50KTt2YXIgYmM9d2MsTWM9e1wiW29iamVjdCBGdW5jdGlvbl1cIjoxLFwiW29iamVjdCBSZWdFeHBdXCI6MSxcIltvYmplY3QgRGF0ZV1cIjoxLFwiW29iamVjdCBFcnJvcl1cIjoxLFwiW29iamVjdCBDYW52YXNHcmFkaWVudF1cIjoxLFwiW29iamVjdCBDYW52YXNQYXR0ZXJuXVwiOjEsXCJbb2JqZWN0IEltYWdlXVwiOjEsXCJbb2JqZWN0IENhbnZhc11cIjoxfSxTYz17XCJbb2JqZWN0IEludDhBcnJheV1cIjoxLFwiW29iamVjdCBVaW50OEFycmF5XVwiOjEsXCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiOjEsXCJbb2JqZWN0IEludDE2QXJyYXldXCI6MSxcIltvYmplY3QgVWludDE2QXJyYXldXCI6MSxcIltvYmplY3QgSW50MzJBcnJheV1cIjoxLFwiW29iamVjdCBVaW50MzJBcnJheV1cIjoxLFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCI6MSxcIltvYmplY3QgRmxvYXQ2NEFycmF5XVwiOjF9LENjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsSWM9QXJyYXkucHJvdG90eXBlLFRjPUljLmZvckVhY2gsa2M9SWMuZmlsdGVyLERjPUljLnNsaWNlLEFjPUljLm1hcCxQYz1JYy5yZWR1Y2UsTGM9e30sT2M9ZnVuY3Rpb24oKXtyZXR1cm4gTGMuY3JlYXRlQ2FudmFzKCl9O0xjLmNyZWF0ZUNhbnZhcz1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpfTt2YXIgUmMsRWM9XCJfX2VjX3ByaW1pdGl2ZV9fXCI7ei5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnosZ2V0OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmhhc093blByb3BlcnR5KHQpP3RoaXNbdF06bnVsbH0sc2V0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXNbdF09ZX0sZWFjaDpmdW5jdGlvbih0LGUpe3ZvaWQgMCE9PWUmJih0PXkodCxlKSk7Zm9yKHZhciBuIGluIHRoaXMpdGhpcy5oYXNPd25Qcm9wZXJ0eShuKSYmdCh0aGlzW25dLG4pfSxyZW1vdmVLZXk6ZnVuY3Rpb24odCl7ZGVsZXRlIHRoaXNbdF19fTt2YXIgQmM9KE9iamVjdC5mcmVlemV8fE9iamVjdCkoeyRvdmVycmlkZTpuLGNsb25lOmksbWVyZ2U6cixtZXJnZUFsbDphLGV4dGVuZDpvLGRlZmF1bHRzOnMsY3JlYXRlQ2FudmFzOk9jLGdldENvbnRleHQ6bCxpbmRleE9mOnUsaW5oZXJpdHM6aCxtaXhpbjpjLGlzQXJyYXlMaWtlOmQsZWFjaDpmLG1hcDpwLHJlZHVjZTpnLGZpbHRlcjp2LGZpbmQ6bSxiaW5kOnksY3Vycnk6Xyxpc0FycmF5OngsaXNGdW5jdGlvbjp3LGlzU3RyaW5nOmIsaXNPYmplY3Q6TSxpc0J1aWx0SW5PYmplY3Q6Uyxpc1R5cGVkQXJyYXk6Qyxpc0RvbTpJLGVxTmFOOlQscmV0cmlldmU6ayxyZXRyaWV2ZTI6RCxyZXRyaWV2ZTM6QSxzbGljZTpQLG5vcm1hbGl6ZUNzc0FycmF5OkwsYXNzZXJ0Ok8sdHJpbTpSLHNldEFzUHJpbWl0aXZlOkUsaXNQcmltaXRpdmU6QixjcmVhdGVIYXNoTWFwOk4sY29uY2F0QXJyYXk6Rixub29wOlZ9KSx6Yz1cInVuZGVmaW5lZFwiPT10eXBlb2YgRmxvYXQzMkFycmF5P0FycmF5OkZsb2F0MzJBcnJheSxOYz1ZLEZjPVosVmM9ZWUsR2M9bmUsSGM9KE9iamVjdC5mcmVlemV8fE9iamVjdCkoe2NyZWF0ZTpHLGNvcHk6SCxjbG9uZTpXLHNldDpqLGFkZDpxLHNjYWxlQW5kQWRkOlUsc3ViOlgsbGVuOlksbGVuZ3RoOk5jLGxlblNxdWFyZTpaLGxlbmd0aFNxdWFyZTpGYyxtdWw6JCxkaXY6Syxkb3Q6USxzY2FsZTpKLG5vcm1hbGl6ZTp0ZSxkaXN0YW5jZTplZSxkaXN0OlZjLGRpc3RhbmNlU3F1YXJlOm5lLGRpc3RTcXVhcmU6R2MsbmVnYXRlOmllLGxlcnA6cmUsYXBwbHlUcmFuc2Zvcm06YWUsbWluOm9lLG1heDpzZX0pO2xlLnByb3RvdHlwZT17Y29uc3RydWN0b3I6bGUsX2RyYWdTdGFydDpmdW5jdGlvbih0KXt2YXIgZT10LnRhcmdldDtlJiZlLmRyYWdnYWJsZSYmKHRoaXMuX2RyYWdnaW5nVGFyZ2V0PWUsZS5kcmFnZ2luZz0hMCx0aGlzLl94PXQub2Zmc2V0WCx0aGlzLl95PXQub2Zmc2V0WSx0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHVlKGUsdCksXCJkcmFnc3RhcnRcIix0LmV2ZW50KSl9LF9kcmFnOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2RyYWdnaW5nVGFyZ2V0O2lmKGUpe3ZhciBuPXQub2Zmc2V0WCxpPXQub2Zmc2V0WSxyPW4tdGhpcy5feCxhPWktdGhpcy5feTt0aGlzLl94PW4sdGhpcy5feT1pLGUuZHJpZnQocixhLHQpLHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQodWUoZSx0KSxcImRyYWdcIix0LmV2ZW50KTt2YXIgbz10aGlzLmZpbmRIb3ZlcihuLGksZSkudGFyZ2V0LHM9dGhpcy5fZHJvcFRhcmdldDt0aGlzLl9kcm9wVGFyZ2V0PW8sZSE9PW8mJihzJiZvIT09cyYmdGhpcy5kaXNwYXRjaFRvRWxlbWVudCh1ZShzLHQpLFwiZHJhZ2xlYXZlXCIsdC5ldmVudCksbyYmbyE9PXMmJnRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQodWUobyx0KSxcImRyYWdlbnRlclwiLHQuZXZlbnQpKX19LF9kcmFnRW5kOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2RyYWdnaW5nVGFyZ2V0O2UmJihlLmRyYWdnaW5nPSExKSx0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHVlKGUsdCksXCJkcmFnZW5kXCIsdC5ldmVudCksdGhpcy5fZHJvcFRhcmdldCYmdGhpcy5kaXNwYXRjaFRvRWxlbWVudCh1ZSh0aGlzLl9kcm9wVGFyZ2V0LHQpLFwiZHJvcFwiLHQuZXZlbnQpLHRoaXMuX2RyYWdnaW5nVGFyZ2V0PW51bGwsdGhpcy5fZHJvcFRhcmdldD1udWxsfX07dmFyIFdjPUFycmF5LnByb3RvdHlwZS5zbGljZSxqYz1mdW5jdGlvbigpe3RoaXMuXyRoYW5kbGVycz17fX07amMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpqYyxvbmU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuXyRoYW5kbGVycztpZighZXx8IXQpcmV0dXJuIHRoaXM7aVt0XXx8KGlbdF09W10pO2Zvcih2YXIgcj0wO3I8aVt0XS5sZW5ndGg7cisrKWlmKGlbdF1bcl0uaD09PWUpcmV0dXJuIHRoaXM7cmV0dXJuIGlbdF0ucHVzaCh7aDplLG9uZTohMCxjdHg6bnx8dGhpc30pLHRoaXN9LG9uOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLl8kaGFuZGxlcnM7aWYoIWV8fCF0KXJldHVybiB0aGlzO2lbdF18fChpW3RdPVtdKTtmb3IodmFyIHI9MDtyPGlbdF0ubGVuZ3RoO3IrKylpZihpW3RdW3JdLmg9PT1lKXJldHVybiB0aGlzO3JldHVybiBpW3RdLnB1c2goe2g6ZSxvbmU6ITEsY3R4Om58fHRoaXN9KSx0aGlzfSxpc1NpbGVudDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl8kaGFuZGxlcnM7cmV0dXJuIGVbdF0mJmVbdF0ubGVuZ3RofSxvZmY6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl8kaGFuZGxlcnM7aWYoIXQpcmV0dXJuIHRoaXMuXyRoYW5kbGVycz17fSx0aGlzO2lmKGUpe2lmKG5bdF0pe2Zvcih2YXIgaT1bXSxyPTAsYT1uW3RdLmxlbmd0aDthPnI7cisrKW5bdF1bcl0uaCE9ZSYmaS5wdXNoKG5bdF1bcl0pO25bdF09aX1uW3RdJiYwPT09blt0XS5sZW5ndGgmJmRlbGV0ZSBuW3RdfWVsc2UgZGVsZXRlIG5bdF07cmV0dXJuIHRoaXN9LHRyaWdnZXI6ZnVuY3Rpb24odCl7aWYodGhpcy5fJGhhbmRsZXJzW3RdKXt2YXIgZT1hcmd1bWVudHMsbj1lLmxlbmd0aDtuPjMmJihlPVdjLmNhbGwoZSwxKSk7Zm9yKHZhciBpPXRoaXMuXyRoYW5kbGVyc1t0XSxyPWkubGVuZ3RoLGE9MDtyPmE7KXtzd2l0Y2gobil7Y2FzZSAxOmlbYV0uaC5jYWxsKGlbYV0uY3R4KTticmVhaztjYXNlIDI6aVthXS5oLmNhbGwoaVthXS5jdHgsZVsxXSk7YnJlYWs7Y2FzZSAzOmlbYV0uaC5jYWxsKGlbYV0uY3R4LGVbMV0sZVsyXSk7YnJlYWs7ZGVmYXVsdDppW2FdLmguYXBwbHkoaVthXS5jdHgsZSl9aVthXS5vbmU/KGkuc3BsaWNlKGEsMSksci0tKTphKyt9fXJldHVybiB0aGlzfSx0cmlnZ2VyV2l0aENvbnRleHQ6ZnVuY3Rpb24odCl7aWYodGhpcy5fJGhhbmRsZXJzW3RdKXt2YXIgZT1hcmd1bWVudHMsbj1lLmxlbmd0aDtuPjQmJihlPVdjLmNhbGwoZSwxLGUubGVuZ3RoLTEpKTtmb3IodmFyIGk9ZVtlLmxlbmd0aC0xXSxyPXRoaXMuXyRoYW5kbGVyc1t0XSxhPXIubGVuZ3RoLG89MDthPm87KXtzd2l0Y2gobil7Y2FzZSAxOnJbb10uaC5jYWxsKGkpO2JyZWFrO2Nhc2UgMjpyW29dLmguY2FsbChpLGVbMV0pO2JyZWFrO2Nhc2UgMzpyW29dLmguY2FsbChpLGVbMV0sZVsyXSk7YnJlYWs7ZGVmYXVsdDpyW29dLmguYXBwbHkoaSxlKX1yW29dLm9uZT8oci5zcGxpY2UobywxKSxhLS0pOm8rK319cmV0dXJuIHRoaXN9fTt2YXIgcWM9XCJzaWxlbnRcIjtjZS5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe307dmFyIFVjPVtcImNsaWNrXCIsXCJkYmxjbGlja1wiLFwibW91c2V3aGVlbFwiLFwibW91c2VvdXRcIixcIm1vdXNldXBcIixcIm1vdXNlZG93blwiLFwibW91c2Vtb3ZlXCIsXCJjb250ZXh0bWVudVwiXSxYYz1mdW5jdGlvbih0LGUsbixpKXtqYy5jYWxsKHRoaXMpLHRoaXMuc3RvcmFnZT10LHRoaXMucGFpbnRlcj1lLHRoaXMucGFpbnRlclJvb3Q9aSxuPW58fG5ldyBjZSx0aGlzLnByb3h5PW51bGwsdGhpcy5faG92ZXJlZD17fSx0aGlzLl9sYXN0VG91Y2hNb21lbnQsdGhpcy5fbGFzdFgsdGhpcy5fbGFzdFksbGUuY2FsbCh0aGlzKSx0aGlzLnNldEhhbmRsZXJQcm94eShuKX07WGMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpYYyxzZXRIYW5kbGVyUHJveHk6ZnVuY3Rpb24odCl7dGhpcy5wcm94eSYmdGhpcy5wcm94eS5kaXNwb3NlKCksdCYmKGYoVWMsZnVuY3Rpb24oZSl7dC5vbiYmdC5vbihlLHRoaXNbZV0sdGhpcyl9LHRoaXMpLHQuaGFuZGxlcj10aGlzKSx0aGlzLnByb3h5PXR9LG1vdXNlbW92ZTpmdW5jdGlvbih0KXt2YXIgZT10LnpyWCxuPXQuenJZLGk9dGhpcy5faG92ZXJlZCxyPWkudGFyZ2V0O3ImJiFyLl9fenImJihpPXRoaXMuZmluZEhvdmVyKGkueCxpLnkpLHI9aS50YXJnZXQpO3ZhciBhPXRoaXMuX2hvdmVyZWQ9dGhpcy5maW5kSG92ZXIoZSxuKSxvPWEudGFyZ2V0LHM9dGhpcy5wcm94eTtzLnNldEN1cnNvciYmcy5zZXRDdXJzb3Iobz9vLmN1cnNvcjpcImRlZmF1bHRcIiksciYmbyE9PXImJnRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQoaSxcIm1vdXNlb3V0XCIsdCksdGhpcy5kaXNwYXRjaFRvRWxlbWVudChhLFwibW91c2Vtb3ZlXCIsdCksbyYmbyE9PXImJnRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQoYSxcIm1vdXNlb3ZlclwiLHQpfSxtb3VzZW91dDpmdW5jdGlvbih0KXt0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHRoaXMuX2hvdmVyZWQsXCJtb3VzZW91dFwiLHQpO3ZhciBlLG49dC50b0VsZW1lbnR8fHQucmVsYXRlZFRhcmdldDtkbyBuPW4mJm4ucGFyZW50Tm9kZTt3aGlsZShuJiY5IT1uLm5vZGVUeXBlJiYhKGU9bj09PXRoaXMucGFpbnRlclJvb3QpKTshZSYmdGhpcy50cmlnZ2VyKFwiZ2xvYmFsb3V0XCIse2V2ZW50OnR9KX0scmVzaXplOmZ1bmN0aW9uKCl7dGhpcy5faG92ZXJlZD17fX0sZGlzcGF0Y2g6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzW3RdO24mJm4uY2FsbCh0aGlzLGUpfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5wcm94eS5kaXNwb3NlKCksdGhpcy5zdG9yYWdlPXRoaXMucHJveHk9dGhpcy5wYWludGVyPW51bGx9LHNldEN1cnNvclN0eWxlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHJveHk7ZS5zZXRDdXJzb3ImJmUuc2V0Q3Vyc29yKHQpfSxkaXNwYXRjaFRvRWxlbWVudDpmdW5jdGlvbih0LGUsbil7dD10fHx7fTt2YXIgaT10LnRhcmdldDtpZighaXx8IWkuc2lsZW50KXtmb3IodmFyIHI9XCJvblwiK2UsYT1oZShlLHQsbik7aSYmKGlbcl0mJihhLmNhbmNlbEJ1YmJsZT1pW3JdLmNhbGwoaSxhKSksaS50cmlnZ2VyKGUsYSksaT1pLnBhcmVudCwhYS5jYW5jZWxCdWJibGUpOyk7YS5jYW5jZWxCdWJibGV8fCh0aGlzLnRyaWdnZXIoZSxhKSx0aGlzLnBhaW50ZXImJnRoaXMucGFpbnRlci5lYWNoT3RoZXJMYXllcihmdW5jdGlvbih0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W3JdJiZ0W3JdLmNhbGwodCxhKSx0LnRyaWdnZXImJnQudHJpZ2dlcihlLGEpfSkpfX0sZmluZEhvdmVyOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9dGhpcy5zdG9yYWdlLmdldERpc3BsYXlMaXN0KCkscj17eDp0LHk6ZX0sYT1pLmxlbmd0aC0xO2E+PTA7YS0tKXt2YXIgbztpZihpW2FdIT09biYmIWlbYV0uaWdub3JlJiYobz1kZShpW2FdLHQsZSkpJiYoIXIudG9wVGFyZ2V0JiYoci50b3BUYXJnZXQ9aVthXSksbyE9PXFjKSl7ci50YXJnZXQ9aVthXTticmVha319cmV0dXJuIHJ9fSxmKFtcImNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNld2hlZWxcIixcImRibGNsaWNrXCIsXCJjb250ZXh0bWVudVwiXSxmdW5jdGlvbih0KXtYYy5wcm90b3R5cGVbdF09ZnVuY3Rpb24oZSl7dmFyIG49dGhpcy5maW5kSG92ZXIoZS56clgsZS56clkpLGk9bi50YXJnZXQ7aWYoXCJtb3VzZWRvd25cIj09PXQpdGhpcy5fZG93bkVsPWksdGhpcy5fZG93blBvaW50PVtlLnpyWCxlLnpyWV0sdGhpcy5fdXBFbD1pO2Vsc2UgaWYoXCJtb3VzZXVwXCI9PT10KXRoaXMuX3VwRWw9aTtlbHNlIGlmKFwiY2xpY2tcIj09PXQpe2lmKHRoaXMuX2Rvd25FbCE9PXRoaXMuX3VwRWx8fCF0aGlzLl9kb3duUG9pbnR8fFZjKHRoaXMuX2Rvd25Qb2ludCxbZS56clgsZS56clldKT40KXJldHVybjt0aGlzLl9kb3duUG9pbnQ9bnVsbH10aGlzLmRpc3BhdGNoVG9FbGVtZW50KG4sdCxlKX19KSxjKFhjLGpjKSxjKFhjLGxlKTt2YXIgWWM9XCJ1bmRlZmluZWRcIj09dHlwZW9mIEZsb2F0MzJBcnJheT9BcnJheTpGbG9hdDMyQXJyYXksWmM9KE9iamVjdC5mcmVlemV8fE9iamVjdCkoe2NyZWF0ZTpmZSxpZGVudGl0eTpwZSxjb3B5OmdlLG11bDp2ZSx0cmFuc2xhdGU6bWUscm90YXRlOnllLHNjYWxlOl9lLGludmVydDp4ZSxjbG9uZTp3ZX0pLCRjPXBlLEtjPTVlLTUsUWM9ZnVuY3Rpb24odCl7dD10fHx7fSx0LnBvc2l0aW9ufHwodGhpcy5wb3NpdGlvbj1bMCwwXSksbnVsbD09dC5yb3RhdGlvbiYmKHRoaXMucm90YXRpb249MCksdC5zY2FsZXx8KHRoaXMuc2NhbGU9WzEsMV0pLHRoaXMub3JpZ2luPXRoaXMub3JpZ2lufHxudWxsfSxKYz1RYy5wcm90b3R5cGU7SmMudHJhbnNmb3JtPW51bGwsSmMubmVlZExvY2FsVHJhbnNmb3JtPWZ1bmN0aW9uKCl7cmV0dXJuIGJlKHRoaXMucm90YXRpb24pfHxiZSh0aGlzLnBvc2l0aW9uWzBdKXx8YmUodGhpcy5wb3NpdGlvblsxXSl8fGJlKHRoaXMuc2NhbGVbMF0tMSl8fGJlKHRoaXMuc2NhbGVbMV0tMSl9LEpjLnVwZGF0ZVRyYW5zZm9ybT1mdW5jdGlvbigpe3ZhciB0PXRoaXMucGFyZW50LGU9dCYmdC50cmFuc2Zvcm0sbj10aGlzLm5lZWRMb2NhbFRyYW5zZm9ybSgpLGk9dGhpcy50cmFuc2Zvcm07cmV0dXJuIG58fGU/KGk9aXx8ZmUoKSxuP3RoaXMuZ2V0TG9jYWxUcmFuc2Zvcm0oaSk6JGMoaSksZSYmKG4/dmUoaSx0LnRyYW5zZm9ybSxpKTpnZShpLHQudHJhbnNmb3JtKSksdGhpcy50cmFuc2Zvcm09aSx0aGlzLmludlRyYW5zZm9ybT10aGlzLmludlRyYW5zZm9ybXx8ZmUoKSx2b2lkIHhlKHRoaXMuaW52VHJhbnNmb3JtLGkpKTp2b2lkKGkmJiRjKGkpKX0sSmMuZ2V0TG9jYWxUcmFuc2Zvcm09ZnVuY3Rpb24odCl7cmV0dXJuIFFjLmdldExvY2FsVHJhbnNmb3JtKHRoaXMsdCl9LEpjLnNldFRyYW5zZm9ybT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnRyYW5zZm9ybSxuPXQuZHByfHwxO2U/dC5zZXRUcmFuc2Zvcm0obiplWzBdLG4qZVsxXSxuKmVbMl0sbiplWzNdLG4qZVs0XSxuKmVbNV0pOnQuc2V0VHJhbnNmb3JtKG4sMCwwLG4sMCwwKX0sSmMucmVzdG9yZVRyYW5zZm9ybT1mdW5jdGlvbih0KXt2YXIgZT10LmRwcnx8MTt0LnNldFRyYW5zZm9ybShlLDAsMCxlLDAsMCl9O3ZhciB0ZD1bXTtKYy5kZWNvbXBvc2VUcmFuc2Zvcm09ZnVuY3Rpb24oKXtpZih0aGlzLnRyYW5zZm9ybSl7dmFyIHQ9dGhpcy5wYXJlbnQsZT10aGlzLnRyYW5zZm9ybTt0JiZ0LnRyYW5zZm9ybSYmKHZlKHRkLHQuaW52VHJhbnNmb3JtLGUpLGU9dGQpO3ZhciBuPWVbMF0qZVswXStlWzFdKmVbMV0saT1lWzJdKmVbMl0rZVszXSplWzNdLHI9dGhpcy5wb3NpdGlvbixhPXRoaXMuc2NhbGU7YmUobi0xKSYmKG49TWF0aC5zcXJ0KG4pKSxiZShpLTEpJiYoaT1NYXRoLnNxcnQoaSkpLGVbMF08MCYmKG49LW4pLGVbM108MCYmKGk9LWkpLHJbMF09ZVs0XSxyWzFdPWVbNV0sYVswXT1uLGFbMV09aSx0aGlzLnJvdGF0aW9uPU1hdGguYXRhbjIoLWVbMV0vaSxlWzBdL24pfX0sSmMuZ2V0R2xvYmFsU2NhbGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnRyYW5zZm9ybTtpZighdClyZXR1cm5bMSwxXTt2YXIgZT1NYXRoLnNxcnQodFswXSp0WzBdK3RbMV0qdFsxXSksbj1NYXRoLnNxcnQodFsyXSp0WzJdK3RbM10qdFszXSk7cmV0dXJuIHRbMF08MCYmKGU9LWUpLHRbM108MCYmKG49LW4pLFtlLG5dfSxKYy50cmFuc2Zvcm1Db29yZFRvTG9jYWw9ZnVuY3Rpb24odCxlKXt2YXIgbj1bdCxlXSxpPXRoaXMuaW52VHJhbnNmb3JtO3JldHVybiBpJiZhZShuLG4saSksbn0sSmMudHJhbnNmb3JtQ29vcmRUb0dsb2JhbD1mdW5jdGlvbih0LGUpe3ZhciBuPVt0LGVdLGk9dGhpcy50cmFuc2Zvcm07cmV0dXJuIGkmJmFlKG4sbixpKSxufSxRYy5nZXRMb2NhbFRyYW5zZm9ybT1mdW5jdGlvbih0LGUpe2U9ZXx8W10sJGMoZSk7dmFyIG49dC5vcmlnaW4saT10LnNjYWxlfHxbMSwxXSxyPXQucm90YXRpb258fDAsYT10LnBvc2l0aW9ufHxbMCwwXTtyZXR1cm4gbiYmKGVbNF0tPW5bMF0sZVs1XS09blsxXSksX2UoZSxlLGkpLHImJnllKGUsZSxyKSxuJiYoZVs0XSs9blswXSxlWzVdKz1uWzFdKSxlWzRdKz1hWzBdLGVbNV0rPWFbMV0sZX07dmFyIGVkPXtsaW5lYXI6ZnVuY3Rpb24odCl7cmV0dXJuIHR9LHF1YWRyYXRpY0luOmZ1bmN0aW9uKHQpe3JldHVybiB0KnR9LHF1YWRyYXRpY091dDpmdW5jdGlvbih0KXtyZXR1cm4gdCooMi10KX0scXVhZHJhdGljSW5PdXQ6ZnVuY3Rpb24odCl7cmV0dXJuKHQqPTIpPDE/LjUqdCp0Oi0uNSooLS10Kih0LTIpLTEpfSxjdWJpY0luOmZ1bmN0aW9uKHQpe3JldHVybiB0KnQqdH0sY3ViaWNPdXQ6ZnVuY3Rpb24odCl7cmV0dXJuLS10KnQqdCsxfSxjdWJpY0luT3V0OmZ1bmN0aW9uKHQpe3JldHVybih0Kj0yKTwxPy41KnQqdCp0Oi41KigodC09MikqdCp0KzIpfSxxdWFydGljSW46ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0KnR9LHF1YXJ0aWNPdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIDEtIC0tdCp0KnQqdH0scXVhcnRpY0luT3V0OmZ1bmN0aW9uKHQpe3JldHVybih0Kj0yKTwxPy41KnQqdCp0KnQ6LS41KigodC09MikqdCp0KnQtMil9LHF1aW50aWNJbjpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnQqdCp0fSxxdWludGljT3V0OmZ1bmN0aW9uKHQpe3JldHVybi0tdCp0KnQqdCp0KzF9LHF1aW50aWNJbk91dDpmdW5jdGlvbih0KXtyZXR1cm4odCo9Mik8MT8uNSp0KnQqdCp0KnQ6LjUqKCh0LT0yKSp0KnQqdCp0KzIpfSxzaW51c29pZGFsSW46ZnVuY3Rpb24odCl7cmV0dXJuIDEtTWF0aC5jb3ModCpNYXRoLlBJLzIpfSxzaW51c29pZGFsT3V0OmZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnNpbih0Kk1hdGguUEkvMil9LHNpbnVzb2lkYWxJbk91dDpmdW5jdGlvbih0KXtyZXR1cm4uNSooMS1NYXRoLmNvcyhNYXRoLlBJKnQpKX0sZXhwb25lbnRpYWxJbjpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDpNYXRoLnBvdygxMDI0LHQtMSl9LGV4cG9uZW50aWFsT3V0OmZ1bmN0aW9uKHQpe3JldHVybiAxPT09dD8xOjEtTWF0aC5wb3coMiwtMTAqdCl9LGV4cG9uZW50aWFsSW5PdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10PzA6MT09PXQ/MToodCo9Mik8MT8uNSpNYXRoLnBvdygxMDI0LHQtMSk6LjUqKC1NYXRoLnBvdygyLC0xMCoodC0xKSkrMil9LGNpcmN1bGFySW46ZnVuY3Rpb24odCl7cmV0dXJuIDEtTWF0aC5zcXJ0KDEtdCp0KX0sY2lyY3VsYXJPdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGguc3FydCgxLSAtLXQqdCl9LGNpcmN1bGFySW5PdXQ6ZnVuY3Rpb24odCl7cmV0dXJuKHQqPTIpPDE/LS41KihNYXRoLnNxcnQoMS10KnQpLTEpOi41KihNYXRoLnNxcnQoMS0odC09MikqdCkrMSl9LGVsYXN0aWNJbjpmdW5jdGlvbih0KXt2YXIgZSxuPS4xLGk9LjQ7cmV0dXJuIDA9PT10PzA6MT09PXQ/MTooIW58fDE+bj8obj0xLGU9aS80KTplPWkqTWF0aC5hc2luKDEvbikvKDIqTWF0aC5QSSksLShuKk1hdGgucG93KDIsMTAqKHQtPTEpKSpNYXRoLnNpbigyKih0LWUpKk1hdGguUEkvaSkpKX0sZWxhc3RpY091dDpmdW5jdGlvbih0KXt2YXIgZSxuPS4xLGk9LjQ7cmV0dXJuIDA9PT10PzA6MT09PXQ/MTooIW58fDE+bj8obj0xLGU9aS80KTplPWkqTWF0aC5hc2luKDEvbikvKDIqTWF0aC5QSSksbipNYXRoLnBvdygyLC0xMCp0KSpNYXRoLnNpbigyKih0LWUpKk1hdGguUEkvaSkrMSl9LGVsYXN0aWNJbk91dDpmdW5jdGlvbih0KXt2YXIgZSxuPS4xLGk9LjQ7cmV0dXJuIDA9PT10PzA6MT09PXQ/MTooIW58fDE+bj8obj0xLGU9aS80KTplPWkqTWF0aC5hc2luKDEvbikvKDIqTWF0aC5QSSksKHQqPTIpPDE/LS41Km4qTWF0aC5wb3coMiwxMCoodC09MSkpKk1hdGguc2luKDIqKHQtZSkqTWF0aC5QSS9pKTpuKk1hdGgucG93KDIsLTEwKih0LT0xKSkqTWF0aC5zaW4oMioodC1lKSpNYXRoLlBJL2kpKi41KzEpfSxiYWNrSW46ZnVuY3Rpb24odCl7dmFyIGU9MS43MDE1ODtyZXR1cm4gdCp0KigoZSsxKSp0LWUpfSxiYWNrT3V0OmZ1bmN0aW9uKHQpe3ZhciBlPTEuNzAxNTg7cmV0dXJuLS10KnQqKChlKzEpKnQrZSkrMX0sYmFja0luT3V0OmZ1bmN0aW9uKHQpe3ZhciBlPTIuNTk0OTA5NTtyZXR1cm4odCo9Mik8MT8uNSp0KnQqKChlKzEpKnQtZSk6LjUqKCh0LT0yKSp0KigoZSsxKSp0K2UpKzIpfSxib3VuY2VJbjpmdW5jdGlvbih0KXtyZXR1cm4gMS1lZC5ib3VuY2VPdXQoMS10KX0sYm91bmNlT3V0OmZ1bmN0aW9uKHQpe3JldHVybiAxLzIuNzU+dD83LjU2MjUqdCp0OjIvMi43NT50PzcuNTYyNSoodC09MS41LzIuNzUpKnQrLjc1OjIuNS8yLjc1PnQ/Ny41NjI1Kih0LT0yLjI1LzIuNzUpKnQrLjkzNzU6Ny41NjI1Kih0LT0yLjYyNS8yLjc1KSp0Ky45ODQzNzV9LGJvdW5jZUluT3V0OmZ1bmN0aW9uKHQpe3JldHVybi41PnQ/LjUqZWQuYm91bmNlSW4oMip0KTouNSplZC5ib3VuY2VPdXQoMip0LTEpKy41fX07TWUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpNZSxzdGVwOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5faW5pdGlhbGl6ZWR8fCh0aGlzLl9zdGFydFRpbWU9dCt0aGlzLl9kZWxheSx0aGlzLl9pbml0aWFsaXplZD0hMCksdGhpcy5fcGF1c2VkKXJldHVybiB2b2lkKHRoaXMuX3BhdXNlZFRpbWUrPWUpO1xudmFyIG49KHQtdGhpcy5fc3RhcnRUaW1lLXRoaXMuX3BhdXNlZFRpbWUpL3RoaXMuX2xpZmU7aWYoISgwPm4pKXtuPU1hdGgubWluKG4sMSk7dmFyIGk9dGhpcy5lYXNpbmcscj1cInN0cmluZ1wiPT10eXBlb2YgaT9lZFtpXTppLGE9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yKG4pOm47cmV0dXJuIHRoaXMuZmlyZShcImZyYW1lXCIsYSksMT09bj90aGlzLmxvb3A/KHRoaXMucmVzdGFydCh0KSxcInJlc3RhcnRcIik6KHRoaXMuX25lZWRzUmVtb3ZlPSEwLFwiZGVzdHJveVwiKTpudWxsfX0scmVzdGFydDpmdW5jdGlvbih0KXt2YXIgZT0odC10aGlzLl9zdGFydFRpbWUtdGhpcy5fcGF1c2VkVGltZSkldGhpcy5fbGlmZTt0aGlzLl9zdGFydFRpbWU9dC1lK3RoaXMuZ2FwLHRoaXMuX3BhdXNlZFRpbWU9MCx0aGlzLl9uZWVkc1JlbW92ZT0hMX0sZmlyZTpmdW5jdGlvbih0LGUpe3Q9XCJvblwiK3QsdGhpc1t0XSYmdGhpc1t0XSh0aGlzLl90YXJnZXQsZSl9LHBhdXNlOmZ1bmN0aW9uKCl7dGhpcy5fcGF1c2VkPSEwfSxyZXN1bWU6ZnVuY3Rpb24oKXt0aGlzLl9wYXVzZWQ9ITF9fTt2YXIgbmQ9ZnVuY3Rpb24oKXt0aGlzLmhlYWQ9bnVsbCx0aGlzLnRhaWw9bnVsbCx0aGlzLl9sZW49MH0saWQ9bmQucHJvdG90eXBlO2lkLmluc2VydD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgcmQodCk7cmV0dXJuIHRoaXMuaW5zZXJ0RW50cnkoZSksZX0saWQuaW5zZXJ0RW50cnk9ZnVuY3Rpb24odCl7dGhpcy5oZWFkPyh0aGlzLnRhaWwubmV4dD10LHQucHJldj10aGlzLnRhaWwsdC5uZXh0PW51bGwsdGhpcy50YWlsPXQpOnRoaXMuaGVhZD10aGlzLnRhaWw9dCx0aGlzLl9sZW4rK30saWQucmVtb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXQucHJldixuPXQubmV4dDtlP2UubmV4dD1uOnRoaXMuaGVhZD1uLG4/bi5wcmV2PWU6dGhpcy50YWlsPWUsdC5uZXh0PXQucHJldj1udWxsLHRoaXMuX2xlbi0tfSxpZC5sZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGVufSxpZC5jbGVhcj1mdW5jdGlvbigpe3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbCx0aGlzLl9sZW49MH07dmFyIHJkPWZ1bmN0aW9uKHQpe3RoaXMudmFsdWU9dCx0aGlzLm5leHQsdGhpcy5wcmV2fSxhZD1mdW5jdGlvbih0KXt0aGlzLl9saXN0PW5ldyBuZCx0aGlzLl9tYXA9e30sdGhpcy5fbWF4U2l6ZT10fHwxMCx0aGlzLl9sYXN0UmVtb3ZlZEVudHJ5PW51bGx9LG9kPWFkLnByb3RvdHlwZTtvZC5wdXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9saXN0LGk9dGhpcy5fbWFwLHI9bnVsbDtpZihudWxsPT1pW3RdKXt2YXIgYT1uLmxlbigpLG89dGhpcy5fbGFzdFJlbW92ZWRFbnRyeTtpZihhPj10aGlzLl9tYXhTaXplJiZhPjApe3ZhciBzPW4uaGVhZDtuLnJlbW92ZShzKSxkZWxldGUgaVtzLmtleV0scj1zLnZhbHVlLHRoaXMuX2xhc3RSZW1vdmVkRW50cnk9c31vP28udmFsdWU9ZTpvPW5ldyByZChlKSxvLmtleT10LG4uaW5zZXJ0RW50cnkobyksaVt0XT1vfXJldHVybiByfSxvZC5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fbWFwW3RdLG49dGhpcy5fbGlzdDtyZXR1cm4gbnVsbCE9ZT8oZSE9PW4udGFpbCYmKG4ucmVtb3ZlKGUpLG4uaW5zZXJ0RW50cnkoZSkpLGUudmFsdWUpOnZvaWQgMH0sb2QuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9saXN0LmNsZWFyKCksdGhpcy5fbWFwPXt9fTt2YXIgc2Q9e3RyYW5zcGFyZW50OlswLDAsMCwwXSxhbGljZWJsdWU6WzI0MCwyNDgsMjU1LDFdLGFudGlxdWV3aGl0ZTpbMjUwLDIzNSwyMTUsMV0sYXF1YTpbMCwyNTUsMjU1LDFdLGFxdWFtYXJpbmU6WzEyNywyNTUsMjEyLDFdLGF6dXJlOlsyNDAsMjU1LDI1NSwxXSxiZWlnZTpbMjQ1LDI0NSwyMjAsMV0sYmlzcXVlOlsyNTUsMjI4LDE5NiwxXSxibGFjazpbMCwwLDAsMV0sYmxhbmNoZWRhbG1vbmQ6WzI1NSwyMzUsMjA1LDFdLGJsdWU6WzAsMCwyNTUsMV0sYmx1ZXZpb2xldDpbMTM4LDQzLDIyNiwxXSxicm93bjpbMTY1LDQyLDQyLDFdLGJ1cmx5d29vZDpbMjIyLDE4NCwxMzUsMV0sY2FkZXRibHVlOls5NSwxNTgsMTYwLDFdLGNoYXJ0cmV1c2U6WzEyNywyNTUsMCwxXSxjaG9jb2xhdGU6WzIxMCwxMDUsMzAsMV0sY29yYWw6WzI1NSwxMjcsODAsMV0sY29ybmZsb3dlcmJsdWU6WzEwMCwxNDksMjM3LDFdLGNvcm5zaWxrOlsyNTUsMjQ4LDIyMCwxXSxjcmltc29uOlsyMjAsMjAsNjAsMV0sY3lhbjpbMCwyNTUsMjU1LDFdLGRhcmtibHVlOlswLDAsMTM5LDFdLGRhcmtjeWFuOlswLDEzOSwxMzksMV0sZGFya2dvbGRlbnJvZDpbMTg0LDEzNCwxMSwxXSxkYXJrZ3JheTpbMTY5LDE2OSwxNjksMV0sZGFya2dyZWVuOlswLDEwMCwwLDFdLGRhcmtncmV5OlsxNjksMTY5LDE2OSwxXSxkYXJra2hha2k6WzE4OSwxODMsMTA3LDFdLGRhcmttYWdlbnRhOlsxMzksMCwxMzksMV0sZGFya29saXZlZ3JlZW46Wzg1LDEwNyw0NywxXSxkYXJrb3JhbmdlOlsyNTUsMTQwLDAsMV0sZGFya29yY2hpZDpbMTUzLDUwLDIwNCwxXSxkYXJrcmVkOlsxMzksMCwwLDFdLGRhcmtzYWxtb246WzIzMywxNTAsMTIyLDFdLGRhcmtzZWFncmVlbjpbMTQzLDE4OCwxNDMsMV0sZGFya3NsYXRlYmx1ZTpbNzIsNjEsMTM5LDFdLGRhcmtzbGF0ZWdyYXk6WzQ3LDc5LDc5LDFdLGRhcmtzbGF0ZWdyZXk6WzQ3LDc5LDc5LDFdLGRhcmt0dXJxdW9pc2U6WzAsMjA2LDIwOSwxXSxkYXJrdmlvbGV0OlsxNDgsMCwyMTEsMV0sZGVlcHBpbms6WzI1NSwyMCwxNDcsMV0sZGVlcHNreWJsdWU6WzAsMTkxLDI1NSwxXSxkaW1ncmF5OlsxMDUsMTA1LDEwNSwxXSxkaW1ncmV5OlsxMDUsMTA1LDEwNSwxXSxkb2RnZXJibHVlOlszMCwxNDQsMjU1LDFdLGZpcmVicmljazpbMTc4LDM0LDM0LDFdLGZsb3JhbHdoaXRlOlsyNTUsMjUwLDI0MCwxXSxmb3Jlc3RncmVlbjpbMzQsMTM5LDM0LDFdLGZ1Y2hzaWE6WzI1NSwwLDI1NSwxXSxnYWluc2Jvcm86WzIyMCwyMjAsMjIwLDFdLGdob3N0d2hpdGU6WzI0OCwyNDgsMjU1LDFdLGdvbGQ6WzI1NSwyMTUsMCwxXSxnb2xkZW5yb2Q6WzIxOCwxNjUsMzIsMV0sZ3JheTpbMTI4LDEyOCwxMjgsMV0sZ3JlZW46WzAsMTI4LDAsMV0sZ3JlZW55ZWxsb3c6WzE3MywyNTUsNDcsMV0sZ3JleTpbMTI4LDEyOCwxMjgsMV0saG9uZXlkZXc6WzI0MCwyNTUsMjQwLDFdLGhvdHBpbms6WzI1NSwxMDUsMTgwLDFdLGluZGlhbnJlZDpbMjA1LDkyLDkyLDFdLGluZGlnbzpbNzUsMCwxMzAsMV0saXZvcnk6WzI1NSwyNTUsMjQwLDFdLGtoYWtpOlsyNDAsMjMwLDE0MCwxXSxsYXZlbmRlcjpbMjMwLDIzMCwyNTAsMV0sbGF2ZW5kZXJibHVzaDpbMjU1LDI0MCwyNDUsMV0sbGF3bmdyZWVuOlsxMjQsMjUyLDAsMV0sbGVtb25jaGlmZm9uOlsyNTUsMjUwLDIwNSwxXSxsaWdodGJsdWU6WzE3MywyMTYsMjMwLDFdLGxpZ2h0Y29yYWw6WzI0MCwxMjgsMTI4LDFdLGxpZ2h0Y3lhbjpbMjI0LDI1NSwyNTUsMV0sbGlnaHRnb2xkZW5yb2R5ZWxsb3c6WzI1MCwyNTAsMjEwLDFdLGxpZ2h0Z3JheTpbMjExLDIxMSwyMTEsMV0sbGlnaHRncmVlbjpbMTQ0LDIzOCwxNDQsMV0sbGlnaHRncmV5OlsyMTEsMjExLDIxMSwxXSxsaWdodHBpbms6WzI1NSwxODIsMTkzLDFdLGxpZ2h0c2FsbW9uOlsyNTUsMTYwLDEyMiwxXSxsaWdodHNlYWdyZWVuOlszMiwxNzgsMTcwLDFdLGxpZ2h0c2t5Ymx1ZTpbMTM1LDIwNiwyNTAsMV0sbGlnaHRzbGF0ZWdyYXk6WzExOSwxMzYsMTUzLDFdLGxpZ2h0c2xhdGVncmV5OlsxMTksMTM2LDE1MywxXSxsaWdodHN0ZWVsYmx1ZTpbMTc2LDE5NiwyMjIsMV0sbGlnaHR5ZWxsb3c6WzI1NSwyNTUsMjI0LDFdLGxpbWU6WzAsMjU1LDAsMV0sbGltZWdyZWVuOls1MCwyMDUsNTAsMV0sbGluZW46WzI1MCwyNDAsMjMwLDFdLG1hZ2VudGE6WzI1NSwwLDI1NSwxXSxtYXJvb246WzEyOCwwLDAsMV0sbWVkaXVtYXF1YW1hcmluZTpbMTAyLDIwNSwxNzAsMV0sbWVkaXVtYmx1ZTpbMCwwLDIwNSwxXSxtZWRpdW1vcmNoaWQ6WzE4Niw4NSwyMTEsMV0sbWVkaXVtcHVycGxlOlsxNDcsMTEyLDIxOSwxXSxtZWRpdW1zZWFncmVlbjpbNjAsMTc5LDExMywxXSxtZWRpdW1zbGF0ZWJsdWU6WzEyMywxMDQsMjM4LDFdLG1lZGl1bXNwcmluZ2dyZWVuOlswLDI1MCwxNTQsMV0sbWVkaXVtdHVycXVvaXNlOls3MiwyMDksMjA0LDFdLG1lZGl1bXZpb2xldHJlZDpbMTk5LDIxLDEzMywxXSxtaWRuaWdodGJsdWU6WzI1LDI1LDExMiwxXSxtaW50Y3JlYW06WzI0NSwyNTUsMjUwLDFdLG1pc3R5cm9zZTpbMjU1LDIyOCwyMjUsMV0sbW9jY2FzaW46WzI1NSwyMjgsMTgxLDFdLG5hdmFqb3doaXRlOlsyNTUsMjIyLDE3MywxXSxuYXZ5OlswLDAsMTI4LDFdLG9sZGxhY2U6WzI1MywyNDUsMjMwLDFdLG9saXZlOlsxMjgsMTI4LDAsMV0sb2xpdmVkcmFiOlsxMDcsMTQyLDM1LDFdLG9yYW5nZTpbMjU1LDE2NSwwLDFdLG9yYW5nZXJlZDpbMjU1LDY5LDAsMV0sb3JjaGlkOlsyMTgsMTEyLDIxNCwxXSxwYWxlZ29sZGVucm9kOlsyMzgsMjMyLDE3MCwxXSxwYWxlZ3JlZW46WzE1MiwyNTEsMTUyLDFdLHBhbGV0dXJxdW9pc2U6WzE3NSwyMzgsMjM4LDFdLHBhbGV2aW9sZXRyZWQ6WzIxOSwxMTIsMTQ3LDFdLHBhcGF5YXdoaXA6WzI1NSwyMzksMjEzLDFdLHBlYWNocHVmZjpbMjU1LDIxOCwxODUsMV0scGVydTpbMjA1LDEzMyw2MywxXSxwaW5rOlsyNTUsMTkyLDIwMywxXSxwbHVtOlsyMjEsMTYwLDIyMSwxXSxwb3dkZXJibHVlOlsxNzYsMjI0LDIzMCwxXSxwdXJwbGU6WzEyOCwwLDEyOCwxXSxyZWQ6WzI1NSwwLDAsMV0scm9zeWJyb3duOlsxODgsMTQzLDE0MywxXSxyb3lhbGJsdWU6WzY1LDEwNSwyMjUsMV0sc2FkZGxlYnJvd246WzEzOSw2OSwxOSwxXSxzYWxtb246WzI1MCwxMjgsMTE0LDFdLHNhbmR5YnJvd246WzI0NCwxNjQsOTYsMV0sc2VhZ3JlZW46WzQ2LDEzOSw4NywxXSxzZWFzaGVsbDpbMjU1LDI0NSwyMzgsMV0sc2llbm5hOlsxNjAsODIsNDUsMV0sc2lsdmVyOlsxOTIsMTkyLDE5MiwxXSxza3libHVlOlsxMzUsMjA2LDIzNSwxXSxzbGF0ZWJsdWU6WzEwNiw5MCwyMDUsMV0sc2xhdGVncmF5OlsxMTIsMTI4LDE0NCwxXSxzbGF0ZWdyZXk6WzExMiwxMjgsMTQ0LDFdLHNub3c6WzI1NSwyNTAsMjUwLDFdLHNwcmluZ2dyZWVuOlswLDI1NSwxMjcsMV0sc3RlZWxibHVlOls3MCwxMzAsMTgwLDFdLHRhbjpbMjEwLDE4MCwxNDAsMV0sdGVhbDpbMCwxMjgsMTI4LDFdLHRoaXN0bGU6WzIxNiwxOTEsMjE2LDFdLHRvbWF0bzpbMjU1LDk5LDcxLDFdLHR1cnF1b2lzZTpbNjQsMjI0LDIwOCwxXSx2aW9sZXQ6WzIzOCwxMzAsMjM4LDFdLHdoZWF0OlsyNDUsMjIyLDE3OSwxXSx3aGl0ZTpbMjU1LDI1NSwyNTUsMV0sd2hpdGVzbW9rZTpbMjQ1LDI0NSwyNDUsMV0seWVsbG93OlsyNTUsMjU1LDAsMV0seWVsbG93Z3JlZW46WzE1NCwyMDUsNTAsMV19LGxkPW5ldyBhZCgyMCksdWQ9bnVsbCxoZD1GZSxjZD1WZSxkZD0oT2JqZWN0LmZyZWV6ZXx8T2JqZWN0KSh7cGFyc2U6UmUsbGlmdDp6ZSx0b0hleDpOZSxmYXN0TGVycDpGZSxmYXN0TWFwVG9Db2xvcjpoZCxsZXJwOlZlLG1hcFRvQ29sb3I6Y2QsbW9kaWZ5SFNMOkdlLG1vZGlmeUFscGhhOkhlLHN0cmluZ2lmeTpXZX0pLGZkPUFycmF5LnByb3RvdHlwZS5zbGljZSxwZD1mdW5jdGlvbih0LGUsbixpKXt0aGlzLl90cmFja3M9e30sdGhpcy5fdGFyZ2V0PXQsdGhpcy5fbG9vcD1lfHwhMSx0aGlzLl9nZXR0ZXI9bnx8amUsdGhpcy5fc2V0dGVyPWl8fHFlLHRoaXMuX2NsaXBDb3VudD0wLHRoaXMuX2RlbGF5PTAsdGhpcy5fZG9uZUxpc3Q9W10sdGhpcy5fb25mcmFtZUxpc3Q9W10sdGhpcy5fY2xpcExpc3Q9W119O3BkLnByb3RvdHlwZT17d2hlbjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX3RyYWNrcztmb3IodmFyIGkgaW4gZSlpZihlLmhhc093blByb3BlcnR5KGkpKXtpZighbltpXSl7bltpXT1bXTt2YXIgcj10aGlzLl9nZXR0ZXIodGhpcy5fdGFyZ2V0LGkpO2lmKG51bGw9PXIpY29udGludWU7MCE9PXQmJm5baV0ucHVzaCh7dGltZTowLHZhbHVlOkplKHIpfSl9bltpXS5wdXNoKHt0aW1lOnQsdmFsdWU6ZVtpXX0pfXJldHVybiB0aGlzfSxkdXJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX29uZnJhbWVMaXN0LnB1c2godCksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHRoaXMuX2NsaXBMaXN0Lmxlbmd0aDt0KyspdGhpcy5fY2xpcExpc3RbdF0ucGF1c2UoKTt0aGlzLl9wYXVzZWQ9ITB9LHJlc3VtZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8dGhpcy5fY2xpcExpc3QubGVuZ3RoO3QrKyl0aGlzLl9jbGlwTGlzdFt0XS5yZXN1bWUoKTt0aGlzLl9wYXVzZWQ9ITF9LGlzUGF1c2VkOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9wYXVzZWR9LF9kb25lQ2FsbGJhY2s6ZnVuY3Rpb24oKXt0aGlzLl90cmFja3M9e30sdGhpcy5fY2xpcExpc3QubGVuZ3RoPTA7Zm9yKHZhciB0PXRoaXMuX2RvbmVMaXN0LGU9dC5sZW5ndGgsbj0wO2U+bjtuKyspdFtuXS5jYWxsKHRoaXMpfSxzdGFydDpmdW5jdGlvbih0LGUpe3ZhciBuLGk9dGhpcyxyPTAsYT1mdW5jdGlvbigpe3ItLSxyfHxpLl9kb25lQ2FsbGJhY2soKX07Zm9yKHZhciBvIGluIHRoaXMuX3RyYWNrcylpZih0aGlzLl90cmFja3MuaGFzT3duUHJvcGVydHkobykpe3ZhciBzPW5uKHRoaXMsdCxhLHRoaXMuX3RyYWNrc1tvXSxvLGUpO3MmJih0aGlzLl9jbGlwTGlzdC5wdXNoKHMpLHIrKyx0aGlzLmFuaW1hdGlvbiYmdGhpcy5hbmltYXRpb24uYWRkQ2xpcChzKSxuPXMpfWlmKG4pe3ZhciBsPW4ub25mcmFtZTtuLm9uZnJhbWU9ZnVuY3Rpb24odCxlKXtsKHQsZSk7Zm9yKHZhciBuPTA7bjxpLl9vbmZyYW1lTGlzdC5sZW5ndGg7bisrKWkuX29uZnJhbWVMaXN0W25dKHQsZSl9fXJldHVybiByfHx0aGlzLl9kb25lQ2FsbGJhY2soKSx0aGlzfSxzdG9wOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9jbGlwTGlzdCxuPXRoaXMuYW5pbWF0aW9uLGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHI9ZVtpXTt0JiZyLm9uZnJhbWUodGhpcy5fdGFyZ2V0LDEpLG4mJm4ucmVtb3ZlQ2xpcChyKX1lLmxlbmd0aD0wfSxkZWxheTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fZGVsYXk9dCx0aGlzfSxkb25lOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0aGlzLl9kb25lTGlzdC5wdXNoKHQpLHRoaXN9LGdldENsaXBzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NsaXBMaXN0fX07dmFyIGdkPTE7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKGdkPU1hdGgubWF4KHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHwxLDEpKTt2YXIgdmQ9MCxtZD1nZCx5ZD1mdW5jdGlvbigpe307MT09PXZkP3lkPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIGFyZ3VtZW50cyl0aHJvdyBuZXcgRXJyb3IoYXJndW1lbnRzW3RdKX06dmQ+MSYmKHlkPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIGFyZ3VtZW50cyljb25zb2xlLmxvZyhhcmd1bWVudHNbdF0pfSk7dmFyIF9kPXlkLHhkPWZ1bmN0aW9uKCl7dGhpcy5hbmltYXRvcnM9W119O3hkLnByb3RvdHlwZT17Y29uc3RydWN0b3I6eGQsYW5pbWF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuLGk9ITEscj10aGlzLGE9dGhpcy5fX3pyO2lmKHQpe3ZhciBvPXQuc3BsaXQoXCIuXCIpLHM9cjtpPVwic2hhcGVcIj09PW9bMF07Zm9yKHZhciBsPTAsaD1vLmxlbmd0aDtoPmw7bCsrKXMmJihzPXNbb1tsXV0pO3MmJihuPXMpfWVsc2Ugbj1yO2lmKCFuKXJldHVybiB2b2lkIF9kKCdQcm9wZXJ0eSBcIicrdCsnXCIgaXMgbm90IGV4aXN0ZWQgaW4gZWxlbWVudCAnK3IuaWQpO3ZhciBjPXIuYW5pbWF0b3JzLGQ9bmV3IHBkKG4sZSk7cmV0dXJuIGQuZHVyaW5nKGZ1bmN0aW9uKCl7ci5kaXJ0eShpKX0pLmRvbmUoZnVuY3Rpb24oKXtjLnNwbGljZSh1KGMsZCksMSl9KSxjLnB1c2goZCksYSYmYS5hbmltYXRpb24uYWRkQW5pbWF0b3IoZCksZH0sc3RvcEFuaW1hdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5hbmltYXRvcnMsbj1lLmxlbmd0aCxpPTA7bj5pO2krKyllW2ldLnN0b3AodCk7cmV0dXJuIGUubGVuZ3RoPTAsdGhpc30sYW5pbWF0ZVRvOmZ1bmN0aW9uKHQsZSxuLGkscixhKXtmdW5jdGlvbiBvKCl7bC0tLGx8fHImJnIoKX1iKG4pPyhyPWksaT1uLG49MCk6dyhpKT8ocj1pLGk9XCJsaW5lYXJcIixuPTApOncobik/KHI9bixuPTApOncoZSk/KHI9ZSxlPTUwMCk6ZXx8KGU9NTAwKSx0aGlzLnN0b3BBbmltYXRpb24oKSx0aGlzLl9hbmltYXRlVG9TaGFsbG93KFwiXCIsdGhpcyx0LGUsbik7dmFyIHM9dGhpcy5hbmltYXRvcnMuc2xpY2UoKSxsPXMubGVuZ3RoO2x8fHImJnIoKTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoO3UrKylzW3VdLmRvbmUobykuc3RhcnQoaSxhKX0sX2FuaW1hdGVUb1NoYWxsb3c6ZnVuY3Rpb24odCxlLG4saSxyKXt2YXIgYT17fSxvPTA7Zm9yKHZhciBzIGluIG4paWYobi5oYXNPd25Qcm9wZXJ0eShzKSlpZihudWxsIT1lW3NdKU0obltzXSkmJiFkKG5bc10pP3RoaXMuX2FuaW1hdGVUb1NoYWxsb3codD90K1wiLlwiK3M6cyxlW3NdLG5bc10saSxyKTooYVtzXT1uW3NdLG8rKyk7ZWxzZSBpZihudWxsIT1uW3NdKWlmKHQpe3ZhciBsPXt9O2xbdF09e30sbFt0XVtzXT1uW3NdLHRoaXMuYXR0cihsKX1lbHNlIHRoaXMuYXR0cihzLG5bc10pO3JldHVybiBvPjAmJnRoaXMuYW5pbWF0ZSh0LCExKS53aGVuKG51bGw9PWk/NTAwOmksYSkuZGVsYXkocnx8MCksdGhpc319O3ZhciB3ZD1mdW5jdGlvbih0KXtRYy5jYWxsKHRoaXMsdCksamMuY2FsbCh0aGlzLHQpLHhkLmNhbGwodGhpcyx0KSx0aGlzLmlkPXQuaWR8fHhjKCl9O3dkLnByb3RvdHlwZT17dHlwZTpcImVsZW1lbnRcIixuYW1lOlwiXCIsX196cjpudWxsLGlnbm9yZTohMSxjbGlwUGF0aDpudWxsLGlzR3JvdXA6ITEsZHJpZnQ6ZnVuY3Rpb24odCxlKXtzd2l0Y2godGhpcy5kcmFnZ2FibGUpe2Nhc2VcImhvcml6b250YWxcIjplPTA7YnJlYWs7Y2FzZVwidmVydGljYWxcIjp0PTB9dmFyIG49dGhpcy50cmFuc2Zvcm07bnx8KG49dGhpcy50cmFuc2Zvcm09WzEsMCwwLDEsMCwwXSksbls0XSs9dCxuWzVdKz1lLHRoaXMuZGVjb21wb3NlVHJhbnNmb3JtKCksdGhpcy5kaXJ0eSghMSl9LGJlZm9yZVVwZGF0ZTpmdW5jdGlvbigpe30sYWZ0ZXJVcGRhdGU6ZnVuY3Rpb24oKXt9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMudXBkYXRlVHJhbnNmb3JtKCl9LHRyYXZlcnNlOmZ1bmN0aW9uKCl7fSxhdHRyS1Y6ZnVuY3Rpb24odCxlKXtpZihcInBvc2l0aW9uXCI9PT10fHxcInNjYWxlXCI9PT10fHxcIm9yaWdpblwiPT09dCl7aWYoZSl7dmFyIG49dGhpc1t0XTtufHwobj10aGlzW3RdPVtdKSxuWzBdPWVbMF0sblsxXT1lWzFdfX1lbHNlIHRoaXNbdF09ZX0saGlkZTpmdW5jdGlvbigpe3RoaXMuaWdub3JlPSEwLHRoaXMuX196ciYmdGhpcy5fX3pyLnJlZnJlc2goKX0sc2hvdzpmdW5jdGlvbigpe3RoaXMuaWdub3JlPSExLHRoaXMuX196ciYmdGhpcy5fX3pyLnJlZnJlc2goKX0sYXR0cjpmdW5jdGlvbih0LGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXRoaXMuYXR0cktWKHQsZSk7ZWxzZSBpZihNKHQpKWZvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJnRoaXMuYXR0cktWKG4sdFtuXSk7cmV0dXJuIHRoaXMuZGlydHkoITEpLHRoaXN9LHNldENsaXBQYXRoOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX196cjtlJiZ0LmFkZFNlbGZUb1pyKGUpLHRoaXMuY2xpcFBhdGgmJnRoaXMuY2xpcFBhdGghPT10JiZ0aGlzLnJlbW92ZUNsaXBQYXRoKCksdGhpcy5jbGlwUGF0aD10LHQuX196cj1lLHQuX19jbGlwVGFyZ2V0PXRoaXMsdGhpcy5kaXJ0eSghMSl9LHJlbW92ZUNsaXBQYXRoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jbGlwUGF0aDt0JiYodC5fX3pyJiZ0LnJlbW92ZVNlbGZGcm9tWnIodC5fX3pyKSx0Ll9fenI9bnVsbCx0Ll9fY2xpcFRhcmdldD1udWxsLHRoaXMuY2xpcFBhdGg9bnVsbCx0aGlzLmRpcnR5KCExKSl9LGFkZFNlbGZUb1pyOmZ1bmN0aW9uKHQpe3RoaXMuX196cj10O3ZhciBlPXRoaXMuYW5pbWF0b3JzO2lmKGUpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspdC5hbmltYXRpb24uYWRkQW5pbWF0b3IoZVtuXSk7dGhpcy5jbGlwUGF0aCYmdGhpcy5jbGlwUGF0aC5hZGRTZWxmVG9acih0KX0scmVtb3ZlU2VsZkZyb21acjpmdW5jdGlvbih0KXt0aGlzLl9fenI9bnVsbDt2YXIgZT10aGlzLmFuaW1hdG9ycztpZihlKWZvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXQuYW5pbWF0aW9uLnJlbW92ZUFuaW1hdG9yKGVbbl0pO3RoaXMuY2xpcFBhdGgmJnRoaXMuY2xpcFBhdGgucmVtb3ZlU2VsZkZyb21acih0KX19LGMod2QseGQpLGMod2QsUWMpLGMod2QsamMpO3ZhciBiZD1hZSxNZD1NYXRoLm1pbixTZD1NYXRoLm1heDtybi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnJuLHVuaW9uOmZ1bmN0aW9uKHQpe3ZhciBlPU1kKHQueCx0aGlzLngpLG49TWQodC55LHRoaXMueSk7dGhpcy53aWR0aD1TZCh0LngrdC53aWR0aCx0aGlzLngrdGhpcy53aWR0aCktZSx0aGlzLmhlaWdodD1TZCh0LnkrdC5oZWlnaHQsdGhpcy55K3RoaXMuaGVpZ2h0KS1uLHRoaXMueD1lLHRoaXMueT1ufSxhcHBseVRyYW5zZm9ybTpmdW5jdGlvbigpe3ZhciB0PVtdLGU9W10sbj1bXSxpPVtdO3JldHVybiBmdW5jdGlvbihyKXtpZihyKXt0WzBdPW5bMF09dGhpcy54LHRbMV09aVsxXT10aGlzLnksZVswXT1pWzBdPXRoaXMueCt0aGlzLndpZHRoLGVbMV09blsxXT10aGlzLnkrdGhpcy5oZWlnaHQsYmQodCx0LHIpLGJkKGUsZSxyKSxiZChuLG4sciksYmQoaSxpLHIpLHRoaXMueD1NZCh0WzBdLGVbMF0sblswXSxpWzBdKSx0aGlzLnk9TWQodFsxXSxlWzFdLG5bMV0saVsxXSk7dmFyIGE9U2QodFswXSxlWzBdLG5bMF0saVswXSksbz1TZCh0WzFdLGVbMV0sblsxXSxpWzFdKTt0aGlzLndpZHRoPWEtdGhpcy54LHRoaXMuaGVpZ2h0PW8tdGhpcy55fX19KCksY2FsY3VsYXRlVHJhbnNmb3JtOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10LndpZHRoL2Uud2lkdGgsaT10LmhlaWdodC9lLmhlaWdodCxyPWZlKCk7cmV0dXJuIG1lKHIscixbLWUueCwtZS55XSksX2UocixyLFtuLGldKSxtZShyLHIsW3QueCx0LnldKSxyfSxpbnRlcnNlY3Q6ZnVuY3Rpb24odCl7aWYoIXQpcmV0dXJuITE7dCBpbnN0YW5jZW9mIHJufHwodD1ybi5jcmVhdGUodCkpO3ZhciBlPXRoaXMsbj1lLngsaT1lLngrZS53aWR0aCxyPWUueSxhPWUueStlLmhlaWdodCxvPXQueCxzPXQueCt0LndpZHRoLGw9dC55LHU9dC55K3QuaGVpZ2h0O3JldHVybiEobz5pfHxuPnN8fGw+YXx8cj51KX0sY29udGFpbjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHQ+PW4ueCYmdDw9bi54K24ud2lkdGgmJmU+PW4ueSYmZTw9bi55K24uaGVpZ2h0fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgcm4odGhpcy54LHRoaXMueSx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KX0sY29weTpmdW5jdGlvbih0KXt0aGlzLng9dC54LHRoaXMueT10LnksdGhpcy53aWR0aD10LndpZHRoLHRoaXMuaGVpZ2h0PXQuaGVpZ2h0fSxwbGFpbjpmdW5jdGlvbigpe3JldHVybnt4OnRoaXMueCx5OnRoaXMueSx3aWR0aDp0aGlzLndpZHRoLGhlaWdodDp0aGlzLmhlaWdodH19fSxybi5jcmVhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBybih0LngsdC55LHQud2lkdGgsdC5oZWlnaHQpfTt2YXIgQ2Q9ZnVuY3Rpb24odCl7dD10fHx7fSx3ZC5jYWxsKHRoaXMsdCk7Zm9yKHZhciBlIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShlKSYmKHRoaXNbZV09dFtlXSk7dGhpcy5fY2hpbGRyZW49W10sdGhpcy5fX3N0b3JhZ2U9bnVsbCx0aGlzLl9fZGlydHk9ITB9O0NkLnByb3RvdHlwZT17Y29uc3RydWN0b3I6Q2QsaXNHcm91cDohMCx0eXBlOlwiZ3JvdXBcIixzaWxlbnQ6ITEsY2hpbGRyZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRyZW4uc2xpY2UoKX0sY2hpbGRBdDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY2hpbGRyZW5bdF19LGNoaWxkT2ZOYW1lOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9jaGlsZHJlbixuPTA7bjxlLmxlbmd0aDtuKyspaWYoZVtuXS5uYW1lPT09dClyZXR1cm4gZVtuXX0sY2hpbGRDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jaGlsZHJlbi5sZW5ndGh9LGFkZDpmdW5jdGlvbih0KXtyZXR1cm4gdCYmdCE9PXRoaXMmJnQucGFyZW50IT09dGhpcyYmKHRoaXMuX2NoaWxkcmVuLnB1c2godCksdGhpcy5fZG9BZGQodCkpLHRoaXN9LGFkZEJlZm9yZTpmdW5jdGlvbih0LGUpe2lmKHQmJnQhPT10aGlzJiZ0LnBhcmVudCE9PXRoaXMmJmUmJmUucGFyZW50PT09dGhpcyl7dmFyIG49dGhpcy5fY2hpbGRyZW4saT1uLmluZGV4T2YoZSk7aT49MCYmKG4uc3BsaWNlKGksMCx0KSx0aGlzLl9kb0FkZCh0KSl9cmV0dXJuIHRoaXN9LF9kb0FkZDpmdW5jdGlvbih0KXt0LnBhcmVudCYmdC5wYXJlbnQucmVtb3ZlKHQpLHQucGFyZW50PXRoaXM7dmFyIGU9dGhpcy5fX3N0b3JhZ2Usbj10aGlzLl9fenI7ZSYmZSE9PXQuX19zdG9yYWdlJiYoZS5hZGRUb1N0b3JhZ2UodCksdCBpbnN0YW5jZW9mIENkJiZ0LmFkZENoaWxkcmVuVG9TdG9yYWdlKGUpKSxuJiZuLnJlZnJlc2goKX0scmVtb3ZlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX196cixuPXRoaXMuX19zdG9yYWdlLGk9dGhpcy5fY2hpbGRyZW4scj11KGksdCk7cmV0dXJuIDA+cj90aGlzOihpLnNwbGljZShyLDEpLHQucGFyZW50PW51bGwsbiYmKG4uZGVsRnJvbVN0b3JhZ2UodCksdCBpbnN0YW5jZW9mIENkJiZ0LmRlbENoaWxkcmVuRnJvbVN0b3JhZ2UobikpLGUmJmUucmVmcmVzaCgpLHRoaXMpfSxyZW1vdmVBbGw6ZnVuY3Rpb24oKXt2YXIgdCxlLG49dGhpcy5fY2hpbGRyZW4saT10aGlzLl9fc3RvcmFnZTtmb3IoZT0wO2U8bi5sZW5ndGg7ZSsrKXQ9bltlXSxpJiYoaS5kZWxGcm9tU3RvcmFnZSh0KSx0IGluc3RhbmNlb2YgQ2QmJnQuZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZShpKSksdC5wYXJlbnQ9bnVsbDtyZXR1cm4gbi5sZW5ndGg9MCx0aGlzfSxlYWNoQ2hpbGQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy5fY2hpbGRyZW4saT0wO2k8bi5sZW5ndGg7aSsrKXt2YXIgcj1uW2ldO3QuY2FsbChlLHIsaSl9cmV0dXJuIHRoaXN9LHRyYXZlcnNlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0aGlzLl9jaGlsZHJlbi5sZW5ndGg7bisrKXt2YXIgaT10aGlzLl9jaGlsZHJlbltuXTt0LmNhbGwoZSxpKSxcImdyb3VwXCI9PT1pLnR5cGUmJmkudHJhdmVyc2UodCxlKX1yZXR1cm4gdGhpc30sYWRkQ2hpbGRyZW5Ub1N0b3JhZ2U6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLl9jaGlsZHJlbi5sZW5ndGg7ZSsrKXt2YXIgbj10aGlzLl9jaGlsZHJlbltlXTt0LmFkZFRvU3RvcmFnZShuKSxuIGluc3RhbmNlb2YgQ2QmJm4uYWRkQ2hpbGRyZW5Ub1N0b3JhZ2UodCl9fSxkZWxDaGlsZHJlbkZyb21TdG9yYWdlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5fY2hpbGRyZW4ubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5fY2hpbGRyZW5bZV07dC5kZWxGcm9tU3RvcmFnZShuKSxuIGluc3RhbmNlb2YgQ2QmJm4uZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZSh0KX19LGRpcnR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19kaXJ0eT0hMCx0aGlzLl9fenImJnRoaXMuX196ci5yZWZyZXNoKCksdGhpc30sZ2V0Qm91bmRpbmdSZWN0OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49bmV3IHJuKDAsMCwwLDApLGk9dHx8dGhpcy5fY2hpbGRyZW4scj1bXSxhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBvPWlbYV07aWYoIW8uaWdub3JlJiYhby5pbnZpc2libGUpe3ZhciBzPW8uZ2V0Qm91bmRpbmdSZWN0KCksbD1vLmdldExvY2FsVHJhbnNmb3JtKHIpO2w/KG4uY29weShzKSxuLmFwcGx5VHJhbnNmb3JtKGwpLGU9ZXx8bi5jbG9uZSgpLGUudW5pb24obikpOihlPWV8fHMuY2xvbmUoKSxlLnVuaW9uKHMpKX19cmV0dXJuIGV8fG59fSxoKENkLHdkKTt2YXIgSWQ9MzIsVGQ9NyxrZD1mdW5jdGlvbigpe3RoaXMuX3Jvb3RzPVtdLHRoaXMuX2Rpc3BsYXlMaXN0PVtdLHRoaXMuX2Rpc3BsYXlMaXN0TGVuPTB9O2tkLnByb3RvdHlwZT17Y29uc3RydWN0b3I6a2QsdHJhdmVyc2U6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHRoaXMuX3Jvb3RzLmxlbmd0aDtuKyspdGhpcy5fcm9vdHNbbl0udHJhdmVyc2UodCxlKX0sZ2V0RGlzcGxheUxpc3Q6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT1lfHwhMSx0JiZ0aGlzLnVwZGF0ZURpc3BsYXlMaXN0KGUpLHRoaXMuX2Rpc3BsYXlMaXN0fSx1cGRhdGVEaXNwbGF5TGlzdDpmdW5jdGlvbih0KXt0aGlzLl9kaXNwbGF5TGlzdExlbj0wO2Zvcih2YXIgZT10aGlzLl9yb290cyxuPXRoaXMuX2Rpc3BsYXlMaXN0LGk9MCxyPWUubGVuZ3RoO3I+aTtpKyspdGhpcy5fdXBkYXRlQW5kQWRkRGlzcGxheWFibGUoZVtpXSxudWxsLHQpO24ubGVuZ3RoPXRoaXMuX2Rpc3BsYXlMaXN0TGVuLGJjLmNhbnZhc1N1cHBvcnRlZCYmZG4obixmbil9LF91cGRhdGVBbmRBZGREaXNwbGF5YWJsZTpmdW5jdGlvbih0LGUsbil7aWYoIXQuaWdub3JlfHxuKXt0LmJlZm9yZVVwZGF0ZSgpLHQuX19kaXJ0eSYmdC51cGRhdGUoKSx0LmFmdGVyVXBkYXRlKCk7dmFyIGk9dC5jbGlwUGF0aDtpZihpKXtlPWU/ZS5zbGljZSgpOltdO2Zvcih2YXIgcj1pLGE9dDtyOylyLnBhcmVudD1hLHIudXBkYXRlVHJhbnNmb3JtKCksZS5wdXNoKHIpLGE9cixyPXIuY2xpcFBhdGh9aWYodC5pc0dyb3VwKXtmb3IodmFyIG89dC5fY2hpbGRyZW4scz0wO3M8by5sZW5ndGg7cysrKXt2YXIgbD1vW3NdO3QuX19kaXJ0eSYmKGwuX19kaXJ0eT0hMCksdGhpcy5fdXBkYXRlQW5kQWRkRGlzcGxheWFibGUobCxlLG4pfXQuX19kaXJ0eT0hMX1lbHNlIHQuX19jbGlwUGF0aHM9ZSx0aGlzLl9kaXNwbGF5TGlzdFt0aGlzLl9kaXNwbGF5TGlzdExlbisrXT10fX0sYWRkUm9vdDpmdW5jdGlvbih0KXt0Ll9fc3RvcmFnZSE9PXRoaXMmJih0IGluc3RhbmNlb2YgQ2QmJnQuYWRkQ2hpbGRyZW5Ub1N0b3JhZ2UodGhpcyksdGhpcy5hZGRUb1N0b3JhZ2UodCksdGhpcy5fcm9vdHMucHVzaCh0KSl9LGRlbFJvb3Q6ZnVuY3Rpb24odCl7aWYobnVsbD09dCl7Zm9yKHZhciBlPTA7ZTx0aGlzLl9yb290cy5sZW5ndGg7ZSsrKXt2YXIgbj10aGlzLl9yb290c1tlXTtuIGluc3RhbmNlb2YgQ2QmJm4uZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZSh0aGlzKX1yZXR1cm4gdGhpcy5fcm9vdHM9W10sdGhpcy5fZGlzcGxheUxpc3Q9W10sdm9pZCh0aGlzLl9kaXNwbGF5TGlzdExlbj0wKX1pZih0IGluc3RhbmNlb2YgQXJyYXkpZm9yKHZhciBlPTAsaT10Lmxlbmd0aDtpPmU7ZSsrKXRoaXMuZGVsUm9vdCh0W2VdKTtlbHNle3ZhciByPXUodGhpcy5fcm9vdHMsdCk7cj49MCYmKHRoaXMuZGVsRnJvbVN0b3JhZ2UodCksdGhpcy5fcm9vdHMuc3BsaWNlKHIsMSksdCBpbnN0YW5jZW9mIENkJiZ0LmRlbENoaWxkcmVuRnJvbVN0b3JhZ2UodGhpcykpfX0sYWRkVG9TdG9yYWdlOmZ1bmN0aW9uKHQpe3JldHVybiB0JiYodC5fX3N0b3JhZ2U9dGhpcyx0LmRpcnR5KCExKSksdGhpc30sZGVsRnJvbVN0b3JhZ2U6ZnVuY3Rpb24odCl7cmV0dXJuIHQmJih0Ll9fc3RvcmFnZT1udWxsKSx0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5fcmVuZGVyTGlzdD10aGlzLl9yb290cz1udWxsfSxkaXNwbGF5YWJsZVNvcnRGdW5jOmZufTt2YXIgRGQ9e3NoYWRvd0JsdXI6MSxzaGFkb3dPZmZzZXRYOjEsc2hhZG93T2Zmc2V0WToxLHRleHRTaGFkb3dCbHVyOjEsdGV4dFNoYWRvd09mZnNldFg6MSx0ZXh0U2hhZG93T2Zmc2V0WToxLHRleHRCb3hTaGFkb3dCbHVyOjEsdGV4dEJveFNoYWRvd09mZnNldFg6MSx0ZXh0Qm94U2hhZG93T2Zmc2V0WToxfSxBZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIERkLmhhc093blByb3BlcnR5KGUpP24qPXQuZHByOm59LFBkPVtbXCJzaGFkb3dCbHVyXCIsMF0sW1wic2hhZG93T2Zmc2V0WFwiLDBdLFtcInNoYWRvd09mZnNldFlcIiwwXSxbXCJzaGFkb3dDb2xvclwiLFwiIzAwMFwiXSxbXCJsaW5lQ2FwXCIsXCJidXR0XCJdLFtcImxpbmVKb2luXCIsXCJtaXRlclwiXSxbXCJtaXRlckxpbWl0XCIsMTBdXSxMZD1mdW5jdGlvbih0LGUpe3RoaXMuZXh0ZW5kRnJvbSh0LCExKSx0aGlzLmhvc3Q9ZX07TGQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpMZCxob3N0Om51bGwsZmlsbDpcIiMwMDBcIixzdHJva2U6bnVsbCxvcGFjaXR5OjEsbGluZURhc2g6bnVsbCxsaW5lRGFzaE9mZnNldDowLHNoYWRvd0JsdXI6MCxzaGFkb3dPZmZzZXRYOjAsc2hhZG93T2Zmc2V0WTowLGxpbmVXaWR0aDoxLHN0cm9rZU5vU2NhbGU6ITEsdGV4dDpudWxsLGZvbnQ6bnVsbCx0ZXh0Rm9udDpudWxsLGZvbnRTdHlsZTpudWxsLGZvbnRXZWlnaHQ6bnVsbCxmb250U2l6ZTpudWxsLGZvbnRGYW1pbHk6bnVsbCx0ZXh0VGFnOm51bGwsdGV4dEZpbGw6XCIjMDAwXCIsdGV4dFN0cm9rZTpudWxsLHRleHRXaWR0aDpudWxsLHRleHRIZWlnaHQ6bnVsbCx0ZXh0U3Ryb2tlV2lkdGg6MCx0ZXh0TGluZUhlaWdodDpudWxsLHRleHRQb3NpdGlvbjpcImluc2lkZVwiLHRleHRSZWN0Om51bGwsdGV4dE9mZnNldDpudWxsLHRleHRBbGlnbjpudWxsLHRleHRWZXJ0aWNhbEFsaWduOm51bGwsdGV4dERpc3RhbmNlOjUsdGV4dFNoYWRvd0NvbG9yOlwidHJhbnNwYXJlbnRcIix0ZXh0U2hhZG93Qmx1cjowLHRleHRTaGFkb3dPZmZzZXRYOjAsdGV4dFNoYWRvd09mZnNldFk6MCx0ZXh0Qm94U2hhZG93Q29sb3I6XCJ0cmFuc3BhcmVudFwiLHRleHRCb3hTaGFkb3dCbHVyOjAsdGV4dEJveFNoYWRvd09mZnNldFg6MCx0ZXh0Qm94U2hhZG93T2Zmc2V0WTowLHRyYW5zZm9ybVRleHQ6ITEsdGV4dFJvdGF0aW9uOjAsdGV4dE9yaWdpbjpudWxsLHRleHRCYWNrZ3JvdW5kQ29sb3I6bnVsbCx0ZXh0Qm9yZGVyQ29sb3I6bnVsbCx0ZXh0Qm9yZGVyV2lkdGg6MCx0ZXh0Qm9yZGVyUmFkaXVzOjAsdGV4dFBhZGRpbmc6bnVsbCxyaWNoOm51bGwsdHJ1bmNhdGU6bnVsbCxibGVuZDpudWxsLGJpbmQ6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT10aGlzLHI9biYmbi5zdHlsZSxhPSFyLG89MDtvPFBkLmxlbmd0aDtvKyspe3ZhciBzPVBkW29dLGw9c1swXTsoYXx8aVtsXSE9PXJbbF0pJiYodFtsXT1BZCh0LGwsaVtsXXx8c1sxXSkpfWlmKChhfHxpLmZpbGwhPT1yLmZpbGwpJiYodC5maWxsU3R5bGU9aS5maWxsKSwoYXx8aS5zdHJva2UhPT1yLnN0cm9rZSkmJih0LnN0cm9rZVN0eWxlPWkuc3Ryb2tlKSwoYXx8aS5vcGFjaXR5IT09ci5vcGFjaXR5KSYmKHQuZ2xvYmFsQWxwaGE9bnVsbD09aS5vcGFjaXR5PzE6aS5vcGFjaXR5KSwoYXx8aS5ibGVuZCE9PXIuYmxlbmQpJiYodC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249aS5ibGVuZHx8XCJzb3VyY2Utb3ZlclwiKSx0aGlzLmhhc1N0cm9rZSgpKXt2YXIgdT1pLmxpbmVXaWR0aDt0LmxpbmVXaWR0aD11Lyh0aGlzLnN0cm9rZU5vU2NhbGUmJmUmJmUuZ2V0TGluZVNjYWxlP2UuZ2V0TGluZVNjYWxlKCk6MSl9fSxoYXNGaWxsOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5maWxsO3JldHVybiBudWxsIT10JiZcIm5vbmVcIiE9PXR9LGhhc1N0cm9rZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc3Ryb2tlO3JldHVybiBudWxsIT10JiZcIm5vbmVcIiE9PXQmJnRoaXMubGluZVdpZHRoPjB9LGV4dGVuZEZyb206ZnVuY3Rpb24odCxlKXtpZih0KWZvcih2YXIgbiBpbiB0KSF0Lmhhc093blByb3BlcnR5KG4pfHxlIT09ITAmJihlPT09ITE/dGhpcy5oYXNPd25Qcm9wZXJ0eShuKTpudWxsPT10W25dKXx8KHRoaXNbbl09dFtuXSl9LHNldDpmdW5jdGlvbih0LGUpe1wic3RyaW5nXCI9PXR5cGVvZiB0P3RoaXNbdF09ZTp0aGlzLmV4dGVuZEZyb20odCwhMCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IHRoaXMuY29uc3RydWN0b3I7cmV0dXJuIHQuZXh0ZW5kRnJvbSh0aGlzLCEwKSx0fSxnZXRHcmFkaWVudDpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPVwicmFkaWFsXCI9PT1lLnR5cGU/Z246cG4scj1pKHQsZSxuKSxhPWUuY29sb3JTdG9wcyxvPTA7bzxhLmxlbmd0aDtvKyspci5hZGRDb2xvclN0b3AoYVtvXS5vZmZzZXQsYVtvXS5jb2xvcik7cmV0dXJuIHJ9fTtmb3IodmFyIE9kPUxkLnByb3RvdHlwZSxSZD0wO1JkPFBkLmxlbmd0aDtSZCsrKXt2YXIgRWQ9UGRbUmRdO0VkWzBdaW4gT2R8fChPZFtFZFswXV09RWRbMV0pfUxkLmdldEdyYWRpZW50PU9kLmdldEdyYWRpZW50O3ZhciBCZD1mdW5jdGlvbih0LGUpe3RoaXMuaW1hZ2U9dCx0aGlzLnJlcGVhdD1lLHRoaXMudHlwZT1cInBhdHRlcm5cIn07QmQucHJvdG90eXBlLmdldENhbnZhc1BhdHRlcm49ZnVuY3Rpb24odCl7cmV0dXJuIHQuY3JlYXRlUGF0dGVybih0aGlzLmltYWdlLHRoaXMucmVwZWF0fHxcInJlcGVhdFwiKX07dmFyIHpkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaTtuPW58fG1kLFwic3RyaW5nXCI9PXR5cGVvZiB0P2k9bW4odCxlLG4pOk0odCkmJihpPXQsdD1pLmlkKSx0aGlzLmlkPXQsdGhpcy5kb209aTt2YXIgcj1pLnN0eWxlO3ImJihpLm9uc2VsZWN0c3RhcnQ9dm4scltcIi13ZWJraXQtdXNlci1zZWxlY3RcIl09XCJub25lXCIscltcInVzZXItc2VsZWN0XCJdPVwibm9uZVwiLHJbXCItd2Via2l0LXRvdWNoLWNhbGxvdXRcIl09XCJub25lXCIscltcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiXT1cInJnYmEoMCwwLDAsMClcIixyLnBhZGRpbmc9MCxyLm1hcmdpbj0wLHJbXCJib3JkZXItd2lkdGhcIl09MCksdGhpcy5kb21CYWNrPW51bGwsdGhpcy5jdHhCYWNrPW51bGwsdGhpcy5wYWludGVyPWUsdGhpcy5jb25maWc9bnVsbCx0aGlzLmNsZWFyQ29sb3I9MCx0aGlzLm1vdGlvbkJsdXI9ITEsdGhpcy5sYXN0RnJhbWVBbHBoYT0uNyx0aGlzLmRwcj1ufTt6ZC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnpkLF9fZGlydHk6ITAsX191c2VkOiExLF9fZHJhd0luZGV4OjAsX19zdGFydEluZGV4OjAsX19lbmRJbmRleDowLGluY3JlbWVudGFsOiExLGdldEVsZW1lbnRDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZW5kSW5kZXgtdGhpcy5fX3N0YXJ0SW5kZXh9LGluaXRDb250ZXh0OmZ1bmN0aW9uKCl7dGhpcy5jdHg9dGhpcy5kb20uZ2V0Q29udGV4dChcIjJkXCIpLHRoaXMuY3R4LmRwcj10aGlzLmRwcn0sY3JlYXRlQmFja0J1ZmZlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZHByO3RoaXMuZG9tQmFjaz1tbihcImJhY2stXCIrdGhpcy5pZCx0aGlzLnBhaW50ZXIsdCksdGhpcy5jdHhCYWNrPXRoaXMuZG9tQmFjay5nZXRDb250ZXh0KFwiMmRcIiksMSE9dCYmdGhpcy5jdHhCYWNrLnNjYWxlKHQsdCl9LHJlc2l6ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZHByLGk9dGhpcy5kb20scj1pLnN0eWxlLGE9dGhpcy5kb21CYWNrO3ImJihyLndpZHRoPXQrXCJweFwiLHIuaGVpZ2h0PWUrXCJweFwiKSxpLndpZHRoPXQqbixpLmhlaWdodD1lKm4sYSYmKGEud2lkdGg9dCpuLGEuaGVpZ2h0PWUqbiwxIT1uJiZ0aGlzLmN0eEJhY2suc2NhbGUobixuKSl9LGNsZWFyOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5kb20saT10aGlzLmN0eCxyPW4ud2lkdGgsYT1uLmhlaWdodCxlPWV8fHRoaXMuY2xlYXJDb2xvcixvPXRoaXMubW90aW9uQmx1ciYmIXQscz10aGlzLmxhc3RGcmFtZUFscGhhLGw9dGhpcy5kcHI7aWYobyYmKHRoaXMuZG9tQmFja3x8dGhpcy5jcmVhdGVCYWNrQnVmZmVyKCksdGhpcy5jdHhCYWNrLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cImNvcHlcIix0aGlzLmN0eEJhY2suZHJhd0ltYWdlKG4sMCwwLHIvbCxhL2wpKSxpLmNsZWFyUmVjdCgwLDAscixhKSxlJiZcInRyYW5zcGFyZW50XCIhPT1lKXt2YXIgdTtlLmNvbG9yU3RvcHM/KHU9ZS5fX2NhbnZhc0dyYWRpZW50fHxMZC5nZXRHcmFkaWVudChpLGUse3g6MCx5OjAsd2lkdGg6cixoZWlnaHQ6YX0pLGUuX19jYW52YXNHcmFkaWVudD11KTplLmltYWdlJiYodT1CZC5wcm90b3R5cGUuZ2V0Q2FudmFzUGF0dGVybi5jYWxsKGUsaSkpLGkuc2F2ZSgpLGkuZmlsbFN0eWxlPXV8fGUsaS5maWxsUmVjdCgwLDAscixhKSxpLnJlc3RvcmUoKX1pZihvKXt2YXIgaD10aGlzLmRvbUJhY2s7aS5zYXZlKCksaS5nbG9iYWxBbHBoYT1zLGkuZHJhd0ltYWdlKGgsMCwwLHIsYSksaS5yZXN0b3JlKCl9fX07dmFyIE5kPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZ3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KXx8d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZ3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpfHx3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKXx8ZnVuY3Rpb24odCl7c2V0VGltZW91dCh0LDE2KX0sRmQ9bmV3IGFkKDUwKSxWZD17fSxHZD0wLEhkPTVlMyxXZD0vXFx7KFthLXpBLVowLTlfXSspXFx8KFtefV0qKVxcfS9nLGpkPVwiMTJweCBzYW5zLXNlcmlmXCIscWQ9e307cWQubWVhc3VyZVRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1sKCk7cmV0dXJuIG4uZm9udD1lfHxqZCxuLm1lYXN1cmVUZXh0KHQpfTt2YXIgVWQ9e2xlZnQ6MSxyaWdodDoxLGNlbnRlcjoxfSxYZD17dG9wOjEsYm90dG9tOjEsbWlkZGxlOjF9LFlkPW5ldyBybixaZD1mdW5jdGlvbigpe307WmQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpaZCxkcmF3UmVjdFRleHQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnN0eWxlO2U9bi50ZXh0UmVjdHx8ZSx0aGlzLl9fZGlydHkmJlZuKG4sITApO3ZhciBpPW4udGV4dDtpZihudWxsIT1pJiYoaSs9XCJcIiksaWkoaSxuKSl7dC5zYXZlKCk7dmFyIHI9dGhpcy50cmFuc2Zvcm07bi50cmFuc2Zvcm1UZXh0P3RoaXMuc2V0VHJhbnNmb3JtKHQpOnImJihZZC5jb3B5KGUpLFlkLmFwcGx5VHJhbnNmb3JtKHIpLGU9WWQpLEhuKHRoaXMsdCxpLG4sZSksdC5yZXN0b3JlKCl9fX0scmkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpyaSx0eXBlOlwiZGlzcGxheWFibGVcIixfX2RpcnR5OiEwLGludmlzaWJsZTohMSx6OjAsejI6MCx6bGV2ZWw6MCxkcmFnZ2FibGU6ITEsZHJhZ2dpbmc6ITEsc2lsZW50OiExLGN1bGxpbmc6ITEsY3Vyc29yOlwicG9pbnRlclwiLHJlY3RIb3ZlcjohMSxwcm9ncmVzc2l2ZTohMSxpbmNyZW1lbnRhbDohMSxpbnBsYWNlOiExLGJlZm9yZUJydXNoOmZ1bmN0aW9uKCl7fSxhZnRlckJydXNoOmZ1bmN0aW9uKCl7fSxicnVzaDpmdW5jdGlvbigpe30sZ2V0Qm91bmRpbmdSZWN0OmZ1bmN0aW9uKCl7fSxjb250YWluOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMucmVjdENvbnRhaW4odCxlKX0sdHJhdmVyc2U6ZnVuY3Rpb24odCxlKXt0LmNhbGwoZSx0aGlzKX0scmVjdENvbnRhaW46ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRyYW5zZm9ybUNvb3JkVG9Mb2NhbCh0LGUpLGk9dGhpcy5nZXRCb3VuZGluZ1JlY3QoKTtyZXR1cm4gaS5jb250YWluKG5bMF0sblsxXSl9LGRpcnR5OmZ1bmN0aW9uKCl7dGhpcy5fX2RpcnR5PSEwLHRoaXMuX3JlY3Q9bnVsbCx0aGlzLl9fenImJnRoaXMuX196ci5yZWZyZXNoKCl9LGFuaW1hdGVTdHlsZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hbmltYXRlKFwic3R5bGVcIix0KX0sYXR0cktWOmZ1bmN0aW9uKHQsZSl7XCJzdHlsZVwiIT09dD93ZC5wcm90b3R5cGUuYXR0cktWLmNhbGwodGhpcyx0LGUpOnRoaXMuc3R5bGUuc2V0KGUpfSxzZXRTdHlsZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnN0eWxlLnNldCh0LGUpLHRoaXMuZGlydHkoITEpLHRoaXN9LHVzZVN0eWxlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0eWxlPW5ldyBMZCh0LHRoaXMpLHRoaXMuZGlydHkoITEpLHRoaXN9fSxoKHJpLHdkKSxjKHJpLFpkKSxhaS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmFpLHR5cGU6XCJpbWFnZVwiLGJydXNoOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5zdHlsZSxpPW4uaW1hZ2U7bi5iaW5kKHQsdGhpcyxlKTt2YXIgcj10aGlzLl9pbWFnZT1fbihpLHRoaXMuX2ltYWdlLHRoaXMsdGhpcy5vbmxvYWQpO2lmKHImJnduKHIpKXt2YXIgYT1uLnh8fDAsbz1uLnl8fDAscz1uLndpZHRoLGw9bi5oZWlnaHQsdT1yLndpZHRoL3IuaGVpZ2h0O2lmKG51bGw9PXMmJm51bGwhPWw/cz1sKnU6bnVsbD09bCYmbnVsbCE9cz9sPXMvdTpudWxsPT1zJiZudWxsPT1sJiYocz1yLndpZHRoLGw9ci5oZWlnaHQpLHRoaXMuc2V0VHJhbnNmb3JtKHQpLG4uc1dpZHRoJiZuLnNIZWlnaHQpe3ZhciBoPW4uc3h8fDAsYz1uLnN5fHwwO3QuZHJhd0ltYWdlKHIsaCxjLG4uc1dpZHRoLG4uc0hlaWdodCxhLG8scyxsKX1lbHNlIGlmKG4uc3gmJm4uc3kpe3ZhciBoPW4uc3gsYz1uLnN5LGQ9cy1oLGY9bC1jO3QuZHJhd0ltYWdlKHIsaCxjLGQsZixhLG8scyxsKX1lbHNlIHQuZHJhd0ltYWdlKHIsYSxvLHMsbCk7bnVsbCE9bi50ZXh0JiYodGhpcy5yZXN0b3JlVHJhbnNmb3JtKHQpLHRoaXMuZHJhd1JlY3RUZXh0KHQsdGhpcy5nZXRCb3VuZGluZ1JlY3QoKSkpfX0sZ2V0Qm91bmRpbmdSZWN0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zdHlsZTtyZXR1cm4gdGhpcy5fcmVjdHx8KHRoaXMuX3JlY3Q9bmV3IHJuKHQueHx8MCx0Lnl8fDAsdC53aWR0aHx8MCx0LmhlaWdodHx8MCkpLHRoaXMuX3JlY3R9fSxoKGFpLHJpKTt2YXIgJGQ9MWU1LEtkPTMxNDE1OSxRZD0uMDEsSmQ9LjAwMSx0Zj1uZXcgcm4oMCwwLDAsMCksZWY9bmV3IHJuKDAsMCwwLDApLG5mPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnR5cGU9XCJjYW52YXNcIjt2YXIgaT0hdC5ub2RlTmFtZXx8XCJDQU5WQVNcIj09PXQubm9kZU5hbWUudG9VcHBlckNhc2UoKTt0aGlzLl9vcHRzPW49byh7fSxufHx7fSksdGhpcy5kcHI9bi5kZXZpY2VQaXhlbFJhdGlvfHxtZCx0aGlzLl9zaW5nbGVDYW52YXM9aSx0aGlzLnJvb3Q9dDt2YXIgcj10LnN0eWxlO3ImJihyW1wiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCJdPVwidHJhbnNwYXJlbnRcIixyW1wiLXdlYmtpdC11c2VyLXNlbGVjdFwiXT1yW1widXNlci1zZWxlY3RcIl09cltcIi13ZWJraXQtdG91Y2gtY2FsbG91dFwiXT1cIm5vbmVcIix0LmlubmVySFRNTD1cIlwiKSx0aGlzLnN0b3JhZ2U9ZTt2YXIgYT10aGlzLl96bGV2ZWxMaXN0PVtdLHM9dGhpcy5fbGF5ZXJzPXt9O2lmKHRoaXMuX2xheWVyQ29uZmlnPXt9LHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZz0hMSxpKXt2YXIgbD10LndpZHRoLHU9dC5oZWlnaHQ7bnVsbCE9bi53aWR0aCYmKGw9bi53aWR0aCksbnVsbCE9bi5oZWlnaHQmJih1PW4uaGVpZ2h0KSx0aGlzLmRwcj1uLmRldmljZVBpeGVsUmF0aW98fDEsdC53aWR0aD1sKnRoaXMuZHByLHQuaGVpZ2h0PXUqdGhpcy5kcHIsdGhpcy5fd2lkdGg9bCx0aGlzLl9oZWlnaHQ9dTt2YXIgaD1uZXcgemQodCx0aGlzLHRoaXMuZHByKTtoLl9fYnVpbHRpbl9fPSEwLGguaW5pdENvbnRleHQoKSxzW0tkXT1oLGguemxldmVsPUtkLGEucHVzaChLZCksdGhpcy5fZG9tUm9vdD10fWVsc2V7dGhpcy5fd2lkdGg9dGhpcy5fZ2V0U2l6ZSgwKSx0aGlzLl9oZWlnaHQ9dGhpcy5fZ2V0U2l6ZSgxKTt2YXIgYz10aGlzLl9kb21Sb290PWNpKHRoaXMuX3dpZHRoLHRoaXMuX2hlaWdodCk7dC5hcHBlbmRDaGlsZChjKX10aGlzLl9ob3ZlcmxheWVyPW51bGwsdGhpcy5faG92ZXJFbGVtZW50cz1bXX07bmYucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpuZixnZXRUeXBlOmZ1bmN0aW9uKCl7cmV0dXJuXCJjYW52YXNcIn0saXNTaW5nbGVDYW52YXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2luZ2xlQ2FudmFzfSxnZXRWaWV3cG9ydFJvb3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZG9tUm9vdH0sZ2V0Vmlld3BvcnRSb290T2Zmc2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRWaWV3cG9ydFJvb3QoKTtyZXR1cm4gdD97b2Zmc2V0TGVmdDp0Lm9mZnNldExlZnR8fDAsb2Zmc2V0VG9wOnQub2Zmc2V0VG9wfHwwfTp2b2lkIDB9LHJlZnJlc2g6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zdG9yYWdlLmdldERpc3BsYXlMaXN0KCEwKSxuPXRoaXMuX3psZXZlbExpc3Q7dGhpcy5fcmVkcmF3SWQ9TWF0aC5yYW5kb20oKSx0aGlzLl9wYWludExpc3QoZSx0LHRoaXMuX3JlZHJhd0lkKTtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHI9bltpXSxhPXRoaXMuX2xheWVyc1tyXTtpZighYS5fX2J1aWx0aW5fXyYmYS5yZWZyZXNoKXt2YXIgbz0wPT09aT90aGlzLl9iYWNrZ3JvdW5kQ29sb3I6bnVsbDthLnJlZnJlc2gobyl9fXJldHVybiB0aGlzLnJlZnJlc2hIb3ZlcigpLHRoaXN9LGFkZEhvdmVyOmZ1bmN0aW9uKHQsZSl7aWYoIXQuX19ob3Zlck1pcil7dmFyIG49bmV3IHQuY29uc3RydWN0b3Ioe3N0eWxlOnQuc3R5bGUsc2hhcGU6dC5zaGFwZX0pO24uX19mcm9tPXQsdC5fX2hvdmVyTWlyPW4sbi5zZXRTdHlsZShlKSx0aGlzLl9ob3ZlckVsZW1lbnRzLnB1c2gobil9fSxyZW1vdmVIb3ZlcjpmdW5jdGlvbih0KXt2YXIgZT10Ll9faG92ZXJNaXIsbj10aGlzLl9ob3ZlckVsZW1lbnRzLGk9dShuLGUpO2k+PTAmJm4uc3BsaWNlKGksMSksdC5fX2hvdmVyTWlyPW51bGx9LGNsZWFySG92ZXI6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5faG92ZXJFbGVtZW50cyxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBuPXRbZV0uX19mcm9tO24mJihuLl9faG92ZXJNaXI9bnVsbCl9dC5sZW5ndGg9MH0scmVmcmVzaEhvdmVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5faG92ZXJFbGVtZW50cyxlPXQubGVuZ3RoLG49dGhpcy5faG92ZXJsYXllcjtpZihuJiZuLmNsZWFyKCksZSl7ZG4odCx0aGlzLnN0b3JhZ2UuZGlzcGxheWFibGVTb3J0RnVuYyksbnx8KG49dGhpcy5faG92ZXJsYXllcj10aGlzLmdldExheWVyKCRkKSk7dmFyIGk9e307bi5jdHguc2F2ZSgpO2Zvcih2YXIgcj0wO2U+cjspe3ZhciBhPXRbcl0sbz1hLl9fZnJvbTtvJiZvLl9fenI/KHIrKyxvLmludmlzaWJsZXx8KGEudHJhbnNmb3JtPW8udHJhbnNmb3JtLGEuaW52VHJhbnNmb3JtPW8uaW52VHJhbnNmb3JtLGEuX19jbGlwUGF0aHM9by5fX2NsaXBQYXRocyx0aGlzLl9kb1BhaW50RWwoYSxuLCEwLGkpKSk6KHQuc3BsaWNlKHIsMSksby5fX2hvdmVyTWlyPW51bGwsZS0tKX1uLmN0eC5yZXN0b3JlKCl9fSxnZXRIb3ZlckxheWVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0TGF5ZXIoJGQpfSxfcGFpbnRMaXN0OmZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLl9yZWRyYXdJZD09PW4pe2U9ZXx8ITEsdGhpcy5fdXBkYXRlTGF5ZXJTdGF0dXModCk7dmFyIGk9dGhpcy5fZG9QYWludExpc3QodCxlKTtpZih0aGlzLl9uZWVkc01hbnVhbGx5Q29tcG9zaXRpbmcmJnRoaXMuX2NvbXBvc2l0ZU1hbnVhbGx5KCksIWkpe3ZhciByPXRoaXM7TmQoZnVuY3Rpb24oKXtyLl9wYWludExpc3QodCxlLG4pfSl9fX0sX2NvbXBvc2l0ZU1hbnVhbGx5OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRMYXllcihLZCkuY3R4LGU9dGhpcy5fZG9tUm9vdC53aWR0aCxuPXRoaXMuX2RvbVJvb3QuaGVpZ2h0O3QuY2xlYXJSZWN0KDAsMCxlLG4pLHRoaXMuZWFjaEJ1aWx0aW5MYXllcihmdW5jdGlvbihpKXtpLnZpcnR1YWwmJnQuZHJhd0ltYWdlKGkuZG9tLDAsMCxlLG4pfSl9LF9kb1BhaW50TGlzdDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1bXSxpPTA7aTx0aGlzLl96bGV2ZWxMaXN0Lmxlbmd0aDtpKyspe3ZhciByPXRoaXMuX3psZXZlbExpc3RbaV0sYT10aGlzLl9sYXllcnNbcl07YS5fX2J1aWx0aW5fXyYmYSE9PXRoaXMuX2hvdmVybGF5ZXImJihhLl9fZGlydHl8fGUpJiZuLnB1c2goYSl9Zm9yKHZhciBvPSEwLHM9MDtzPG4ubGVuZ3RoO3MrKyl7dmFyIGE9bltzXSxsPWEuY3R4LHU9e307bC5zYXZlKCk7dmFyIGg9ZT9hLl9fc3RhcnRJbmRleDphLl9fZHJhd0luZGV4LGM9IWUmJmEuaW5jcmVtZW50YWwmJkRhdGUubm93LGQ9YyYmRGF0ZS5ub3coKSxwPWEuemxldmVsPT09dGhpcy5femxldmVsTGlzdFswXT90aGlzLl9iYWNrZ3JvdW5kQ29sb3I6bnVsbDtpZihhLl9fc3RhcnRJbmRleD09PWEuX19lbmRJbmRleClhLmNsZWFyKCExLHApO2Vsc2UgaWYoaD09PWEuX19zdGFydEluZGV4KXt2YXIgZz10W2hdO2cuaW5jcmVtZW50YWwmJmcubm90Q2xlYXImJiFlfHxhLmNsZWFyKCExLHApfS0xPT09aCYmKGNvbnNvbGUuZXJyb3IoXCJGb3Igc29tZSB1bmtub3duIHJlYXNvbi4gZHJhd0luZGV4IGlzIC0xXCIpLGg9YS5fX3N0YXJ0SW5kZXgpO2Zvcih2YXIgdj1oO3Y8YS5fX2VuZEluZGV4O3YrKyl7dmFyIG09dFt2XTtpZih0aGlzLl9kb1BhaW50RWwobSxhLGUsdSksbS5fX2RpcnR5PSExLGMpe3ZhciB5PURhdGUubm93KCktZDtpZih5PjE1KWJyZWFrfX1hLl9fZHJhd0luZGV4PXYsYS5fX2RyYXdJbmRleDxhLl9fZW5kSW5kZXgmJihvPSExKSx1LnByZXZFbENsaXBQYXRocyYmbC5yZXN0b3JlKCksbC5yZXN0b3JlKCl9cmV0dXJuIGJjLnd4YSYmZih0aGlzLl9sYXllcnMsZnVuY3Rpb24odCl7dCYmdC5jdHgmJnQuY3R4LmRyYXcmJnQuY3R4LmRyYXcoKX0pLG99LF9kb1BhaW50RWw6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9ZS5jdHgsYT10LnRyYW5zZm9ybTtpZighKCFlLl9fZGlydHkmJiFufHx0LmludmlzaWJsZXx8MD09PXQuc3R5bGUub3BhY2l0eXx8YSYmIWFbMF0mJiFhWzNdfHx0LmN1bGxpbmcmJmxpKHQsdGhpcy5fd2lkdGgsdGhpcy5faGVpZ2h0KSkpe3ZhciBvPXQuX19jbGlwUGF0aHM7KCFpLnByZXZFbENsaXBQYXRoc3x8dWkobyxpLnByZXZFbENsaXBQYXRocykpJiYoaS5wcmV2RWxDbGlwUGF0aHMmJihlLmN0eC5yZXN0b3JlKCksaS5wcmV2RWxDbGlwUGF0aHM9bnVsbCxpLnByZXZFbD1udWxsKSxvJiYoci5zYXZlKCksaGkobyxyKSxpLnByZXZFbENsaXBQYXRocz1vKSksdC5iZWZvcmVCcnVzaCYmdC5iZWZvcmVCcnVzaChyKSx0LmJydXNoKHIsaS5wcmV2RWx8fG51bGwpLGkucHJldkVsPXQsdC5hZnRlckJydXNoJiZ0LmFmdGVyQnJ1c2gocil9fSxnZXRMYXllcjpmdW5jdGlvbih0LGUpe3RoaXMuX3NpbmdsZUNhbnZhcyYmIXRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyYmKHQ9S2QpO3ZhciBuPXRoaXMuX2xheWVyc1t0XTtyZXR1cm4gbnx8KG49bmV3IHpkKFwienJfXCIrdCx0aGlzLHRoaXMuZHByKSxuLnpsZXZlbD10LG4uX19idWlsdGluX189ITAsdGhpcy5fbGF5ZXJDb25maWdbdF0mJnIobix0aGlzLl9sYXllckNvbmZpZ1t0XSwhMCksZSYmKG4udmlydHVhbD1lKSx0aGlzLmluc2VydExheWVyKHQsbiksbi5pbml0Q29udGV4dCgpKSxufSxpbnNlcnRMYXllcjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX2xheWVycyxpPXRoaXMuX3psZXZlbExpc3Qscj1pLmxlbmd0aCxhPW51bGwsbz0tMSxzPXRoaXMuX2RvbVJvb3Q7aWYoblt0XSlyZXR1cm4gdm9pZCBfZChcIlpMZXZlbCBcIit0K1wiIGhhcyBiZWVuIHVzZWQgYWxyZWFkeVwiKTtpZighc2koZSkpcmV0dXJuIHZvaWQgX2QoXCJMYXllciBvZiB6bGV2ZWwgXCIrdCtcIiBpcyBub3QgdmFsaWRcIik7aWYocj4wJiZ0PmlbMF0pe2ZvcihvPTA7ci0xPm8mJiEoaVtvXTx0JiZpW28rMV0+dCk7bysrKTthPW5baVtvXV19aWYoaS5zcGxpY2UobysxLDAsdCksblt0XT1lLCFlLnZpcnR1YWwpaWYoYSl7dmFyIGw9YS5kb207bC5uZXh0U2libGluZz9zLmluc2VydEJlZm9yZShlLmRvbSxsLm5leHRTaWJsaW5nKTpzLmFwcGVuZENoaWxkKGUuZG9tKX1lbHNlIHMuZmlyc3RDaGlsZD9zLmluc2VydEJlZm9yZShlLmRvbSxzLmZpcnN0Q2hpbGQpOnMuYXBwZW5kQ2hpbGQoZS5kb20pfSxlYWNoTGF5ZXI6ZnVuY3Rpb24odCxlKXt2YXIgbixpLHI9dGhpcy5femxldmVsTGlzdDtmb3IoaT0wO2k8ci5sZW5ndGg7aSsrKW49cltpXSx0LmNhbGwoZSx0aGlzLl9sYXllcnNbbl0sbil9LGVhY2hCdWlsdGluTGF5ZXI6ZnVuY3Rpb24odCxlKXt2YXIgbixpLHIsYT10aGlzLl96bGV2ZWxMaXN0O2ZvcihyPTA7cjxhLmxlbmd0aDtyKyspaT1hW3JdLG49dGhpcy5fbGF5ZXJzW2ldLG4uX19idWlsdGluX18mJnQuY2FsbChlLG4saSl9LGVhY2hPdGhlckxheWVyOmZ1bmN0aW9uKHQsZSl7dmFyIG4saSxyLGE9dGhpcy5femxldmVsTGlzdDtmb3Iocj0wO3I8YS5sZW5ndGg7cisrKWk9YVtyXSxuPXRoaXMuX2xheWVyc1tpXSxuLl9fYnVpbHRpbl9ffHx0LmNhbGwoZSxuLGkpfSxnZXRMYXllcnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGF5ZXJzfSxfdXBkYXRlTGF5ZXJTdGF0dXM6ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXtyJiYoci5fX2VuZEluZGV4IT09dCYmKHIuX19kaXJ0eT0hMCksci5fX2VuZEluZGV4PXQpfWlmKHRoaXMuZWFjaEJ1aWx0aW5MYXllcihmdW5jdGlvbih0KXt0Ll9fZGlydHk9dC5fX3VzZWQ9ITF9KSx0aGlzLl9zaW5nbGVDYW52YXMpZm9yKHZhciBuPTE7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07aWYoaS56bGV2ZWwhPT10W24tMV0uemxldmVsfHxpLmluY3JlbWVudGFsKXt0aGlzLl9uZWVkc01hbnVhbGx5Q29tcG9zaXRpbmc9ITA7YnJlYWt9fWZvcih2YXIgcj1udWxsLGE9MCxuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvLGk9dFtuXSxzPWkuemxldmVsO2kuaW5jcmVtZW50YWw/KG89dGhpcy5nZXRMYXllcihzK0pkLHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyksby5pbmNyZW1lbnRhbD0hMCxhPTEpOm89dGhpcy5nZXRMYXllcihzKyhhPjA/UWQ6MCksdGhpcy5fbmVlZHNNYW51YWxseUNvbXBvc2l0aW5nKSxvLl9fYnVpbHRpbl9ffHxfZChcIlpMZXZlbCBcIitzK1wiIGhhcyBiZWVuIHVzZWQgYnkgdW5rb3duIGxheWVyIFwiK28uaWQpLG8hPT1yJiYoby5fX3VzZWQ9ITAsby5fX3N0YXJ0SW5kZXghPT1uJiYoby5fX2RpcnR5PSEwKSxvLl9fc3RhcnRJbmRleD1uLG8uX19kcmF3SW5kZXg9by5pbmNyZW1lbnRhbD8tMTpuLGUobikscj1vKSxpLl9fZGlydHkmJihvLl9fZGlydHk9ITAsby5pbmNyZW1lbnRhbCYmby5fX2RyYXdJbmRleDwwJiYoby5fX2RyYXdJbmRleD1uKSl9ZShuKSx0aGlzLmVhY2hCdWlsdGluTGF5ZXIoZnVuY3Rpb24odCl7IXQuX191c2VkJiZ0LmdldEVsZW1lbnRDb3VudCgpPjAmJih0Ll9fZGlydHk9ITAsdC5fX3N0YXJ0SW5kZXg9dC5fX2VuZEluZGV4PXQuX19kcmF3SW5kZXg9MCksdC5fX2RpcnR5JiZ0Ll9fZHJhd0luZGV4PDAmJih0Ll9fZHJhd0luZGV4PXQuX19zdGFydEluZGV4KX0pfSxjbGVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2hCdWlsdGluTGF5ZXIodGhpcy5fY2xlYXJMYXllciksdGhpc30sX2NsZWFyTGF5ZXI6ZnVuY3Rpb24odCl7dC5jbGVhcigpfSxzZXRCYWNrZ3JvdW5kQ29sb3I6ZnVuY3Rpb24odCl7dGhpcy5fYmFja2dyb3VuZENvbG9yPXR9LGNvbmZpZ0xheWVyOmZ1bmN0aW9uKHQsZSl7aWYoZSl7dmFyIG49dGhpcy5fbGF5ZXJDb25maWc7blt0XT9yKG5bdF0sZSwhMCk6blt0XT1lO2Zvcih2YXIgaT0wO2k8dGhpcy5femxldmVsTGlzdC5sZW5ndGg7aSsrKXt2YXIgYT10aGlzLl96bGV2ZWxMaXN0W2ldO2lmKGE9PT10fHxhPT09dCtRZCl7dmFyIG89dGhpcy5fbGF5ZXJzW2FdO3IobyxuW3RdLCEwKX19fX0sZGVsTGF5ZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fbGF5ZXJzLG49dGhpcy5femxldmVsTGlzdCxpPWVbdF07aSYmKGkuZG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaS5kb20pLGRlbGV0ZSBlW3RdLG4uc3BsaWNlKHUobix0KSwxKSl9LHJlc2l6ZTpmdW5jdGlvbih0LGUpe2lmKHRoaXMuX2RvbVJvb3Quc3R5bGUpe3ZhciBuPXRoaXMuX2RvbVJvb3Q7bi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO3ZhciBpPXRoaXMuX29wdHM7aWYobnVsbCE9dCYmKGkud2lkdGg9dCksbnVsbCE9ZSYmKGkuaGVpZ2h0PWUpLHQ9dGhpcy5fZ2V0U2l6ZSgwKSxlPXRoaXMuX2dldFNpemUoMSksbi5zdHlsZS5kaXNwbGF5PVwiXCIsdGhpcy5fd2lkdGghPXR8fGUhPXRoaXMuX2hlaWdodCl7bi5zdHlsZS53aWR0aD10K1wicHhcIixuLnN0eWxlLmhlaWdodD1lK1wicHhcIjtmb3IodmFyIHIgaW4gdGhpcy5fbGF5ZXJzKXRoaXMuX2xheWVycy5oYXNPd25Qcm9wZXJ0eShyKSYmdGhpcy5fbGF5ZXJzW3JdLnJlc2l6ZSh0LGUpO2YodGhpcy5fcHJvZ3Jlc3NpdmVMYXllcnMsZnVuY3Rpb24obil7bi5yZXNpemUodCxlKX0pLHRoaXMucmVmcmVzaCghMCl9dGhpcy5fd2lkdGg9dCx0aGlzLl9oZWlnaHQ9ZX1lbHNle2lmKG51bGw9PXR8fG51bGw9PWUpcmV0dXJuO3RoaXMuX3dpZHRoPXQsdGhpcy5faGVpZ2h0PWUsdGhpcy5nZXRMYXllcihLZCkucmVzaXplKHQsZSl9cmV0dXJuIHRoaXN9LGNsZWFyTGF5ZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fbGF5ZXJzW3RdO2UmJmUuY2xlYXIoKX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMucm9vdC5pbm5lckhUTUw9XCJcIix0aGlzLnJvb3Q9dGhpcy5zdG9yYWdlPXRoaXMuX2RvbVJvb3Q9dGhpcy5fbGF5ZXJzPW51bGx9LGdldFJlbmRlcmVkQ2FudmFzOmZ1bmN0aW9uKHQpe2lmKHQ9dHx8e30sdGhpcy5fc2luZ2xlQ2FudmFzJiYhdGhpcy5fY29tcG9zaXRlTWFudWFsbHkpcmV0dXJuIHRoaXMuX2xheWVyc1tLZF0uZG9tO3ZhciBlPW5ldyB6ZChcImltYWdlXCIsdGhpcyx0LnBpeGVsUmF0aW98fHRoaXMuZHByKTtpZihlLmluaXRDb250ZXh0KCksZS5jbGVhcighMSx0LmJhY2tncm91bmRDb2xvcnx8dGhpcy5fYmFja2dyb3VuZENvbG9yKSx0LnBpeGVsUmF0aW88PXRoaXMuZHByKXt0aGlzLnJlZnJlc2goKTt2YXIgbj1lLmRvbS53aWR0aCxpPWUuZG9tLmhlaWdodCxyPWUuY3R4O3RoaXMuZWFjaExheWVyKGZ1bmN0aW9uKHQpe3QuX19idWlsdGluX18/ci5kcmF3SW1hZ2UodC5kb20sMCwwLG4saSk6dC5yZW5kZXJUb0NhbnZhcyYmKGUuY3R4LnNhdmUoKSx0LnJlbmRlclRvQ2FudmFzKGUuY3R4KSxlLmN0eC5yZXN0b3JlKCkpfSl9ZWxzZSBmb3IodmFyIGE9e30sbz10aGlzLnN0b3JhZ2UuZ2V0RGlzcGxheUxpc3QoITApLHM9MDtzPG8ubGVuZ3RoO3MrKyl7dmFyIGw9b1tzXTt0aGlzLl9kb1BhaW50RWwobCxlLCEwLGEpfXJldHVybiBlLmRvbX0sZ2V0V2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd2lkdGh9LGdldEhlaWdodDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9oZWlnaHR9LF9nZXRTaXplOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX29wdHMsbj1bXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdW3RdLGk9W1wiY2xpZW50V2lkdGhcIixcImNsaWVudEhlaWdodFwiXVt0XSxyPVtcInBhZGRpbmdMZWZ0XCIsXCJwYWRkaW5nVG9wXCJdW3RdLGE9W1wicGFkZGluZ1JpZ2h0XCIsXCJwYWRkaW5nQm90dG9tXCJdW3RdO2lmKG51bGwhPWVbbl0mJlwiYXV0b1wiIT09ZVtuXSlyZXR1cm4gcGFyc2VGbG9hdChlW25dKTt2YXIgbz10aGlzLnJvb3Qscz1kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG8pO3JldHVybihvW2ldfHxvaShzW25dKXx8b2koby5zdHlsZVtuXSkpLShvaShzW3JdKXx8MCktKG9pKHNbYV0pfHwwKXwwfSxwYXRoVG9JbWFnZTpmdW5jdGlvbih0LGUpe2U9ZXx8dGhpcy5kcHI7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxpPW4uZ2V0Q29udGV4dChcIjJkXCIpLHI9dC5nZXRCb3VuZGluZ1JlY3QoKSxhPXQuc3R5bGUsbz1hLnNoYWRvd0JsdXIqZSxzPWEuc2hhZG93T2Zmc2V0WCplLGw9YS5zaGFkb3dPZmZzZXRZKmUsdT1hLmhhc1N0cm9rZSgpP2EubGluZVdpZHRoOjAsaD1NYXRoLm1heCh1LzIsLXMrbyksYz1NYXRoLm1heCh1LzIscytvKSxkPU1hdGgubWF4KHUvMiwtbCtvKSxmPU1hdGgubWF4KHUvMixsK28pLHA9ci53aWR0aCtoK2MsZz1yLmhlaWdodCtkK2Y7bi53aWR0aD1wKmUsbi5oZWlnaHQ9ZyplLGkuc2NhbGUoZSxlKSxpLmNsZWFyUmVjdCgwLDAscCxnKSxpLmRwcj1lO3ZhciB2PXtwb3NpdGlvbjp0LnBvc2l0aW9uLHJvdGF0aW9uOnQucm90YXRpb24sc2NhbGU6dC5zY2FsZX07dC5wb3NpdGlvbj1baC1yLngsZC1yLnldLHQucm90YXRpb249MCx0LnNjYWxlPVsxLDFdLHQudXBkYXRlVHJhbnNmb3JtKCksdCYmdC5icnVzaChpKTt2YXIgbT1haSx5PW5ldyBtKHtzdHlsZTp7eDowLHk6MCxpbWFnZTpufX0pO3JldHVybiBudWxsIT12LnBvc2l0aW9uJiYoeS5wb3NpdGlvbj10LnBvc2l0aW9uPXYucG9zaXRpb24pLG51bGwhPXYucm90YXRpb24mJih5LnJvdGF0aW9uPXQucm90YXRpb249di5yb3RhdGlvbiksbnVsbCE9di5zY2FsZSYmKHkuc2NhbGU9dC5zY2FsZT12LnNjYWxlKSx5fX07dmFyIHJmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJiEhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIsYWY9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLG9mPWZ1bmN0aW9uKHQpe3Q9dHx8e30sdGhpcy5zdGFnZT10LnN0YWdlfHx7fSx0aGlzLm9uZnJhbWU9dC5vbmZyYW1lfHxmdW5jdGlvbigpe30sdGhpcy5fY2xpcHM9W10sdGhpcy5fcnVubmluZz0hMSx0aGlzLl90aW1lLHRoaXMuX3BhdXNlZFRpbWUsdGhpcy5fcGF1c2VTdGFydCx0aGlzLl9wYXVzZWQ9ITEsamMuY2FsbCh0aGlzKVxufTtvZi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOm9mLGFkZENsaXA6ZnVuY3Rpb24odCl7dGhpcy5fY2xpcHMucHVzaCh0KX0sYWRkQW5pbWF0b3I6ZnVuY3Rpb24odCl7dC5hbmltYXRpb249dGhpcztmb3IodmFyIGU9dC5nZXRDbGlwcygpLG49MDtuPGUubGVuZ3RoO24rKyl0aGlzLmFkZENsaXAoZVtuXSl9LHJlbW92ZUNsaXA6ZnVuY3Rpb24odCl7dmFyIGU9dSh0aGlzLl9jbGlwcyx0KTtlPj0wJiZ0aGlzLl9jbGlwcy5zcGxpY2UoZSwxKX0scmVtb3ZlQW5pbWF0b3I6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0Q2xpcHMoKSxuPTA7bjxlLmxlbmd0aDtuKyspdGhpcy5yZW1vdmVDbGlwKGVbbl0pO3QuYW5pbWF0aW9uPW51bGx9LF91cGRhdGU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5fcGF1c2VkVGltZSxlPXQtdGhpcy5fdGltZSxuPXRoaXMuX2NsaXBzLGk9bi5sZW5ndGgscj1bXSxhPVtdLG89MDtpPm87bysrKXt2YXIgcz1uW29dLGw9cy5zdGVwKHQsZSk7bCYmKHIucHVzaChsKSxhLnB1c2gocykpfWZvcih2YXIgbz0wO2k+bzspbltvXS5fbmVlZHNSZW1vdmU/KG5bb109bltpLTFdLG4ucG9wKCksaS0tKTpvKys7aT1yLmxlbmd0aDtmb3IodmFyIG89MDtpPm87bysrKWFbb10uZmlyZShyW29dKTt0aGlzLl90aW1lPXQsdGhpcy5vbmZyYW1lKGUpLHRoaXMudHJpZ2dlcihcImZyYW1lXCIsZSksdGhpcy5zdGFnZS51cGRhdGUmJnRoaXMuc3RhZ2UudXBkYXRlKCl9LF9zdGFydExvb3A6ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7ZS5fcnVubmluZyYmKE5kKHQpLCFlLl9wYXVzZWQmJmUuX3VwZGF0ZSgpKX12YXIgZT10aGlzO3RoaXMuX3J1bm5pbmc9ITAsTmQodCl9LHN0YXJ0OmZ1bmN0aW9uKCl7dGhpcy5fdGltZT0obmV3IERhdGUpLmdldFRpbWUoKSx0aGlzLl9wYXVzZWRUaW1lPTAsdGhpcy5fc3RhcnRMb29wKCl9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLl9ydW5uaW5nPSExfSxwYXVzZTpmdW5jdGlvbigpe3RoaXMuX3BhdXNlZHx8KHRoaXMuX3BhdXNlU3RhcnQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5fcGF1c2VkPSEwKX0scmVzdW1lOmZ1bmN0aW9uKCl7dGhpcy5fcGF1c2VkJiYodGhpcy5fcGF1c2VkVGltZSs9KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5fcGF1c2VTdGFydCx0aGlzLl9wYXVzZWQ9ITEpfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuX2NsaXBzPVtdfSxpc0ZpbmlzaGVkOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuX2NsaXBzLmxlbmd0aH0sYW5pbWF0ZTpmdW5jdGlvbih0LGUpe2U9ZXx8e307dmFyIG49bmV3IHBkKHQsZS5sb29wLGUuZ2V0dGVyLGUuc2V0dGVyKTtyZXR1cm4gdGhpcy5hZGRBbmltYXRvcihuKSxufX0sYyhvZixqYyk7dmFyIHNmPWZ1bmN0aW9uKCl7dGhpcy5fdHJhY2s9W119O3NmLnByb3RvdHlwZT17Y29uc3RydWN0b3I6c2YscmVjb2duaXplOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5fZG9UcmFjayh0LGUsbiksdGhpcy5fcmVjb2duaXplKHQpfSxjbGVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90cmFjay5sZW5ndGg9MCx0aGlzfSxfZG9UcmFjazpmdW5jdGlvbih0LGUsbil7dmFyIGk9dC50b3VjaGVzO2lmKGkpe2Zvcih2YXIgcj17cG9pbnRzOltdLHRvdWNoZXM6W10sdGFyZ2V0OmUsZXZlbnQ6dH0sYT0wLG89aS5sZW5ndGg7bz5hO2ErKyl7dmFyIHM9aVthXSxsPWZpKG4scyx7fSk7ci5wb2ludHMucHVzaChbbC56clgsbC56clldKSxyLnRvdWNoZXMucHVzaChzKX10aGlzLl90cmFjay5wdXNoKHIpfX0sX3JlY29nbml6ZTpmdW5jdGlvbih0KXtmb3IodmFyIGUgaW4gbGYpaWYobGYuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBuPWxmW2VdKHRoaXMuX3RyYWNrLHQpO2lmKG4pcmV0dXJuIG59fX07dmFyIGxmPXtwaW5jaDpmdW5jdGlvbih0LGUpe3ZhciBuPXQubGVuZ3RoO2lmKG4pe3ZhciBpPSh0W24tMV18fHt9KS5wb2ludHMscj0odFtuLTJdfHx7fSkucG9pbnRzfHxpO2lmKHImJnIubGVuZ3RoPjEmJmkmJmkubGVuZ3RoPjEpe3ZhciBhPXlpKGkpL3lpKHIpOyFpc0Zpbml0ZShhKSYmKGE9MSksZS5waW5jaFNjYWxlPWE7dmFyIG89X2koaSk7cmV0dXJuIGUucGluY2hYPW9bMF0sZS5waW5jaFk9b1sxXSx7dHlwZTpcInBpbmNoXCIsdGFyZ2V0OnRbMF0udGFyZ2V0LGV2ZW50OmV9fX19fSx1Zj0zMDAsaGY9W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZXdoZWVsXCIsXCJtb3VzZW91dFwiLFwibW91c2V1cFwiLFwibW91c2Vkb3duXCIsXCJtb3VzZW1vdmVcIixcImNvbnRleHRtZW51XCJdLGNmPVtcInRvdWNoc3RhcnRcIixcInRvdWNoZW5kXCIsXCJ0b3VjaG1vdmVcIl0sZGY9e3BvaW50ZXJkb3duOjEscG9pbnRlcnVwOjEscG9pbnRlcm1vdmU6MSxwb2ludGVyb3V0OjF9LGZmPXAoaGYsZnVuY3Rpb24odCl7dmFyIGU9dC5yZXBsYWNlKFwibW91c2VcIixcInBvaW50ZXJcIik7cmV0dXJuIGRmW2VdP2U6dH0pLHBmPXttb3VzZW1vdmU6ZnVuY3Rpb24odCl7dD1naSh0aGlzLmRvbSx0KSx0aGlzLnRyaWdnZXIoXCJtb3VzZW1vdmVcIix0KX0sbW91c2VvdXQ6ZnVuY3Rpb24odCl7dD1naSh0aGlzLmRvbSx0KTt2YXIgZT10LnRvRWxlbWVudHx8dC5yZWxhdGVkVGFyZ2V0O2lmKGUhPXRoaXMuZG9tKWZvcig7ZSYmOSE9ZS5ub2RlVHlwZTspe2lmKGU9PT10aGlzLmRvbSlyZXR1cm47ZT1lLnBhcmVudE5vZGV9dGhpcy50cmlnZ2VyKFwibW91c2VvdXRcIix0KX0sdG91Y2hzdGFydDpmdW5jdGlvbih0KXt0PWdpKHRoaXMuZG9tLHQpLHQuenJCeVRvdWNoPSEwLHRoaXMuX2xhc3RUb3VjaE1vbWVudD1uZXcgRGF0ZSx3aSh0aGlzLHQsXCJzdGFydFwiKSxwZi5tb3VzZW1vdmUuY2FsbCh0aGlzLHQpLHBmLm1vdXNlZG93bi5jYWxsKHRoaXMsdCksYmkodGhpcyl9LHRvdWNobW92ZTpmdW5jdGlvbih0KXt0PWdpKHRoaXMuZG9tLHQpLHQuenJCeVRvdWNoPSEwLHdpKHRoaXMsdCxcImNoYW5nZVwiKSxwZi5tb3VzZW1vdmUuY2FsbCh0aGlzLHQpLGJpKHRoaXMpfSx0b3VjaGVuZDpmdW5jdGlvbih0KXt0PWdpKHRoaXMuZG9tLHQpLHQuenJCeVRvdWNoPSEwLHdpKHRoaXMsdCxcImVuZFwiKSxwZi5tb3VzZXVwLmNhbGwodGhpcyx0KSwrbmV3IERhdGUtdGhpcy5fbGFzdFRvdWNoTW9tZW50PHVmJiZwZi5jbGljay5jYWxsKHRoaXMsdCksYmkodGhpcyl9LHBvaW50ZXJkb3duOmZ1bmN0aW9uKHQpe3BmLm1vdXNlZG93bi5jYWxsKHRoaXMsdCl9LHBvaW50ZXJtb3ZlOmZ1bmN0aW9uKHQpe01pKHQpfHxwZi5tb3VzZW1vdmUuY2FsbCh0aGlzLHQpfSxwb2ludGVydXA6ZnVuY3Rpb24odCl7cGYubW91c2V1cC5jYWxsKHRoaXMsdCl9LHBvaW50ZXJvdXQ6ZnVuY3Rpb24odCl7TWkodCl8fHBmLm1vdXNlb3V0LmNhbGwodGhpcyx0KX19O2YoW1wiY2xpY2tcIixcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwibW91c2V3aGVlbFwiLFwiZGJsY2xpY2tcIixcImNvbnRleHRtZW51XCJdLGZ1bmN0aW9uKHQpe3BmW3RdPWZ1bmN0aW9uKGUpe2U9Z2kodGhpcy5kb20sZSksdGhpcy50cmlnZ2VyKHQsZSl9fSk7dmFyIGdmPUNpLnByb3RvdHlwZTtnZi5kaXNwb3NlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWhmLmNvbmNhdChjZiksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdO21pKHRoaXMuZG9tLHhpKG4pLHRoaXMuX2hhbmRsZXJzW25dKX19LGdmLnNldEN1cnNvcj1mdW5jdGlvbih0KXt0aGlzLmRvbS5zdHlsZSYmKHRoaXMuZG9tLnN0eWxlLmN1cnNvcj10fHxcImRlZmF1bHRcIil9LGMoQ2ksamMpO3ZhciB2Zj0hYmMuY2FudmFzU3VwcG9ydGVkLG1mPXtjYW52YXM6bmZ9LHlmPXt9LF9mPVwiNC4wLjRcIix4Zj1mdW5jdGlvbih0LGUsbil7bj1ufHx7fSx0aGlzLmRvbT1lLHRoaXMuaWQ9dDt2YXIgaT10aGlzLHI9bmV3IGtkLGE9bi5yZW5kZXJlcjtpZih2Zil7aWYoIW1mLnZtbCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbmVlZCB0byByZXF1aXJlICd6cmVuZGVyL3ZtbC92bWwnIHRvIHN1cHBvcnQgSUU4XCIpO2E9XCJ2bWxcIn1lbHNlIGEmJm1mW2FdfHwoYT1cImNhbnZhc1wiKTt2YXIgbz1uZXcgbWZbYV0oZSxyLG4sdCk7dGhpcy5zdG9yYWdlPXIsdGhpcy5wYWludGVyPW87dmFyIHM9YmMubm9kZXx8YmMud29ya2VyP251bGw6bmV3IENpKG8uZ2V0Vmlld3BvcnRSb290KCkpO3RoaXMuaGFuZGxlcj1uZXcgWGMocixvLHMsby5yb290KSx0aGlzLmFuaW1hdGlvbj1uZXcgb2Yoe3N0YWdlOnt1cGRhdGU6eSh0aGlzLmZsdXNoLHRoaXMpfX0pLHRoaXMuYW5pbWF0aW9uLnN0YXJ0KCksdGhpcy5fbmVlZHNSZWZyZXNoO3ZhciBsPXIuZGVsRnJvbVN0b3JhZ2UsdT1yLmFkZFRvU3RvcmFnZTtyLmRlbEZyb21TdG9yYWdlPWZ1bmN0aW9uKHQpe2wuY2FsbChyLHQpLHQmJnQucmVtb3ZlU2VsZkZyb21acihpKX0sci5hZGRUb1N0b3JhZ2U9ZnVuY3Rpb24odCl7dS5jYWxsKHIsdCksdC5hZGRTZWxmVG9acihpKX19O3hmLnByb3RvdHlwZT17Y29uc3RydWN0b3I6eGYsZ2V0SWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZH0sYWRkOmZ1bmN0aW9uKHQpe3RoaXMuc3RvcmFnZS5hZGRSb290KHQpLHRoaXMuX25lZWRzUmVmcmVzaD0hMH0scmVtb3ZlOmZ1bmN0aW9uKHQpe3RoaXMuc3RvcmFnZS5kZWxSb290KHQpLHRoaXMuX25lZWRzUmVmcmVzaD0hMH0sY29uZmlnTGF5ZXI6ZnVuY3Rpb24odCxlKXt0aGlzLnBhaW50ZXIuY29uZmlnTGF5ZXImJnRoaXMucGFpbnRlci5jb25maWdMYXllcih0LGUpLHRoaXMuX25lZWRzUmVmcmVzaD0hMH0sc2V0QmFja2dyb3VuZENvbG9yOmZ1bmN0aW9uKHQpe3RoaXMucGFpbnRlci5zZXRCYWNrZ3JvdW5kQ29sb3ImJnRoaXMucGFpbnRlci5zZXRCYWNrZ3JvdW5kQ29sb3IodCksdGhpcy5fbmVlZHNSZWZyZXNoPSEwfSxyZWZyZXNoSW1tZWRpYXRlbHk6ZnVuY3Rpb24oKXt0aGlzLl9uZWVkc1JlZnJlc2g9ITEsdGhpcy5wYWludGVyLnJlZnJlc2goKSx0aGlzLl9uZWVkc1JlZnJlc2g9ITF9LHJlZnJlc2g6ZnVuY3Rpb24oKXt0aGlzLl9uZWVkc1JlZnJlc2g9ITB9LGZsdXNoOmZ1bmN0aW9uKCl7dmFyIHQ7dGhpcy5fbmVlZHNSZWZyZXNoJiYodD0hMCx0aGlzLnJlZnJlc2hJbW1lZGlhdGVseSgpKSx0aGlzLl9uZWVkc1JlZnJlc2hIb3ZlciYmKHQ9ITAsdGhpcy5yZWZyZXNoSG92ZXJJbW1lZGlhdGVseSgpKSx0JiZ0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKX0sYWRkSG92ZXI6ZnVuY3Rpb24odCxlKXt0aGlzLnBhaW50ZXIuYWRkSG92ZXImJih0aGlzLnBhaW50ZXIuYWRkSG92ZXIodCxlKSx0aGlzLnJlZnJlc2hIb3ZlcigpKX0scmVtb3ZlSG92ZXI6ZnVuY3Rpb24odCl7dGhpcy5wYWludGVyLnJlbW92ZUhvdmVyJiYodGhpcy5wYWludGVyLnJlbW92ZUhvdmVyKHQpLHRoaXMucmVmcmVzaEhvdmVyKCkpfSxjbGVhckhvdmVyOmZ1bmN0aW9uKCl7dGhpcy5wYWludGVyLmNsZWFySG92ZXImJih0aGlzLnBhaW50ZXIuY2xlYXJIb3ZlcigpLHRoaXMucmVmcmVzaEhvdmVyKCkpfSxyZWZyZXNoSG92ZXI6ZnVuY3Rpb24oKXt0aGlzLl9uZWVkc1JlZnJlc2hIb3Zlcj0hMH0scmVmcmVzaEhvdmVySW1tZWRpYXRlbHk6ZnVuY3Rpb24oKXt0aGlzLl9uZWVkc1JlZnJlc2hIb3Zlcj0hMSx0aGlzLnBhaW50ZXIucmVmcmVzaEhvdmVyJiZ0aGlzLnBhaW50ZXIucmVmcmVzaEhvdmVyKCl9LHJlc2l6ZTpmdW5jdGlvbih0KXt0PXR8fHt9LHRoaXMucGFpbnRlci5yZXNpemUodC53aWR0aCx0LmhlaWdodCksdGhpcy5oYW5kbGVyLnJlc2l6ZSgpfSxjbGVhckFuaW1hdGlvbjpmdW5jdGlvbigpe3RoaXMuYW5pbWF0aW9uLmNsZWFyKCl9LGdldFdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFpbnRlci5nZXRXaWR0aCgpfSxnZXRIZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYWludGVyLmdldEhlaWdodCgpfSxwYXRoVG9JbWFnZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnBhaW50ZXIucGF0aFRvSW1hZ2UodCxlKX0sc2V0Q3Vyc29yU3R5bGU6ZnVuY3Rpb24odCl7dGhpcy5oYW5kbGVyLnNldEN1cnNvclN0eWxlKHQpfSxmaW5kSG92ZXI6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5oYW5kbGVyLmZpbmRIb3Zlcih0LGUpfSxvbjpmdW5jdGlvbih0LGUsbil7dGhpcy5oYW5kbGVyLm9uKHQsZSxuKX0sb2ZmOmZ1bmN0aW9uKHQsZSl7dGhpcy5oYW5kbGVyLm9mZih0LGUpfSx0cmlnZ2VyOmZ1bmN0aW9uKHQsZSl7dGhpcy5oYW5kbGVyLnRyaWdnZXIodCxlKX0sY2xlYXI6ZnVuY3Rpb24oKXt0aGlzLnN0b3JhZ2UuZGVsUm9vdCgpLHRoaXMucGFpbnRlci5jbGVhcigpfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5hbmltYXRpb24uc3RvcCgpLHRoaXMuY2xlYXIoKSx0aGlzLnN0b3JhZ2UuZGlzcG9zZSgpLHRoaXMucGFpbnRlci5kaXNwb3NlKCksdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKSx0aGlzLmFuaW1hdGlvbj10aGlzLnN0b3JhZ2U9dGhpcy5wYWludGVyPXRoaXMuaGFuZGxlcj1udWxsLEFpKHRoaXMuaWQpfX07dmFyIHdmPShPYmplY3QuZnJlZXplfHxPYmplY3QpKHt2ZXJzaW9uOl9mLGluaXQ6SWksZGlzcG9zZTpUaSxnZXRJbnN0YW5jZTpraSxyZWdpc3RlclBhaW50ZXI6RGl9KSxiZj1mLE1mPU0sU2Y9eCxDZj1cInNlcmllc1xceDAwXCIsSWY9W1wiZm9udFN0eWxlXCIsXCJmb250V2VpZ2h0XCIsXCJmb250U2l6ZVwiLFwiZm9udEZhbWlseVwiLFwicmljaFwiLFwidGFnXCIsXCJjb2xvclwiLFwidGV4dEJvcmRlckNvbG9yXCIsXCJ0ZXh0Qm9yZGVyV2lkdGhcIixcIndpZHRoXCIsXCJoZWlnaHRcIixcImxpbmVIZWlnaHRcIixcImFsaWduXCIsXCJ2ZXJ0aWNhbEFsaWduXCIsXCJiYXNlbGluZVwiLFwic2hhZG93Q29sb3JcIixcInNoYWRvd0JsdXJcIixcInNoYWRvd09mZnNldFhcIixcInNoYWRvd09mZnNldFlcIixcInRleHRTaGFkb3dDb2xvclwiLFwidGV4dFNoYWRvd0JsdXJcIixcInRleHRTaGFkb3dPZmZzZXRYXCIsXCJ0ZXh0U2hhZG93T2Zmc2V0WVwiLFwiYmFja2dyb3VuZENvbG9yXCIsXCJib3JkZXJDb2xvclwiLFwiYm9yZGVyV2lkdGhcIixcImJvcmRlclJhZGl1c1wiLFwicGFkZGluZ1wiXSxUZj0wLGtmPVwiLlwiLERmPVwiX19fRUNfX0NPTVBPTkVOVF9fQ09OVEFJTkVSX19fXCIsQWY9MCxQZj1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl0W2VdWzFdfHwodFtlXVsxXT10W2VdWzBdKTtyZXR1cm4gZnVuY3Rpb24oZSxuLGkpe2Zvcih2YXIgcj17fSxhPTA7YTx0Lmxlbmd0aDthKyspe3ZhciBvPXRbYV1bMV07aWYoIShuJiZ1KG4sbyk+PTB8fGkmJnUoaSxvKTwwKSl7dmFyIHM9ZS5nZXRTaGFsbG93KG8pO251bGwhPXMmJihyW3RbYV1bMF1dPXMpfX1yZXR1cm4gcn19LExmPVBmKFtbXCJsaW5lV2lkdGhcIixcIndpZHRoXCJdLFtcInN0cm9rZVwiLFwiY29sb3JcIl0sW1wib3BhY2l0eVwiXSxbXCJzaGFkb3dCbHVyXCJdLFtcInNoYWRvd09mZnNldFhcIl0sW1wic2hhZG93T2Zmc2V0WVwiXSxbXCJzaGFkb3dDb2xvclwiXV0pLE9mPXtnZXRMaW5lU3R5bGU6ZnVuY3Rpb24odCl7dmFyIGU9TGYodGhpcyx0KSxuPXRoaXMuZ2V0TGluZURhc2goZS5saW5lV2lkdGgpO3JldHVybiBuJiYoZS5saW5lRGFzaD1uKSxlfSxnZXRMaW5lRGFzaDpmdW5jdGlvbih0KXtudWxsPT10JiYodD0xKTt2YXIgZT10aGlzLmdldChcInR5cGVcIiksbj1NYXRoLm1heCh0LDIpLGk9NCp0O3JldHVyblwic29saWRcIj09PWV8fG51bGw9PWU/bnVsbDpcImRhc2hlZFwiPT09ZT9baSxpXTpbbixuXX19LFJmPVBmKFtbXCJmaWxsXCIsXCJjb2xvclwiXSxbXCJzaGFkb3dCbHVyXCJdLFtcInNoYWRvd09mZnNldFhcIl0sW1wic2hhZG93T2Zmc2V0WVwiXSxbXCJvcGFjaXR5XCJdLFtcInNoYWRvd0NvbG9yXCJdXSksRWY9e2dldEFyZWFTdHlsZTpmdW5jdGlvbih0LGUpe3JldHVybiBSZih0aGlzLHQsZSl9fSxCZj1NYXRoLnBvdyx6Zj1NYXRoLnNxcnQsTmY9MWUtOCxGZj0xZS00LFZmPXpmKDMpLEdmPTEvMyxIZj1HKCksV2Y9RygpLGpmPUcoKSxxZj1NYXRoLm1pbixVZj1NYXRoLm1heCxYZj1NYXRoLnNpbixZZj1NYXRoLmNvcyxaZj0yKk1hdGguUEksJGY9RygpLEtmPUcoKSxRZj1HKCksSmY9W10sdHA9W10sZXA9e006MSxMOjIsQzozLFE6NCxBOjUsWjo2LFI6N30sbnA9W10saXA9W10scnA9W10sYXA9W10sb3A9TWF0aC5taW4sc3A9TWF0aC5tYXgsbHA9TWF0aC5jb3MsdXA9TWF0aC5zaW4saHA9TWF0aC5zcXJ0LGNwPU1hdGguYWJzLGRwPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGbG9hdDMyQXJyYXksZnA9ZnVuY3Rpb24odCl7dGhpcy5fc2F2ZURhdGE9IXQsdGhpcy5fc2F2ZURhdGEmJih0aGlzLmRhdGE9W10pLHRoaXMuX2N0eD1udWxsfTtmcC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmZwLF94aTowLF95aTowLF94MDowLF95MDowLF91eDowLF91eTowLF9sZW46MCxfbGluZURhc2g6bnVsbCxfZGFzaE9mZnNldDowLF9kYXNoSWR4OjAsX2Rhc2hTdW06MCxzZXRTY2FsZTpmdW5jdGlvbih0LGUpe3RoaXMuX3V4PWNwKDEvbWQvdCl8fDAsdGhpcy5fdXk9Y3AoMS9tZC9lKXx8MH0sZ2V0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdHh9LGJlZ2luUGF0aDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY3R4PXQsdCYmdC5iZWdpblBhdGgoKSx0JiYodGhpcy5kcHI9dC5kcHIpLHRoaXMuX3NhdmVEYXRhJiYodGhpcy5fbGVuPTApLHRoaXMuX2xpbmVEYXNoJiYodGhpcy5fbGluZURhc2g9bnVsbCx0aGlzLl9kYXNoT2Zmc2V0PTApLHRoaXN9LG1vdmVUbzpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZERhdGEoZXAuTSx0LGUpLHRoaXMuX2N0eCYmdGhpcy5fY3R4Lm1vdmVUbyh0LGUpLHRoaXMuX3gwPXQsdGhpcy5feTA9ZSx0aGlzLl94aT10LHRoaXMuX3lpPWUsdGhpc30sbGluZVRvOmZ1bmN0aW9uKHQsZSl7dmFyIG49Y3AodC10aGlzLl94aSk+dGhpcy5fdXh8fGNwKGUtdGhpcy5feWkpPnRoaXMuX3V5fHx0aGlzLl9sZW48NTtyZXR1cm4gdGhpcy5hZGREYXRhKGVwLkwsdCxlKSx0aGlzLl9jdHgmJm4mJih0aGlzLl9uZWVkc0Rhc2goKT90aGlzLl9kYXNoZWRMaW5lVG8odCxlKTp0aGlzLl9jdHgubGluZVRvKHQsZSkpLG4mJih0aGlzLl94aT10LHRoaXMuX3lpPWUpLHRoaXN9LGJlemllckN1cnZlVG86ZnVuY3Rpb24odCxlLG4saSxyLGEpe3JldHVybiB0aGlzLmFkZERhdGEoZXAuQyx0LGUsbixpLHIsYSksdGhpcy5fY3R4JiYodGhpcy5fbmVlZHNEYXNoKCk/dGhpcy5fZGFzaGVkQmV6aWVyVG8odCxlLG4saSxyLGEpOnRoaXMuX2N0eC5iZXppZXJDdXJ2ZVRvKHQsZSxuLGkscixhKSksdGhpcy5feGk9cix0aGlzLl95aT1hLHRoaXN9LHF1YWRyYXRpY0N1cnZlVG86ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIHRoaXMuYWRkRGF0YShlcC5RLHQsZSxuLGkpLHRoaXMuX2N0eCYmKHRoaXMuX25lZWRzRGFzaCgpP3RoaXMuX2Rhc2hlZFF1YWRyYXRpY1RvKHQsZSxuLGkpOnRoaXMuX2N0eC5xdWFkcmF0aWNDdXJ2ZVRvKHQsZSxuLGkpKSx0aGlzLl94aT1uLHRoaXMuX3lpPWksdGhpc30sYXJjOmZ1bmN0aW9uKHQsZSxuLGkscixhKXtyZXR1cm4gdGhpcy5hZGREYXRhKGVwLkEsdCxlLG4sbixpLHItaSwwLGE/MDoxKSx0aGlzLl9jdHgmJnRoaXMuX2N0eC5hcmModCxlLG4saSxyLGEpLHRoaXMuX3hpPWxwKHIpKm4rdCx0aGlzLl95aT11cChyKSpuK3QsdGhpc30sYXJjVG86ZnVuY3Rpb24odCxlLG4saSxyKXtyZXR1cm4gdGhpcy5fY3R4JiZ0aGlzLl9jdHguYXJjVG8odCxlLG4saSxyKSx0aGlzfSxyZWN0OmZ1bmN0aW9uKHQsZSxuLGkpe3JldHVybiB0aGlzLl9jdHgmJnRoaXMuX2N0eC5yZWN0KHQsZSxuLGkpLHRoaXMuYWRkRGF0YShlcC5SLHQsZSxuLGkpLHRoaXN9LGNsb3NlUGF0aDpmdW5jdGlvbigpe3RoaXMuYWRkRGF0YShlcC5aKTt2YXIgdD10aGlzLl9jdHgsZT10aGlzLl94MCxuPXRoaXMuX3kwO3JldHVybiB0JiYodGhpcy5fbmVlZHNEYXNoKCkmJnRoaXMuX2Rhc2hlZExpbmVUbyhlLG4pLHQuY2xvc2VQYXRoKCkpLHRoaXMuX3hpPWUsdGhpcy5feWk9bix0aGlzfSxmaWxsOmZ1bmN0aW9uKHQpe3QmJnQuZmlsbCgpLHRoaXMudG9TdGF0aWMoKX0sc3Ryb2tlOmZ1bmN0aW9uKHQpe3QmJnQuc3Ryb2tlKCksdGhpcy50b1N0YXRpYygpfSxzZXRMaW5lRGFzaDpmdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgQXJyYXkpe3RoaXMuX2xpbmVEYXNoPXQsdGhpcy5fZGFzaElkeD0wO2Zvcih2YXIgZT0wLG49MDtuPHQubGVuZ3RoO24rKyllKz10W25dO3RoaXMuX2Rhc2hTdW09ZX1yZXR1cm4gdGhpc30sc2V0TGluZURhc2hPZmZzZXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2Rhc2hPZmZzZXQ9dCx0aGlzfSxsZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGVufSxzZXREYXRhOmZ1bmN0aW9uKHQpe3ZhciBlPXQubGVuZ3RoO3RoaXMuZGF0YSYmdGhpcy5kYXRhLmxlbmd0aD09ZXx8IWRwfHwodGhpcy5kYXRhPW5ldyBGbG9hdDMyQXJyYXkoZSkpO2Zvcih2YXIgbj0wO2U+bjtuKyspdGhpcy5kYXRhW25dPXRbbl07dGhpcy5fbGVuPWV9LGFwcGVuZFBhdGg6ZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mIEFycmF5fHwodD1bdF0pO2Zvcih2YXIgZT10Lmxlbmd0aCxuPTAsaT10aGlzLl9sZW4scj0wO2U+cjtyKyspbis9dFtyXS5sZW4oKTtkcCYmdGhpcy5kYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5JiYodGhpcy5kYXRhPW5ldyBGbG9hdDMyQXJyYXkoaStuKSk7Zm9yKHZhciByPTA7ZT5yO3IrKylmb3IodmFyIGE9dFtyXS5kYXRhLG89MDtvPGEubGVuZ3RoO28rKyl0aGlzLmRhdGFbaSsrXT1hW29dO3RoaXMuX2xlbj1pfSxhZGREYXRhOmZ1bmN0aW9uKHQpe2lmKHRoaXMuX3NhdmVEYXRhKXt2YXIgZT10aGlzLmRhdGE7dGhpcy5fbGVuK2FyZ3VtZW50cy5sZW5ndGg+ZS5sZW5ndGgmJih0aGlzLl9leHBhbmREYXRhKCksZT10aGlzLmRhdGEpO2Zvcih2YXIgbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspZVt0aGlzLl9sZW4rK109YXJndW1lbnRzW25dO3RoaXMuX3ByZXZDbWQ9dH19LF9leHBhbmREYXRhOmZ1bmN0aW9uKCl7aWYoISh0aGlzLmRhdGEgaW5zdGFuY2VvZiBBcnJheSkpe2Zvcih2YXIgdD1bXSxlPTA7ZTx0aGlzLl9sZW47ZSsrKXRbZV09dGhpcy5kYXRhW2VdO3RoaXMuZGF0YT10fX0sX25lZWRzRGFzaDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9saW5lRGFzaH0sX2Rhc2hlZExpbmVUbzpmdW5jdGlvbih0LGUpe3ZhciBuLGkscj10aGlzLl9kYXNoU3VtLGE9dGhpcy5fZGFzaE9mZnNldCxvPXRoaXMuX2xpbmVEYXNoLHM9dGhpcy5fY3R4LGw9dGhpcy5feGksdT10aGlzLl95aSxoPXQtbCxjPWUtdSxkPWhwKGgqaCtjKmMpLGY9bCxwPXUsZz1vLmxlbmd0aDtmb3IoaC89ZCxjLz1kLDA+YSYmKGE9cithKSxhJT1yLGYtPWEqaCxwLT1hKmM7aD4wJiZ0Pj1mfHwwPmgmJmY+PXR8fDA9PWgmJihjPjAmJmU+PXB8fDA+YyYmcD49ZSk7KWk9dGhpcy5fZGFzaElkeCxuPW9baV0sZis9aCpuLHArPWMqbix0aGlzLl9kYXNoSWR4PShpKzEpJWcsaD4wJiZsPmZ8fDA+aCYmZj5sfHxjPjAmJnU+cHx8MD5jJiZwPnV8fHNbaSUyP1wibW92ZVRvXCI6XCJsaW5lVG9cIl0oaD49MD9vcChmLHQpOnNwKGYsdCksYz49MD9vcChwLGUpOnNwKHAsZSkpO2g9Zi10LGM9cC1lLHRoaXMuX2Rhc2hPZmZzZXQ9LWhwKGgqaCtjKmMpfSxfZGFzaGVkQmV6aWVyVG86ZnVuY3Rpb24odCxlLG4saSxyLGEpe3ZhciBvLHMsbCx1LGgsYz10aGlzLl9kYXNoU3VtLGQ9dGhpcy5fZGFzaE9mZnNldCxmPXRoaXMuX2xpbmVEYXNoLHA9dGhpcy5fY3R4LGc9dGhpcy5feGksdj10aGlzLl95aSxtPXRyLHk9MCxfPXRoaXMuX2Rhc2hJZHgseD1mLmxlbmd0aCx3PTA7Zm9yKDA+ZCYmKGQ9YytkKSxkJT1jLG89MDsxPm87bys9LjEpcz1tKGcsdCxuLHIsbysuMSktbShnLHQsbixyLG8pLGw9bSh2LGUsaSxhLG8rLjEpLW0odixlLGksYSxvKSx5Kz1ocChzKnMrbCpsKTtmb3IoO3g+XyYmKHcrPWZbX10sISh3PmQpKTtfKyspO2ZvcihvPSh3LWQpL3k7MT49bzspdT1tKGcsdCxuLHIsbyksaD1tKHYsZSxpLGEsbyksXyUyP3AubW92ZVRvKHUsaCk6cC5saW5lVG8odSxoKSxvKz1mW19dL3ksXz0oXysxKSV4O18lMiE9PTAmJnAubGluZVRvKHIsYSkscz1yLXUsbD1hLWgsdGhpcy5fZGFzaE9mZnNldD0taHAocypzK2wqbCl9LF9kYXNoZWRRdWFkcmF0aWNUbzpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1uLGE9aTtuPShuKzIqdCkvMyxpPShpKzIqZSkvMyx0PSh0aGlzLl94aSsyKnQpLzMsZT0odGhpcy5feWkrMiplKS8zLHRoaXMuX2Rhc2hlZEJlemllclRvKHQsZSxuLGkscixhKX0sdG9TdGF0aWM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmRhdGE7dCBpbnN0YW5jZW9mIEFycmF5JiYodC5sZW5ndGg9dGhpcy5fbGVuLGRwJiYodGhpcy5kYXRhPW5ldyBGbG9hdDMyQXJyYXkodCkpKX0sZ2V0Qm91bmRpbmdSZWN0OmZ1bmN0aW9uKCl7bnBbMF09bnBbMV09cnBbMF09cnBbMV09TnVtYmVyLk1BWF9WQUxVRSxpcFswXT1pcFsxXT1hcFswXT1hcFsxXT0tTnVtYmVyLk1BWF9WQUxVRTtmb3IodmFyIHQ9dGhpcy5kYXRhLGU9MCxuPTAsaT0wLHI9MCxhPTA7YTx0Lmxlbmd0aDspe3ZhciBvPXRbYSsrXTtzd2l0Y2goMT09YSYmKGU9dFthXSxuPXRbYSsxXSxpPWUscj1uKSxvKXtjYXNlIGVwLk06aT10W2ErK10scj10W2ErK10sZT1pLG49cixycFswXT1pLHJwWzFdPXIsYXBbMF09aSxhcFsxXT1yO2JyZWFrO2Nhc2UgZXAuTDpmcihlLG4sdFthXSx0W2ErMV0scnAsYXApLGU9dFthKytdLG49dFthKytdO2JyZWFrO2Nhc2UgZXAuQzpwcihlLG4sdFthKytdLHRbYSsrXSx0W2ErK10sdFthKytdLHRbYV0sdFthKzFdLHJwLGFwKSxlPXRbYSsrXSxuPXRbYSsrXTticmVhaztjYXNlIGVwLlE6Z3IoZSxuLHRbYSsrXSx0W2ErK10sdFthXSx0W2ErMV0scnAsYXApLGU9dFthKytdLG49dFthKytdO2JyZWFrO2Nhc2UgZXAuQTp2YXIgcz10W2ErK10sbD10W2ErK10sdT10W2ErK10saD10W2ErK10sYz10W2ErK10sZD10W2ErK10rYyxmPSh0W2ErK10sMS10W2ErK10pOzE9PWEmJihpPWxwKGMpKnUrcyxyPXVwKGMpKmgrbCksdnIocyxsLHUsaCxjLGQsZixycCxhcCksZT1scChkKSp1K3Msbj11cChkKSpoK2w7YnJlYWs7Y2FzZSBlcC5SOmk9ZT10W2ErK10scj1uPXRbYSsrXTt2YXIgcD10W2ErK10sZz10W2ErK107ZnIoaSxyLGkrcCxyK2cscnAsYXApO2JyZWFrO2Nhc2UgZXAuWjplPWksbj1yfW9lKG5wLG5wLHJwKSxzZShpcCxpcCxhcCl9cmV0dXJuIDA9PT1hJiYobnBbMF09bnBbMV09aXBbMF09aXBbMV09MCksbmV3IHJuKG5wWzBdLG5wWzFdLGlwWzBdLW5wWzBdLGlwWzFdLW5wWzFdKX0scmVidWlsZFBhdGg6ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG4saSxyLGEsbyxzPXRoaXMuZGF0YSxsPXRoaXMuX3V4LHU9dGhpcy5fdXksaD10aGlzLl9sZW4sYz0wO2g+Yzspe3ZhciBkPXNbYysrXTtzd2l0Y2goMT09YyYmKGk9c1tjXSxyPXNbYysxXSxlPWksbj1yKSxkKXtjYXNlIGVwLk06ZT1pPXNbYysrXSxuPXI9c1tjKytdLHQubW92ZVRvKGkscik7YnJlYWs7Y2FzZSBlcC5MOmE9c1tjKytdLG89c1tjKytdLChjcChhLWkpPmx8fGNwKG8tcik+dXx8Yz09PWgtMSkmJih0LmxpbmVUbyhhLG8pLGk9YSxyPW8pO2JyZWFrO2Nhc2UgZXAuQzp0LmJlemllckN1cnZlVG8oc1tjKytdLHNbYysrXSxzW2MrK10sc1tjKytdLHNbYysrXSxzW2MrK10pLGk9c1tjLTJdLHI9c1tjLTFdO2JyZWFrO2Nhc2UgZXAuUTp0LnF1YWRyYXRpY0N1cnZlVG8oc1tjKytdLHNbYysrXSxzW2MrK10sc1tjKytdKSxpPXNbYy0yXSxyPXNbYy0xXTticmVhaztjYXNlIGVwLkE6dmFyIGY9c1tjKytdLHA9c1tjKytdLGc9c1tjKytdLHY9c1tjKytdLG09c1tjKytdLHk9c1tjKytdLF89c1tjKytdLHg9c1tjKytdLHc9Zz52P2c6dixiPWc+dj8xOmcvdixNPWc+dj92L2c6MSxTPU1hdGguYWJzKGctdik+LjAwMSxDPW0reTtTPyh0LnRyYW5zbGF0ZShmLHApLHQucm90YXRlKF8pLHQuc2NhbGUoYixNKSx0LmFyYygwLDAsdyxtLEMsMS14KSx0LnNjYWxlKDEvYiwxL00pLHQucm90YXRlKC1fKSx0LnRyYW5zbGF0ZSgtZiwtcCkpOnQuYXJjKGYscCx3LG0sQywxLXgpLDE9PWMmJihlPWxwKG0pKmcrZixuPXVwKG0pKnYrcCksaT1scChDKSpnK2Yscj11cChDKSp2K3A7YnJlYWs7Y2FzZSBlcC5SOmU9aT1zW2NdLG49cj1zW2MrMV0sdC5yZWN0KHNbYysrXSxzW2MrK10sc1tjKytdLHNbYysrXSk7YnJlYWs7Y2FzZSBlcC5aOnQuY2xvc2VQYXRoKCksaT1lLHI9bn19fX0sZnAuQ01EPWVwO3ZhciBwcD0yKk1hdGguUEksZ3A9MipNYXRoLlBJLHZwPWZwLkNNRCxtcD0yKk1hdGguUEkseXA9MWUtNCxfcD1bLTEsLTEsLTFdLHhwPVstMSwtMV0sd3A9QmQucHJvdG90eXBlLmdldENhbnZhc1BhdHRlcm4sYnA9TWF0aC5hYnMsTXA9bmV3IGZwKCEwKTtQci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlByLHR5cGU6XCJwYXRoXCIsX19kaXJ0eVBhdGg6ITAsc3Ryb2tlQ29udGFpblRocmVzaG9sZDo1LGJydXNoOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5zdHlsZSxpPXRoaXMucGF0aHx8TXAscj1uLmhhc1N0cm9rZSgpLGE9bi5oYXNGaWxsKCksbz1uLmZpbGwscz1uLnN0cm9rZSxsPWEmJiEhby5jb2xvclN0b3BzLHU9ciYmISFzLmNvbG9yU3RvcHMsaD1hJiYhIW8uaW1hZ2UsYz1yJiYhIXMuaW1hZ2U7aWYobi5iaW5kKHQsdGhpcyxlKSx0aGlzLnNldFRyYW5zZm9ybSh0KSx0aGlzLl9fZGlydHkpe3ZhciBkO2wmJihkPWR8fHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCksdGhpcy5fZmlsbEdyYWRpZW50PW4uZ2V0R3JhZGllbnQodCxvLGQpKSx1JiYoZD1kfHx0aGlzLmdldEJvdW5kaW5nUmVjdCgpLHRoaXMuX3N0cm9rZUdyYWRpZW50PW4uZ2V0R3JhZGllbnQodCxzLGQpKX1sP3QuZmlsbFN0eWxlPXRoaXMuX2ZpbGxHcmFkaWVudDpoJiYodC5maWxsU3R5bGU9d3AuY2FsbChvLHQpKSx1P3Quc3Ryb2tlU3R5bGU9dGhpcy5fc3Ryb2tlR3JhZGllbnQ6YyYmKHQuc3Ryb2tlU3R5bGU9d3AuY2FsbChzLHQpKTt2YXIgZj1uLmxpbmVEYXNoLHA9bi5saW5lRGFzaE9mZnNldCxnPSEhdC5zZXRMaW5lRGFzaCx2PXRoaXMuZ2V0R2xvYmFsU2NhbGUoKTtpLnNldFNjYWxlKHZbMF0sdlsxXSksdGhpcy5fX2RpcnR5UGF0aHx8ZiYmIWcmJnI/KGkuYmVnaW5QYXRoKHQpLGYmJiFnJiYoaS5zZXRMaW5lRGFzaChmKSxpLnNldExpbmVEYXNoT2Zmc2V0KHApKSx0aGlzLmJ1aWxkUGF0aChpLHRoaXMuc2hhcGUsITEpLHRoaXMucGF0aCYmKHRoaXMuX19kaXJ0eVBhdGg9ITEpKToodC5iZWdpblBhdGgoKSx0aGlzLnBhdGgucmVidWlsZFBhdGgodCkpLGEmJmkuZmlsbCh0KSxmJiZnJiYodC5zZXRMaW5lRGFzaChmKSx0LmxpbmVEYXNoT2Zmc2V0PXApLHImJmkuc3Ryb2tlKHQpLGYmJmcmJnQuc2V0TGluZURhc2goW10pLG51bGwhPW4udGV4dCYmKHRoaXMucmVzdG9yZVRyYW5zZm9ybSh0KSx0aGlzLmRyYXdSZWN0VGV4dCh0LHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCkpKX0sYnVpbGRQYXRoOmZ1bmN0aW9uKCl7fSxjcmVhdGVQYXRoUHJveHk6ZnVuY3Rpb24oKXt0aGlzLnBhdGg9bmV3IGZwfSxnZXRCb3VuZGluZ1JlY3Q6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yZWN0LGU9dGhpcy5zdHlsZSxuPSF0O2lmKG4pe3ZhciBpPXRoaXMucGF0aDtpfHwoaT10aGlzLnBhdGg9bmV3IGZwKSx0aGlzLl9fZGlydHlQYXRoJiYoaS5iZWdpblBhdGgoKSx0aGlzLmJ1aWxkUGF0aChpLHRoaXMuc2hhcGUsITEpKSx0PWkuZ2V0Qm91bmRpbmdSZWN0KCl9aWYodGhpcy5fcmVjdD10LGUuaGFzU3Ryb2tlKCkpe3ZhciByPXRoaXMuX3JlY3RXaXRoU3Ryb2tlfHwodGhpcy5fcmVjdFdpdGhTdHJva2U9dC5jbG9uZSgpKTtpZih0aGlzLl9fZGlydHl8fG4pe3IuY29weSh0KTt2YXIgYT1lLmxpbmVXaWR0aCxvPWUuc3Ryb2tlTm9TY2FsZT90aGlzLmdldExpbmVTY2FsZSgpOjE7ZS5oYXNGaWxsKCl8fChhPU1hdGgubWF4KGEsdGhpcy5zdHJva2VDb250YWluVGhyZXNob2xkfHw0KSksbz4xZS0xMCYmKHIud2lkdGgrPWEvbyxyLmhlaWdodCs9YS9vLHIueC09YS9vLzIsci55LT1hL28vMil9cmV0dXJuIHJ9cmV0dXJuIHR9LGNvbnRhaW46ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRyYW5zZm9ybUNvb3JkVG9Mb2NhbCh0LGUpLGk9dGhpcy5nZXRCb3VuZGluZ1JlY3QoKSxyPXRoaXMuc3R5bGU7aWYodD1uWzBdLGU9blsxXSxpLmNvbnRhaW4odCxlKSl7dmFyIGE9dGhpcy5wYXRoLmRhdGE7aWYoci5oYXNTdHJva2UoKSl7dmFyIG89ci5saW5lV2lkdGgscz1yLnN0cm9rZU5vU2NhbGU/dGhpcy5nZXRMaW5lU2NhbGUoKToxO2lmKHM+MWUtMTAmJihyLmhhc0ZpbGwoKXx8KG89TWF0aC5tYXgobyx0aGlzLnN0cm9rZUNvbnRhaW5UaHJlc2hvbGQpKSxBcihhLG8vcyx0LGUpKSlyZXR1cm4hMH1pZihyLmhhc0ZpbGwoKSlyZXR1cm4gRHIoYSx0LGUpfXJldHVybiExfSxkaXJ0eTpmdW5jdGlvbih0KXtudWxsPT10JiYodD0hMCksdCYmKHRoaXMuX19kaXJ0eVBhdGg9dCx0aGlzLl9yZWN0PW51bGwpLHRoaXMuX19kaXJ0eT0hMCx0aGlzLl9fenImJnRoaXMuX196ci5yZWZyZXNoKCksdGhpcy5fX2NsaXBUYXJnZXQmJnRoaXMuX19jbGlwVGFyZ2V0LmRpcnR5KCl9LGFuaW1hdGVTaGFwZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hbmltYXRlKFwic2hhcGVcIix0KX0sYXR0cktWOmZ1bmN0aW9uKHQsZSl7XCJzaGFwZVwiPT09dD8odGhpcy5zZXRTaGFwZShlKSx0aGlzLl9fZGlydHlQYXRoPSEwLHRoaXMuX3JlY3Q9bnVsbCk6cmkucHJvdG90eXBlLmF0dHJLVi5jYWxsKHRoaXMsdCxlKX0sc2V0U2hhcGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnNoYXBlO2lmKG4pe2lmKE0odCkpZm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmKG5baV09dFtpXSk7ZWxzZSBuW3RdPWU7dGhpcy5kaXJ0eSghMCl9cmV0dXJuIHRoaXN9LGdldExpbmVTY2FsZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMudHJhbnNmb3JtO3JldHVybiB0JiZicCh0WzBdLTEpPjFlLTEwJiZicCh0WzNdLTEpPjFlLTEwP01hdGguc3FydChicCh0WzBdKnRbM10tdFsyXSp0WzFdKSk6MX19LFByLmV4dGVuZD1mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbihlKXtQci5jYWxsKHRoaXMsZSksdC5zdHlsZSYmdGhpcy5zdHlsZS5leHRlbmRGcm9tKHQuc3R5bGUsITEpO3ZhciBuPXQuc2hhcGU7aWYobil7dGhpcy5zaGFwZT10aGlzLnNoYXBlfHx7fTt2YXIgaT10aGlzLnNoYXBlO2Zvcih2YXIgciBpbiBuKSFpLmhhc093blByb3BlcnR5KHIpJiZuLmhhc093blByb3BlcnR5KHIpJiYoaVtyXT1uW3JdKX10LmluaXQmJnQuaW5pdC5jYWxsKHRoaXMsZSl9O2goZSxQcik7Zm9yKHZhciBuIGluIHQpXCJzdHlsZVwiIT09biYmXCJzaGFwZVwiIT09biYmKGUucHJvdG90eXBlW25dPXRbbl0pO3JldHVybiBlfSxoKFByLHJpKTt2YXIgU3A9ZnAuQ01ELENwPVtbXSxbXSxbXV0sSXA9TWF0aC5zcXJ0LFRwPU1hdGguYXRhbjIsa3A9ZnVuY3Rpb24odCxlKXt2YXIgbixpLHIsYSxvLHMsbD10LmRhdGEsdT1TcC5NLGg9U3AuQyxjPVNwLkwsZD1TcC5SLGY9U3AuQSxwPVNwLlE7Zm9yKHI9MCxhPTA7cjxsLmxlbmd0aDspe3N3aXRjaChuPWxbcisrXSxhPXIsaT0wLG4pe2Nhc2UgdTppPTE7YnJlYWs7Y2FzZSBjOmk9MTticmVhaztjYXNlIGg6aT0zO2JyZWFrO2Nhc2UgcDppPTI7YnJlYWs7Y2FzZSBmOnZhciBnPWVbNF0sdj1lWzVdLG09SXAoZVswXSplWzBdK2VbMV0qZVsxXSkseT1JcChlWzJdKmVbMl0rZVszXSplWzNdKSxfPVRwKC1lWzFdL3ksZVswXS9tKTtsW3JdKj1tLGxbcisrXSs9ZyxsW3JdKj15LGxbcisrXSs9dixsW3IrK10qPW0sbFtyKytdKj15LGxbcisrXSs9XyxsW3IrK10rPV8scis9MixhPXI7YnJlYWs7Y2FzZSBkOnNbMF09bFtyKytdLHNbMV09bFtyKytdLGFlKHMscyxlKSxsW2ErK109c1swXSxsW2ErK109c1sxXSxzWzBdKz1sW3IrK10sc1sxXSs9bFtyKytdLGFlKHMscyxlKSxsW2ErK109c1swXSxsW2ErK109c1sxXX1mb3Iobz0wO2k+bztvKyspe3ZhciBzPUNwW29dO3NbMF09bFtyKytdLHNbMV09bFtyKytdLGFlKHMscyxlKSxsW2ErK109c1swXSxsW2ErK109c1sxXX19fSxEcD1bXCJtXCIsXCJNXCIsXCJsXCIsXCJMXCIsXCJ2XCIsXCJWXCIsXCJoXCIsXCJIXCIsXCJ6XCIsXCJaXCIsXCJjXCIsXCJDXCIsXCJxXCIsXCJRXCIsXCJ0XCIsXCJUXCIsXCJzXCIsXCJTXCIsXCJhXCIsXCJBXCJdLEFwPU1hdGguc3FydCxQcD1NYXRoLnNpbixMcD1NYXRoLmNvcyxPcD1NYXRoLlBJLFJwPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnNxcnQodFswXSp0WzBdK3RbMV0qdFsxXSl9LEVwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHRbMF0qZVswXSt0WzFdKmVbMV0pLyhScCh0KSpScChlKSl9LEJwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHRbMF0qZVsxXTx0WzFdKmVbMF0/LTE6MSkqTWF0aC5hY29zKEVwKHQsZSkpfSx6cD1mdW5jdGlvbih0KXtyaS5jYWxsKHRoaXMsdCl9O3pwLnByb3RvdHlwZT17Y29uc3RydWN0b3I6enAsdHlwZTpcInRleHRcIixicnVzaDpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuc3R5bGU7dGhpcy5fX2RpcnR5JiZWbihuLCEwKSxuLmZpbGw9bi5zdHJva2U9bi5zaGFkb3dCbHVyPW4uc2hhZG93Q29sb3I9bi5zaGFkb3dPZmZzZXRYPW4uc2hhZG93T2Zmc2V0WT1udWxsO3ZhciBpPW4udGV4dDtudWxsIT1pJiYoaSs9XCJcIiksbi5iaW5kKHQsdGhpcyxlKSxpaShpLG4pJiYodGhpcy5zZXRUcmFuc2Zvcm0odCksSG4odGhpcyx0LGksbiksdGhpcy5yZXN0b3JlVHJhbnNmb3JtKHQpKX0sZ2V0Qm91bmRpbmdSZWN0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zdHlsZTtpZih0aGlzLl9fZGlydHkmJlZuKHQsITApLCF0aGlzLl9yZWN0KXt2YXIgZT10LnRleHQ7bnVsbCE9ZT9lKz1cIlwiOmU9XCJcIjt2YXIgbj1Nbih0LnRleHQrXCJcIix0LmZvbnQsdC50ZXh0QWxpZ24sdC50ZXh0VmVydGljYWxBbGlnbix0LnRleHRQYWRkaW5nLHQucmljaCk7aWYobi54Kz10Lnh8fDAsbi55Kz10Lnl8fDAsSm4odC50ZXh0U3Ryb2tlLHQudGV4dFN0cm9rZVdpZHRoKSl7dmFyIGk9dC50ZXh0U3Ryb2tlV2lkdGg7bi54LT1pLzIsbi55LT1pLzIsbi53aWR0aCs9aSxuLmhlaWdodCs9aX10aGlzLl9yZWN0PW59cmV0dXJuIHRoaXMuX3JlY3R9fSxoKHpwLHJpKTt2YXIgTnA9UHIuZXh0ZW5kKHt0eXBlOlwiY2lyY2xlXCIsc2hhcGU6e2N4OjAsY3k6MCxyOjB9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUsbil7biYmdC5tb3ZlVG8oZS5jeCtlLnIsZS5jeSksdC5hcmMoZS5jeCxlLmN5LGUuciwwLDIqTWF0aC5QSSwhMCl9fSksRnA9W1tcInNoYWRvd0JsdXJcIiwwXSxbXCJzaGFkb3dDb2xvclwiLFwiIzAwMFwiXSxbXCJzaGFkb3dPZmZzZXRYXCIsMF0sW1wic2hhZG93T2Zmc2V0WVwiLDBdXSxWcD1mdW5jdGlvbih0KXtyZXR1cm4gYmMuYnJvd3Nlci5pZSYmYmMuYnJvd3Nlci52ZXJzaW9uPj0xMT9mdW5jdGlvbigpe3ZhciBlLG49dGhpcy5fX2NsaXBQYXRocyxpPXRoaXMuc3R5bGU7aWYobilmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGE9bltyXSxvPWEmJmEuc2hhcGUscz1hJiZhLnR5cGU7aWYobyYmKFwic2VjdG9yXCI9PT1zJiZvLnN0YXJ0QW5nbGU9PT1vLmVuZEFuZ2xlfHxcInJlY3RcIj09PXMmJighby53aWR0aHx8IW8uaGVpZ2h0KSkpe2Zvcih2YXIgbD0wO2w8RnAubGVuZ3RoO2wrKylGcFtsXVsyXT1pW0ZwW2xdWzBdXSxpW0ZwW2xdWzBdXT1GcFtsXVsxXTtlPSEwO2JyZWFrfX1pZih0LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlKWZvcih2YXIgbD0wO2w8RnAubGVuZ3RoO2wrKylpW0ZwW2xdWzBdXT1GcFtsXVsyXX06dH0sR3A9UHIuZXh0ZW5kKHt0eXBlOlwic2VjdG9yXCIsc2hhcGU6e2N4OjAsY3k6MCxyMDowLHI6MCxzdGFydEFuZ2xlOjAsZW5kQW5nbGU6MipNYXRoLlBJLGNsb2Nrd2lzZTohMH0sYnJ1c2g6VnAoUHIucHJvdG90eXBlLmJydXNoKSxidWlsZFBhdGg6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmN4LGk9ZS5jeSxyPU1hdGgubWF4KGUucjB8fDAsMCksYT1NYXRoLm1heChlLnIsMCksbz1lLnN0YXJ0QW5nbGUscz1lLmVuZEFuZ2xlLGw9ZS5jbG9ja3dpc2UsdT1NYXRoLmNvcyhvKSxoPU1hdGguc2luKG8pO3QubW92ZVRvKHUqcituLGgqcitpKSx0LmxpbmVUbyh1KmErbixoKmEraSksdC5hcmMobixpLGEsbyxzLCFsKSx0LmxpbmVUbyhNYXRoLmNvcyhzKSpyK24sTWF0aC5zaW4ocykqcitpKSwwIT09ciYmdC5hcmMobixpLHIscyxvLGwpLHQuY2xvc2VQYXRoKCl9fSksSHA9UHIuZXh0ZW5kKHt0eXBlOlwicmluZ1wiLHNoYXBlOntjeDowLGN5OjAscjowLHIwOjB9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUuY3gsaT1lLmN5LHI9MipNYXRoLlBJO3QubW92ZVRvKG4rZS5yLGkpLHQuYXJjKG4saSxlLnIsMCxyLCExKSx0Lm1vdmVUbyhuK2UucjAsaSksdC5hcmMobixpLGUucjAsMCxyLCEwKX19KSxXcD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aCxpPVtdLHI9MCxhPTE7bj5hO2ErKylyKz1lZSh0W2EtMV0sdFthXSk7dmFyIG89ci8yO289bj5vP246bztmb3IodmFyIGE9MDtvPmE7YSsrKXt2YXIgcyxsLHUsaD1hLyhvLTEpKihlP246bi0xKSxjPU1hdGguZmxvb3IoaCksZD1oLWMsZj10W2Mlbl07ZT8ocz10WyhjLTErbiklbl0sbD10WyhjKzEpJW5dLHU9dFsoYysyKSVuXSk6KHM9dFswPT09Yz9jOmMtMV0sbD10W2M+bi0yP24tMTpjKzFdLHU9dFtjPm4tMz9uLTE6YysyXSk7dmFyIHA9ZCpkLGc9ZCpwO2kucHVzaChbTnIoc1swXSxmWzBdLGxbMF0sdVswXSxkLHAsZyksTnIoc1sxXSxmWzFdLGxbMV0sdVsxXSxkLHAsZyldKX1yZXR1cm4gaX0sanA9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHIsYSxvLHMsbD1bXSx1PVtdLGg9W10sYz1bXTtpZihpKXtvPVsxLzAsMS8wXSxzPVstMS8wLC0xLzBdO2Zvcih2YXIgZD0wLGY9dC5sZW5ndGg7Zj5kO2QrKylvZShvLG8sdFtkXSksc2UocyxzLHRbZF0pO29lKG8sbyxpWzBdKSxzZShzLHMsaVsxXSl9Zm9yKHZhciBkPTAsZj10Lmxlbmd0aDtmPmQ7ZCsrKXt2YXIgcD10W2RdO2lmKG4pcj10W2Q/ZC0xOmYtMV0sYT10WyhkKzEpJWZdO2Vsc2V7aWYoMD09PWR8fGQ9PT1mLTEpe2wucHVzaChXKHRbZF0pKTtjb250aW51ZX1yPXRbZC0xXSxhPXRbZCsxXX1YKHUsYSxyKSxKKHUsdSxlKTt2YXIgZz1lZShwLHIpLHY9ZWUocCxhKSxtPWcrdjswIT09bSYmKGcvPW0sdi89bSksSihoLHUsLWcpLEooYyx1LHYpO3ZhciB5PXEoW10scCxoKSxfPXEoW10scCxjKTtpJiYoc2UoeSx5LG8pLG9lKHkseSxzKSxzZShfLF8sbyksb2UoXyxfLHMpKSxsLnB1c2goeSksbC5wdXNoKF8pfXJldHVybiBuJiZsLnB1c2gobC5zaGlmdCgpKSxsfSxxcD1Qci5leHRlbmQoe3R5cGU6XCJwb2x5Z29uXCIsc2hhcGU6e3BvaW50czpudWxsLHNtb290aDohMSxzbW9vdGhDb25zdHJhaW50Om51bGx9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe0ZyKHQsZSwhMCl9fSksVXA9UHIuZXh0ZW5kKHt0eXBlOlwicG9seWxpbmVcIixzaGFwZTp7cG9pbnRzOm51bGwsc21vb3RoOiExLHNtb290aENvbnN0cmFpbnQ6bnVsbH0sc3R5bGU6e3N0cm9rZTpcIiMwMDBcIixmaWxsOm51bGx9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe0ZyKHQsZSwhMSl9fSksWHA9UHIuZXh0ZW5kKHt0eXBlOlwicmVjdFwiLHNoYXBlOntyOjAseDowLHk6MCx3aWR0aDowLGhlaWdodDowfSxidWlsZFBhdGg6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLngsaT1lLnkscj1lLndpZHRoLGE9ZS5oZWlnaHQ7ZS5yP0ZuKHQsZSk6dC5yZWN0KG4saSxyLGEpLHQuY2xvc2VQYXRoKCl9fSksWXA9UHIuZXh0ZW5kKHt0eXBlOlwibGluZVwiLHNoYXBlOnt4MTowLHkxOjAseDI6MCx5MjowLHBlcmNlbnQ6MX0sc3R5bGU6e3N0cm9rZTpcIiMwMDBcIixmaWxsOm51bGx9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUueDEsaT1lLnkxLHI9ZS54MixhPWUueTIsbz1lLnBlcmNlbnQ7MCE9PW8mJih0Lm1vdmVUbyhuLGkpLDE+byYmKHI9biooMS1vKStyKm8sYT1pKigxLW8pK2EqbyksdC5saW5lVG8ocixhKSl9LHBvaW50QXQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zaGFwZTtyZXR1cm5bZS54MSooMS10KStlLngyKnQsZS55MSooMS10KStlLnkyKnRdfX0pLFpwPVtdLCRwPVByLmV4dGVuZCh7dHlwZTpcImJlemllci1jdXJ2ZVwiLHNoYXBlOnt4MTowLHkxOjAseDI6MCx5MjowLGNweDE6MCxjcHkxOjAscGVyY2VudDoxfSxzdHlsZTp7c3Ryb2tlOlwiIzAwMFwiLGZpbGw6bnVsbH0sYnVpbGRQYXRoOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS54MSxpPWUueTEscj1lLngyLGE9ZS55MixvPWUuY3B4MSxzPWUuY3B5MSxsPWUuY3B4Mix1PWUuY3B5MixoPWUucGVyY2VudDswIT09aCYmKHQubW92ZVRvKG4saSksbnVsbD09bHx8bnVsbD09dT8oMT5oJiYoaHIobixvLHIsaCxacCksbz1acFsxXSxyPVpwWzJdLGhyKGkscyxhLGgsWnApLHM9WnBbMV0sYT1acFsyXSksdC5xdWFkcmF0aWNDdXJ2ZVRvKG8scyxyLGEpKTooMT5oJiYocnIobixvLGwscixoLFpwKSxvPVpwWzFdLGw9WnBbMl0scj1acFszXSxycihpLHMsdSxhLGgsWnApLHM9WnBbMV0sdT1acFsyXSxhPVpwWzNdKSx0LmJlemllckN1cnZlVG8obyxzLGwsdSxyLGEpKSl9LHBvaW50QXQ6ZnVuY3Rpb24odCl7cmV0dXJuIFZyKHRoaXMuc2hhcGUsdCwhMSl9LHRhbmdlbnRBdDpmdW5jdGlvbih0KXt2YXIgZT1Wcih0aGlzLnNoYXBlLHQsITApO3JldHVybiB0ZShlLGUpfX0pLEtwPVByLmV4dGVuZCh7dHlwZTpcImFyY1wiLHNoYXBlOntjeDowLGN5OjAscjowLHN0YXJ0QW5nbGU6MCxlbmRBbmdsZToyKk1hdGguUEksY2xvY2t3aXNlOiEwfSxzdHlsZTp7c3Ryb2tlOlwiIzAwMFwiLGZpbGw6bnVsbH0sYnVpbGRQYXRoOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5jeCxpPWUuY3kscj1NYXRoLm1heChlLnIsMCksYT1lLnN0YXJ0QW5nbGUsbz1lLmVuZEFuZ2xlLHM9ZS5jbG9ja3dpc2UsbD1NYXRoLmNvcyhhKSx1PU1hdGguc2luKGEpO3QubW92ZVRvKGwqcituLHUqcitpKSx0LmFyYyhuLGkscixhLG8sIXMpfX0pLFFwPVByLmV4dGVuZCh7dHlwZTpcImNvbXBvdW5kXCIsc2hhcGU6e3BhdGhzOm51bGx9LF91cGRhdGVQYXRoRGlydHk6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5fX2RpcnR5UGF0aCxlPXRoaXMuc2hhcGUucGF0aHMsbj0wO248ZS5sZW5ndGg7bisrKXQ9dHx8ZVtuXS5fX2RpcnR5UGF0aDt0aGlzLl9fZGlydHlQYXRoPXQsdGhpcy5fX2RpcnR5PXRoaXMuX19kaXJ0eXx8dH0sYmVmb3JlQnJ1c2g6ZnVuY3Rpb24oKXt0aGlzLl91cGRhdGVQYXRoRGlydHkoKTtmb3IodmFyIHQ9dGhpcy5zaGFwZS5wYXRoc3x8W10sZT10aGlzLmdldEdsb2JhbFNjYWxlKCksbj0wO248dC5sZW5ndGg7bisrKXRbbl0ucGF0aHx8dFtuXS5jcmVhdGVQYXRoUHJveHkoKSx0W25dLnBhdGguc2V0U2NhbGUoZVswXSxlWzFdKX0sYnVpbGRQYXRoOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPWUucGF0aHN8fFtdLGk9MDtpPG4ubGVuZ3RoO2krKyluW2ldLmJ1aWxkUGF0aCh0LG5baV0uc2hhcGUsITApfSxhZnRlckJydXNoOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuc2hhcGUucGF0aHN8fFtdLGU9MDtlPHQubGVuZ3RoO2UrKyl0W2VdLl9fZGlydHlQYXRoPSExfSxnZXRCb3VuZGluZ1JlY3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXBkYXRlUGF0aERpcnR5KCksUHIucHJvdG90eXBlLmdldEJvdW5kaW5nUmVjdC5jYWxsKHRoaXMpfX0pLEpwPWZ1bmN0aW9uKHQpe3RoaXMuY29sb3JTdG9wcz10fHxbXX07SnAucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpKcCxhZGRDb2xvclN0b3A6ZnVuY3Rpb24odCxlKXt0aGlzLmNvbG9yU3RvcHMucHVzaCh7b2Zmc2V0OnQsY29sb3I6ZX0pfX07dmFyIHRnPWZ1bmN0aW9uKHQsZSxuLGkscixhKXt0aGlzLng9bnVsbD09dD8wOnQsdGhpcy55PW51bGw9PWU/MDplLHRoaXMueDI9bnVsbD09bj8xOm4sdGhpcy55Mj1udWxsPT1pPzA6aSx0aGlzLnR5cGU9XCJsaW5lYXJcIix0aGlzLmdsb2JhbD1hfHwhMSxKcC5jYWxsKHRoaXMscil9O3RnLnByb3RvdHlwZT17Y29uc3RydWN0b3I6dGd9LGgodGcsSnApO3ZhciBlZz1mdW5jdGlvbih0LGUsbixpLHIpe3RoaXMueD1udWxsPT10Py41OnQsdGhpcy55PW51bGw9PWU/LjU6ZSx0aGlzLnI9bnVsbD09bj8uNTpuLHRoaXMudHlwZT1cInJhZGlhbFwiLHRoaXMuZ2xvYmFsPXJ8fCExLEpwLmNhbGwodGhpcyxpKX07ZWcucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjplZ30saChlZyxKcCksR3IucHJvdG90eXBlLmluY3JlbWVudGFsPSEwLEdyLnByb3RvdHlwZS5jbGVhckRpc3BsYXlibGVzPWZ1bmN0aW9uKCl7dGhpcy5fZGlzcGxheWFibGVzPVtdLHRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlcz1bXSx0aGlzLl9jdXJzb3I9MCx0aGlzLmRpcnR5KCksdGhpcy5ub3RDbGVhcj0hMX0sR3IucHJvdG90eXBlLmFkZERpc3BsYXlhYmxlPWZ1bmN0aW9uKHQsZSl7ZT90aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMucHVzaCh0KTp0aGlzLl9kaXNwbGF5YWJsZXMucHVzaCh0KSx0aGlzLmRpcnR5KCl9LEdyLnByb3RvdHlwZS5hZGREaXNwbGF5YWJsZXM9ZnVuY3Rpb24odCxlKXtlPWV8fCExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXRoaXMuYWRkRGlzcGxheWFibGUodFtuXSxlKX0sR3IucHJvdG90eXBlLmVhY2hQZW5kaW5nRGlzcGxheWFibGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuX2N1cnNvcjtlPHRoaXMuX2Rpc3BsYXlhYmxlcy5sZW5ndGg7ZSsrKXQmJnQodGhpcy5fZGlzcGxheWFibGVzW2VdKTtmb3IodmFyIGU9MDtlPHRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlcy5sZW5ndGg7ZSsrKXQmJnQodGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzW2VdKX0sR3IucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMudXBkYXRlVHJhbnNmb3JtKCk7Zm9yKHZhciB0PXRoaXMuX2N1cnNvcjt0PHRoaXMuX2Rpc3BsYXlhYmxlcy5sZW5ndGg7dCsrKXt2YXIgZT10aGlzLl9kaXNwbGF5YWJsZXNbdF07ZS5wYXJlbnQ9dGhpcyxlLnVwZGF0ZSgpLGUucGFyZW50PW51bGx9Zm9yKHZhciB0PTA7dDx0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMubGVuZ3RoO3QrKyl7dmFyIGU9dGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzW3RdO2UucGFyZW50PXRoaXMsZS51cGRhdGUoKSxlLnBhcmVudD1udWxsfX0sR3IucHJvdG90eXBlLmJydXNoPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9jdXJzb3I7ZTx0aGlzLl9kaXNwbGF5YWJsZXMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5fZGlzcGxheWFibGVzW2VdO24uYmVmb3JlQnJ1c2gmJm4uYmVmb3JlQnJ1c2godCksbi5icnVzaCh0LGU9PT10aGlzLl9jdXJzb3I/bnVsbDp0aGlzLl9kaXNwbGF5YWJsZXNbZS0xXSksbi5hZnRlckJydXNoJiZuLmFmdGVyQnJ1c2godCl9dGhpcy5fY3Vyc29yPWU7Zm9yKHZhciBlPTA7ZTx0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzW2VdO24uYmVmb3JlQnJ1c2gmJm4uYmVmb3JlQnJ1c2godCksbi5icnVzaCh0LDA9PT1lP251bGw6dGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzW2UtMV0pLG4uYWZ0ZXJCcnVzaCYmbi5hZnRlckJydXNoKHQpfXRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlcz1bXSx0aGlzLm5vdENsZWFyPSEwfTt2YXIgbmc9W107R3IucHJvdG90eXBlLmdldEJvdW5kaW5nUmVjdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9yZWN0KXtmb3IodmFyIHQ9bmV3IHJuKDEvMCwxLzAsLTEvMCwtMS8wKSxlPTA7ZTx0aGlzLl9kaXNwbGF5YWJsZXMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5fZGlzcGxheWFibGVzW2VdLGk9bi5nZXRCb3VuZGluZ1JlY3QoKS5jbG9uZSgpO24ubmVlZExvY2FsVHJhbnNmb3JtKCkmJmkuYXBwbHlUcmFuc2Zvcm0obi5nZXRMb2NhbFRyYW5zZm9ybShuZykpLHQudW5pb24oaSl9dGhpcy5fcmVjdD10fXJldHVybiB0aGlzLl9yZWN0fSxHci5wcm90b3R5cGUuY29udGFpbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudHJhbnNmb3JtQ29vcmRUb0xvY2FsKHQsZSksaT10aGlzLmdldEJvdW5kaW5nUmVjdCgpO2lmKGkuY29udGFpbihuWzBdLG5bMV0pKWZvcih2YXIgcj0wO3I8dGhpcy5fZGlzcGxheWFibGVzLmxlbmd0aDtyKyspe3ZhciBhPXRoaXMuX2Rpc3BsYXlhYmxlc1tyXTtpZihhLmNvbnRhaW4odCxlKSlyZXR1cm4hMH1yZXR1cm4hMX0saChHcixyaSk7dmFyIGlnPU1hdGgucm91bmQscmc9TWF0aC5tYXgsYWc9TWF0aC5taW4sb2c9e30sc2c9enIsbGc9KE9iamVjdC5mcmVlemV8fE9iamVjdCkoe2V4dGVuZFNoYXBlOkhyLGV4dGVuZFBhdGg6V3IsbWFrZVBhdGg6anIsbWFrZUltYWdlOnFyLG1lcmdlUGF0aDpzZyxyZXNpemVQYXRoOlhyLHN1YlBpeGVsT3B0aW1pemVMaW5lOllyLHN1YlBpeGVsT3B0aW1pemVSZWN0OlpyLHN1YlBpeGVsT3B0aW1pemU6JHIsc2V0SG92ZXJTdHlsZTp1YSxzZXRMYWJlbFN0eWxlOmhhLHNldFRleHRTdHlsZTpjYSxzZXRUZXh0OmRhLGdldEZvbnQ6X2EsdXBkYXRlUHJvcHM6d2EsaW5pdFByb3BzOmJhLGdldFRyYW5zZm9ybTpNYSxhcHBseVRyYW5zZm9ybTpTYSx0cmFuc2Zvcm1EaXJlY3Rpb246Q2EsZ3JvdXBUcmFuc2l0aW9uOklhLGNsaXBQb2ludHNCeVJlY3Q6VGEsY2xpcFJlY3RCeVJlY3Q6a2EsY3JlYXRlSWNvbjpEYSxHcm91cDpDZCxJbWFnZTphaSxUZXh0OnpwLENpcmNsZTpOcCxTZWN0b3I6R3AsUmluZzpIcCxQb2x5Z29uOnFwLFBvbHlsaW5lOlVwLFJlY3Q6WHAsTGluZTpZcCxCZXppZXJDdXJ2ZTokcCxBcmM6S3AsSW5jcmVtZW50YWxEaXNwbGF5YWJsZTpHcixDb21wb3VuZFBhdGg6UXAsTGluZWFyR3JhZGllbnQ6dGcsUmFkaWFsR3JhZGllbnQ6ZWcsQm91bmRpbmdSZWN0OnJufSksdWc9W1widGV4dFN0eWxlXCIsXCJjb2xvclwiXSxoZz17Z2V0VGV4dENvbG9yOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZWNNb2RlbDtyZXR1cm4gdGhpcy5nZXRTaGFsbG93KFwiY29sb3JcIil8fCghdCYmZT9lLmdldCh1Zyk6bnVsbCl9LGdldEZvbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gX2Eoe2ZvbnRTdHlsZTp0aGlzLmdldFNoYWxsb3coXCJmb250U3R5bGVcIiksZm9udFdlaWdodDp0aGlzLmdldFNoYWxsb3coXCJmb250V2VpZ2h0XCIpLGZvbnRTaXplOnRoaXMuZ2V0U2hhbGxvdyhcImZvbnRTaXplXCIpLGZvbnRGYW1pbHk6dGhpcy5nZXRTaGFsbG93KFwiZm9udEZhbWlseVwiKX0sdGhpcy5lY01vZGVsKX0sZ2V0VGV4dFJlY3Q6ZnVuY3Rpb24odCl7cmV0dXJuIE1uKHQsdGhpcy5nZXRGb250KCksdGhpcy5nZXRTaGFsbG93KFwiYWxpZ25cIiksdGhpcy5nZXRTaGFsbG93KFwidmVydGljYWxBbGlnblwiKXx8dGhpcy5nZXRTaGFsbG93KFwiYmFzZWxpbmVcIiksdGhpcy5nZXRTaGFsbG93KFwicGFkZGluZ1wiKSx0aGlzLmdldFNoYWxsb3coXCJyaWNoXCIpLHRoaXMuZ2V0U2hhbGxvdyhcInRydW5jYXRlVGV4dFwiKSl9fSxjZz1QZihbW1wiZmlsbFwiLFwiY29sb3JcIl0sW1wic3Ryb2tlXCIsXCJib3JkZXJDb2xvclwiXSxbXCJsaW5lV2lkdGhcIixcImJvcmRlcldpZHRoXCJdLFtcIm9wYWNpdHlcIl0sW1wic2hhZG93Qmx1clwiXSxbXCJzaGFkb3dPZmZzZXRYXCJdLFtcInNoYWRvd09mZnNldFlcIl0sW1wic2hhZG93Q29sb3JcIl0sW1widGV4dFBvc2l0aW9uXCJdLFtcInRleHRBbGlnblwiXV0pLGRnPXtnZXRJdGVtU3R5bGU6ZnVuY3Rpb24odCxlKXt2YXIgbj1jZyh0aGlzLHQsZSksaT10aGlzLmdldEJvcmRlckxpbmVEYXNoKCk7cmV0dXJuIGkmJihuLmxpbmVEYXNoPWkpLG59LGdldEJvcmRlckxpbmVEYXNoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXQoXCJib3JkZXJUeXBlXCIpO3JldHVyblwic29saWRcIj09PXR8fG51bGw9PXQ/bnVsbDpcImRhc2hlZFwiPT09dD9bNSw1XTpbMSwxXX19LGZnPWMscGc9VmkoKTtBYS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkFhLGluaXQ6bnVsbCxtZXJnZU9wdGlvbjpmdW5jdGlvbih0KXtyKHRoaXMub3B0aW9uLHQsITApfSxnZXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09dD90aGlzLm9wdGlvbjpQYSh0aGlzLm9wdGlvbix0aGlzLnBhcnNlUGF0aCh0KSwhZSYmTGEodGhpcyx0KSl9LGdldFNoYWxsb3c6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLm9wdGlvbixpPW51bGw9PW4/bjpuW3RdLHI9IWUmJkxhKHRoaXMsdCk7cmV0dXJuIG51bGw9PWkmJnImJihpPXIuZ2V0U2hhbGxvdyh0KSksaX0sZ2V0TW9kZWw6ZnVuY3Rpb24odCxlKXt2YXIgbixpPW51bGw9PXQ/dGhpcy5vcHRpb246UGEodGhpcy5vcHRpb24sdD10aGlzLnBhcnNlUGF0aCh0KSk7cmV0dXJuIGU9ZXx8KG49TGEodGhpcyx0KSkmJm4uZ2V0TW9kZWwodCksbmV3IEFhKGksZSx0aGlzLmVjTW9kZWwpfSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXRoaXMub3B0aW9ufSxyZXN0b3JlRGF0YTpmdW5jdGlvbigpe30sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvbnN0cnVjdG9yO3JldHVybiBuZXcgdChpKHRoaXMub3B0aW9uKSl9LHNldFJlYWRPbmx5OmZ1bmN0aW9uKCl7fSxwYXJzZVBhdGg6ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXQuc3BsaXQoXCIuXCIpKSx0fSxjdXN0b21pemVHZXRQYXJlbnQ6ZnVuY3Rpb24odCl7cGcodGhpcykuZ2V0UGFyZW50PXR9LGlzQW5pbWF0aW9uRW5hYmxlZDpmdW5jdGlvbigpe2lmKCFiYy5ub2RlKXtpZihudWxsIT10aGlzLm9wdGlvbi5hbmltYXRpb24pcmV0dXJuISF0aGlzLm9wdGlvbi5hbmltYXRpb247aWYodGhpcy5wYXJlbnRNb2RlbClyZXR1cm4gdGhpcy5wYXJlbnRNb2RlbC5pc0FuaW1hdGlvbkVuYWJsZWQoKX19fSxYaShBYSksWWkoQWEpLGZnKEFhLE9mKSxmZyhBYSxFZiksZmcoQWEsaGcpLGZnKEFhLGRnKTt2YXIgZ2c9MCx2Zz0xZS00LG1nPTkwMDcxOTkyNTQ3NDA5OTEseWc9L14oPzooXFxkezR9KSg/OlstXFwvXShcXGR7MSwyfSkoPzpbLVxcL10oXFxkezEsMn0pKD86W1QgXShcXGR7MSwyfSkoPzo6KFxcZFxcZCkoPzo6KFxcZFxcZCkoPzpbLixdKFxcZCspKT8pPyk/KFp8W1xcK1xcLV1cXGRcXGQ6P1xcZFxcZCk/KT8pPyk/KT8kLyxfZz0oT2JqZWN0LmZyZWV6ZXx8T2JqZWN0KSh7bGluZWFyTWFwOnphLHBhcnNlUGVyY2VudDpOYSxyb3VuZDpGYSxhc2M6VmEsZ2V0UHJlY2lzaW9uOkdhLGdldFByZWNpc2lvblNhZmU6SGEsZ2V0UGl4ZWxQcmVjaXNpb246V2EsZ2V0UGVyY2VudFdpdGhQcmVjaXNpb246amEsTUFYX1NBRkVfSU5URUdFUjptZyxyZW1SYWRpYW46cWEsaXNSYWRpYW5Bcm91bmRaZXJvOlVhLHBhcnNlRGF0ZTpYYSxxdWFudGl0eTpZYSxuaWNlOiRhLHF1YW50aWxlOkthLHJlZm9ybUludGVydmFsczpRYSxpc051bWVyaWM6SmF9KSx4Zz1MLHdnPS8oWyY8PlwiJ10pL2csYmc9e1wiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIiwnXCInOlwiJnF1b3Q7XCIsXCInXCI6XCImIzM5O1wifSxNZz1bXCJhXCIsXCJiXCIsXCJjXCIsXCJkXCIsXCJlXCIsXCJmXCIsXCJnXCJdLFNnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJ7XCIrdCsobnVsbD09ZT9cIlwiOmUpK1wifVwifSxDZz1EbixJZz1NbixUZz0oT2JqZWN0LmZyZWV6ZXx8T2JqZWN0KSh7YWRkQ29tbWFzOnRvLHRvQ2FtZWxDYXNlOmVvLG5vcm1hbGl6ZUNzc0FycmF5OnhnLGVuY29kZUhUTUw6bm8sZm9ybWF0VHBsOmlvLGZvcm1hdFRwbFNpbXBsZTpybyxnZXRUb29sdGlwTWFya2VyOmFvLGZvcm1hdFRpbWU6c28sY2FwaXRhbEZpcnN0OmxvLHRydW5jYXRlVGV4dDpDZyxnZXRUZXh0UmVjdDpJZ30pLGtnPWYsRGc9W1wibGVmdFwiLFwicmlnaHRcIixcInRvcFwiLFwiYm90dG9tXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLEFnPVtbXCJ3aWR0aFwiLFwibGVmdFwiLFwicmlnaHRcIl0sW1wiaGVpZ2h0XCIsXCJ0b3BcIixcImJvdHRvbVwiXV0sUGc9dW8sTGc9KF8odW8sXCJ2ZXJ0aWNhbFwiKSxfKHVvLFwiaG9yaXpvbnRhbFwiKSx7Z2V0Qm94TGF5b3V0UGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue2xlZnQ6dGhpcy5nZXQoXCJsZWZ0XCIpLHRvcDp0aGlzLmdldChcInRvcFwiKSxyaWdodDp0aGlzLmdldChcInJpZ2h0XCIpLGJvdHRvbTp0aGlzLmdldChcImJvdHRvbVwiKSx3aWR0aDp0aGlzLmdldChcIndpZHRoXCIpLGhlaWdodDp0aGlzLmdldChcImhlaWdodFwiKX19fSksT2c9VmkoKSxSZz1BYS5leHRlbmQoe3R5cGU6XCJjb21wb25lbnRcIixpZDpcIlwiLG5hbWU6XCJcIixtYWluVHlwZTpcIlwiLHN1YlR5cGU6XCJcIixjb21wb25lbnRJbmRleDowLGRlZmF1bHRPcHRpb246bnVsbCxlY01vZGVsOm51bGwsZGVwZW5kZW50TW9kZWxzOltdLHVpZDpudWxsLGxheW91dE1vZGU6bnVsbCwkY29uc3RydWN0b3I6ZnVuY3Rpb24odCxlLG4saSl7QWEuY2FsbCh0aGlzLHQsZSxuLGkpLHRoaXMudWlkPU9hKFwiZWNfY3B0X21vZGVsXCIpfSxpbml0OmZ1bmN0aW9uKHQsZSxuKXt0aGlzLm1lcmdlRGVmYXVsdEFuZFRoZW1lKHQsbil9LG1lcmdlRGVmYXVsdEFuZFRoZW1lOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5sYXlvdXRNb2RlLGk9bj9mbyh0KTp7fSxhPWUuZ2V0VGhlbWUoKTtyKHQsYS5nZXQodGhpcy5tYWluVHlwZSkpLHIodCx0aGlzLmdldERlZmF1bHRPcHRpb24oKSksbiYmY28odCxpLG4pfSxtZXJnZU9wdGlvbjpmdW5jdGlvbih0KXtyKHRoaXMub3B0aW9uLHQsITApO3ZhciBlPXRoaXMubGF5b3V0TW9kZTtlJiZjbyh0aGlzLm9wdGlvbix0LGUpfSxvcHRpb25VcGRhdGVkOmZ1bmN0aW9uKCl7fSxnZXREZWZhdWx0T3B0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9T2codGhpcyk7aWYoIXQuZGVmYXVsdE9wdGlvbil7Zm9yKHZhciBlPVtdLG49dGhpcy5jb25zdHJ1Y3RvcjtuOyl7dmFyIGk9bi5wcm90b3R5cGUuZGVmYXVsdE9wdGlvbjtpJiZlLnB1c2goaSksbj1uLnN1cGVyQ2xhc3N9Zm9yKHZhciBhPXt9LG89ZS5sZW5ndGgtMTtvPj0wO28tLSlhPXIoYSxlW29dLCEwKTt0LmRlZmF1bHRPcHRpb249YX1yZXR1cm4gdC5kZWZhdWx0T3B0aW9ufSxnZXRSZWZlcnJpbmdDb21wb25lbnRzOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVjTW9kZWwucXVlcnlDb21wb25lbnRzKHttYWluVHlwZTp0LGluZGV4OnRoaXMuZ2V0KHQrXCJJbmRleFwiLCEwKSxpZDp0aGlzLmdldCh0K1wiSWRcIiwhMCl9KX19KTtLaShSZyx7cmVnaXN0ZXJXaGVuRXh0ZW5kOiEwfSksUmEoUmcpLEVhKFJnLGdvKSxjKFJnLExnKTt2YXIgRWc9XCJcIjtcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiYoRWc9bmF2aWdhdG9yLnBsYXRmb3JtfHxcIlwiKTt2YXIgQmc9e2NvbG9yOltcIiNjMjM1MzFcIixcIiMyZjQ1NTRcIixcIiM2MWEwYThcIixcIiNkNDgyNjVcIixcIiM5MWM3YWVcIixcIiM3NDlmODNcIixcIiNjYTg2MjJcIixcIiNiZGEyOWFcIixcIiM2ZTcwNzRcIixcIiM1NDY1NzBcIixcIiNjNGNjZDNcIl0sZ3JhZGllbnRDb2xvcjpbXCIjZjZlZmE2XCIsXCIjZDg4MjczXCIsXCIjYmY0NDRjXCJdLHRleHRTdHlsZTp7Zm9udEZhbWlseTpFZy5tYXRjaCgvXldpbi8pP1wiTWljcm9zb2Z0IFlhSGVpXCI6XCJzYW5zLXNlcmlmXCIsZm9udFNpemU6MTIsZm9udFN0eWxlOlwibm9ybWFsXCIsZm9udFdlaWdodDpcIm5vcm1hbFwifSxibGVuZE1vZGU6bnVsbCxhbmltYXRpb246XCJhdXRvXCIsYW5pbWF0aW9uRHVyYXRpb246MWUzLGFuaW1hdGlvbkR1cmF0aW9uVXBkYXRlOjMwMCxhbmltYXRpb25FYXNpbmc6XCJleHBvbmVudGlhbE91dFwiLGFuaW1hdGlvbkVhc2luZ1VwZGF0ZTpcImN1YmljT3V0XCIsYW5pbWF0aW9uVGhyZXNob2xkOjJlMyxwcm9ncmVzc2l2ZVRocmVzaG9sZDozZTMscHJvZ3Jlc3NpdmU6NDAwLGhvdmVyTGF5ZXJUaHJlc2hvbGQ6M2UzLHVzZVVUQzohMX0semc9VmkoKSxOZz17Y2xlYXJDb2xvclBhbGV0dGU6ZnVuY3Rpb24oKXt6Zyh0aGlzKS5jb2xvcklkeD0wLHpnKHRoaXMpLmNvbG9yTmFtZU1hcD17fX0sZ2V0Q29sb3JGcm9tUGFsZXR0ZTpmdW5jdGlvbih0LGUsbil7ZT1lfHx0aGlzO3ZhciBpPXpnKGUpLHI9aS5jb2xvcklkeHx8MCxhPWkuY29sb3JOYW1lTWFwPWkuY29sb3JOYW1lTWFwfHx7fTtpZihhLmhhc093blByb3BlcnR5KHQpKXJldHVybiBhW3RdO3ZhciBvPVBpKHRoaXMuZ2V0KFwiY29sb3JcIiwhMCkpLHM9dGhpcy5nZXQoXCJjb2xvckxheWVyXCIsITApLGw9bnVsbCE9biYmcz92byhzLG4pOm87aWYobD1sfHxvLGwmJmwubGVuZ3RoKXt2YXIgdT1sW3JdO3JldHVybiB0JiYoYVt0XT11KSxpLmNvbG9ySWR4PShyKzEpJWwubGVuZ3RoLHV9fX0sRmc9e2NhcnRlc2lhbjJkOmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQuZ2V0UmVmZXJyaW5nQ29tcG9uZW50cyhcInhBeGlzXCIpWzBdLGE9dC5nZXRSZWZlcnJpbmdDb21wb25lbnRzKFwieUF4aXNcIilbMF07ZS5jb29yZFN5c0RpbXM9W1wieFwiLFwieVwiXSxuLnNldChcInhcIixyKSxuLnNldChcInlcIixhKSx5byhyKSYmKGkuc2V0KFwieFwiLHIpLGUuZmlyc3RDYXRlZ29yeURpbUluZGV4PTApLHlvKGEpJiYoaS5zZXQoXCJ5XCIsYSksZS5maXJzdENhdGVnb3J5RGltSW5kZXg9MSl9LHNpbmdsZUF4aXM6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5nZXRSZWZlcnJpbmdDb21wb25lbnRzKFwic2luZ2xlQXhpc1wiKVswXTtcbmUuY29vcmRTeXNEaW1zPVtcInNpbmdsZVwiXSxuLnNldChcInNpbmdsZVwiLHIpLHlvKHIpJiYoaS5zZXQoXCJzaW5nbGVcIixyKSxlLmZpcnN0Q2F0ZWdvcnlEaW1JbmRleD0wKX0scG9sYXI6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5nZXRSZWZlcnJpbmdDb21wb25lbnRzKFwicG9sYXJcIilbMF0sYT1yLmZpbmRBeGlzTW9kZWwoXCJyYWRpdXNBeGlzXCIpLG89ci5maW5kQXhpc01vZGVsKFwiYW5nbGVBeGlzXCIpO2UuY29vcmRTeXNEaW1zPVtcInJhZGl1c1wiLFwiYW5nbGVcIl0sbi5zZXQoXCJyYWRpdXNcIixhKSxuLnNldChcImFuZ2xlXCIsbykseW8oYSkmJihpLnNldChcInJhZGl1c1wiLGEpLGUuZmlyc3RDYXRlZ29yeURpbUluZGV4PTApLHlvKG8pJiYoaS5zZXQoXCJhbmdsZVwiLG8pLGUuZmlyc3RDYXRlZ29yeURpbUluZGV4PTEpfSxnZW86ZnVuY3Rpb24odCxlKXtlLmNvb3JkU3lzRGltcz1bXCJsbmdcIixcImxhdFwiXX0scGFyYWxsZWw6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5lY01vZGVsLGE9ci5nZXRDb21wb25lbnQoXCJwYXJhbGxlbFwiLHQuZ2V0KFwicGFyYWxsZWxJbmRleFwiKSksbz1lLmNvb3JkU3lzRGltcz1hLmRpbWVuc2lvbnMuc2xpY2UoKTtmKGEucGFyYWxsZWxBeGlzSW5kZXgsZnVuY3Rpb24odCxhKXt2YXIgcz1yLmdldENvbXBvbmVudChcInBhcmFsbGVsQXhpc1wiLHQpLGw9b1thXTtuLnNldChsLHMpLHlvKHMpJiZudWxsPT1lLmZpcnN0Q2F0ZWdvcnlEaW1JbmRleCYmKGkuc2V0KGwscyksZS5maXJzdENhdGVnb3J5RGltSW5kZXg9YSl9KX19LFZnPVwib3JpZ2luYWxcIixHZz1cImFycmF5Um93c1wiLEhnPVwib2JqZWN0Um93c1wiLFdnPVwia2V5ZWRDb2x1bW5zXCIsamc9XCJ1bmtub3duXCIscWc9XCJ0eXBlZEFycmF5XCIsVWc9XCJjb2x1bW5cIixYZz1cInJvd1wiO19vLnNlcmllc0RhdGFUb1NvdXJjZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IF9vKHtkYXRhOnQsc291cmNlRm9ybWF0OkModCk/cWc6VmcsZnJvbURhdGFzZXQ6ITF9KX0sWWkoX28pO3ZhciBZZz1WaSgpLFpnPVwiXFx4MDBfZWNfaW5uZXJcIiwkZz1BYS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24odCxlLG4saSl7bj1ufHx7fSx0aGlzLm9wdGlvbj1udWxsLHRoaXMuX3RoZW1lPW5ldyBBYShuKSx0aGlzLl9vcHRpb25NYW5hZ2VyPWl9LHNldE9wdGlvbjpmdW5jdGlvbih0LGUpe08oIShaZyBpbiB0KSxcInBsZWFzZSB1c2UgY2hhcnQuZ2V0T3B0aW9uKClcIiksdGhpcy5fb3B0aW9uTWFuYWdlci5zZXRPcHRpb24odCxlKSx0aGlzLnJlc2V0T3B0aW9uKG51bGwpfSxyZXNldE9wdGlvbjpmdW5jdGlvbih0KXt2YXIgZT0hMSxuPXRoaXMuX29wdGlvbk1hbmFnZXI7aWYoIXR8fFwicmVjcmVhdGVcIj09PXQpe3ZhciBpPW4ubW91bnRPcHRpb24oXCJyZWNyZWF0ZVwiPT09dCk7dGhpcy5vcHRpb24mJlwicmVjcmVhdGVcIiE9PXQ/KHRoaXMucmVzdG9yZURhdGEoKSx0aGlzLm1lcmdlT3B0aW9uKGkpKTpSby5jYWxsKHRoaXMsaSksZT0hMH1pZigoXCJ0aW1lbGluZVwiPT09dHx8XCJtZWRpYVwiPT09dCkmJnRoaXMucmVzdG9yZURhdGEoKSwhdHx8XCJyZWNyZWF0ZVwiPT09dHx8XCJ0aW1lbGluZVwiPT09dCl7dmFyIHI9bi5nZXRUaW1lbGluZU9wdGlvbih0aGlzKTtyJiYodGhpcy5tZXJnZU9wdGlvbihyKSxlPSEwKX1pZighdHx8XCJyZWNyZWF0ZVwiPT09dHx8XCJtZWRpYVwiPT09dCl7dmFyIGE9bi5nZXRNZWRpYU9wdGlvbih0aGlzLHRoaXMuX2FwaSk7YS5sZW5ndGgmJmYoYSxmdW5jdGlvbih0KXt0aGlzLm1lcmdlT3B0aW9uKHQsZT0hMCl9LHRoaXMpfXJldHVybiBlfSxtZXJnZU9wdGlvbjpmdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsaSl7dmFyIHI9UGkodFtlXSkscz1FaShhLmdldChlKSxyKTtCaShzKSxmKHMsZnVuY3Rpb24odCl7dmFyIG49dC5vcHRpb247TShuKSYmKHQua2V5SW5mby5tYWluVHlwZT1lLHQua2V5SW5mby5zdWJUeXBlPUJvKGUsbix0LmV4aXN0KSl9KTt2YXIgbD1FbyhhLGkpO25bZV09W10sYS5zZXQoZSxbXSksZihzLGZ1bmN0aW9uKHQsaSl7dmFyIHI9dC5leGlzdCxzPXQub3B0aW9uO2lmKE8oTShzKXx8cixcIkVtcHR5IGNvbXBvbmVudCBkZWZpbml0aW9uXCIpLHMpe3ZhciB1PVJnLmdldENsYXNzKGUsdC5rZXlJbmZvLnN1YlR5cGUsITApO2lmKHImJnIgaW5zdGFuY2VvZiB1KXIubmFtZT10LmtleUluZm8ubmFtZSxyLm1lcmdlT3B0aW9uKHMsdGhpcyksci5vcHRpb25VcGRhdGVkKHMsITEpO2Vsc2V7dmFyIGg9byh7ZGVwZW5kZW50TW9kZWxzOmwsY29tcG9uZW50SW5kZXg6aX0sdC5rZXlJbmZvKTtyPW5ldyB1KHMsdGhpcyx0aGlzLGgpLG8ocixoKSxyLmluaXQocyx0aGlzLHRoaXMsaCksci5vcHRpb25VcGRhdGVkKG51bGwsITApfX1lbHNlIHIubWVyZ2VPcHRpb24oe30sdGhpcyksci5vcHRpb25VcGRhdGVkKHt9LCExKTthLmdldChlKVtpXT1yLG5bZV1baV09ci5vcHRpb259LHRoaXMpLFwic2VyaWVzXCI9PT1lJiZ6byh0aGlzLGEuZ2V0KFwic2VyaWVzXCIpKX12YXIgbj10aGlzLm9wdGlvbixhPXRoaXMuX2NvbXBvbmVudHNNYXAscz1bXTtibyh0aGlzKSxmKHQsZnVuY3Rpb24odCxlKXtudWxsIT10JiYoUmcuaGFzQ2xhc3MoZSk/ZSYmcy5wdXNoKGUpOm5bZV09bnVsbD09bltlXT9pKHQpOnIobltlXSx0LCEwKSl9KSxSZy50b3BvbG9naWNhbFRyYXZlbChzLFJnLmdldEFsbENsYXNzTWFpblR5cGVzKCksZSx0aGlzKSx0aGlzLl9zZXJpZXNJbmRpY2VzTWFwPU4odGhpcy5fc2VyaWVzSW5kaWNlcz10aGlzLl9zZXJpZXNJbmRpY2VzfHxbXSl9LGdldE9wdGlvbjpmdW5jdGlvbigpe3ZhciB0PWkodGhpcy5vcHRpb24pO3JldHVybiBmKHQsZnVuY3Rpb24oZSxuKXtpZihSZy5oYXNDbGFzcyhuKSl7Zm9yKHZhciBlPVBpKGUpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSlOaShlW2ldKSYmZS5zcGxpY2UoaSwxKTt0W25dPWV9fSksZGVsZXRlIHRbWmddLHR9LGdldFRoZW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RoZW1lfSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9jb21wb25lbnRzTWFwLmdldCh0KTtyZXR1cm4gbj9uW2V8fDBdOnZvaWQgMH0scXVlcnlDb21wb25lbnRzOmZ1bmN0aW9uKHQpe3ZhciBlPXQubWFpblR5cGU7aWYoIWUpcmV0dXJuW107dmFyIG49dC5pbmRleCxpPXQuaWQscj10Lm5hbWUsYT10aGlzLl9jb21wb25lbnRzTWFwLmdldChlKTtpZighYXx8IWEubGVuZ3RoKXJldHVybltdO3ZhciBvO2lmKG51bGwhPW4peChuKXx8KG49W25dKSxvPXYocChuLGZ1bmN0aW9uKHQpe3JldHVybiBhW3RdfSksZnVuY3Rpb24odCl7cmV0dXJuISF0fSk7ZWxzZSBpZihudWxsIT1pKXt2YXIgcz14KGkpO289dihhLGZ1bmN0aW9uKHQpe3JldHVybiBzJiZ1KGksdC5pZCk+PTB8fCFzJiZ0LmlkPT09aX0pfWVsc2UgaWYobnVsbCE9cil7dmFyIGw9eChyKTtvPXYoYSxmdW5jdGlvbih0KXtyZXR1cm4gbCYmdShyLHQubmFtZSk+PTB8fCFsJiZ0Lm5hbWU9PT1yfSl9ZWxzZSBvPWEuc2xpY2UoKTtyZXR1cm4gTm8obyx0KX0sZmluZENvbXBvbmVudHM6ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXt2YXIgZT1yK1wiSW5kZXhcIixuPXIrXCJJZFwiLGk9citcIk5hbWVcIjtyZXR1cm4hdHx8bnVsbD09dFtlXSYmbnVsbD09dFtuXSYmbnVsbD09dFtpXT9udWxsOnttYWluVHlwZTpyLGluZGV4OnRbZV0saWQ6dFtuXSxuYW1lOnRbaV19fWZ1bmN0aW9uIG4oZSl7cmV0dXJuIHQuZmlsdGVyP3YoZSx0LmZpbHRlcik6ZX12YXIgaT10LnF1ZXJ5LHI9dC5tYWluVHlwZSxhPWUoaSksbz1hP3RoaXMucXVlcnlDb21wb25lbnRzKGEpOnRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KHIpO3JldHVybiBuKE5vKG8sdCkpfSxlYWNoQ29tcG9uZW50OmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLl9jb21wb25lbnRzTWFwO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpbj1lLGU9dCxpLmVhY2goZnVuY3Rpb24odCxpKXtmKHQsZnVuY3Rpb24odCxyKXtlLmNhbGwobixpLHQscil9KX0pO2Vsc2UgaWYoYih0KSlmKGkuZ2V0KHQpLGUsbik7ZWxzZSBpZihNKHQpKXt2YXIgcj10aGlzLmZpbmRDb21wb25lbnRzKHQpO2YocixlLG4pfX0sZ2V0U2VyaWVzQnlOYW1lOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KFwic2VyaWVzXCIpO3JldHVybiB2KGUsZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZT09PXR9KX0sZ2V0U2VyaWVzQnlJbmRleDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY29tcG9uZW50c01hcC5nZXQoXCJzZXJpZXNcIilbdF19LGdldFNlcmllc0J5VHlwZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9jb21wb25lbnRzTWFwLmdldChcInNlcmllc1wiKTtyZXR1cm4gdihlLGZ1bmN0aW9uKGUpe3JldHVybiBlLnN1YlR5cGU9PT10fSl9LGdldFNlcmllczpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb21wb25lbnRzTWFwLmdldChcInNlcmllc1wiKS5zbGljZSgpfSxnZXRTZXJpZXNDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb21wb25lbnRzTWFwLmdldChcInNlcmllc1wiKS5sZW5ndGh9LGVhY2hTZXJpZXM6ZnVuY3Rpb24odCxlKXtmKHRoaXMuX3Nlcmllc0luZGljZXMsZnVuY3Rpb24obil7dmFyIGk9dGhpcy5fY29tcG9uZW50c01hcC5nZXQoXCJzZXJpZXNcIilbbl07dC5jYWxsKGUsaSxuKX0sdGhpcyl9LGVhY2hSYXdTZXJpZXM6ZnVuY3Rpb24odCxlKXtmKHRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KFwic2VyaWVzXCIpLHQsZSl9LGVhY2hTZXJpZXNCeVR5cGU6ZnVuY3Rpb24odCxlLG4pe2YodGhpcy5fc2VyaWVzSW5kaWNlcyxmdW5jdGlvbihpKXt2YXIgcj10aGlzLl9jb21wb25lbnRzTWFwLmdldChcInNlcmllc1wiKVtpXTtyLnN1YlR5cGU9PT10JiZlLmNhbGwobixyLGkpfSx0aGlzKX0sZWFjaFJhd1Nlcmllc0J5VHlwZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIGYodGhpcy5nZXRTZXJpZXNCeVR5cGUodCksZSxuKX0saXNTZXJpZXNGaWx0ZXJlZDpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dGhpcy5fc2VyaWVzSW5kaWNlc01hcC5nZXQodC5jb21wb25lbnRJbmRleCl9LGdldEN1cnJlbnRTZXJpZXNJbmRpY2VzOmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuX3Nlcmllc0luZGljZXN8fFtdKS5zbGljZSgpfSxmaWx0ZXJTZXJpZXM6ZnVuY3Rpb24odCxlKXt2YXIgbj12KHRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KFwic2VyaWVzXCIpLHQsZSk7em8odGhpcyxuKX0scmVzdG9yZURhdGE6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fY29tcG9uZW50c01hcDt6byh0aGlzLGUuZ2V0KFwic2VyaWVzXCIpKTt2YXIgbj1bXTtlLmVhY2goZnVuY3Rpb24odCxlKXtuLnB1c2goZSl9KSxSZy50b3BvbG9naWNhbFRyYXZlbChuLFJnLmdldEFsbENsYXNzTWFpblR5cGVzKCksZnVuY3Rpb24obil7ZihlLmdldChuKSxmdW5jdGlvbihlKXsoXCJzZXJpZXNcIiE9PW58fCFMbyhlLHQpKSYmZS5yZXN0b3JlRGF0YSgpfSl9KX19KTtjKCRnLE5nKTt2YXIgS2c9W1wiZ2V0RG9tXCIsXCJnZXRaclwiLFwiZ2V0V2lkdGhcIixcImdldEhlaWdodFwiLFwiZ2V0RGV2aWNlUGl4ZWxSYXRpb1wiLFwiZGlzcGF0Y2hBY3Rpb25cIixcImlzRGlzcG9zZWRcIixcIm9uXCIsXCJvZmZcIixcImdldERhdGFVUkxcIixcImdldENvbm5lY3RlZERhdGFVUkxcIixcImdldE1vZGVsXCIsXCJnZXRPcHRpb25cIixcImdldFZpZXdPZkNvbXBvbmVudE1vZGVsXCIsXCJnZXRWaWV3T2ZTZXJpZXNNb2RlbFwiXSxRZz17fTtWby5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlZvLGNyZWF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPVtdO2YoUWcsZnVuY3Rpb24oaSl7dmFyIHI9aS5jcmVhdGUodCxlKTtuPW4uY29uY2F0KHJ8fFtdKX0pLHRoaXMuX2Nvb3JkaW5hdGVTeXN0ZW1zPW59LHVwZGF0ZTpmdW5jdGlvbih0LGUpe2YodGhpcy5fY29vcmRpbmF0ZVN5c3RlbXMsZnVuY3Rpb24obil7bi51cGRhdGUmJm4udXBkYXRlKHQsZSl9KX0sZ2V0Q29vcmRpbmF0ZVN5c3RlbXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29vcmRpbmF0ZVN5c3RlbXMuc2xpY2UoKX19LFZvLnJlZ2lzdGVyPWZ1bmN0aW9uKHQsZSl7UWdbdF09ZX0sVm8uZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiBRZ1t0XX07dmFyIEpnPWYsdHY9aSxldj1wLG52PXIsaXY9L14obWlufG1heCk/KC4rKSQvO0dvLnByb3RvdHlwZT17Y29uc3RydWN0b3I6R28sc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7dCYmZihQaSh0LnNlcmllcyksZnVuY3Rpb24odCl7dCYmdC5kYXRhJiZDKHQuZGF0YSkmJkUodC5kYXRhKX0pLHQ9dHYodCwhMCk7dmFyIG49dGhpcy5fb3B0aW9uQmFja3VwLGk9SG8uY2FsbCh0aGlzLHQsZSwhbik7dGhpcy5fbmV3QmFzZU9wdGlvbj1pLmJhc2VPcHRpb24sbj8oVW8obi5iYXNlT3B0aW9uLGkuYmFzZU9wdGlvbiksaS50aW1lbGluZU9wdGlvbnMubGVuZ3RoJiYobi50aW1lbGluZU9wdGlvbnM9aS50aW1lbGluZU9wdGlvbnMpLGkubWVkaWFMaXN0Lmxlbmd0aCYmKG4ubWVkaWFMaXN0PWkubWVkaWFMaXN0KSxpLm1lZGlhRGVmYXVsdCYmKG4ubWVkaWFEZWZhdWx0PWkubWVkaWFEZWZhdWx0KSk6dGhpcy5fb3B0aW9uQmFja3VwPWl9LG1vdW50T3B0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX29wdGlvbkJhY2t1cDtyZXR1cm4gdGhpcy5fdGltZWxpbmVPcHRpb25zPWV2KGUudGltZWxpbmVPcHRpb25zLHR2KSx0aGlzLl9tZWRpYUxpc3Q9ZXYoZS5tZWRpYUxpc3QsdHYpLHRoaXMuX21lZGlhRGVmYXVsdD10dihlLm1lZGlhRGVmYXVsdCksdGhpcy5fY3VycmVudE1lZGlhSW5kaWNlcz1bXSx0dih0P2UuYmFzZU9wdGlvbjp0aGlzLl9uZXdCYXNlT3B0aW9uKX0sZ2V0VGltZWxpbmVPcHRpb246ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLl90aW1lbGluZU9wdGlvbnM7aWYobi5sZW5ndGgpe3ZhciBpPXQuZ2V0Q29tcG9uZW50KFwidGltZWxpbmVcIik7aSYmKGU9dHYobltpLmdldEN1cnJlbnRJbmRleCgpXSwhMCkpfXJldHVybiBlfSxnZXRNZWRpYU9wdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2FwaS5nZXRXaWR0aCgpLGU9dGhpcy5fYXBpLmdldEhlaWdodCgpLG49dGhpcy5fbWVkaWFMaXN0LGk9dGhpcy5fbWVkaWFEZWZhdWx0LHI9W10sYT1bXTtpZighbi5sZW5ndGgmJiFpKXJldHVybiBhO2Zvcih2YXIgbz0wLHM9bi5sZW5ndGg7cz5vO28rKylXbyhuW29dLnF1ZXJ5LHQsZSkmJnIucHVzaChvKTtyZXR1cm4hci5sZW5ndGgmJmkmJihyPVstMV0pLHIubGVuZ3RoJiYhcW8ocix0aGlzLl9jdXJyZW50TWVkaWFJbmRpY2VzKSYmKGE9ZXYocixmdW5jdGlvbih0KXtyZXR1cm4gdHYoLTE9PT10P2kub3B0aW9uOm5bdF0ub3B0aW9uKX0pKSx0aGlzLl9jdXJyZW50TWVkaWFJbmRpY2VzPXIsYX19O3ZhciBydj1mLGF2PU0sb3Y9W1wiYXJlYVN0eWxlXCIsXCJsaW5lU3R5bGVcIixcIm5vZGVTdHlsZVwiLFwibGlua1N0eWxlXCIsXCJjaG9yZFN0eWxlXCIsXCJsYWJlbFwiLFwibGFiZWxMaW5lXCJdLHN2PWZ1bmN0aW9uKHQsZSl7cnYoSm8odC5zZXJpZXMpLGZ1bmN0aW9uKHQpe2F2KHQpJiZRbyh0KX0pO3ZhciBuPVtcInhBeGlzXCIsXCJ5QXhpc1wiLFwicmFkaXVzQXhpc1wiLFwiYW5nbGVBeGlzXCIsXCJzaW5nbGVBeGlzXCIsXCJwYXJhbGxlbEF4aXNcIixcInJhZGFyXCJdO2UmJm4ucHVzaChcInZhbHVlQXhpc1wiLFwiY2F0ZWdvcnlBeGlzXCIsXCJsb2dBeGlzXCIsXCJ0aW1lQXhpc1wiKSxydihuLGZ1bmN0aW9uKGUpe3J2KEpvKHRbZV0pLGZ1bmN0aW9uKHQpe3QmJigkbyh0LFwiYXhpc0xhYmVsXCIpLCRvKHQuYXhpc1BvaW50ZXIsXCJsYWJlbFwiKSl9KX0pLHJ2KEpvKHQucGFyYWxsZWwpLGZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQucGFyYWxsZWxBeGlzRGVmYXVsdDskbyhlLFwiYXhpc0xhYmVsXCIpLCRvKGUmJmUuYXhpc1BvaW50ZXIsXCJsYWJlbFwiKX0pLHJ2KEpvKHQuY2FsZW5kYXIpLGZ1bmN0aW9uKHQpe1lvKHQsXCJpdGVtU3R5bGVcIiksJG8odCxcImRheUxhYmVsXCIpLCRvKHQsXCJtb250aExhYmVsXCIpLCRvKHQsXCJ5ZWFyTGFiZWxcIil9KSxydihKbyh0LnJhZGFyKSxmdW5jdGlvbih0KXskbyh0LFwibmFtZVwiKX0pLHJ2KEpvKHQuZ2VvKSxmdW5jdGlvbih0KXthdih0KSYmKEtvKHQpLHJ2KEpvKHQucmVnaW9ucyksZnVuY3Rpb24odCl7S28odCl9KSl9KSxydihKbyh0LnRpbWVsaW5lKSxmdW5jdGlvbih0KXtLbyh0KSxZbyh0LFwibGFiZWxcIiksWW8odCxcIml0ZW1TdHlsZVwiKSxZbyh0LFwiY29udHJvbFN0eWxlXCIsITApO3ZhciBlPXQuZGF0YTt4KGUpJiZmKGUsZnVuY3Rpb24odCl7TSh0KSYmKFlvKHQsXCJsYWJlbFwiKSxZbyh0LFwiaXRlbVN0eWxlXCIpKX0pfSkscnYoSm8odC50b29sYm94KSxmdW5jdGlvbih0KXtZbyh0LFwiaWNvblN0eWxlXCIpLHJ2KHQuZmVhdHVyZSxmdW5jdGlvbih0KXtZbyh0LFwiaWNvblN0eWxlXCIpfSl9KSwkbyh0cyh0LmF4aXNQb2ludGVyKSxcImxhYmVsXCIpLCRvKHRzKHQudG9vbHRpcCkuYXhpc1BvaW50ZXIsXCJsYWJlbFwiKX0sbHY9W1tcInhcIixcImxlZnRcIl0sW1wieVwiLFwidG9wXCJdLFtcIngyXCIsXCJyaWdodFwiXSxbXCJ5MlwiLFwiYm90dG9tXCJdXSx1dj1bXCJncmlkXCIsXCJnZW9cIixcInBhcmFsbGVsXCIsXCJsZWdlbmRcIixcInRvb2xib3hcIixcInRpdGxlXCIsXCJ2aXN1YWxNYXBcIixcImRhdGFab29tXCIsXCJ0aW1lbGluZVwiXSxodj1mdW5jdGlvbih0LGUpe3N2KHQsZSksdC5zZXJpZXM9UGkodC5zZXJpZXMpLGYodC5zZXJpZXMsZnVuY3Rpb24odCl7aWYoTSh0KSl7dmFyIGU9dC50eXBlO2lmKChcInBpZVwiPT09ZXx8XCJnYXVnZVwiPT09ZSkmJm51bGwhPXQuY2xvY2tXaXNlJiYodC5jbG9ja3dpc2U9dC5jbG9ja1dpc2UpLFwiZ2F1Z2VcIj09PWUpe3ZhciBuPWVzKHQsXCJwb2ludGVyLmNvbG9yXCIpO251bGwhPW4mJm5zKHQsXCJpdGVtU3R5bGUubm9ybWFsLmNvbG9yXCIsbil9aXModCl9fSksdC5kYXRhUmFuZ2UmJih0LnZpc3VhbE1hcD10LmRhdGFSYW5nZSksZih1dixmdW5jdGlvbihlKXt2YXIgbj10W2VdO24mJih4KG4pfHwobj1bbl0pLGYobixmdW5jdGlvbih0KXtpcyh0KX0pKX0pfSxjdj1mdW5jdGlvbih0KXt2YXIgZT1OKCk7dC5lYWNoU2VyaWVzKGZ1bmN0aW9uKHQpe3ZhciBuPXQuZ2V0KFwic3RhY2tcIik7aWYobil7dmFyIGk9ZS5nZXQobil8fGUuc2V0KG4sW10pLHI9dC5nZXREYXRhKCksYT17c3RhY2tSZXN1bHREaW1lbnNpb246ci5nZXRDYWxjdWxhdGlvbkluZm8oXCJzdGFja1Jlc3VsdERpbWVuc2lvblwiKSxzdGFja2VkT3ZlckRpbWVuc2lvbjpyLmdldENhbGN1bGF0aW9uSW5mbyhcInN0YWNrZWRPdmVyRGltZW5zaW9uXCIpLHN0YWNrZWREaW1lbnNpb246ci5nZXRDYWxjdWxhdGlvbkluZm8oXCJzdGFja2VkRGltZW5zaW9uXCIpLHN0YWNrZWRCeURpbWVuc2lvbjpyLmdldENhbGN1bGF0aW9uSW5mbyhcInN0YWNrZWRCeURpbWVuc2lvblwiKSxpc1N0YWNrZWRCeUluZGV4OnIuZ2V0Q2FsY3VsYXRpb25JbmZvKFwiaXNTdGFja2VkQnlJbmRleFwiKSxkYXRhOnIsc2VyaWVzTW9kZWw6dH07aWYoIWEuc3RhY2tlZERpbWVuc2lvbnx8IWEuaXNTdGFja2VkQnlJbmRleCYmIWEuc3RhY2tlZEJ5RGltZW5zaW9uKXJldHVybjtpLmxlbmd0aCYmci5zZXRDYWxjdWxhdGlvbkluZm8oXCJzdGFja2VkT25TZXJpZXNcIixpW2kubGVuZ3RoLTFdLnNlcmllc01vZGVsKSxpLnB1c2goYSl9fSksZS5lYWNoKHJzKX0sZHY9YXMucHJvdG90eXBlO2R2LnB1cmU9ITEsZHYucGVyc2lzdGVudD0hMCxkdi5nZXRTb3VyY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc291cmNlfTt2YXIgZnY9e2FycmF5Um93c19jb2x1bW46e3B1cmU6ITAsY291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5tYXgoMCx0aGlzLl9kYXRhLmxlbmd0aC10aGlzLl9zb3VyY2Uuc3RhcnRJbmRleCl9LGdldEl0ZW06ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2RhdGFbdCt0aGlzLl9zb3VyY2Uuc3RhcnRJbmRleF19LGFwcGVuZERhdGE6bHN9LGFycmF5Um93c19yb3c6e3B1cmU6ITAsY291bnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kYXRhWzBdO3JldHVybiB0P01hdGgubWF4KDAsdC5sZW5ndGgtdGhpcy5fc291cmNlLnN0YXJ0SW5kZXgpOjB9LGdldEl0ZW06ZnVuY3Rpb24odCl7dCs9dGhpcy5fc291cmNlLnN0YXJ0SW5kZXg7Zm9yKHZhciBlPVtdLG49dGhpcy5fZGF0YSxpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciByPW5baV07ZS5wdXNoKHI/clt0XTpudWxsKX1yZXR1cm4gZX0sYXBwZW5kRGF0YTpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcignRG8gbm90IHN1cHBvcnQgYXBwZW5kRGF0YSB3aGVuIHNldCBzZXJpZXNMYXlvdXRCeTogXCJyb3dcIi4nKX19LG9iamVjdFJvd3M6e3B1cmU6ITAsY291bnQ6b3MsZ2V0SXRlbTpzcyxhcHBlbmREYXRhOmxzfSxrZXllZENvbHVtbnM6e3B1cmU6ITAsY291bnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9zb3VyY2UuZGltZW5zaW9uc0RlZmluZVswXS5uYW1lLGU9dGhpcy5fZGF0YVt0XTtyZXR1cm4gZT9lLmxlbmd0aDowfSxnZXRJdGVtOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPXRoaXMuX3NvdXJjZS5kaW1lbnNpb25zRGVmaW5lLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHI9dGhpcy5fZGF0YVtuW2ldLm5hbWVdO2UucHVzaChyP3JbdF06bnVsbCl9cmV0dXJuIGV9LGFwcGVuZERhdGE6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZGF0YTtmKHQsZnVuY3Rpb24odCxuKXtmb3IodmFyIGk9ZVtuXXx8KGVbbl09W10pLHI9MDtyPCh0fHxbXSkubGVuZ3RoO3IrKylpLnB1c2godFtyXSl9KX19LG9yaWdpbmFsOntjb3VudDpvcyxnZXRJdGVtOnNzLGFwcGVuZERhdGE6bHN9LHR5cGVkQXJyYXk6e3BlcnNpc3RlbnQ6ITEscHVyZTohMCxjb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhP3RoaXMuX2RhdGEubGVuZ3RoL3RoaXMuX2RpbVNpemU6MH0sZ2V0SXRlbTpmdW5jdGlvbih0LGUpe3QtPXRoaXMuX29mZnNldCxlPWV8fFtdO2Zvcih2YXIgbj10aGlzLl9kaW1TaXplKnQsaT0wO2k8dGhpcy5fZGltU2l6ZTtpKyspZVtpXT10aGlzLl9kYXRhW24raV07cmV0dXJuIGV9LGFwcGVuZERhdGE6ZnVuY3Rpb24odCl7dGhpcy5fZGF0YT10fSxjbGVhbjpmdW5jdGlvbigpe3RoaXMuX29mZnNldCs9dGhpcy5jb3VudCgpLHRoaXMuX2RhdGE9bnVsbH19fSxwdj17YXJyYXlSb3dzOnVzLG9iamVjdFJvd3M6ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIG51bGwhPW4/dFtpXTp0fSxrZXllZENvbHVtbnM6dXMsb3JpZ2luYWw6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPU9pKHQpO3JldHVybiBudWxsIT1uJiZpIGluc3RhbmNlb2YgQXJyYXk/aVtuXTppfSx0eXBlZEFycmF5OnVzfSxndj17YXJyYXlSb3dzOmhzLG9iamVjdFJvd3M6ZnVuY3Rpb24odCxlKXtyZXR1cm4gY3ModFtlXSx0aGlzLl9kaW1lbnNpb25JbmZvc1tlXSl9LGtleWVkQ29sdW1uczpocyxvcmlnaW5hbDpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10JiYobnVsbD09dC52YWx1ZT90OnQudmFsdWUpO3JldHVybiF0aGlzLl9yYXdEYXRhLnB1cmUmJlJpKHQpJiYodGhpcy5oYXNJdGVtT3B0aW9uPSEwKSxjcyhyIGluc3RhbmNlb2YgQXJyYXk/cltpXTpyLHRoaXMuX2RpbWVuc2lvbkluZm9zW2VdKX0sdHlwZWRBcnJheTpmdW5jdGlvbih0LGUsbixpKXtyZXR1cm4gdFtpXX19LHZ2PS9cXHtAKC4rPylcXH0vZyxtdj17Z2V0RGF0YVBhcmFtczpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZ2V0RGF0YShlKSxpPXRoaXMuZ2V0UmF3VmFsdWUodCxlKSxyPW4uZ2V0UmF3SW5kZXgodCksYT1uLmdldE5hbWUodCksbz1uLmdldFJhd0RhdGFJdGVtKHQpLHM9bi5nZXRJdGVtVmlzdWFsKHQsXCJjb2xvclwiKTtyZXR1cm57Y29tcG9uZW50VHlwZTp0aGlzLm1haW5UeXBlLGNvbXBvbmVudFN1YlR5cGU6dGhpcy5zdWJUeXBlLHNlcmllc1R5cGU6XCJzZXJpZXNcIj09PXRoaXMubWFpblR5cGU/dGhpcy5zdWJUeXBlOm51bGwsc2VyaWVzSW5kZXg6dGhpcy5zZXJpZXNJbmRleCxzZXJpZXNJZDp0aGlzLmlkLHNlcmllc05hbWU6dGhpcy5uYW1lLG5hbWU6YSxkYXRhSW5kZXg6cixkYXRhOm8sZGF0YVR5cGU6ZSx2YWx1ZTppLGNvbG9yOnMsbWFya2VyOmFvKHMpLCR2YXJzOltcInNlcmllc05hbWVcIixcIm5hbWVcIixcInZhbHVlXCJdfX0sZ2V0Rm9ybWF0dGVkTGFiZWw6ZnVuY3Rpb24odCxlLG4saSxyKXtlPWV8fFwibm9ybWFsXCI7dmFyIGE9dGhpcy5nZXREYXRhKG4pLG89YS5nZXRJdGVtTW9kZWwodCkscz10aGlzLmdldERhdGFQYXJhbXModCxuKTtudWxsIT1pJiZzLnZhbHVlIGluc3RhbmNlb2YgQXJyYXkmJihzLnZhbHVlPXMudmFsdWVbaV0pO3ZhciBsPW8uZ2V0KFwibm9ybWFsXCI9PT1lP1tyfHxcImxhYmVsXCIsXCJmb3JtYXR0ZXJcIl06W2Uscnx8XCJsYWJlbFwiLFwiZm9ybWF0dGVyXCJdKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBsKXJldHVybiBzLnN0YXR1cz1lLGwocyk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGwpe3ZhciB1PWlvKGwscyk7cmV0dXJuIHUucmVwbGFjZSh2dixmdW5jdGlvbihlLG4pe3ZhciBpPW4ubGVuZ3RoO3JldHVyblwiW1wiPT09bi5jaGFyQXQoMCkmJlwiXVwiPT09bi5jaGFyQXQoaS0xKSYmKG49K24uc2xpY2UoMSxpLTEpKSxkcyhhLHQsbil9KX19LGdldFJhd1ZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGRzKHRoaXMuZ2V0RGF0YShlKSx0KX0sZm9ybWF0VG9vbHRpcDpmdW5jdGlvbigpe319LHl2PXBzLnByb3RvdHlwZTt5di5wZXJmb3JtPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7cmV0dXJuISh0Pj0xKSYmKHQ9MSksdH12YXIgbj10aGlzLl91cHN0cmVhbSxpPXQmJnQuc2tpcDtpZih0aGlzLl9kaXJ0eSYmbil7dmFyIHI9dGhpcy5jb250ZXh0O3IuZGF0YT1yLm91dHB1dERhdGE9bi5jb250ZXh0Lm91dHB1dERhdGF9dGhpcy5fX3BpcGVsaW5lJiYodGhpcy5fX3BpcGVsaW5lLmN1cnJlbnRUYXNrPXRoaXMpO3ZhciBhO3RoaXMuX3BsYW4mJiFpJiYoYT10aGlzLl9wbGFuKHRoaXMuY29udGV4dCkpO3ZhciBvPWUodGhpcy5fbW9kQnkpLHM9dGhpcy5fbW9kRGF0YUNvdW50fHwwLGw9ZSh0JiZ0Lm1vZEJ5KSx1PXQmJnQubW9kRGF0YUNvdW50fHwwOyhvIT09bHx8cyE9PXUpJiYoYT1cInJlc2V0XCIpO3ZhciBoOyh0aGlzLl9kaXJ0eXx8XCJyZXNldFwiPT09YSkmJih0aGlzLl9kaXJ0eT0hMSxoPXZzKHRoaXMsaSkpLHRoaXMuX21vZEJ5PWwsdGhpcy5fbW9kRGF0YUNvdW50PXU7dmFyIGM9dCYmdC5zdGVwO2lmKHRoaXMuX2R1ZUVuZD1uP24uX291dHB1dER1ZUVuZDp0aGlzLl9jb3VudD90aGlzLl9jb3VudCh0aGlzLmNvbnRleHQpOjEvMCx0aGlzLl9wcm9ncmVzcyl7dmFyIGQ9dGhpcy5fZHVlSW5kZXgsZj1NYXRoLm1pbihudWxsIT1jP3RoaXMuX2R1ZUluZGV4K2M6MS8wLHRoaXMuX2R1ZUVuZCk7aWYoIWkmJihofHxmPmQpKXt2YXIgcD10aGlzLl9wcm9ncmVzcztpZih4KHApKWZvcih2YXIgZz0wO2c8cC5sZW5ndGg7ZysrKWdzKHRoaXMscFtnXSxkLGYsbCx1KTtlbHNlIGdzKHRoaXMscCxkLGYsbCx1KX10aGlzLl9kdWVJbmRleD1mO3ZhciB2PW51bGwhPXRoaXMuX3NldHRlZE91dHB1dEVuZD90aGlzLl9zZXR0ZWRPdXRwdXRFbmQ6Zjt0aGlzLl9vdXRwdXREdWVFbmQ9dn1lbHNlIHRoaXMuX2R1ZUluZGV4PXRoaXMuX291dHB1dER1ZUVuZD1udWxsIT10aGlzLl9zZXR0ZWRPdXRwdXRFbmQ/dGhpcy5fc2V0dGVkT3V0cHV0RW5kOnRoaXMuX2R1ZUVuZDtyZXR1cm4gdGhpcy51bmZpbmlzaGVkKCl9O3ZhciBfdj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbj5pP2krKzpudWxsfWZ1bmN0aW9uIGUoKXt2YXIgdD1pJW8qcitNYXRoLmNlaWwoaS9vKSxlPWk+PW4/bnVsbDphPnQ/dDppO3JldHVybiBpKyssZX12YXIgbixpLHIsYSxvLHM9e3Jlc2V0OmZ1bmN0aW9uKGwsdSxoLGMpe2k9bCxuPXUscj1oLGE9YyxvPU1hdGguY2VpbChhL3IpLHMubmV4dD1yPjEmJmE+MD9lOnR9fTtyZXR1cm4gc30oKTt5di5kaXJ0eT1mdW5jdGlvbigpe3RoaXMuX2RpcnR5PSEwLHRoaXMuX29uRGlydHkmJnRoaXMuX29uRGlydHkodGhpcy5jb250ZXh0KX0seXYudW5maW5pc2hlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9ncmVzcyYmdGhpcy5fZHVlSW5kZXg8dGhpcy5fZHVlRW5kfSx5di5waXBlPWZ1bmN0aW9uKHQpeyh0aGlzLl9kb3duc3RyZWFtIT09dHx8dGhpcy5fZGlydHkpJiYodGhpcy5fZG93bnN0cmVhbT10LHQuX3Vwc3RyZWFtPXRoaXMsdC5kaXJ0eSgpKX0seXYuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuX2Rpc3Bvc2VkfHwodGhpcy5fdXBzdHJlYW0mJih0aGlzLl91cHN0cmVhbS5fZG93bnN0cmVhbT1udWxsKSx0aGlzLl9kb3duc3RyZWFtJiYodGhpcy5fZG93bnN0cmVhbS5fdXBzdHJlYW09bnVsbCksdGhpcy5fZGlydHk9ITEsdGhpcy5fZGlzcG9zZWQ9ITApfSx5di5nZXRVcHN0cmVhbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl91cHN0cmVhbX0seXYuZ2V0RG93bnN0cmVhbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9kb3duc3RyZWFtfSx5di5zZXRPdXRwdXRFbmQ9ZnVuY3Rpb24odCl7dGhpcy5fb3V0cHV0RHVlRW5kPXRoaXMuX3NldHRlZE91dHB1dEVuZD10fTt2YXIgeHY9VmkoKSx3dj1SZy5leHRlbmQoe3R5cGU6XCJzZXJpZXMuX19iYXNlX19cIixzZXJpZXNJbmRleDowLGNvb3JkaW5hdGVTeXN0ZW06bnVsbCxkZWZhdWx0T3B0aW9uOm51bGwsbGVnZW5kRGF0YVByb3ZpZGVyOm51bGwsdmlzdWFsQ29sb3JBY2Nlc3NQYXRoOlwiaXRlbVN0eWxlLmNvbG9yXCIsbGF5b3V0TW9kZTpudWxsLGluaXQ6ZnVuY3Rpb24odCxlLG4pe3RoaXMuc2VyaWVzSW5kZXg9dGhpcy5jb21wb25lbnRJbmRleCx0aGlzLmRhdGFUYXNrPWZzKHtjb3VudDpfcyxyZXNldDp4c30pLHRoaXMuZGF0YVRhc2suY29udGV4dD17bW9kZWw6dGhpc30sdGhpcy5tZXJnZURlZmF1bHRBbmRUaGVtZSh0LG4pLE1vKHRoaXMpO3ZhciBpPXRoaXMuZ2V0SW5pdGlhbERhdGEodCxuKTticyhpLHRoaXMpLHRoaXMuZGF0YVRhc2suY29udGV4dC5kYXRhPWkseHYodGhpcykuZGF0YUJlZm9yZVByb2Nlc3NlZD1pLG1zKHRoaXMpfSxtZXJnZURlZmF1bHRBbmRUaGVtZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubGF5b3V0TW9kZSxpPW4/Zm8odCk6e30sYT10aGlzLnN1YlR5cGU7UmcuaGFzQ2xhc3MoYSkmJihhKz1cIlNlcmllc1wiKSxyKHQsZS5nZXRUaGVtZSgpLmdldCh0aGlzLnN1YlR5cGUpKSxyKHQsdGhpcy5nZXREZWZhdWx0T3B0aW9uKCkpLExpKHQsXCJsYWJlbFwiLFtcInNob3dcIl0pLHRoaXMuZmlsbERhdGFUZXh0U3R5bGUodC5kYXRhKSxuJiZjbyh0LGksbil9LG1lcmdlT3B0aW9uOmZ1bmN0aW9uKHQsZSl7dD1yKHRoaXMub3B0aW9uLHQsITApLHRoaXMuZmlsbERhdGFUZXh0U3R5bGUodC5kYXRhKTt2YXIgbj10aGlzLmxheW91dE1vZGU7biYmY28odGhpcy5vcHRpb24sdCxuKSxNbyh0aGlzKTt2YXIgaT10aGlzLmdldEluaXRpYWxEYXRhKHQsZSk7YnMoaSx0aGlzKSx0aGlzLmRhdGFUYXNrLmRpcnR5KCksdGhpcy5kYXRhVGFzay5jb250ZXh0LmRhdGE9aSx4dih0aGlzKS5kYXRhQmVmb3JlUHJvY2Vzc2VkPWksbXModGhpcyl9LGZpbGxEYXRhVGV4dFN0eWxlOmZ1bmN0aW9uKHQpe2lmKHQmJiFDKHQpKWZvcih2YXIgZT1bXCJzaG93XCJdLG49MDtuPHQubGVuZ3RoO24rKyl0W25dJiZ0W25dLmxhYmVsJiZMaSh0W25dLFwibGFiZWxcIixlKX0sZ2V0SW5pdGlhbERhdGE6ZnVuY3Rpb24oKXt9LGFwcGVuZERhdGE6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRSYXdEYXRhKCk7ZS5hcHBlbmREYXRhKHQuZGF0YSl9LGdldERhdGE6ZnVuY3Rpb24odCl7dmFyIGU9U3ModGhpcyk7aWYoZSl7dmFyIG49ZS5jb250ZXh0LmRhdGE7cmV0dXJuIG51bGw9PXQ/bjpuLmdldExpbmtlZERhdGEodCl9cmV0dXJuIHh2KHRoaXMpLmRhdGF9LHNldERhdGE6ZnVuY3Rpb24odCl7dmFyIGU9U3ModGhpcyk7aWYoZSl7dmFyIG49ZS5jb250ZXh0O24uZGF0YSE9PXQmJmUubW9kaWZ5T3V0cHV0RW5kJiZlLnNldE91dHB1dEVuZCh0LmNvdW50KCkpLG4ub3V0cHV0RGF0YT10LGUhPT10aGlzLmRhdGFUYXNrJiYobi5kYXRhPXQpfXh2KHRoaXMpLmRhdGE9dH0sZ2V0U291cmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHdvKHRoaXMpfSxnZXRSYXdEYXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHh2KHRoaXMpLmRhdGFCZWZvcmVQcm9jZXNzZWR9LGdldEJhc2VBeGlzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jb29yZGluYXRlU3lzdGVtO3JldHVybiB0JiZ0LmdldEJhc2VBeGlzJiZ0LmdldEJhc2VBeGlzKCl9LGZvcm1hdFRvb2x0aXA6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKG4pe2Z1bmN0aW9uIGkodCxuKXt2YXIgaT1yLmdldERpbWVuc2lvbkluZm8obik7aWYoaSYmaS5vdGhlckRpbXMudG9vbHRpcCE9PSExKXt2YXIgYT1pLnR5cGUsbD1hbyh7Y29sb3I6dSx0eXBlOlwic3ViSXRlbVwifSksaD0obz9sK25vKGkuZGlzcGxheU5hbWV8fFwiLVwiKStcIjogXCI6XCJcIikrbm8oXCJvcmRpbmFsXCI9PT1hP3QrXCJcIjpcInRpbWVcIj09PWE/ZT9cIlwiOnNvKFwieXl5eS9NTS9kZCBoaDptbTpzc1wiLHQpOnRvKHQpKTtoJiZzLnB1c2goaCl9fXZhciBvPWcobixmdW5jdGlvbih0LGUsbil7dmFyIGk9ci5nZXREaW1lbnNpb25JbmZvKG4pO3JldHVybiB0fD1pJiZpLnRvb2x0aXAhPT0hMSYmbnVsbCE9aS5kaXNwbGF5TmFtZX0sMCkscz1bXTtyZXR1cm4gYS5sZW5ndGg/ZihhLGZ1bmN0aW9uKGUpe2koZHMocix0LGUpLGUpfSk6ZihuLGkpLChvP1wiPGJyLz5cIjpcIlwiKStzLmpvaW4obz9cIjxici8+XCI6XCIsIFwiKX1mdW5jdGlvbiBpKHQpe3JldHVybiBubyh0byh0KSl9dmFyIHI9dGhpcy5nZXREYXRhKCksYT1yLm1hcERpbWVuc2lvbihcImRlZmF1bHRlZFRvb2x0aXBcIiwhMCksbz1hLmxlbmd0aCxzPXRoaXMuZ2V0UmF3VmFsdWUodCksbD14KHMpLHU9ci5nZXRJdGVtVmlzdWFsKHQsXCJjb2xvclwiKTtNKHUpJiZ1LmNvbG9yU3RvcHMmJih1PSh1LmNvbG9yU3RvcHNbMF18fHt9KS5jb2xvciksdT11fHxcInRyYW5zcGFyZW50XCI7dmFyIGg9bz4xfHxsJiYhbz9uKHMpOmkobz9kcyhyLHQsYVswXSk6bD9zWzBdOnMpLGM9YW8odSksZD1yLmdldE5hbWUodCkscD10aGlzLm5hbWU7cmV0dXJuIHppKHRoaXMpfHwocD1cIlwiKSxwPXA/bm8ocCkrKGU/XCI6IFwiOlwiPGJyLz5cIik6XCJcIixlP2MrcCtoOnArYysoZD9ubyhkKStcIjogXCIraDpoKX0saXNBbmltYXRpb25FbmFibGVkOmZ1bmN0aW9uKCl7aWYoYmMubm9kZSlyZXR1cm4hMTt2YXIgdD10aGlzLmdldFNoYWxsb3coXCJhbmltYXRpb25cIik7cmV0dXJuIHQmJnRoaXMuZ2V0RGF0YSgpLmNvdW50KCk+dGhpcy5nZXRTaGFsbG93KFwiYW5pbWF0aW9uVGhyZXNob2xkXCIpJiYodD0hMSksdH0scmVzdG9yZURhdGE6ZnVuY3Rpb24oKXt0aGlzLmRhdGFUYXNrLmRpcnR5KCl9LGdldENvbG9yRnJvbVBhbGV0dGU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuZWNNb2RlbCxyPU5nLmdldENvbG9yRnJvbVBhbGV0dGUuY2FsbCh0aGlzLHQsZSxuKTtyZXR1cm4gcnx8KHI9aS5nZXRDb2xvckZyb21QYWxldHRlKHQsZSxuKSkscn0sY29vcmREaW1Ub0RhdGFEaW06ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0UmF3RGF0YSgpLm1hcERpbWVuc2lvbih0LCEwKX0sZ2V0UHJvZ3Jlc3NpdmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXQoXCJwcm9ncmVzc2l2ZVwiKX0sZ2V0UHJvZ3Jlc3NpdmVUaHJlc2hvbGQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXQoXCJwcm9ncmVzc2l2ZVRocmVzaG9sZFwiKX0sZ2V0QXhpc1Rvb2x0aXBEYXRhOm51bGwsZ2V0VG9vbHRpcFBvc2l0aW9uOm51bGwscGlwZVRhc2s6bnVsbCxwcmV2ZW50SW5jcmVtZW50YWw6bnVsbCxwaXBlbGluZUNvbnRleHQ6bnVsbH0pO2Mod3YsbXYpLGMod3YsTmcpO3ZhciBidj1mdW5jdGlvbigpe3RoaXMuZ3JvdXA9bmV3IENkLHRoaXMudWlkPU9hKFwidmlld0NvbXBvbmVudFwiKX07YnYucHJvdG90eXBlPXtjb25zdHJ1Y3Rvcjpidixpbml0OmZ1bmN0aW9uKCl7fSxyZW5kZXI6ZnVuY3Rpb24oKXt9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt9fTt2YXIgTXY9YnYucHJvdG90eXBlO012LnVwZGF0ZVZpZXc9TXYudXBkYXRlTGF5b3V0PU12LnVwZGF0ZVZpc3VhbD1mdW5jdGlvbigpe30sWGkoYnYpLEtpKGJ2LHtyZWdpc3RlcldoZW5FeHRlbmQ6ITB9KTt2YXIgU3Y9ZnVuY3Rpb24oKXt2YXIgdD1WaSgpO3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj10KGUpLGk9ZS5waXBlbGluZUNvbnRleHQscj1uLmxhcmdlLGE9bi5wcm9ncmVzc2l2ZVJlbmRlcixvPW4ubGFyZ2U9aS5sYXJnZSxzPW4ucHJvZ3Jlc3NpdmVSZW5kZXI9aS5wcm9ncmVzc2l2ZVJlbmRlcjtyZXR1cm4hIShyXm98fGFecykmJlwicmVzZXRcIn19LEN2PVZpKCksSXY9U3YoKTtDcy5wcm90b3R5cGU9e3R5cGU6XCJjaGFydFwiLGluaXQ6ZnVuY3Rpb24oKXt9LHJlbmRlcjpmdW5jdGlvbigpe30saGlnaGxpZ2h0OmZ1bmN0aW9uKHQsZSxuLGkpe1RzKHQuZ2V0RGF0YSgpLGksXCJlbXBoYXNpc1wiKX0sZG93bnBsYXk6ZnVuY3Rpb24odCxlLG4saSl7VHModC5nZXREYXRhKCksaSxcIm5vcm1hbFwiKX0scmVtb3ZlOmZ1bmN0aW9uKCl7dGhpcy5ncm91cC5yZW1vdmVBbGwoKX0sZGlzcG9zZTpmdW5jdGlvbigpe30saW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyOm51bGwsaW5jcmVtZW50YWxSZW5kZXI6bnVsbCx1cGRhdGVUcmFuc2Zvcm06bnVsbH07dmFyIFR2PUNzLnByb3RvdHlwZTtUdi51cGRhdGVWaWV3PVR2LnVwZGF0ZUxheW91dD1Udi51cGRhdGVWaXN1YWw9ZnVuY3Rpb24odCxlLG4saSl7dGhpcy5yZW5kZXIodCxlLG4saSl9LFhpKENzLFtcImRpc3Bvc2VcIl0pLEtpKENzLHtyZWdpc3RlcldoZW5FeHRlbmQ6ITB9KSxDcy5tYXJrVXBkYXRlTWV0aG9kPWZ1bmN0aW9uKHQsZSl7Q3YodCkudXBkYXRlTWV0aG9kPWV9O3ZhciBrdj17aW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyOntwcm9ncmVzczpmdW5jdGlvbih0LGUpe2Uudmlldy5pbmNyZW1lbnRhbFJlbmRlcih0LGUubW9kZWwsZS5lY01vZGVsLGUuYXBpLGUucGF5bG9hZCl9fSxyZW5kZXI6e2ZvcmNlRmlyc3RQcm9ncmVzczohMCxwcm9ncmVzczpmdW5jdGlvbih0LGUpe2Uudmlldy5yZW5kZXIoZS5tb2RlbCxlLmVjTW9kZWwsZS5hcGksZS5wYXlsb2FkKX19fSxEdj17Y3JlYXRlT25BbGxTZXJpZXM6ITAscGVyZm9ybVJhd1NlcmllczohMCxyZXNldDpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ2V0RGF0YSgpLGk9KHQudmlzdWFsQ29sb3JBY2Nlc3NQYXRofHxcIml0ZW1TdHlsZS5jb2xvclwiKS5zcGxpdChcIi5cIikscj10LmdldChpKXx8dC5nZXRDb2xvckZyb21QYWxldHRlKHQubmFtZSxudWxsLGUuZ2V0U2VyaWVzQ291bnQoKSk7aWYobi5zZXRWaXN1YWwoXCJjb2xvclwiLHIpLCFlLmlzU2VyaWVzRmlsdGVyZWQodCkpe1wiZnVuY3Rpb25cIiE9dHlwZW9mIHJ8fHIgaW5zdGFuY2VvZiBKcHx8bi5lYWNoKGZ1bmN0aW9uKGUpe24uc2V0SXRlbVZpc3VhbChlLFwiY29sb3JcIixyKHQuZ2V0RGF0YVBhcmFtcyhlKSkpfSk7dmFyIGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldEl0ZW1Nb2RlbChlKSxyPW4uZ2V0KGksITApO251bGwhPXImJnQuc2V0SXRlbVZpc3VhbChlLFwiY29sb3JcIixyKX07cmV0dXJue2RhdGFFYWNoOm4uaGFzSXRlbU9wdGlvbj9hOm51bGx9fX19LEF2PXt0b29sYm94OnticnVzaDp7dGl0bGU6e3JlY3Q6XCLnn6nlvaLpgInmi6lcIixwb2x5Z29uOlwi5ZyI6YCJXCIsbGluZVg6XCLmqKrlkJHpgInmi6lcIixsaW5lWTpcIue6teWQkemAieaLqVwiLGtlZXA6XCLkv53mjIHpgInmi6lcIixjbGVhcjpcIua4hemZpOmAieaLqVwifX0sZGF0YVZpZXc6e3RpdGxlOlwi5pWw5o2u6KeG5Zu+XCIsbGFuZzpbXCLmlbDmja7op4blm75cIixcIuWFs+mXrVwiLFwi5Yi35pawXCJdfSxkYXRhWm9vbTp7dGl0bGU6e3pvb206XCLljLrln5/nvKnmlL5cIixiYWNrOlwi5Yy65Z+f57yp5pS+6L+Y5Y6fXCJ9fSxtYWdpY1R5cGU6e3RpdGxlOntsaW5lOlwi5YiH5o2i5Li65oqY57q/5Zu+XCIsYmFyOlwi5YiH5o2i5Li65p+x54q25Zu+XCIsc3RhY2s6XCLliIfmjaLkuLrloIblj6BcIix0aWxlZDpcIuWIh+aNouS4uuW5s+mTulwifX0scmVzdG9yZTp7dGl0bGU6XCLov5jljp9cIn0sc2F2ZUFzSW1hZ2U6e3RpdGxlOlwi5L+d5a2Y5Li65Zu+54mHXCIsbGFuZzpbXCLlj7PplK7lj6blrZjkuLrlm77niYdcIl19fSxzZXJpZXM6e3R5cGVOYW1lczp7cGllOlwi6aW85Zu+XCIsYmFyOlwi5p+x54q25Zu+XCIsbGluZTpcIuaKmOe6v+WbvlwiLHNjYXR0ZXI6XCLmlaPngrnlm75cIixlZmZlY3RTY2F0dGVyOlwi5raf5ryq5pWj54K55Zu+XCIscmFkYXI6XCLpm7fovr7lm75cIix0cmVlOlwi5qCR5Zu+XCIsdHJlZW1hcDpcIuefqeW9ouagkeWbvlwiLGJveHBsb3Q6XCLnrrHlnovlm75cIixjYW5kbGVzdGljazpcIkvnur/lm75cIixrOlwiS+e6v+WbvlwiLGhlYXRtYXA6XCLng63lipvlm75cIixtYXA6XCLlnLDlm75cIixwYXJhbGxlbDpcIuW5s+ihjOWdkOagh+WbvlwiLGxpbmVzOlwi57q/5Zu+XCIsZ3JhcGg6XCLlhbPns7vlm75cIixzYW5rZXk6XCLmoZHln7rlm75cIixmdW5uZWw6XCLmvI/mlpflm75cIixnYXVnZTpcIuS7quihqOebmOWbvlwiLHBpY3RvcmlhbEJhcjpcIuixoeW9ouafseWbvlwiLHRoZW1lUml2ZXI6XCLkuLvpopjmsrPmtYHlm75cIixzdW5idXJzdDpcIuaXreaXpeWbvlwifX0sYXJpYTp7Z2VuZXJhbDp7d2l0aFRpdGxlOlwi6L+Z5piv5LiA5Liq5YWz5LqO4oCce3RpdGxlfeKAneeahOWbvuihqOOAglwiLHdpdGhvdXRUaXRsZTpcIui/meaYr+S4gOS4quWbvuihqO+8jFwifSxzZXJpZXM6e3NpbmdsZTp7cHJlZml4OlwiXCIsd2l0aE5hbWU6XCLlm77ooajnsbvlnovmmK97c2VyaWVzVHlwZX3vvIzooajnpLp7c2VyaWVzTmFtZX3jgIJcIix3aXRob3V0TmFtZTpcIuWbvuihqOexu+Wei+aYr3tzZXJpZXNUeXBlfeOAglwifSxtdWx0aXBsZTp7cHJlZml4Olwi5a6D55Sxe3Nlcmllc0NvdW50feS4quWbvuihqOezu+WIl+e7hOaIkOOAglwiLHdpdGhOYW1lOlwi56yse3Nlcmllc0lkfeS4quezu+WIl+aYr+S4gOS4quihqOekuntzZXJpZXNOYW1lfeeahHtzZXJpZXNUeXBlfe+8jFwiLHdpdGhvdXROYW1lOlwi56yse3Nlcmllc0lkfeS4quezu+WIl+aYr+S4gOS4qntzZXJpZXNUeXBlfe+8jFwiLHNlcGFyYXRvcjp7bWlkZGxlOlwi77ybXCIsZW5kOlwi44CCXCJ9fX0sZGF0YTp7YWxsRGF0YTpcIuWFtuaVsOaNruaYr+KAlOKAlFwiLHBhcnRpYWxEYXRhOlwi5YW25Lit77yM5YmNe2Rpc3BsYXlDbnR96aG55piv4oCU4oCUXCIsd2l0aE5hbWU6XCJ7bmFtZX3nmoTmlbDmja7mmK97dmFsdWV9XCIsd2l0aG91dE5hbWU6XCJ7dmFsdWV9XCIsc2VwYXJhdG9yOnttaWRkbGU6XCLvvIxcIixlbmQ6XCJcIn19fX0sUHY9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIHQ7dmFyIG49dDtyZXR1cm4gZihlLGZ1bmN0aW9uKHQsZSl7bj1uLnJlcGxhY2UobmV3IFJlZ0V4cChcIlxcXFx7XFxcXHMqXCIrZStcIlxcXFxzKlxcXFx9XCIsXCJnXCIpLHQpfSksbn1mdW5jdGlvbiBpKHQpe3ZhciBlPW8uZ2V0KHQpO2lmKG51bGw9PWUpe2Zvcih2YXIgbj10LnNwbGl0KFwiLlwiKSxpPUF2LmFyaWEscj0wO3I8bi5sZW5ndGg7KytyKWk9aVtuW3JdXTtyZXR1cm4gaX1yZXR1cm4gZX1mdW5jdGlvbiByKCl7dmFyIHQ9ZS5nZXRNb2RlbChcInRpdGxlXCIpLm9wdGlvbjtyZXR1cm4gdCYmdC5sZW5ndGgmJih0PXRbMF0pLHQmJnQudGV4dH1mdW5jdGlvbiBhKHQpe3JldHVybiBBdi5zZXJpZXMudHlwZU5hbWVzW3RdfHxcIuiHquWumuS5ieWbvlwifXZhciBvPWUuZ2V0TW9kZWwoXCJhcmlhXCIpO2lmKG8uZ2V0KFwic2hvd1wiKSl7aWYoby5nZXQoXCJkZXNjcmlwdGlvblwiKSlyZXR1cm4gdm9pZCB0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIixvLmdldChcImRlc2NyaXB0aW9uXCIpKTt2YXIgcz0wO2UuZWFjaFNlcmllcyhmdW5jdGlvbigpeysrc30sdGhpcyk7dmFyIGwsdT1vLmdldChcImRhdGEubWF4Q291bnRcIil8fDEwLGg9by5nZXQoXCJzZXJpZXMubWF4Q291bnRcIil8fDEwLGM9TWF0aC5taW4ocyxoKTtpZighKDE+cykpe3ZhciBkPXIoKTtsPWQ/bihpKFwiZ2VuZXJhbC53aXRoVGl0bGVcIikse3RpdGxlOmR9KTppKFwiZ2VuZXJhbC53aXRob3V0VGl0bGVcIik7dmFyIHA9W10sZz1zPjE/XCJzZXJpZXMubXVsdGlwbGUucHJlZml4XCI6XCJzZXJpZXMuc2luZ2xlLnByZWZpeFwiO2wrPW4oaShnKSx7c2VyaWVzQ291bnQ6c30pLGUuZWFjaFNlcmllcyhmdW5jdGlvbih0LGUpe2lmKGM+ZSl7dmFyIHIsbz10LmdldChcIm5hbWVcIiksbD1cInNlcmllcy5cIisocz4xP1wibXVsdGlwbGVcIjpcInNpbmdsZVwiKStcIi5cIjtyPWkobz9sK1wid2l0aE5hbWVcIjpsK1wid2l0aG91dE5hbWVcIikscj1uKHIse3Nlcmllc0lkOnQuc2VyaWVzSW5kZXgsc2VyaWVzTmFtZTp0LmdldChcIm5hbWVcIiksc2VyaWVzVHlwZTphKHQuc3ViVHlwZSl9KTt2YXIgaD10LmdldERhdGEoKTt3aW5kb3cuZGF0YT1oLHIrPWguY291bnQoKT51P24oaShcImRhdGEucGFydGlhbERhdGFcIikse2Rpc3BsYXlDbnQ6dX0pOmkoXCJkYXRhLmFsbERhdGFcIik7Zm9yKHZhciBkPVtdLGY9MDtmPGguY291bnQoKTtmKyspaWYodT5mKXt2YXIgZz1oLmdldE5hbWUoZiksdj1kcyhoLGYpO2QucHVzaChuKGkoZz9cImRhdGEud2l0aE5hbWVcIjpcImRhdGEud2l0aG91dE5hbWVcIikse25hbWU6Zyx2YWx1ZTp2fSkpfXIrPWQuam9pbihpKFwiZGF0YS5zZXBhcmF0b3IubWlkZGxlXCIpKStpKFwiZGF0YS5zZXBhcmF0b3IuZW5kXCIpLHAucHVzaChyKX19KSxsKz1wLmpvaW4oaShcInNlcmllcy5tdWx0aXBsZS5zZXBhcmF0b3IubWlkZGxlXCIpKStpKFwic2VyaWVzLm11bHRpcGxlLnNlcGFyYXRvci5lbmRcIiksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsbCl9fX0sTHY9TWF0aC5QSSxPdj1mdW5jdGlvbih0LGUpe2U9ZXx8e30scyhlLHt0ZXh0OlwibG9hZGluZ1wiLGNvbG9yOlwiI2MyMzUzMVwiLHRleHRDb2xvcjpcIiMwMDBcIixtYXNrQ29sb3I6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOClcIix6bGV2ZWw6MH0pO3ZhciBuPW5ldyBYcCh7c3R5bGU6e2ZpbGw6ZS5tYXNrQ29sb3J9LHpsZXZlbDplLnpsZXZlbCx6OjFlNH0pLGk9bmV3IEtwKHtzaGFwZTp7c3RhcnRBbmdsZTotTHYvMixlbmRBbmdsZTotTHYvMisuMSxyOjEwfSxzdHlsZTp7c3Ryb2tlOmUuY29sb3IsbGluZUNhcDpcInJvdW5kXCIsbGluZVdpZHRoOjV9LHpsZXZlbDplLnpsZXZlbCx6OjEwMDAxfSkscj1uZXcgWHAoe3N0eWxlOntmaWxsOlwibm9uZVwiLHRleHQ6ZS50ZXh0LHRleHRQb3NpdGlvbjpcInJpZ2h0XCIsdGV4dERpc3RhbmNlOjEwLHRleHRGaWxsOmUudGV4dENvbG9yfSx6bGV2ZWw6ZS56bGV2ZWwsejoxMDAwMX0pO2kuYW5pbWF0ZVNoYXBlKCEwKS53aGVuKDFlMyx7ZW5kQW5nbGU6MypMdi8yfSkuc3RhcnQoXCJjaXJjdWxhckluT3V0XCIpLGkuYW5pbWF0ZVNoYXBlKCEwKS53aGVuKDFlMyx7c3RhcnRBbmdsZTozKkx2LzJ9KS5kZWxheSgzMDApLnN0YXJ0KFwiY2lyY3VsYXJJbk91dFwiKTt2YXIgYT1uZXcgQ2Q7cmV0dXJuIGEuYWRkKGkpLGEuYWRkKHIpLGEuYWRkKG4pLGEucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGU9dC5nZXRXaWR0aCgpLzIsYT10LmdldEhlaWdodCgpLzI7aS5zZXRTaGFwZSh7Y3g6ZSxjeTphfSk7dmFyIG89aS5zaGFwZS5yO3Iuc2V0U2hhcGUoe3g6ZS1vLHk6YS1vLHdpZHRoOjIqbyxoZWlnaHQ6MipvfSksbi5zZXRTaGFwZSh7eDowLHk6MCx3aWR0aDp0LmdldFdpZHRoKCksaGVpZ2h0OnQuZ2V0SGVpZ2h0KCl9KX0sYS5yZXNpemUoKSxhfSxSdj1Qcy5wcm90b3R5cGU7UnYucmVzdG9yZURhdGE9ZnVuY3Rpb24odCxlKXt0LnJlc3RvcmVEYXRhKGUpLHRoaXMuX3N0YWdlVGFza01hcC5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXQub3ZlcmFsbFRhc2s7ZSYmZS5kaXJ0eSgpfSl9LFJ2LmdldFBlcmZvcm1BcmdzPWZ1bmN0aW9uKHQsZSl7aWYodC5fX3BpcGVsaW5lKXt2YXIgbj10aGlzLl9waXBlbGluZU1hcC5nZXQodC5fX3BpcGVsaW5lLmlkKSxpPW4uY29udGV4dCxyPSFlJiZuLnByb2dyZXNzaXZlRW5hYmxlZCYmKCFpfHxpLnByb2dyZXNzaXZlUmVuZGVyKSYmdC5fX2lkeEluUGlwZWxpbmU+bi5ibG9ja0luZGV4LGE9cj9uLnN0ZXA6bnVsbCxvPWkmJmkubW9kRGF0YUNvdW50LHM9bnVsbCE9bz9NYXRoLmNlaWwoby9hKTpudWxsO3JldHVybntzdGVwOmEsbW9kQnk6cyxtb2REYXRhQ291bnQ6b319fSxSdi5nZXRQaXBlbGluZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcGlwZWxpbmVNYXAuZ2V0KHQpfSxSdi51cGRhdGVTdHJlYW1Nb2Rlcz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX3BpcGVsaW5lTWFwLmdldCh0LnVpZCksaT10LmdldERhdGEoKSxyPWkuY291bnQoKSxhPW4ucHJvZ3Jlc3NpdmVFbmFibGVkJiZlLmluY3JlbWVudGFsUHJlcGFyZVJlbmRlciYmcj49bi50aHJlc2hvbGQsbz10LmdldChcImxhcmdlXCIpJiZyPj10LmdldChcImxhcmdlVGhyZXNob2xkXCIpLHM9XCJtb2RcIj09PXQuZ2V0KFwicHJvZ3Jlc3NpdmVDaHVua01vZGVcIik/cjpudWxsO3QucGlwZWxpbmVDb250ZXh0PW4uY29udGV4dD17cHJvZ3Jlc3NpdmVSZW5kZXI6YSxtb2REYXRhQ291bnQ6cyxsYXJnZTpvfX0sUnYucmVzdG9yZVBpcGVsaW5lcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ZS5fcGlwZWxpbmVNYXA9TigpO3QuZWFjaFNlcmllcyhmdW5jdGlvbih0KXt2YXIgaT10LmdldFByb2dyZXNzaXZlKCkscj10LnVpZDtuLnNldChyLHtpZDpyLGhlYWQ6bnVsbCx0YWlsOm51bGwsdGhyZXNob2xkOnQuZ2V0UHJvZ3Jlc3NpdmVUaHJlc2hvbGQoKSxwcm9ncmVzc2l2ZUVuYWJsZWQ6aSYmISh0LnByZXZlbnRJbmNyZW1lbnRhbCYmdC5wcmV2ZW50SW5jcmVtZW50YWwoKSksYmxvY2tJbmRleDotMSxzdGVwOk1hdGgucm91bmQoaXx8NzAwKSxjb3VudDowfSksV3MoZSx0LHQuZGF0YVRhc2spfSl9LFJ2LnByZXBhcmVTdGFnZVRhc2tzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fc3RhZ2VUYXNrTWFwLGU9dGhpcy5lY0luc3RhbmNlLmdldE1vZGVsKCksbj10aGlzLmFwaTtmKHRoaXMuX2FsbEhhbmRsZXJzLGZ1bmN0aW9uKGkpe3ZhciByPXQuZ2V0KGkudWlkKXx8dC5zZXQoaS51aWQsW10pO2kucmVzZXQmJk9zKHRoaXMsaSxyLGUsbiksaS5vdmVyYWxsUmVzZXQmJlJzKHRoaXMsaSxyLGUsbil9LHRoaXMpfSxSdi5wcmVwYXJlVmlldz1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj10LnJlbmRlclRhc2ssYT1yLmNvbnRleHQ7YS5tb2RlbD1lLGEuZWNNb2RlbD1uLGEuYXBpPWksci5fX2Jsb2NrPSF0LmluY3JlbWVudGFsUHJlcGFyZVJlbmRlcixXcyh0aGlzLGUscil9LFJ2LnBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3M9ZnVuY3Rpb24odCxlKXtMcyh0aGlzLHRoaXMuX2RhdGFQcm9jZXNzb3JIYW5kbGVycyx0LGUse2Jsb2NrOiEwfSl9LFJ2LnBlcmZvcm1WaXN1YWxUYXNrcz1mdW5jdGlvbih0LGUsbil7THModGhpcyx0aGlzLl92aXN1YWxIYW5kbGVycyx0LGUsbil9LFJ2LnBlcmZvcm1TZXJpZXNUYXNrcz1mdW5jdGlvbih0KXt2YXIgZTt0LmVhY2hTZXJpZXMoZnVuY3Rpb24odCl7ZXw9dC5kYXRhVGFzay5wZXJmb3JtKCl9KSx0aGlzLnVuZmluaXNoZWR8PWV9LFJ2LnBsYW49ZnVuY3Rpb24oKXt0aGlzLl9waXBlbGluZU1hcC5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXQudGFpbDtkb3tpZihlLl9fYmxvY2spe3QuYmxvY2tJbmRleD1lLl9faWR4SW5QaXBlbGluZTticmVha31lPWUuZ2V0VXBzdHJlYW0oKX13aGlsZShlKX0pfTt2YXIgRXY9UnYudXBkYXRlUGF5bG9hZD1mdW5jdGlvbih0LGUpe1wicmVtYWluXCIhPT1lJiYodC5jb250ZXh0LnBheWxvYWQ9ZSl9LEJ2PUdzKDApO1BzLndyYXBTdGFnZUhhbmRsZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdyh0KSYmKHQ9e292ZXJhbGxSZXNldDp0LHNlcmllc1R5cGU6anModCl9KSx0LnVpZD1PYShcInN0YWdlSGFuZGxlclwiKSxlJiYodC52aXN1YWxUeXBlPWUpLHR9O3ZhciB6dixOdj17fSxGdj17fTtxcyhOdiwkZykscXMoRnYsRm8pLE52LmVhY2hTZXJpZXNCeVR5cGU9TnYuZWFjaFJhd1Nlcmllc0J5VHlwZT1mdW5jdGlvbih0KXt6dj10fSxOdi5lYWNoQ29tcG9uZW50PWZ1bmN0aW9uKHQpe1wic2VyaWVzXCI9PT10Lm1haW5UeXBlJiZ0LnN1YlR5cGUmJih6dj10LnN1YlR5cGUpfTt2YXIgVnY9W1wiIzM3QTJEQVwiLFwiIzMyQzVFOVwiLFwiIzY3RTBFM1wiLFwiIzlGRTZCOFwiLFwiI0ZGREI1Q1wiLFwiI2ZmOWY3ZlwiLFwiI2ZiNzI5M1wiLFwiI0UwNjJBRVwiLFwiI0U2OTBEMVwiLFwiI2U3YmNmM1wiLFwiIzlkOTZmNVwiLFwiIzgzNzhFQVwiLFwiIzk2QkZGRlwiXSxHdj17Y29sb3I6VnYsY29sb3JMYXllcjpbW1wiIzM3QTJEQVwiLFwiI2ZmZDg1Y1wiLFwiI2ZkN2I1ZlwiXSxbXCIjMzdBMkRBXCIsXCIjNjdFMEUzXCIsXCIjRkZEQjVDXCIsXCIjZmY5ZjdmXCIsXCIjRTA2MkFFXCIsXCIjOWQ5NmY1XCJdLFtcIiMzN0EyREFcIixcIiMzMkM1RTlcIixcIiM5RkU2QjhcIixcIiNGRkRCNUNcIixcIiNmZjlmN2ZcIixcIiNmYjcyOTNcIixcIiNlN2JjZjNcIixcIiM4Mzc4RUFcIixcIiM5NkJGRkZcIl0sVnZdfSxIdj1cIiNlZWVcIixXdj1mdW5jdGlvbigpe3JldHVybntheGlzTGluZTp7bGluZVN0eWxlOntjb2xvcjpIdn19LGF4aXNUaWNrOntsaW5lU3R5bGU6e2NvbG9yOkh2fX0sYXhpc0xhYmVsOnt0ZXh0U3R5bGU6e2NvbG9yOkh2fX0sc3BsaXRMaW5lOntsaW5lU3R5bGU6e3R5cGU6XCJkYXNoZWRcIixjb2xvcjpcIiNhYWFcIn19LHNwbGl0QXJlYTp7YXJlYVN0eWxlOntjb2xvcjpIdn19fX0sanY9W1wiI2RkNmI2NlwiLFwiIzc1OWFhMFwiLFwiI2U2OWQ4N1wiLFwiIzhkYzFhOVwiLFwiI2VhN2U1M1wiLFwiI2VlZGQ3OFwiLFwiIzczYTM3M1wiLFwiIzczYjliY1wiLFwiIzcyODlhYlwiLFwiIzkxY2E4Y1wiLFwiI2Y0OWY0MlwiXSxxdj17Y29sb3I6anYsYmFja2dyb3VuZENvbG9yOlwiIzMzM1wiLHRvb2x0aXA6e2F4aXNQb2ludGVyOntsaW5lU3R5bGU6e2NvbG9yOkh2fSxjcm9zc1N0eWxlOntjb2xvcjpIdn19fSxsZWdlbmQ6e3RleHRTdHlsZTp7Y29sb3I6SHZ9fSx0ZXh0U3R5bGU6e2NvbG9yOkh2fSx0aXRsZTp7dGV4dFN0eWxlOntjb2xvcjpIdn19LHRvb2xib3g6e2ljb25TdHlsZTp7bm9ybWFsOntib3JkZXJDb2xvcjpIdn19fSxkYXRhWm9vbTp7dGV4dFN0eWxlOntjb2xvcjpIdn19LHZpc3VhbE1hcDp7dGV4dFN0eWxlOntjb2xvcjpIdn19LHRpbWVsaW5lOntsaW5lU3R5bGU6e2NvbG9yOkh2fSxpdGVtU3R5bGU6e25vcm1hbDp7Y29sb3I6anZbMV19fSxsYWJlbDp7bm9ybWFsOnt0ZXh0U3R5bGU6e2NvbG9yOkh2fX19LGNvbnRyb2xTdHlsZTp7bm9ybWFsOntjb2xvcjpIdixib3JkZXJDb2xvcjpIdn19fSx0aW1lQXhpczpXdigpLGxvZ0F4aXM6V3YoKSx2YWx1ZUF4aXM6V3YoKSxjYXRlZ29yeUF4aXM6V3YoKSxsaW5lOntzeW1ib2w6XCJjaXJjbGVcIn0sZ3JhcGg6e2NvbG9yOmp2fSxnYXVnZTp7dGl0bGU6e3RleHRTdHlsZTp7Y29sb3I6SHZ9fX0sY2FuZGxlc3RpY2s6e2l0ZW1TdHlsZTp7bm9ybWFsOntjb2xvcjpcIiNGRDEwNTBcIixjb2xvcjA6XCIjMENGNDlCXCIsYm9yZGVyQ29sb3I6XCIjRkQxMDUwXCIsYm9yZGVyQ29sb3IwOlwiIzBDRjQ5QlwifX19fTtxdi5jYXRlZ29yeUF4aXMuc3BsaXRMaW5lLnNob3c9ITEsUmcuZXh0ZW5kKHt0eXBlOlwiZGF0YXNldFwiLGRlZmF1bHRPcHRpb246e3Nlcmllc0xheW91dEJ5OlVnLHNvdXJjZUhlYWRlcjpudWxsLGRpbWVuc2lvbnM6bnVsbCxzb3VyY2U6bnVsbH0sb3B0aW9uVXBkYXRlZDpmdW5jdGlvbigpe3hvKHRoaXMpfX0pLGJ2LmV4dGVuZCh7dHlwZTpcImRhdGFzZXRcIn0pO3ZhciBVdj1PLFh2PWYsWXY9dyxadj1NLCR2PVJnLnBhcnNlQ2xhc3NUeXBlLEt2PVwiNC4xLjBcIixRdj17enJlbmRlcjpcIjQuMC40XCJ9LEp2PTEsdG09MWUzLGVtPTVlMyxubT0xZTMsaW09MmUzLHJtPTNlMyxhbT00ZTMsb209NWUzLHNtPXtQUk9DRVNTT1I6e0ZJTFRFUjp0bSxTVEFUSVNUSUM6ZW19LFZJU1VBTDp7TEFZT1VUOm5tLEdMT0JBTDppbSxDSEFSVDpybSxDT01QT05FTlQ6YW0sQlJVU0g6b219fSxsbT1cIl9fZmxhZ0luTWFpblByb2Nlc3NcIix1bT1cIl9fb3B0aW9uVXBkYXRlZFwiLGhtPS9eW2EtekEtWjAtOV9dKyQvO1hzLnByb3RvdHlwZS5vbj1VcyhcIm9uXCIpLFhzLnByb3RvdHlwZS5vZmY9VXMoXCJvZmZcIiksWHMucHJvdG90eXBlLm9uZT1VcyhcIm9uZVwiKSxjKFhzLGpjKTt2YXIgY209WXMucHJvdG90eXBlO2NtLl9vbmZyYW1lPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2Rpc3Bvc2VkKXt2YXIgdD10aGlzLl9zY2hlZHVsZXI7aWYodGhpc1t1bV0pe3ZhciBlPXRoaXNbdW1dLnNpbGVudDt0aGlzW2xtXT0hMCwkcyh0aGlzKSxkbS51cGRhdGUuY2FsbCh0aGlzKSx0aGlzW2xtXT0hMSx0aGlzW3VtXT0hMSx0bC5jYWxsKHRoaXMsZSksZWwuY2FsbCh0aGlzLGUpfWVsc2UgaWYodC51bmZpbmlzaGVkKXt2YXIgbj1KdixpPXRoaXMuX21vZGVsLHI9dGhpcy5fYXBpO3QudW5maW5pc2hlZD0hMTtkb3t2YXIgYT0rbmV3IERhdGU7dC5wZXJmb3JtU2VyaWVzVGFza3MoaSksdC5wZXJmb3JtRGF0YVByb2Nlc3NvclRhc2tzKGkpLFFzKHRoaXMsaSksdC5wZXJmb3JtVmlzdWFsVGFza3MoaSksc2wodGhpcyx0aGlzLl9tb2RlbCxyLFwicmVtYWluXCIpLG4tPStuZXcgRGF0ZS1hfXdoaWxlKG4+MCYmdC51bmZpbmlzaGVkKTt0LnVuZmluaXNoZWR8fHRoaXMuX3pyLmZsdXNoKCl9fX0sY20uZ2V0RG9tPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RvbX0sY20uZ2V0WnI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fenJ9LGNtLnNldE9wdGlvbj1mdW5jdGlvbih0LGUsbil7dmFyIGk7aWYoWnYoZSkmJihuPWUubGF6eVVwZGF0ZSxpPWUuc2lsZW50LGU9ZS5ub3RNZXJnZSksdGhpc1tsbV09ITAsIXRoaXMuX21vZGVsfHxlKXt2YXIgcj1uZXcgR28odGhpcy5fYXBpKSxhPXRoaXMuX3RoZW1lLG89dGhpcy5fbW9kZWw9bmV3ICRnKG51bGwsbnVsbCxhLHIpO28uc2NoZWR1bGVyPXRoaXMuX3NjaGVkdWxlcixvLmluaXQobnVsbCxudWxsLGEscil9dGhpcy5fbW9kZWwuc2V0T3B0aW9uKHQsbW0pLG4/KHRoaXNbdW1dPXtzaWxlbnQ6aX0sdGhpc1tsbV09ITEpOigkcyh0aGlzKSxkbS51cGRhdGUuY2FsbCh0aGlzKSx0aGlzLl96ci5mbHVzaCgpLHRoaXNbdW1dPSExLHRoaXNbbG1dPSExLHRsLmNhbGwodGhpcyxpKSxlbC5jYWxsKHRoaXMsaSkpfSxjbS5zZXRUaGVtZT1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiRUNoYXJ0cyNzZXRUaGVtZSgpIGlzIERFUFJFQ0FURUQgaW4gRUNoYXJ0cyAzLjBcIil9LGNtLmdldE1vZGVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21vZGVsfSxjbS5nZXRPcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW9kZWwmJnRoaXMuX21vZGVsLmdldE9wdGlvbigpfSxjbS5nZXRXaWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl96ci5nZXRXaWR0aCgpfSxjbS5nZXRIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fenIuZ2V0SGVpZ2h0KCl9LGNtLmdldERldmljZVBpeGVsUmF0aW89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fenIucGFpbnRlci5kcHJ8fHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHwxfSxjbS5nZXRSZW5kZXJlZENhbnZhcz1mdW5jdGlvbih0KXtpZihiYy5jYW52YXNTdXBwb3J0ZWQpe3Q9dHx8e30sdC5waXhlbFJhdGlvPXQucGl4ZWxSYXRpb3x8MSx0LmJhY2tncm91bmRDb2xvcj10LmJhY2tncm91bmRDb2xvcnx8dGhpcy5fbW9kZWwuZ2V0KFwiYmFja2dyb3VuZENvbG9yXCIpO3ZhciBlPXRoaXMuX3pyO3JldHVybiBlLnBhaW50ZXIuZ2V0UmVuZGVyZWRDYW52YXModCl9fSxjbS5nZXRTdmdEYXRhVXJsPWZ1bmN0aW9uKCl7aWYoYmMuc3ZnU3VwcG9ydGVkKXt2YXIgdD10aGlzLl96cixlPXQuc3RvcmFnZS5nZXREaXNwbGF5TGlzdCgpO3JldHVybiBmKGUsZnVuY3Rpb24odCl7dC5zdG9wQW5pbWF0aW9uKCEwKX0pLHQucGFpbnRlci5wYXRoVG9EYXRhVXJsKCl9fSxjbS5nZXREYXRhVVJMPWZ1bmN0aW9uKHQpe3Q9dHx8e307dmFyIGU9dC5leGNsdWRlQ29tcG9uZW50cyxuPXRoaXMuX21vZGVsLGk9W10scj10aGlzO1h2KGUsZnVuY3Rpb24odCl7bi5lYWNoQ29tcG9uZW50KHttYWluVHlwZTp0fSxmdW5jdGlvbih0KXt2YXIgZT1yLl9jb21wb25lbnRzTWFwW3QuX192aWV3SWRdO2UuZ3JvdXAuaWdub3JlfHwoaS5wdXNoKGUpLGUuZ3JvdXAuaWdub3JlPSEwKX0pfSk7dmFyIGE9XCJzdmdcIj09PXRoaXMuX3pyLnBhaW50ZXIuZ2V0VHlwZSgpP3RoaXMuZ2V0U3ZnRGF0YVVybCgpOnRoaXMuZ2V0UmVuZGVyZWRDYW52YXModCkudG9EYXRhVVJMKFwiaW1hZ2UvXCIrKHQmJnQudHlwZXx8XCJwbmdcIikpO3JldHVybiBYdihpLGZ1bmN0aW9uKHQpe3QuZ3JvdXAuaWdub3JlPSExfSksYX0sY20uZ2V0Q29ubmVjdGVkRGF0YVVSTD1mdW5jdGlvbih0KXtpZihiYy5jYW52YXNTdXBwb3J0ZWQpe3ZhciBlPXRoaXMuZ3JvdXAsbj1NYXRoLm1pbixyPU1hdGgubWF4LGE9MS8wO2lmKE1tW2VdKXt2YXIgbz1hLHM9YSxsPS1hLHU9LWEsaD1bXSxjPXQmJnQucGl4ZWxSYXRpb3x8MTtmKGJtLGZ1bmN0aW9uKGEpe2lmKGEuZ3JvdXA9PT1lKXt2YXIgYz1hLmdldFJlbmRlcmVkQ2FudmFzKGkodCkpLGQ9YS5nZXREb20oKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtvPW4oZC5sZWZ0LG8pLHM9bihkLnRvcCxzKSxsPXIoZC5yaWdodCxsKSx1PXIoZC5ib3R0b20sdSksaC5wdXNoKHtkb206YyxsZWZ0OmQubGVmdCx0b3A6ZC50b3B9KX19KSxvKj1jLHMqPWMsbCo9Yyx1Kj1jO3ZhciBkPWwtbyxwPXUtcyxnPU9jKCk7Zy53aWR0aD1kLGcuaGVpZ2h0PXA7dmFyIHY9SWkoZyk7cmV0dXJuIFh2KGgsZnVuY3Rpb24odCl7dmFyIGU9bmV3IGFpKHtzdHlsZTp7eDp0LmxlZnQqYy1vLHk6dC50b3AqYy1zLGltYWdlOnQuZG9tfX0pO3YuYWRkKGUpfSksdi5yZWZyZXNoSW1tZWRpYXRlbHkoKSxnLnRvRGF0YVVSTChcImltYWdlL1wiKyh0JiZ0LnR5cGV8fFwicG5nXCIpKX1yZXR1cm4gdGhpcy5nZXREYXRhVVJMKHQpfX0sY20uY29udmVydFRvUGl4ZWw9XyhacyxcImNvbnZlcnRUb1BpeGVsXCIpLGNtLmNvbnZlcnRGcm9tUGl4ZWw9XyhacyxcImNvbnZlcnRGcm9tUGl4ZWxcIiksY20uY29udGFpblBpeGVsPWZ1bmN0aW9uKHQsZSl7dmFyIG4saT10aGlzLl9tb2RlbDtyZXR1cm4gdD1HaShpLHQpLGYodCxmdW5jdGlvbih0LGkpe2kuaW5kZXhPZihcIk1vZGVsc1wiKT49MCYmZih0LGZ1bmN0aW9uKHQpe3ZhciByPXQuY29vcmRpbmF0ZVN5c3RlbTtpZihyJiZyLmNvbnRhaW5Qb2ludClufD0hIXIuY29udGFpblBvaW50KGUpO2Vsc2UgaWYoXCJzZXJpZXNNb2RlbHNcIj09PWkpe3ZhciBhPXRoaXMuX2NoYXJ0c01hcFt0Ll9fdmlld0lkXTthJiZhLmNvbnRhaW5Qb2ludCYmKG58PWEuY29udGFpblBvaW50KGUsdCkpfX0sdGhpcyl9LHRoaXMpLCEhbn0sY20uZ2V0VmlzdWFsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fbW9kZWw7dD1HaShuLHQse2RlZmF1bHRNYWluVHlwZTpcInNlcmllc1wifSk7dmFyIGk9dC5zZXJpZXNNb2RlbCxyPWkuZ2V0RGF0YSgpLGE9dC5oYXNPd25Qcm9wZXJ0eShcImRhdGFJbmRleEluc2lkZVwiKT90LmRhdGFJbmRleEluc2lkZTp0Lmhhc093blByb3BlcnR5KFwiZGF0YUluZGV4XCIpP3IuaW5kZXhPZlJhd0luZGV4KHQuZGF0YUluZGV4KTpudWxsO3JldHVybiBudWxsIT1hP3IuZ2V0SXRlbVZpc3VhbChhLGUpOnIuZ2V0VmlzdWFsKGUpfSxjbS5nZXRWaWV3T2ZDb21wb25lbnRNb2RlbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fY29tcG9uZW50c01hcFt0Ll9fdmlld0lkXX0sY20uZ2V0Vmlld09mU2VyaWVzTW9kZWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2NoYXJ0c01hcFt0Ll9fdmlld0lkXX07dmFyIGRtPXtwcmVwYXJlQW5kVXBkYXRlOmZ1bmN0aW9uKHQpeyRzKHRoaXMpLGRtLnVwZGF0ZS5jYWxsKHRoaXMsdCl9LHVwZGF0ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9tb2RlbCxuPXRoaXMuX2FwaSxpPXRoaXMuX3pyLHI9dGhpcy5fY29vcmRTeXNNZ3IsYT10aGlzLl9zY2hlZHVsZXI7aWYoZSl7YS5yZXN0b3JlRGF0YShlLHQpLGEucGVyZm9ybVNlcmllc1Rhc2tzKGUpLHIuY3JlYXRlKGUsbiksYS5wZXJmb3JtRGF0YVByb2Nlc3NvclRhc2tzKGUsdCksUXModGhpcyxlKSxyLnVwZGF0ZShlLG4pLHJsKGUpLGEucGVyZm9ybVZpc3VhbFRhc2tzKGUsdCksYWwodGhpcyxlLG4sdCk7dmFyIG89ZS5nZXQoXCJiYWNrZ3JvdW5kQ29sb3JcIil8fFwidHJhbnNwYXJlbnRcIjtpZihiYy5jYW52YXNTdXBwb3J0ZWQpaS5zZXRCYWNrZ3JvdW5kQ29sb3Iobyk7ZWxzZXt2YXIgcz1SZShvKTtvPVdlKHMsXCJyZ2JcIiksMD09PXNbM10mJihvPVwidHJhbnNwYXJlbnRcIil9bGwoZSxuKX19LHVwZGF0ZVRyYW5zZm9ybTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9tb2RlbCxuPXRoaXMsaT10aGlzLl9hcGk7aWYoZSl7dmFyIHI9W107ZS5lYWNoQ29tcG9uZW50KGZ1bmN0aW9uKGEsbyl7dmFyIHM9bi5nZXRWaWV3T2ZDb21wb25lbnRNb2RlbChvKTtpZihzJiZzLl9fYWxpdmUpaWYocy51cGRhdGVUcmFuc2Zvcm0pe3ZhciBsPXMudXBkYXRlVHJhbnNmb3JtKG8sZSxpLHQpO2wmJmwudXBkYXRlJiZyLnB1c2gocyl9ZWxzZSByLnB1c2gocyl9KTt2YXIgYT1OKCk7ZS5lYWNoU2VyaWVzKGZ1bmN0aW9uKHIpe3ZhciBvPW4uX2NoYXJ0c01hcFtyLl9fdmlld0lkXTtpZihvLnVwZGF0ZVRyYW5zZm9ybSl7dmFyIHM9by51cGRhdGVUcmFuc2Zvcm0ocixlLGksdCk7cyYmcy51cGRhdGUmJmEuc2V0KHIudWlkLDEpfWVsc2UgYS5zZXQoci51aWQsMSl9KSxybChlKSx0aGlzLl9zY2hlZHVsZXIucGVyZm9ybVZpc3VhbFRhc2tzKGUsdCx7c2V0RGlydHk6ITAsZGlydHlNYXA6YX0pLHNsKG4sZSxpLHQsYSksbGwoZSx0aGlzLl9hcGkpfX0sdXBkYXRlVmlldzpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9tb2RlbDtlJiYoQ3MubWFya1VwZGF0ZU1ldGhvZCh0LFwidXBkYXRlVmlld1wiKSxybChlKSx0aGlzLl9zY2hlZHVsZXIucGVyZm9ybVZpc3VhbFRhc2tzKGUsdCx7c2V0RGlydHk6ITB9KSxhbCh0aGlzLHRoaXMuX21vZGVsLHRoaXMuX2FwaSx0KSxsbChlLHRoaXMuX2FwaSkpXG59LHVwZGF0ZVZpc3VhbDpmdW5jdGlvbih0KXtkbS51cGRhdGUuY2FsbCh0aGlzLHQpfSx1cGRhdGVMYXlvdXQ6ZnVuY3Rpb24odCl7ZG0udXBkYXRlLmNhbGwodGhpcyx0KX19O2NtLnJlc2l6ZT1mdW5jdGlvbih0KXt0aGlzLl96ci5yZXNpemUodCk7dmFyIGU9dGhpcy5fbW9kZWw7aWYodGhpcy5fbG9hZGluZ0ZYJiZ0aGlzLl9sb2FkaW5nRlgucmVzaXplKCksZSl7dmFyIG49ZS5yZXNldE9wdGlvbihcIm1lZGlhXCIpLGk9dCYmdC5zaWxlbnQ7dGhpc1tsbV09ITAsbiYmJHModGhpcyksZG0udXBkYXRlLmNhbGwodGhpcyksdGhpc1tsbV09ITEsdGwuY2FsbCh0aGlzLGkpLGVsLmNhbGwodGhpcyxpKX19LGNtLnNob3dMb2FkaW5nPWZ1bmN0aW9uKHQsZSl7aWYoWnYodCkmJihlPXQsdD1cIlwiKSx0PXR8fFwiZGVmYXVsdFwiLHRoaXMuaGlkZUxvYWRpbmcoKSx3bVt0XSl7dmFyIG49d21bdF0odGhpcy5fYXBpLGUpLGk9dGhpcy5fenI7dGhpcy5fbG9hZGluZ0ZYPW4saS5hZGQobil9fSxjbS5oaWRlTG9hZGluZz1mdW5jdGlvbigpe3RoaXMuX2xvYWRpbmdGWCYmdGhpcy5fenIucmVtb3ZlKHRoaXMuX2xvYWRpbmdGWCksdGhpcy5fbG9hZGluZ0ZYPW51bGx9LGNtLm1ha2VBY3Rpb25Gcm9tRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9byh7fSx0KTtyZXR1cm4gZS50eXBlPWdtW3QudHlwZV0sZX0sY20uZGlzcGF0Y2hBY3Rpb249ZnVuY3Rpb24odCxlKXtpZihadihlKXx8KGU9e3NpbGVudDohIWV9KSxwbVt0LnR5cGVdJiZ0aGlzLl9tb2RlbCl7aWYodGhpc1tsbV0pcmV0dXJuIHZvaWQgdGhpcy5fcGVuZGluZ0FjdGlvbnMucHVzaCh0KTtKcy5jYWxsKHRoaXMsdCxlLnNpbGVudCksZS5mbHVzaD90aGlzLl96ci5mbHVzaCghMCk6ZS5mbHVzaCE9PSExJiZiYy5icm93c2VyLndlQ2hhdCYmdGhpcy5fdGhyb3R0bGVkWnJGbHVzaCgpLHRsLmNhbGwodGhpcyxlLnNpbGVudCksZWwuY2FsbCh0aGlzLGUuc2lsZW50KX19LGNtLmFwcGVuZERhdGE9ZnVuY3Rpb24odCl7dmFyIGU9dC5zZXJpZXNJbmRleCxuPXRoaXMuZ2V0TW9kZWwoKSxpPW4uZ2V0U2VyaWVzQnlJbmRleChlKTtpLmFwcGVuZERhdGEodCksdGhpcy5fc2NoZWR1bGVyLnVuZmluaXNoZWQ9ITB9LGNtLm9uPVVzKFwib25cIiksY20ub2ZmPVVzKFwib2ZmXCIpLGNtLm9uZT1VcyhcIm9uZVwiKTt2YXIgZm09W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW1vdmVcIixcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwiZ2xvYmFsb3V0XCIsXCJjb250ZXh0bWVudVwiXTtjbS5faW5pdEV2ZW50cz1mdW5jdGlvbigpe1h2KGZtLGZ1bmN0aW9uKHQpe3RoaXMuX3pyLm9uKHQsZnVuY3Rpb24oZSl7dmFyIG4saT10aGlzLmdldE1vZGVsKCkscj1lLnRhcmdldDtpZihcImdsb2JhbG91dFwiPT09dCluPXt9O2Vsc2UgaWYociYmbnVsbCE9ci5kYXRhSW5kZXgpe3ZhciBhPXIuZGF0YU1vZGVsfHxpLmdldFNlcmllc0J5SW5kZXgoci5zZXJpZXNJbmRleCk7bj1hJiZhLmdldERhdGFQYXJhbXMoci5kYXRhSW5kZXgsci5kYXRhVHlwZSl8fHt9fWVsc2UgciYmci5ldmVudERhdGEmJihuPW8oe30sci5ldmVudERhdGEpKTtuJiYobi5ldmVudD1lLG4udHlwZT10LHRoaXMudHJpZ2dlcih0LG4pKX0sdGhpcyl9LHRoaXMpLFh2KGdtLGZ1bmN0aW9uKHQsZSl7dGhpcy5fbWVzc2FnZUNlbnRlci5vbihlLGZ1bmN0aW9uKHQpe3RoaXMudHJpZ2dlcihlLHQpfSx0aGlzKX0sdGhpcyl9LGNtLmlzRGlzcG9zZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGlzcG9zZWR9LGNtLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5zZXRPcHRpb24oe3NlcmllczpbXX0sITApfSxjbS5kaXNwb3NlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2Rpc3Bvc2VkKXt0aGlzLl9kaXNwb3NlZD0hMCxXaSh0aGlzLmdldERvbSgpLEltLFwiXCIpO3ZhciB0PXRoaXMuX2FwaSxlPXRoaXMuX21vZGVsO1h2KHRoaXMuX2NvbXBvbmVudHNWaWV3cyxmdW5jdGlvbihuKXtuLmRpc3Bvc2UoZSx0KX0pLFh2KHRoaXMuX2NoYXJ0c1ZpZXdzLGZ1bmN0aW9uKG4pe24uZGlzcG9zZShlLHQpfSksdGhpcy5fenIuZGlzcG9zZSgpLGRlbGV0ZSBibVt0aGlzLmlkXX19LGMoWXMsamMpO3ZhciBwbT17fSxnbT17fSx2bT1bXSxtbT1bXSx5bT1bXSxfbT1bXSx4bT17fSx3bT17fSxibT17fSxNbT17fSxTbT1uZXcgRGF0ZS0wLENtPW5ldyBEYXRlLTAsSW09XCJfZWNoYXJ0c19pbnN0YW5jZV9cIixUbT17fSxrbT12bDtrbChpbSxEdiksd2woaHYpLGJsKGVtLGN2KSxBbChcImRlZmF1bHRcIixPdiksU2woe3R5cGU6XCJoaWdobGlnaHRcIixldmVudDpcImhpZ2hsaWdodFwiLHVwZGF0ZTpcImhpZ2hsaWdodFwifSxWKSxTbCh7dHlwZTpcImRvd25wbGF5XCIsZXZlbnQ6XCJkb3ducGxheVwiLHVwZGF0ZTpcImRvd25wbGF5XCJ9LFYpLHhsKFwibGlnaHRcIixHdikseGwoXCJkYXJrXCIscXYpO3ZhciBEbT17fTtGbC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkZsLGFkZDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fYWRkPXQsdGhpc30sdXBkYXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl91cGRhdGU9dCx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3JlbW92ZT10LHRoaXN9LGV4ZWN1dGU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuX29sZCxuPXRoaXMuX25ldyxpPXt9LHI9e30sYT1bXSxvPVtdO2ZvcihWbChlLGksYSxcIl9vbGRLZXlHZXR0ZXJcIix0aGlzKSxWbChuLHIsbyxcIl9uZXdLZXlHZXR0ZXJcIix0aGlzKSx0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBzPWFbdF0sbD1yW3NdO2lmKG51bGwhPWwpe3ZhciB1PWwubGVuZ3RoO3U/KDE9PT11JiYocltzXT1udWxsKSxsPWwudW5zaGlmdCgpKTpyW3NdPW51bGwsdGhpcy5fdXBkYXRlJiZ0aGlzLl91cGRhdGUobCx0KX1lbHNlIHRoaXMuX3JlbW92ZSYmdGhpcy5fcmVtb3ZlKHQpfWZvcih2YXIgdD0wO3Q8by5sZW5ndGg7dCsrKXt2YXIgcz1vW3RdO2lmKHIuaGFzT3duUHJvcGVydHkocykpe3ZhciBsPXJbc107aWYobnVsbD09bCljb250aW51ZTtpZihsLmxlbmd0aClmb3IodmFyIGg9MCx1PWwubGVuZ3RoO3U+aDtoKyspdGhpcy5fYWRkJiZ0aGlzLl9hZGQobFtoXSk7ZWxzZSB0aGlzLl9hZGQmJnRoaXMuX2FkZChsKX19fX07dmFyIEFtPU4oW1widG9vbHRpcFwiLFwibGFiZWxcIixcIml0ZW1OYW1lXCIsXCJpdGVtSWRcIixcInNlcmllc05hbWVcIl0pLFBtPU0sTG09XCJ1bmRlZmluZWRcIixPbT1cImVcXHgwMFxceDAwXCIsUm09e1wiZmxvYXRcIjp0eXBlb2YgRmxvYXQ2NEFycmF5PT09TG0/QXJyYXk6RmxvYXQ2NEFycmF5LFwiaW50XCI6dHlwZW9mIEludDMyQXJyYXk9PT1MbT9BcnJheTpJbnQzMkFycmF5LG9yZGluYWw6QXJyYXksbnVtYmVyOkFycmF5LHRpbWU6QXJyYXl9LEVtPXR5cGVvZiBVaW50MzJBcnJheT09PUxtP0FycmF5OlVpbnQzMkFycmF5LEJtPXR5cGVvZiBVaW50MTZBcnJheT09PUxtP0FycmF5OlVpbnQxNkFycmF5LHptPVtcImhhc0l0ZW1PcHRpb25cIixcIl9uYW1lTGlzdFwiLFwiX2lkTGlzdFwiLFwiX2ludmVydGVkSW5kaWNlc01hcFwiLFwiX3Jhd0RhdGFcIixcIl9jaHVua1NpemVcIixcIl9jaHVua0NvdW50XCIsXCJfZGltVmFsdWVHZXR0ZXJcIixcIl9jb3VudFwiLFwiX3Jhd0NvdW50XCIsXCJfbmFtZURpbUlkeFwiLFwiX2lkRGltSWR4XCJdLE5tPVtcIl9leHRlbnRcIixcIl9hcHByb3hpbWF0ZUV4dGVudFwiLFwiX3Jhd0V4dGVudFwiXSxGbT1mdW5jdGlvbih0LGUpe3Q9dHx8W1wieFwiLFwieVwiXTtmb3IodmFyIG49e30saT1bXSxyPXt9LGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIG89dFthXTtiKG8pJiYobz17bmFtZTpvfSk7dmFyIHM9by5uYW1lO28udHlwZT1vLnR5cGV8fFwiZmxvYXRcIixvLmNvb3JkRGltfHwoby5jb29yZERpbT1zLG8uY29vcmREaW1JbmRleD0wKSxvLm90aGVyRGltcz1vLm90aGVyRGltc3x8e30saS5wdXNoKHMpLG5bc109byxvLmluZGV4PWEsby5jcmVhdGVJbnZlcnRlZEluZGljZXMmJihyW3NdPVtdKX10aGlzLmRpbWVuc2lvbnM9aSx0aGlzLl9kaW1lbnNpb25JbmZvcz1uLHRoaXMuaG9zdE1vZGVsPWUsdGhpcy5kYXRhVHlwZSx0aGlzLl9pbmRpY2VzPW51bGwsdGhpcy5fY291bnQ9MCx0aGlzLl9yYXdDb3VudD0wLHRoaXMuX3N0b3JhZ2U9e30sdGhpcy5fbmFtZUxpc3Q9W10sdGhpcy5faWRMaXN0PVtdLHRoaXMuX29wdGlvbk1vZGVscz1bXSx0aGlzLl92aXN1YWw9e30sdGhpcy5fbGF5b3V0PXt9LHRoaXMuX2l0ZW1WaXN1YWxzPVtdLHRoaXMuaGFzSXRlbVZpc3VhbD17fSx0aGlzLl9pdGVtTGF5b3V0cz1bXSx0aGlzLl9ncmFwaGljRWxzPVtdLHRoaXMuX2NodW5rU2l6ZT0xZTUsdGhpcy5fY2h1bmtDb3VudD0wLHRoaXMuX3Jhd0RhdGEsdGhpcy5fcmF3RXh0ZW50PXt9LHRoaXMuX2V4dGVudD17fSx0aGlzLl9hcHByb3hpbWF0ZUV4dGVudD17fSx0aGlzLl9kaW1lbnNpb25zU3VtbWFyeT1HbCh0aGlzKSx0aGlzLl9pbnZlcnRlZEluZGljZXNNYXA9cix0aGlzLl9jYWxjdWxhdGlvbkluZm89e319LFZtPUZtLnByb3RvdHlwZTtWbS50eXBlPVwibGlzdFwiLFZtLmhhc0l0ZW1PcHRpb249ITAsVm0uZ2V0RGltZW5zaW9uPWZ1bmN0aW9uKHQpe3JldHVybiBpc05hTih0KXx8KHQ9dGhpcy5kaW1lbnNpb25zW3RdfHx0KSx0fSxWbS5nZXREaW1lbnNpb25JbmZvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9kaW1lbnNpb25JbmZvc1t0aGlzLmdldERpbWVuc2lvbih0KV19LFZtLmdldERpbWVuc2lvbnNPbkNvb3JkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RpbWVuc2lvbnNTdW1tYXJ5LmRhdGFEaW1zT25Db29yZC5zbGljZSgpfSxWbS5tYXBEaW1lbnNpb249ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9kaW1lbnNpb25zU3VtbWFyeTtpZihudWxsPT1lKXJldHVybiBuLmVuY29kZUZpcnN0RGltTm90RXh0cmFbdF07dmFyIGk9bi5lbmNvZGVbdF07cmV0dXJuIGU9PT0hMD8oaXx8W10pLnNsaWNlKCk6aSYmaVtlXX0sVm0uaW5pdERhdGE9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPV9vLmlzSW5zdGFuY2UodCl8fGQodCk7aSYmKHQ9bmV3IGFzKHQsdGhpcy5kaW1lbnNpb25zLmxlbmd0aCkpLHRoaXMuX3Jhd0RhdGE9dCx0aGlzLl9zdG9yYWdlPXt9LHRoaXMuX2luZGljZXM9bnVsbCx0aGlzLl9uYW1lTGlzdD1lfHxbXSx0aGlzLl9pZExpc3Q9W10sdGhpcy5fbmFtZVJlcGVhdENvdW50PXt9LG58fCh0aGlzLmhhc0l0ZW1PcHRpb249ITEpLHRoaXMuZGVmYXVsdERpbVZhbHVlR2V0dGVyPWd2W3RoaXMuX3Jhd0RhdGEuZ2V0U291cmNlKCkuc291cmNlRm9ybWF0XSx0aGlzLl9kaW1WYWx1ZUdldHRlcj1uPW58fHRoaXMuZGVmYXVsdERpbVZhbHVlR2V0dGVyLHRoaXMuX3Jhd0V4dGVudD17fSx0aGlzLl9pbml0RGF0YUZyb21Qcm92aWRlcigwLHQuY291bnQoKSksdC5wdXJlJiYodGhpcy5oYXNJdGVtT3B0aW9uPSExKX0sVm0uZ2V0UHJvdmlkZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmF3RGF0YX0sVm0uYXBwZW5kRGF0YT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9yYXdEYXRhLG49dGhpcy5jb3VudCgpO2UuYXBwZW5kRGF0YSh0KTt2YXIgaT1lLmNvdW50KCk7ZS5wZXJzaXN0ZW50fHwoaSs9biksdGhpcy5faW5pdERhdGFGcm9tUHJvdmlkZXIobixpKX0sVm0uX2luaXREYXRhRnJvbVByb3ZpZGVyPWZ1bmN0aW9uKHQsZSl7aWYoISh0Pj1lKSl7Zm9yKHZhciBuLGk9dGhpcy5fY2h1bmtTaXplLHI9dGhpcy5fcmF3RGF0YSxhPXRoaXMuX3N0b3JhZ2Usbz10aGlzLmRpbWVuc2lvbnMscz1vLmxlbmd0aCxsPXRoaXMuX2RpbWVuc2lvbkluZm9zLHU9dGhpcy5fbmFtZUxpc3QsaD10aGlzLl9pZExpc3QsYz10aGlzLl9yYXdFeHRlbnQsZD10aGlzLl9uYW1lUmVwZWF0Q291bnQ9e30sZj10aGlzLl9jaHVua0NvdW50LHA9Zi0xLGc9MDtzPmc7ZysrKXt2YXIgdj1vW2ddO2Nbdl18fChjW3ZdPWV1KCkpO3ZhciBtPWxbdl07MD09PW0ub3RoZXJEaW1zLml0ZW1OYW1lJiYobj10aGlzLl9uYW1lRGltSWR4PWcpLDA9PT1tLm90aGVyRGltcy5pdGVtSWQmJih0aGlzLl9pZERpbUlkeD1nKTt2YXIgeT1SbVttLnR5cGVdO2Fbdl18fChhW3ZdPVtdKTt2YXIgXz1hW3ZdW3BdO2lmKF8mJl8ubGVuZ3RoPGkpe2Zvcih2YXIgeD1uZXcgeShNYXRoLm1pbihlLXAqaSxpKSksdz0wO3c8Xy5sZW5ndGg7dysrKXhbd109X1t3XTthW3ZdW3BdPXh9Zm9yKHZhciBiPWYqaTtlPmI7Yis9aSlhW3ZdLnB1c2gobmV3IHkoTWF0aC5taW4oZS1iLGkpKSk7dGhpcy5fY2h1bmtDb3VudD1hW3ZdLmxlbmd0aH1mb3IodmFyIE09bmV3IEFycmF5KHMpLFM9dDtlPlM7UysrKXtNPXIuZ2V0SXRlbShTLE0pO2Zvcih2YXIgQz1NYXRoLmZsb29yKFMvaSksST1TJWksYj0wO3M+YjtiKyspe3ZhciB2PW9bYl0sVD1hW3ZdW0NdLGs9dGhpcy5fZGltVmFsdWVHZXR0ZXIoTSx2LFMsYik7VFtJXT1rO3ZhciBEPWNbdl07azxEWzBdJiYoRFswXT1rKSxrPkRbMV0mJihEWzFdPWspfWlmKCFyLnB1cmUpe3ZhciBBPXVbU107aWYoTSYmbnVsbD09QSlpZihudWxsIT1NLm5hbWUpdVtTXT1BPU0ubmFtZTtlbHNlIGlmKG51bGwhPW4pe3ZhciBQPW9bbl0sTD1hW1BdW0NdO2lmKEwpe0E9TFtJXTt2YXIgTz1sW1BdLm9yZGluYWxNZXRhO08mJk8uY2F0ZWdvcmllcy5sZW5ndGgmJihBPU8uY2F0ZWdvcmllc1tBXSl9fXZhciBSPW51bGw9PU0/bnVsbDpNLmlkO251bGw9PVImJm51bGwhPUEmJihkW0FdPWRbQV18fDAsUj1BLGRbQV0+MCYmKFIrPVwiX19lY19fXCIrZFtBXSksZFtBXSsrKSxudWxsIT1SJiYoaFtTXT1SKX19IXIucGVyc2lzdGVudCYmci5jbGVhbiYmci5jbGVhbigpLHRoaXMuX3Jhd0NvdW50PXRoaXMuX2NvdW50PWUsdGhpcy5fZXh0ZW50PXt9LFhsKHRoaXMpfX0sVm0uY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY291bnR9LFZtLmdldEluZGljZXM9ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuX2luZGljZXM7aWYoZSl7dmFyIG49ZS5jb25zdHJ1Y3RvcixpPXRoaXMuX2NvdW50O2lmKG49PT1BcnJheSl7dD1uZXcgbihpKTtmb3IodmFyIHI9MDtpPnI7cisrKXRbcl09ZVtyXX1lbHNlIHQ9bmV3IG4oZS5idWZmZXIsMCxpKX1lbHNlIGZvcih2YXIgbj1qbCh0aGlzKSx0PW5ldyBuKHRoaXMuY291bnQoKSkscj0wO3I8dC5sZW5ndGg7cisrKXRbcl09cjtyZXR1cm4gdH0sVm0uZ2V0PWZ1bmN0aW9uKHQsZSl7aWYoIShlPj0wJiZlPHRoaXMuX2NvdW50KSlyZXR1cm4gMC8wO3ZhciBuPXRoaXMuX3N0b3JhZ2U7aWYoIW5bdF0pcmV0dXJuIDAvMDtlPXRoaXMuZ2V0UmF3SW5kZXgoZSk7dmFyIGk9TWF0aC5mbG9vcihlL3RoaXMuX2NodW5rU2l6ZSkscj1lJXRoaXMuX2NodW5rU2l6ZSxhPW5bdF1baV0sbz1hW3JdO3JldHVybiBvfSxWbS5nZXRCeVJhd0luZGV4PWZ1bmN0aW9uKHQsZSl7aWYoIShlPj0wJiZlPHRoaXMuX3Jhd0NvdW50KSlyZXR1cm4gMC8wO3ZhciBuPXRoaXMuX3N0b3JhZ2VbdF07aWYoIW4pcmV0dXJuIDAvMDt2YXIgaT1NYXRoLmZsb29yKGUvdGhpcy5fY2h1bmtTaXplKSxyPWUldGhpcy5fY2h1bmtTaXplLGE9bltpXTtyZXR1cm4gYVtyXX0sVm0uX2dldEZhc3Q9ZnVuY3Rpb24odCxlKXt2YXIgbj1NYXRoLmZsb29yKGUvdGhpcy5fY2h1bmtTaXplKSxpPWUldGhpcy5fY2h1bmtTaXplLHI9dGhpcy5fc3RvcmFnZVt0XVtuXTtyZXR1cm4gcltpXX0sVm0uZ2V0VmFsdWVzPWZ1bmN0aW9uKHQsZSl7dmFyIG49W107eCh0KXx8KGU9dCx0PXRoaXMuZGltZW5zaW9ucyk7Zm9yKHZhciBpPTAscj10Lmxlbmd0aDtyPmk7aSsrKW4ucHVzaCh0aGlzLmdldCh0W2ldLGUpKTtyZXR1cm4gbn0sVm0uaGFzVmFsdWU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuX2RpbWVuc2lvbnNTdW1tYXJ5LmRhdGFEaW1zT25Db29yZCxuPXRoaXMuX2RpbWVuc2lvbkluZm9zLGk9MCxyPWUubGVuZ3RoO3I+aTtpKyspaWYoXCJvcmRpbmFsXCIhPT1uW2VbaV1dLnR5cGUmJmlzTmFOKHRoaXMuZ2V0KGVbaV0sdCkpKXJldHVybiExO3JldHVybiEwfSxWbS5nZXREYXRhRXh0ZW50PWZ1bmN0aW9uKHQpe3Q9dGhpcy5nZXREaW1lbnNpb24odCk7dmFyIGU9dGhpcy5fc3RvcmFnZVt0XSxuPWV1KCk7aWYoIWUpcmV0dXJuIG47dmFyIGkscj10aGlzLmNvdW50KCksYT0hdGhpcy5faW5kaWNlcztpZihhKXJldHVybiB0aGlzLl9yYXdFeHRlbnRbdF0uc2xpY2UoKTtpZihpPXRoaXMuX2V4dGVudFt0XSlyZXR1cm4gaS5zbGljZSgpO2k9bjtmb3IodmFyIG89aVswXSxzPWlbMV0sbD0wO3I+bDtsKyspe3ZhciB1PXRoaXMuX2dldEZhc3QodCx0aGlzLmdldFJhd0luZGV4KGwpKTtvPnUmJihvPXUpLHU+cyYmKHM9dSl9cmV0dXJuIGk9W28sc10sdGhpcy5fZXh0ZW50W3RdPWksaX0sVm0uZ2V0QXBwcm94aW1hdGVFeHRlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dGhpcy5nZXREaW1lbnNpb24odCksdGhpcy5fYXBwcm94aW1hdGVFeHRlbnRbdF18fHRoaXMuZ2V0RGF0YUV4dGVudCh0KX0sVm0uc2V0QXBwcm94aW1hdGVFeHRlbnQ9ZnVuY3Rpb24odCxlKXtlPXRoaXMuZ2V0RGltZW5zaW9uKGUpLHRoaXMuX2FwcHJveGltYXRlRXh0ZW50W2VdPXQuc2xpY2UoKX0sVm0uZ2V0Q2FsY3VsYXRpb25JbmZvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9jYWxjdWxhdGlvbkluZm9bdF19LFZtLnNldENhbGN1bGF0aW9uSW5mbz1mdW5jdGlvbih0LGUpe1BtKHQpP28odGhpcy5fY2FsY3VsYXRpb25JbmZvLHQpOnRoaXMuX2NhbGN1bGF0aW9uSW5mb1t0XT1lfSxWbS5nZXRTdW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fc3RvcmFnZVt0XSxuPTA7aWYoZSlmb3IodmFyIGk9MCxyPXRoaXMuY291bnQoKTtyPmk7aSsrKXt2YXIgYT10aGlzLmdldCh0LGkpO2lzTmFOKGEpfHwobis9YSl9cmV0dXJuIG59LFZtLmdldE1lZGlhbj1mdW5jdGlvbih0KXt2YXIgZT1bXTt0aGlzLmVhY2godCxmdW5jdGlvbih0KXtpc05hTih0KXx8ZS5wdXNoKHQpfSk7dmFyIG49W10uY29uY2F0KGUpLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSksaT10aGlzLmNvdW50KCk7cmV0dXJuIDA9PT1pPzA6aSUyPT09MT9uWyhpLTEpLzJdOihuW2kvMl0rbltpLzItMV0pLzJ9LFZtLnJhd0luZGV4T2Y9ZnVuY3Rpb24odCxlKXt2YXIgbj10JiZ0aGlzLl9pbnZlcnRlZEluZGljZXNNYXBbdF0saT1uW2VdO3JldHVybiBudWxsPT1pfHxpc05hTihpKT8tMTppfSxWbS5pbmRleE9mTmFtZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPXRoaXMuY291bnQoKTtuPmU7ZSsrKWlmKHRoaXMuZ2V0TmFtZShlKT09PXQpcmV0dXJuIGU7cmV0dXJuLTF9LFZtLmluZGV4T2ZSYXdJbmRleD1mdW5jdGlvbih0KXtpZighdGhpcy5faW5kaWNlcylyZXR1cm4gdDtpZih0Pj10aGlzLl9yYXdDb3VudHx8MD50KXJldHVybi0xO3ZhciBlPXRoaXMuX2luZGljZXMsbj1lW3RdO2lmKG51bGwhPW4mJm48dGhpcy5fY291bnQmJm49PT10KXJldHVybiB0O2Zvcih2YXIgaT0wLHI9dGhpcy5fY291bnQtMTtyPj1pOyl7dmFyIGE9KGkrcikvMnwwO2lmKGVbYV08dClpPWErMTtlbHNle2lmKCEoZVthXT50KSlyZXR1cm4gYTtyPWEtMX19cmV0dXJuLTF9LFZtLmluZGljZXNPZk5lYXJlc3Q9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuX3N0b3JhZ2Uscj1pW3RdLGE9W107aWYoIXIpcmV0dXJuIGE7bnVsbD09biYmKG49MS8wKTtmb3IodmFyIG89TnVtYmVyLk1BWF9WQUxVRSxzPS0xLGw9MCx1PXRoaXMuY291bnQoKTt1Pmw7bCsrKXt2YXIgaD1lLXRoaXMuZ2V0KHQsbCksYz1NYXRoLmFicyhoKTtuPj1oJiZvPj1jJiYoKG8+Y3x8aD49MCYmMD5zKSYmKG89YyxzPWgsYS5sZW5ndGg9MCksYS5wdXNoKGwpKX1yZXR1cm4gYX0sVm0uZ2V0UmF3SW5kZXg9WmwsVm0uZ2V0UmF3RGF0YUl0ZW09ZnVuY3Rpb24odCl7aWYodGhpcy5fcmF3RGF0YS5wZXJzaXN0ZW50KXJldHVybiB0aGlzLl9yYXdEYXRhLmdldEl0ZW0odGhpcy5nZXRSYXdJbmRleCh0KSk7Zm9yKHZhciBlPVtdLG49MDtuPHRoaXMuZGltZW5zaW9ucy5sZW5ndGg7bisrKXt2YXIgaT10aGlzLmRpbWVuc2lvbnNbbl07ZS5wdXNoKHRoaXMuZ2V0KGksdCkpfXJldHVybiBlfSxWbS5nZXROYW1lPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0UmF3SW5kZXgodCk7cmV0dXJuIHRoaXMuX25hbWVMaXN0W2VdfHxZbCh0aGlzLHRoaXMuX25hbWVEaW1JZHgsZSl8fFwiXCJ9LFZtLmdldElkPWZ1bmN0aW9uKHQpe3JldHVybiBLbCh0aGlzLHRoaXMuZ2V0UmF3SW5kZXgodCkpfSxWbS5lYWNoPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHRoaXMuX2NvdW50KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYoaT1uLG49ZSxlPXQsdD1bXSksbj1ufHxpfHx0aGlzLHQ9cChRbCh0KSx0aGlzLmdldERpbWVuc2lvbix0aGlzKTtmb3IodmFyIHI9dC5sZW5ndGgsYT0wO2E8dGhpcy5jb3VudCgpO2ErKylzd2l0Y2gocil7Y2FzZSAwOmUuY2FsbChuLGEpO2JyZWFrO2Nhc2UgMTplLmNhbGwobix0aGlzLmdldCh0WzBdLGEpLGEpO2JyZWFrO2Nhc2UgMjplLmNhbGwobix0aGlzLmdldCh0WzBdLGEpLHRoaXMuZ2V0KHRbMV0sYSksYSk7YnJlYWs7ZGVmYXVsdDpmb3IodmFyIG89MCxzPVtdO3I+bztvKyspc1tvXT10aGlzLmdldCh0W29dLGEpO3Nbb109YSxlLmFwcGx5KG4scyl9fX0sVm0uZmlsdGVyU2VsZj1mdW5jdGlvbih0LGUsbixpKXtpZih0aGlzLl9jb3VudCl7XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKGk9bixuPWUsZT10LHQ9W10pLG49bnx8aXx8dGhpcyx0PXAoUWwodCksdGhpcy5nZXREaW1lbnNpb24sdGhpcyk7Zm9yKHZhciByPXRoaXMuY291bnQoKSxhPWpsKHRoaXMpLG89bmV3IGEocikscz1bXSxsPXQubGVuZ3RoLHU9MCxoPXRbMF0sYz0wO3I+YztjKyspe3ZhciBkLGY9dGhpcy5nZXRSYXdJbmRleChjKTtpZigwPT09bClkPWUuY2FsbChuLGMpO2Vsc2UgaWYoMT09PWwpe3ZhciBnPXRoaXMuX2dldEZhc3QoaCxmKTtkPWUuY2FsbChuLGcsYyl9ZWxzZXtmb3IodmFyIHY9MDtsPnY7disrKXNbdl09dGhpcy5fZ2V0RmFzdChoLGYpO3Nbdl09YyxkPWUuYXBwbHkobixzKX1kJiYob1t1KytdPWYpfXJldHVybiByPnUmJih0aGlzLl9pbmRpY2VzPW8pLHRoaXMuX2NvdW50PXUsdGhpcy5fZXh0ZW50PXt9LHRoaXMuZ2V0UmF3SW5kZXg9dGhpcy5faW5kaWNlcz8kbDpabCx0aGlzfX0sVm0uc2VsZWN0UmFuZ2U9ZnVuY3Rpb24odCl7aWYodGhpcy5fY291bnQpe3ZhciBlPVtdO2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJmUucHVzaChuKTt2YXIgaT1lLmxlbmd0aDtpZihpKXt2YXIgcj10aGlzLmNvdW50KCksYT1qbCh0aGlzKSxvPW5ldyBhKHIpLHM9MCxsPWVbMF0sdT10W2xdWzBdLGg9dFtsXVsxXSxjPSExO2lmKCF0aGlzLl9pbmRpY2VzKXt2YXIgZD0wO2lmKDE9PT1pKXtmb3IodmFyIGY9dGhpcy5fc3RvcmFnZVtlWzBdXSxwPTA7cDx0aGlzLl9jaHVua0NvdW50O3ArKylmb3IodmFyIGc9ZltwXSx2PU1hdGgubWluKHRoaXMuX2NvdW50LXAqdGhpcy5fY2h1bmtTaXplLHRoaXMuX2NodW5rU2l6ZSksbT0wO3Y+bTttKyspe3ZhciB5PWdbbV07KHk+PXUmJmg+PXl8fGlzTmFOKHkpKSYmKG9bcysrXT1kKSxkKyt9Yz0hMH1lbHNlIGlmKDI9PT1pKXtmb3IodmFyIGY9dGhpcy5fc3RvcmFnZVtsXSxfPXRoaXMuX3N0b3JhZ2VbZVsxXV0seD10W2VbMV1dWzBdLHc9dFtlWzFdXVsxXSxwPTA7cDx0aGlzLl9jaHVua0NvdW50O3ArKylmb3IodmFyIGc9ZltwXSxiPV9bcF0sdj1NYXRoLm1pbih0aGlzLl9jb3VudC1wKnRoaXMuX2NodW5rU2l6ZSx0aGlzLl9jaHVua1NpemUpLG09MDt2Pm07bSsrKXt2YXIgeT1nW21dLE09YlttXTsoeT49dSYmaD49eXx8aXNOYU4oeSkpJiYoTT49eCYmdz49TXx8aXNOYU4oTSkpJiYob1tzKytdPWQpLGQrK31jPSEwfX1pZighYylpZigxPT09aSlmb3IodmFyIG09MDtyPm07bSsrKXt2YXIgUz10aGlzLmdldFJhd0luZGV4KG0pLHk9dGhpcy5fZ2V0RmFzdChsLFMpOyh5Pj11JiZoPj15fHxpc05hTih5KSkmJihvW3MrK109Uyl9ZWxzZSBmb3IodmFyIG09MDtyPm07bSsrKXtmb3IodmFyIEM9ITAsUz10aGlzLmdldFJhd0luZGV4KG0pLHA9MDtpPnA7cCsrKXt2YXIgST1lW3BdLHk9dGhpcy5fZ2V0RmFzdChuLFMpOyh5PHRbSV1bMF18fHk+dFtJXVsxXSkmJihDPSExKX1DJiYob1tzKytdPXRoaXMuZ2V0UmF3SW5kZXgobSkpfXJldHVybiByPnMmJih0aGlzLl9pbmRpY2VzPW8pLHRoaXMuX2NvdW50PXMsdGhpcy5fZXh0ZW50PXt9LHRoaXMuZ2V0UmF3SW5kZXg9dGhpcy5faW5kaWNlcz8kbDpabCx0aGlzfX19LFZtLm1hcEFycmF5PWZ1bmN0aW9uKHQsZSxuLGkpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihpPW4sbj1lLGU9dCx0PVtdKSxuPW58fGl8fHRoaXM7dmFyIHI9W107cmV0dXJuIHRoaXMuZWFjaCh0LGZ1bmN0aW9uKCl7ci5wdXNoKGUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sbikscn0sVm0ubWFwPWZ1bmN0aW9uKHQsZSxuLGkpe249bnx8aXx8dGhpcyx0PXAoUWwodCksdGhpcy5nZXREaW1lbnNpb24sdGhpcyk7dmFyIHI9SmwodGhpcyx0KTtyLl9pbmRpY2VzPXRoaXMuX2luZGljZXMsci5nZXRSYXdJbmRleD1yLl9pbmRpY2VzPyRsOlpsO2Zvcih2YXIgYT1yLl9zdG9yYWdlLG89W10scz10aGlzLl9jaHVua1NpemUsbD10Lmxlbmd0aCx1PXRoaXMuY291bnQoKSxoPVtdLGM9ci5fcmF3RXh0ZW50LGQ9MDt1PmQ7ZCsrKXtmb3IodmFyIGY9MDtsPmY7ZisrKWhbZl09dGhpcy5nZXQodFtmXSxkKTtoW2xdPWQ7dmFyIGc9ZSYmZS5hcHBseShuLGgpO2lmKG51bGwhPWcpe1wib2JqZWN0XCIhPXR5cGVvZiBnJiYob1swXT1nLGc9byk7Zm9yKHZhciB2PXRoaXMuZ2V0UmF3SW5kZXgoZCksbT1NYXRoLmZsb29yKHYvcykseT12JXMsXz0wO188Zy5sZW5ndGg7XysrKXt2YXIgeD10W19dLHc9Z1tfXSxiPWNbeF0sTT1hW3hdO00mJihNW21dW3ldPXcpLHc8YlswXSYmKGJbMF09dyksdz5iWzFdJiYoYlsxXT13KX19fXJldHVybiByfSxWbS5kb3duU2FtcGxlPWZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj1KbCh0aGlzLFt0XSksYT1yLl9zdG9yYWdlLG89W10scz1NYXRoLmZsb29yKDEvZSksbD1hW3RdLHU9dGhpcy5jb3VudCgpLGg9dGhpcy5fY2h1bmtTaXplLGM9ci5fcmF3RXh0ZW50W3RdLGQ9bmV3KGpsKHRoaXMpKSh1KSxmPTAscD0wO3U+cDtwKz1zKXtzPnUtcCYmKHM9dS1wLG8ubGVuZ3RoPXMpO2Zvcih2YXIgZz0wO3M+ZztnKyspe3ZhciB2PXRoaXMuZ2V0UmF3SW5kZXgocCtnKSxtPU1hdGguZmxvb3Iodi9oKSx5PXYlaDtvW2ddPWxbbV1beV19dmFyIF89bihvKSx4PXRoaXMuZ2V0UmF3SW5kZXgoTWF0aC5taW4ocCtpKG8sXyl8fDAsdS0xKSksdz1NYXRoLmZsb29yKHgvaCksYj14JWg7bFt3XVtiXT1fLF88Y1swXSYmKGNbMF09XyksXz5jWzFdJiYoY1sxXT1fKSxkW2YrK109eH1yZXR1cm4gci5fY291bnQ9ZixyLl9pbmRpY2VzPWQsci5nZXRSYXdJbmRleD0kbCxyfSxWbS5nZXRJdGVtTW9kZWw9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5ob3N0TW9kZWw7cmV0dXJuIG5ldyBBYSh0aGlzLmdldFJhd0RhdGFJdGVtKHQpLGUsZSYmZS5lY01vZGVsKX0sVm0uZGlmZj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBuZXcgRmwodD90LmdldEluZGljZXMoKTpbXSx0aGlzLmdldEluZGljZXMoKSxmdW5jdGlvbihlKXtyZXR1cm4gS2wodCxlKX0sZnVuY3Rpb24odCl7cmV0dXJuIEtsKGUsdCl9KX0sVm0uZ2V0VmlzdWFsPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3Zpc3VhbDtyZXR1cm4gZSYmZVt0XX0sVm0uc2V0VmlzdWFsPWZ1bmN0aW9uKHQsZSl7aWYoUG0odCkpZm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmdGhpcy5zZXRWaXN1YWwobix0W25dKTtlbHNlIHRoaXMuX3Zpc3VhbD10aGlzLl92aXN1YWx8fHt9LHRoaXMuX3Zpc3VhbFt0XT1lfSxWbS5zZXRMYXlvdXQ9ZnVuY3Rpb24odCxlKXtpZihQbSh0KSlmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiZ0aGlzLnNldExheW91dChuLHRbbl0pO2Vsc2UgdGhpcy5fbGF5b3V0W3RdPWV9LFZtLmdldExheW91dD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbGF5b3V0W3RdfSxWbS5nZXRJdGVtTGF5b3V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pdGVtTGF5b3V0c1t0XX0sVm0uc2V0SXRlbUxheW91dD1mdW5jdGlvbih0LGUsbil7dGhpcy5faXRlbUxheW91dHNbdF09bj9vKHRoaXMuX2l0ZW1MYXlvdXRzW3RdfHx7fSxlKTplfSxWbS5jbGVhckl0ZW1MYXlvdXRzPWZ1bmN0aW9uKCl7dGhpcy5faXRlbUxheW91dHMubGVuZ3RoPTB9LFZtLmdldEl0ZW1WaXN1YWw9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuX2l0ZW1WaXN1YWxzW3RdLHI9aSYmaVtlXTtyZXR1cm4gbnVsbCE9cnx8bj9yOnRoaXMuZ2V0VmlzdWFsKGUpfSxWbS5zZXRJdGVtVmlzdWFsPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLl9pdGVtVmlzdWFsc1t0XXx8e30scj10aGlzLmhhc0l0ZW1WaXN1YWw7aWYodGhpcy5faXRlbVZpc3VhbHNbdF09aSxQbShlKSlmb3IodmFyIGEgaW4gZSllLmhhc093blByb3BlcnR5KGEpJiYoaVthXT1lW2FdLHJbYV09ITApO2Vsc2UgaVtlXT1uLHJbZV09ITB9LFZtLmNsZWFyQWxsVmlzdWFsPWZ1bmN0aW9uKCl7dGhpcy5fdmlzdWFsPXt9LHRoaXMuX2l0ZW1WaXN1YWxzPVtdLHRoaXMuaGFzSXRlbVZpc3VhbD17fX07dmFyIEdtPWZ1bmN0aW9uKHQpe3Quc2VyaWVzSW5kZXg9dGhpcy5zZXJpZXNJbmRleCx0LmRhdGFJbmRleD10aGlzLmRhdGFJbmRleCx0LmRhdGFUeXBlPXRoaXMuZGF0YVR5cGV9O1ZtLnNldEl0ZW1HcmFwaGljRWw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmhvc3RNb2RlbDtlJiYoZS5kYXRhSW5kZXg9dCxlLmRhdGFUeXBlPXRoaXMuZGF0YVR5cGUsZS5zZXJpZXNJbmRleD1uJiZuLnNlcmllc0luZGV4LFwiZ3JvdXBcIj09PWUudHlwZSYmZS50cmF2ZXJzZShHbSxlKSksdGhpcy5fZ3JhcGhpY0Vsc1t0XT1lfSxWbS5nZXRJdGVtR3JhcGhpY0VsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9ncmFwaGljRWxzW3RdfSxWbS5lYWNoSXRlbUdyYXBoaWNFbD1mdW5jdGlvbih0LGUpe2YodGhpcy5fZ3JhcGhpY0VscyxmdW5jdGlvbihuLGkpe24mJnQmJnQuY2FsbChlLG4saSl9KX0sVm0uY2xvbmVTaGFsbG93PWZ1bmN0aW9uKHQpe2lmKCF0KXt2YXIgZT1wKHRoaXMuZGltZW5zaW9ucyx0aGlzLmdldERpbWVuc2lvbkluZm8sdGhpcyk7dD1uZXcgRm0oZSx0aGlzLmhvc3RNb2RlbCl9aWYodC5fc3RvcmFnZT10aGlzLl9zdG9yYWdlLFVsKHQsdGhpcyksdGhpcy5faW5kaWNlcyl7dmFyIG49dGhpcy5faW5kaWNlcy5jb25zdHJ1Y3Rvcjt0Ll9pbmRpY2VzPW5ldyBuKHRoaXMuX2luZGljZXMpfWVsc2UgdC5faW5kaWNlcz1udWxsO3JldHVybiB0LmdldFJhd0luZGV4PXQuX2luZGljZXM/JGw6WmwsdH0sVm0ud3JhcE1ldGhvZD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXNbdF07XCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKHRoaXMuX193cmFwcGVkTWV0aG9kcz10aGlzLl9fd3JhcHBlZE1ldGhvZHN8fFtdLHRoaXMuX193cmFwcGVkTWV0aG9kcy5wdXNoKHQpLHRoaXNbdF09ZnVuY3Rpb24oKXt2YXIgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZS5hcHBseSh0aGlzLFt0XS5jb25jYXQoUChhcmd1bWVudHMpKSl9KX0sVm0uVFJBTlNGRVJBQkxFX01FVEhPRFM9W1wiY2xvbmVTaGFsbG93XCIsXCJkb3duU2FtcGxlXCIsXCJtYXBcIl0sVm0uQ0hBTkdBQkxFX01FVEhPRFM9W1wiZmlsdGVyU2VsZlwiLFwic2VsZWN0UmFuZ2VcIl07dmFyIEhtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9ZXx8e30sbnUoZS5jb29yZERpbWVuc2lvbnN8fFtdLHQse2RpbXNEZWY6ZS5kaW1lbnNpb25zRGVmaW5lfHx0LmRpbWVuc2lvbnNEZWZpbmUsZW5jb2RlRGVmOmUuZW5jb2RlRGVmaW5lfHx0LmVuY29kZURlZmluZSxkaW1Db3VudDplLmRpbWVuc2lvbnNDb3VudCxnZW5lcmF0ZUNvb3JkOmUuZ2VuZXJhdGVDb29yZCxnZW5lcmF0ZUNvb3JkQ291bnQ6ZS5nZW5lcmF0ZUNvb3JkQ291bnR9KX07Y3UucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3JldHVybiB0fSxjdS5wcm90b3R5cGUuZ2V0U2V0dGluZz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fc2V0dGluZ1t0XX0sY3UucHJvdG90eXBlLmNvbnRhaW49ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZXh0ZW50O3JldHVybiB0Pj1lWzBdJiZ0PD1lWzFdfSxjdS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2V4dGVudDtyZXR1cm4gZVsxXT09PWVbMF0/LjU6KHQtZVswXSkvKGVbMV0tZVswXSl9LGN1LnByb3RvdHlwZS5zY2FsZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9leHRlbnQ7cmV0dXJuIHQqKGVbMV0tZVswXSkrZVswXX0sY3UucHJvdG90eXBlLnVuaW9uRXh0ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2V4dGVudDt0WzBdPGVbMF0mJihlWzBdPXRbMF0pLHRbMV0+ZVsxXSYmKGVbMV09dFsxXSl9LGN1LnByb3RvdHlwZS51bmlvbkV4dGVudEZyb21EYXRhPWZ1bmN0aW9uKHQsZSl7dGhpcy51bmlvbkV4dGVudCh0LmdldEFwcHJveGltYXRlRXh0ZW50KGUpKX0sY3UucHJvdG90eXBlLmdldEV4dGVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9leHRlbnQuc2xpY2UoKX0sY3UucHJvdG90eXBlLnNldEV4dGVudD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX2V4dGVudDtpc05hTih0KXx8KG5bMF09dCksaXNOYU4oZSl8fChuWzFdPWUpfSxjdS5wcm90b3R5cGUuaXNCbGFuaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc0JsYW5rfSxjdS5wcm90b3R5cGUuc2V0Qmxhbms9ZnVuY3Rpb24odCl7dGhpcy5faXNCbGFuaz10fSxjdS5wcm90b3R5cGUuZ2V0TGFiZWw9bnVsbCxYaShjdSksS2koY3Use3JlZ2lzdGVyV2hlbkV4dGVuZDohMH0pLGR1LmNyZWF0ZUJ5QXhpc01vZGVsPWZ1bmN0aW9uKHQpe3ZhciBlPXQub3B0aW9uLG49ZS5kYXRhLGk9biYmcChuLHB1KTtyZXR1cm4gbmV3IGR1KHtjYXRlZ29yaWVzOmksbmVlZENvbGxlY3Q6IWksZGVkdXBsaWNhdGlvbjplLmRlZHBsaWNhdGlvbiE9PSExfSl9O3ZhciBXbT1kdS5wcm90b3R5cGU7V20uZ2V0T3JkaW5hbD1mdW5jdGlvbih0KXtyZXR1cm4gZnUodGhpcykuZ2V0KHQpfSxXbS5wYXJzZUFuZENvbGxlY3Q9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLl9uZWVkQ29sbGVjdDtpZihcInN0cmluZ1wiIT10eXBlb2YgdCYmIW4pcmV0dXJuIHQ7aWYobiYmIXRoaXMuX2RlZHVwbGljYXRpb24pcmV0dXJuIGU9dGhpcy5jYXRlZ29yaWVzLmxlbmd0aCx0aGlzLmNhdGVnb3JpZXNbZV09dCxlO3ZhciBpPWZ1KHRoaXMpO3JldHVybiBlPWkuZ2V0KHQpLG51bGw9PWUmJihuPyhlPXRoaXMuY2F0ZWdvcmllcy5sZW5ndGgsdGhpcy5jYXRlZ29yaWVzW2VdPXQsaS5zZXQodCxlKSk6ZT0wLzApLGV9O3ZhciBqbT1jdS5wcm90b3R5cGUscW09Y3UuZXh0ZW5kKHt0eXBlOlwib3JkaW5hbFwiLGluaXQ6ZnVuY3Rpb24odCxlKXsoIXR8fHgodCkpJiYodD1uZXcgZHUoe2NhdGVnb3JpZXM6dH0pKSx0aGlzLl9vcmRpbmFsTWV0YT10LHRoaXMuX2V4dGVudD1lfHxbMCx0LmNhdGVnb3JpZXMubGVuZ3RoLTFdfSxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90aGlzLl9vcmRpbmFsTWV0YS5nZXRPcmRpbmFsKHQpOk1hdGgucm91bmQodCl9LGNvbnRhaW46ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dGhpcy5wYXJzZSh0KSxqbS5jb250YWluLmNhbGwodGhpcyx0KSYmbnVsbCE9dGhpcy5fb3JkaW5hbE1ldGEuY2F0ZWdvcmllc1t0XX0sbm9ybWFsaXplOmZ1bmN0aW9uKHQpe3JldHVybiBqbS5ub3JtYWxpemUuY2FsbCh0aGlzLHRoaXMucGFyc2UodCkpfSxzY2FsZTpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZChqbS5zY2FsZS5jYWxsKHRoaXMsdCkpfSxnZXRUaWNrczpmdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPXRoaXMuX2V4dGVudCxuPWVbMF07bjw9ZVsxXTspdC5wdXNoKG4pLG4rKztyZXR1cm4gdH0sZ2V0TGFiZWw6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaXNCbGFuaygpP3ZvaWQgMDp0aGlzLl9vcmRpbmFsTWV0YS5jYXRlZ29yaWVzW3RdfSxjb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9leHRlbnRbMV0tdGhpcy5fZXh0ZW50WzBdKzF9LHVuaW9uRXh0ZW50RnJvbURhdGE6ZnVuY3Rpb24odCxlKXt0aGlzLnVuaW9uRXh0ZW50KHQuZ2V0QXBwcm94aW1hdGVFeHRlbnQoZSkpfSxnZXRPcmRpbmFsTWV0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vcmRpbmFsTWV0YX0sbmljZVRpY2tzOlYsbmljZUV4dGVudDpWfSk7cW0uY3JlYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBxbX07dmFyIFVtPUZhLFhtPUZhLFltPWN1LmV4dGVuZCh7dHlwZTpcImludGVydmFsXCIsX2ludGVydmFsOjAsX2ludGVydmFsUHJlY2lzaW9uOjIsc2V0RXh0ZW50OmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fZXh0ZW50O2lzTmFOKHQpfHwoblswXT1wYXJzZUZsb2F0KHQpKSxpc05hTihlKXx8KG5bMV09cGFyc2VGbG9hdChlKSl9LHVuaW9uRXh0ZW50OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2V4dGVudDt0WzBdPGVbMF0mJihlWzBdPXRbMF0pLHRbMV0+ZVsxXSYmKGVbMV09dFsxXSksWW0ucHJvdG90eXBlLnNldEV4dGVudC5jYWxsKHRoaXMsZVswXSxlWzFdKX0sZ2V0SW50ZXJ2YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJ2YWx9LHNldEludGVydmFsOmZ1bmN0aW9uKHQpe3RoaXMuX2ludGVydmFsPXQsdGhpcy5fbmljZUV4dGVudD10aGlzLl9leHRlbnQuc2xpY2UoKSx0aGlzLl9pbnRlcnZhbFByZWNpc2lvbj12dSh0KX0sZ2V0VGlja3M6ZnVuY3Rpb24oKXtyZXR1cm4gX3UodGhpcy5faW50ZXJ2YWwsdGhpcy5fZXh0ZW50LHRoaXMuX25pY2VFeHRlbnQsdGhpcy5faW50ZXJ2YWxQcmVjaXNpb24pfSxnZXRMYWJlbDpmdW5jdGlvbih0LGUpe2lmKG51bGw9PXQpcmV0dXJuXCJcIjt2YXIgbj1lJiZlLnByZWNpc2lvbjtyZXR1cm4gbnVsbD09bj9uPUhhKHQpfHwwOlwiYXV0b1wiPT09biYmKG49dGhpcy5faW50ZXJ2YWxQcmVjaXNpb24pLHQ9WG0odCxuLCEwKSx0byh0KX0sbmljZVRpY2tzOmZ1bmN0aW9uKHQsZSxuKXt0PXR8fDU7dmFyIGk9dGhpcy5fZXh0ZW50LHI9aVsxXS1pWzBdO2lmKGlzRmluaXRlKHIpKXswPnImJihyPS1yLGkucmV2ZXJzZSgpKTt2YXIgYT1ndShpLHQsZSxuKTt0aGlzLl9pbnRlcnZhbFByZWNpc2lvbj1hLmludGVydmFsUHJlY2lzaW9uLHRoaXMuX2ludGVydmFsPWEuaW50ZXJ2YWwsdGhpcy5fbmljZUV4dGVudD1hLm5pY2VUaWNrRXh0ZW50fX0sbmljZUV4dGVudDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9leHRlbnQ7aWYoZVswXT09PWVbMV0paWYoMCE9PWVbMF0pe3ZhciBuPWVbMF07dC5maXhNYXg/ZVswXS09bi8yOihlWzFdKz1uLzIsZVswXS09bi8yKX1lbHNlIGVbMV09MTt2YXIgaT1lWzFdLWVbMF07aXNGaW5pdGUoaSl8fChlWzBdPTAsZVsxXT0xKSx0aGlzLm5pY2VUaWNrcyh0LnNwbGl0TnVtYmVyLHQubWluSW50ZXJ2YWwsdC5tYXhJbnRlcnZhbCk7dmFyIHI9dGhpcy5faW50ZXJ2YWw7dC5maXhNaW58fChlWzBdPVhtKE1hdGguZmxvb3IoZVswXS9yKSpyKSksdC5maXhNYXh8fChlWzFdPVhtKE1hdGguY2VpbChlWzFdL3IpKnIpKX19KTtZbS5jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFltfTt2YXIgWm09XCJfX2VjX3N0YWNrX1wiLCRtPS41LEttPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGbG9hdDMyQXJyYXk/RmxvYXQzMkFycmF5OkFycmF5LFFtPSh7c2VyaWVzVHlwZTpcImJhclwiLHBsYW46U3YoKSxyZXNldDpmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsZSl7Zm9yKHZhciBuLGM9bmV3IEttKDIqdC5jb3VudCksZD1bXSxmPVtdLHA9MDtudWxsIT0obj10Lm5leHQoKSk7KWZbdV09ZS5nZXQobyxuKSxmWzEtdV09ZS5nZXQocyxuKSxkPWkuZGF0YVRvUG9pbnQoZixudWxsLGQpLGNbcCsrXT1kWzBdLGNbcCsrXT1kWzFdO2Uuc2V0TGF5b3V0KHtsYXJnZVBvaW50czpjLGJhcldpZHRoOmgsdmFsdWVBeGlzU3RhcnQ6a3UocixhLCExKSx2YWx1ZUF4aXNIb3Jpem9udGFsOmx9KX1pZihJdSh0KSYmVHUodCkpe3ZhciBuPXQuZ2V0RGF0YSgpLGk9dC5jb29yZGluYXRlU3lzdGVtLHI9aS5nZXRCYXNlQXhpcygpLGE9aS5nZXRPdGhlckF4aXMociksbz1uLm1hcERpbWVuc2lvbihhLmRpbSkscz1uLm1hcERpbWVuc2lvbihyLmRpbSksbD1hLmlzSG9yaXpvbnRhbCgpLHU9bD8wOjEsaD1DdShNdShbdF0pLHIsdCkud2lkdGg7cmV0dXJuIGg+JG18fChoPSRtKSx7cHJvZ3Jlc3M6ZX19fX0sWW0ucHJvdG90eXBlKSxKbT1NYXRoLmNlaWwsdHk9TWF0aC5mbG9vcixleT0xZTMsbnk9NjAqZXksaXk9NjAqbnkscnk9MjQqaXksYXk9ZnVuY3Rpb24odCxlLG4saSl7Zm9yKDtpPm47KXt2YXIgcj1uK2k+Pj4xO3Rbcl1bMV08ZT9uPXIrMTppPXJ9cmV0dXJuIG59LG95PVltLmV4dGVuZCh7dHlwZTpcInRpbWVcIixnZXRMYWJlbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9zdGVwTHZsLG49bmV3IERhdGUodCk7cmV0dXJuIHNvKGVbMF0sbix0aGlzLmdldFNldHRpbmcoXCJ1c2VVVENcIikpfSxuaWNlRXh0ZW50OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2V4dGVudDtpZihlWzBdPT09ZVsxXSYmKGVbMF0tPXJ5LGVbMV0rPXJ5KSxlWzFdPT09LTEvMCYmMS8wPT09ZVswXSl7dmFyIG49bmV3IERhdGU7ZVsxXT0rbmV3IERhdGUobi5nZXRGdWxsWWVhcigpLG4uZ2V0TW9udGgoKSxuLmdldERhdGUoKSksZVswXT1lWzFdLXJ5fXRoaXMubmljZVRpY2tzKHQuc3BsaXROdW1iZXIsdC5taW5JbnRlcnZhbCx0Lm1heEludGVydmFsKTt2YXIgaT10aGlzLl9pbnRlcnZhbDt0LmZpeE1pbnx8KGVbMF09RmEodHkoZVswXS9pKSppKSksdC5maXhNYXh8fChlWzFdPUZhKEptKGVbMV0vaSkqaSkpfSxuaWNlVGlja3M6ZnVuY3Rpb24odCxlLG4pe3Q9dHx8MTA7dmFyIGk9dGhpcy5fZXh0ZW50LHI9aVsxXS1pWzBdLGE9ci90O251bGwhPWUmJmU+YSYmKGE9ZSksbnVsbCE9biYmYT5uJiYoYT1uKTt2YXIgbz1zeS5sZW5ndGgscz1heShzeSxhLDAsbyksbD1zeVtNYXRoLm1pbihzLG8tMSldLHU9bFsxXTtpZihcInllYXJcIj09PWxbMF0pe3ZhciBoPXIvdSxjPSRhKGgvdCwhMCk7dSo9Y312YXIgZD10aGlzLmdldFNldHRpbmcoXCJ1c2VVVENcIik/MDo2MCpuZXcgRGF0ZSgraVswXXx8K2lbMV0pLmdldFRpbWV6b25lT2Zmc2V0KCkqMWUzLGY9W01hdGgucm91bmQoSm0oKGlbMF0tZCkvdSkqdStkKSxNYXRoLnJvdW5kKHR5KChpWzFdLWQpL3UpKnUrZCldO3l1KGYsaSksdGhpcy5fc3RlcEx2bD1sLHRoaXMuX2ludGVydmFsPXUsdGhpcy5fbmljZUV4dGVudD1mfSxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4rWGEodCl9fSk7ZihbXCJjb250YWluXCIsXCJub3JtYWxpemVcIl0sZnVuY3Rpb24odCl7b3kucHJvdG90eXBlW3RdPWZ1bmN0aW9uKGUpe3JldHVybiBRbVt0XS5jYWxsKHRoaXMsdGhpcy5wYXJzZShlKSl9fSk7dmFyIHN5PVtbXCJoaDptbTpzc1wiLGV5XSxbXCJoaDptbTpzc1wiLDUqZXldLFtcImhoOm1tOnNzXCIsMTAqZXldLFtcImhoOm1tOnNzXCIsMTUqZXldLFtcImhoOm1tOnNzXCIsMzAqZXldLFtcImhoOm1tXFxuTU0tZGRcIixueV0sW1wiaGg6bW1cXG5NTS1kZFwiLDUqbnldLFtcImhoOm1tXFxuTU0tZGRcIiwxMCpueV0sW1wiaGg6bW1cXG5NTS1kZFwiLDE1Km55XSxbXCJoaDptbVxcbk1NLWRkXCIsMzAqbnldLFtcImhoOm1tXFxuTU0tZGRcIixpeV0sW1wiaGg6bW1cXG5NTS1kZFwiLDIqaXldLFtcImhoOm1tXFxuTU0tZGRcIiw2Kml5XSxbXCJoaDptbVxcbk1NLWRkXCIsMTIqaXldLFtcIk1NLWRkXFxueXl5eVwiLHJ5XSxbXCJNTS1kZFxcbnl5eXlcIiwyKnJ5XSxbXCJNTS1kZFxcbnl5eXlcIiwzKnJ5XSxbXCJNTS1kZFxcbnl5eXlcIiw0KnJ5XSxbXCJNTS1kZFxcbnl5eXlcIiw1KnJ5XSxbXCJNTS1kZFxcbnl5eXlcIiw2KnJ5XSxbXCJ3ZWVrXCIsNypyeV0sW1wiTU0tZGRcXG55eXl5XCIsMTAqcnldLFtcIndlZWtcIiwxNCpyeV0sW1wid2Vla1wiLDIxKnJ5XSxbXCJtb250aFwiLDMxKnJ5XSxbXCJ3ZWVrXCIsNDIqcnldLFtcIm1vbnRoXCIsNjIqcnldLFtcIndlZWtcIiw0MipyeV0sW1wicXVhcnRlclwiLDM4MCpyeS80XSxbXCJtb250aFwiLDMxKnJ5KjRdLFtcIm1vbnRoXCIsMzEqcnkqNV0sW1wiaGFsZi15ZWFyXCIsMzgwKnJ5LzJdLFtcIm1vbnRoXCIsMzEqcnkqOF0sW1wibW9udGhcIiwzMSpyeSoxMF0sW1wieWVhclwiLDM4MCpyeV1dO295LmNyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IG95KHt1c2VVVEM6dC5lY01vZGVsLmdldChcInVzZVVUQ1wiKX0pfTt2YXIgbHk9Y3UucHJvdG90eXBlLHV5PVltLnByb3RvdHlwZSxoeT1IYSxjeT1GYSxkeT1NYXRoLmZsb29yLGZ5PU1hdGguY2VpbCxweT1NYXRoLnBvdyxneT1NYXRoLmxvZyx2eT1jdS5leHRlbmQoe3R5cGU6XCJsb2dcIixiYXNlOjEwLCRjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe2N1LmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9vcmlnaW5hbFNjYWxlPW5ldyBZbX0sZ2V0VGlja3M6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9vcmlnaW5hbFNjYWxlLGU9dGhpcy5fZXh0ZW50LG49dC5nZXRFeHRlbnQoKTtyZXR1cm4gcCh1eS5nZXRUaWNrcy5jYWxsKHRoaXMpLGZ1bmN0aW9uKGkpe3ZhciByPUZhKHB5KHRoaXMuYmFzZSxpKSk7cmV0dXJuIHI9aT09PWVbMF0mJnQuX19maXhNaW4/RHUocixuWzBdKTpyLHI9aT09PWVbMV0mJnQuX19maXhNYXg/RHUocixuWzFdKTpyfSx0aGlzKX0sZ2V0TGFiZWw6dXkuZ2V0TGFiZWwsc2NhbGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9bHkuc2NhbGUuY2FsbCh0aGlzLHQpLHB5KHRoaXMuYmFzZSx0KX0sc2V0RXh0ZW50OmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5iYXNlO3Q9Z3kodCkvZ3kobiksZT1neShlKS9neShuKSx1eS5zZXRFeHRlbnQuY2FsbCh0aGlzLHQsZSl9LGdldEV4dGVudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuYmFzZSxlPWx5LmdldEV4dGVudC5jYWxsKHRoaXMpO2VbMF09cHkodCxlWzBdKSxlWzFdPXB5KHQsZVsxXSk7dmFyIG49dGhpcy5fb3JpZ2luYWxTY2FsZSxpPW4uZ2V0RXh0ZW50KCk7cmV0dXJuIG4uX19maXhNaW4mJihlWzBdPUR1KGVbMF0saVswXSkpLG4uX19maXhNYXgmJihlWzFdPUR1KGVbMV0saVsxXSkpLGV9LHVuaW9uRXh0ZW50OmZ1bmN0aW9uKHQpe3RoaXMuX29yaWdpbmFsU2NhbGUudW5pb25FeHRlbnQodCk7dmFyIGU9dGhpcy5iYXNlO3RbMF09Z3kodFswXSkvZ3koZSksdFsxXT1neSh0WzFdKS9neShlKSxseS51bmlvbkV4dGVudC5jYWxsKHRoaXMsdCl9LHVuaW9uRXh0ZW50RnJvbURhdGE6ZnVuY3Rpb24odCxlKXt0aGlzLnVuaW9uRXh0ZW50KHQuZ2V0QXBwcm94aW1hdGVFeHRlbnQoZSkpfSxuaWNlVGlja3M6ZnVuY3Rpb24odCl7dD10fHwxMDt2YXIgZT10aGlzLl9leHRlbnQsbj1lWzFdLWVbMF07aWYoISgxLzA9PT1ufHwwPj1uKSl7dmFyIGk9WWEobikscj10L24qaTtmb3IoLjU+PXImJihpKj0xMCk7IWlzTmFOKGkpJiZNYXRoLmFicyhpKTwxJiZNYXRoLmFicyhpKT4wOylpKj0xMDt2YXIgYT1bRmEoZnkoZVswXS9pKSppKSxGYShkeShlWzFdL2kpKmkpXTt0aGlzLl9pbnRlcnZhbD1pLHRoaXMuX25pY2VFeHRlbnQ9YX19LG5pY2VFeHRlbnQ6ZnVuY3Rpb24odCl7dXkubmljZUV4dGVudC5jYWxsKHRoaXMsdCk7dmFyIGU9dGhpcy5fb3JpZ2luYWxTY2FsZTtlLl9fZml4TWluPXQuZml4TWluLGUuX19maXhNYXg9dC5maXhNYXh9fSk7ZihbXCJjb250YWluXCIsXCJub3JtYWxpemVcIl0sZnVuY3Rpb24odCl7dnkucHJvdG90eXBlW3RdPWZ1bmN0aW9uKGUpe3JldHVybiBlPWd5KGUpL2d5KHRoaXMuYmFzZSksbHlbdF0uY2FsbCh0aGlzLGUpfX0pLHZ5LmNyZWF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgdnl9O3ZhciBteT17Z2V0TWluOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9uLG49dHx8bnVsbD09ZS5yYW5nZVN0YXJ0P2UubWluOmUucmFuZ2VTdGFydDtyZXR1cm4gdGhpcy5heGlzJiZudWxsIT1uJiZcImRhdGFNaW5cIiE9PW4mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJiFUKG4pJiYobj10aGlzLmF4aXMuc2NhbGUucGFyc2UobikpLG59LGdldE1heDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9wdGlvbixuPXR8fG51bGw9PWUucmFuZ2VFbmQ/ZS5tYXg6ZS5yYW5nZUVuZDtyZXR1cm4gdGhpcy5heGlzJiZudWxsIT1uJiZcImRhdGFNYXhcIiE9PW4mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJiFUKG4pJiYobj10aGlzLmF4aXMuc2NhbGUucGFyc2UobikpLG59LGdldE5lZWRDcm9zc1plcm86ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbjtyZXR1cm4gbnVsbCE9dC5yYW5nZVN0YXJ0fHxudWxsIT10LnJhbmdlRW5kPyExOiF0LnNjYWxlfSxnZXRDb29yZFN5c01vZGVsOlYsc2V0UmFuZ2U6ZnVuY3Rpb24odCxlKXt0aGlzLm9wdGlvbi5yYW5nZVN0YXJ0PXQsdGhpcy5vcHRpb24ucmFuZ2VFbmQ9ZX0scmVzZXRSYW5nZTpmdW5jdGlvbigpe3RoaXMub3B0aW9uLnJhbmdlU3RhcnQ9dGhpcy5vcHRpb24ucmFuZ2VFbmQ9bnVsbH19LHl5PUhyKHt0eXBlOlwidHJpYW5nbGVcIixzaGFwZTp7Y3g6MCxjeTowLHdpZHRoOjAsaGVpZ2h0OjB9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUuY3gsaT1lLmN5LHI9ZS53aWR0aC8yLGE9ZS5oZWlnaHQvMjt0Lm1vdmVUbyhuLGktYSksdC5saW5lVG8obityLGkrYSksdC5saW5lVG8obi1yLGkrYSksdC5jbG9zZVBhdGgoKX19KSxfeT1Icih7dHlwZTpcImRpYW1vbmRcIixzaGFwZTp7Y3g6MCxjeTowLHdpZHRoOjAsaGVpZ2h0OjB9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUuY3gsaT1lLmN5LHI9ZS53aWR0aC8yLGE9ZS5oZWlnaHQvMjt0Lm1vdmVUbyhuLGktYSksdC5saW5lVG8obityLGkpLHQubGluZVRvKG4saSthKSx0LmxpbmVUbyhuLXIsaSksdC5jbG9zZVBhdGgoKX19KSx4eT1Icih7dHlwZTpcInBpblwiLHNoYXBlOnt4OjAseTowLHdpZHRoOjAsaGVpZ2h0OjB9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUueCxpPWUueSxyPWUud2lkdGgvNSozLGE9TWF0aC5tYXgocixlLmhlaWdodCksbz1yLzIscz1vKm8vKGEtbyksbD1pLWErbytzLHU9TWF0aC5hc2luKHMvbyksaD1NYXRoLmNvcyh1KSpvLGM9TWF0aC5zaW4odSksZD1NYXRoLmNvcyh1KSxmPS42Km8scD0uNypvO3QubW92ZVRvKG4taCxsK3MpLHQuYXJjKG4sbCxvLE1hdGguUEktdSwyKk1hdGguUEkrdSksdC5iZXppZXJDdXJ2ZVRvKG4raC1jKmYsbCtzK2QqZixuLGktcCxuLGkpLHQuYmV6aWVyQ3VydmVUbyhuLGktcCxuLWgrYypmLGwrcytkKmYsbi1oLGwrcyksdC5jbG9zZVBhdGgoKX19KSx3eT1Icih7dHlwZTpcImFycm93XCIsc2hhcGU6e3g6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MH0sYnVpbGRQYXRoOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5oZWlnaHQsaT1lLndpZHRoLHI9ZS54LGE9ZS55LG89aS8zKjI7dC5tb3ZlVG8ocixhKSx0LmxpbmVUbyhyK28sYStuKSx0LmxpbmVUbyhyLGErbi80KjMpLHQubGluZVRvKHItbyxhK24pLHQubGluZVRvKHIsYSksdC5jbG9zZVBhdGgoKX19KSxieT17bGluZTpZcCxyZWN0OlhwLHJvdW5kUmVjdDpYcCxzcXVhcmU6WHAsY2lyY2xlOk5wLGRpYW1vbmQ6X3kscGluOnh5LGFycm93Ond5LHRyaWFuZ2xlOnl5fSxNeT17bGluZTpmdW5jdGlvbih0LGUsbixpLHIpe3IueDE9dCxyLnkxPWUraS8yLHIueDI9dCtuLHIueTI9ZStpLzJ9LHJlY3Q6ZnVuY3Rpb24odCxlLG4saSxyKXtyLng9dCxyLnk9ZSxyLndpZHRoPW4sci5oZWlnaHQ9aX0scm91bmRSZWN0OmZ1bmN0aW9uKHQsZSxuLGkscil7ci54PXQsci55PWUsci53aWR0aD1uLHIuaGVpZ2h0PWksci5yPU1hdGgubWluKG4saSkvNH0sc3F1YXJlOmZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIGE9TWF0aC5taW4obixpKTtyLng9dCxyLnk9ZSxyLndpZHRoPWEsci5oZWlnaHQ9YX0sY2lyY2xlOmZ1bmN0aW9uKHQsZSxuLGkscil7ci5jeD10K24vMixyLmN5PWUraS8yLHIucj1NYXRoLm1pbihuLGkpLzJ9LGRpYW1vbmQ6ZnVuY3Rpb24odCxlLG4saSxyKXtyLmN4PXQrbi8yLHIuY3k9ZStpLzIsci53aWR0aD1uLHIuaGVpZ2h0PWl9LHBpbjpmdW5jdGlvbih0LGUsbixpLHIpe3IueD10K24vMixyLnk9ZStpLzIsci53aWR0aD1uLHIuaGVpZ2h0PWl9LGFycm93OmZ1bmN0aW9uKHQsZSxuLGkscil7ci54PXQrbi8yLHIueT1lK2kvMixyLndpZHRoPW4sci5oZWlnaHQ9aX0sdHJpYW5nbGU6ZnVuY3Rpb24odCxlLG4saSxyKXtyLmN4PXQrbi8yLHIuY3k9ZStpLzIsci53aWR0aD1uLHIuaGVpZ2h0PWl9fSxTeT17fTtmKGJ5LGZ1bmN0aW9uKHQsZSl7U3lbZV09bmV3IHR9KTt2YXIgQ3k9SHIoe3R5cGU6XCJzeW1ib2xcIixzaGFwZTp7c3ltYm9sVHlwZTpcIlwiLHg6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MH0sYmVmb3JlQnJ1c2g6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN0eWxlLGU9dGhpcy5zaGFwZTtcInBpblwiPT09ZS5zeW1ib2xUeXBlJiZcImluc2lkZVwiPT09dC50ZXh0UG9zaXRpb24mJih0LnRleHRQb3NpdGlvbj1bXCI1MCVcIixcIjQwJVwiXSx0LnRleHRBbGlnbj1cImNlbnRlclwiLHQudGV4dFZlcnRpY2FsQWxpZ249XCJtaWRkbGVcIil9LGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUsbil7dmFyIGk9ZS5zeW1ib2xUeXBlLHI9U3lbaV07XCJub25lXCIhPT1lLnN5bWJvbFR5cGUmJihyfHwoaT1cInJlY3RcIixyPVN5W2ldKSxNeVtpXShlLngsZS55LGUud2lkdGgsZS5oZWlnaHQsci5zaGFwZSksci5idWlsZFBhdGgodCxyLnNoYXBlLG4pKX19KSxJeT17aXNEaW1lbnNpb25TdGFja2VkOm91LGVuYWJsZURhdGFTdGFjazphdSxnZXRTdGFja2VkRGltZW5zaW9uOnN1fSxUeT0oT2JqZWN0LmZyZWV6ZXx8T2JqZWN0KSh7Y3JlYXRlTGlzdDpHdSxnZXRMYXlvdXRSZWN0OmhvLGRhdGFTdGFjazpJeSxjcmVhdGVTY2FsZTpIdSxtaXhpbkF4aXNNb2RlbENvbW1vbk1ldGhvZHM6V3UsY29tcGxldGVEaW1lbnNpb25zOm51LGNyZWF0ZURpbWVuc2lvbnM6SG0sY3JlYXRlU3ltYm9sOlZ1fSksa3k9MWUtODtVdS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlV1LHByb3BlcnRpZXM6bnVsbCxnZXRCb3VuZGluZ1JlY3Q6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yZWN0O2lmKHQpcmV0dXJuIHQ7Zm9yKHZhciBlPU51bWJlci5NQVhfVkFMVUUsbj1bZSxlXSxpPVstZSwtZV0scj1bXSxhPVtdLG89dGhpcy5nZW9tZXRyaWVzLHM9MDtzPG8ubGVuZ3RoO3MrKylpZihcInBvbHlnb25cIj09PW9bc10udHlwZSl7dmFyIGw9b1tzXS5leHRlcmlvcjtkcihsLHIsYSksb2UobixuLHIpLHNlKGksaSxhKX1yZXR1cm4gMD09PXMmJihuWzBdPW5bMV09aVswXT1pWzFdPTApLHRoaXMuX3JlY3Q9bmV3IHJuKG5bMF0sblsxXSxpWzBdLW5bMF0saVsxXS1uWzFdKX0sY29udGFpbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEJvdW5kaW5nUmVjdCgpLG49dGhpcy5nZW9tZXRyaWVzO2lmKCFlLmNvbnRhaW4odFswXSx0WzFdKSlyZXR1cm4hMTt0OmZvcih2YXIgaT0wLHI9bi5sZW5ndGg7cj5pO2krKylpZihcInBvbHlnb25cIj09PW5baV0udHlwZSl7dmFyIGE9bltpXS5leHRlcmlvcixvPW5baV0uaW50ZXJpb3JzO2lmKHF1KGEsdFswXSx0WzFdKSl7Zm9yKHZhciBzPTA7czwobz9vLmxlbmd0aDowKTtzKyspaWYocXUob1tzXSkpY29udGludWUgdDtyZXR1cm4hMH19cmV0dXJuITF9LHRyYW5zZm9ybVRvOmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXRoaXMuZ2V0Qm91bmRpbmdSZWN0KCksYT1yLndpZHRoL3IuaGVpZ2h0O24/aXx8KGk9bi9hKTpuPWEqaTtmb3IodmFyIG89bmV3IHJuKHQsZSxuLGkpLHM9ci5jYWxjdWxhdGVUcmFuc2Zvcm0obyksbD10aGlzLmdlb21ldHJpZXMsdT0wO3U8bC5sZW5ndGg7dSsrKWlmKFwicG9seWdvblwiPT09bFt1XS50eXBlKXtmb3IodmFyIGg9bFt1XS5leHRlcmlvcixjPWxbdV0uaW50ZXJpb3JzLGQ9MDtkPGgubGVuZ3RoO2QrKylhZShoW2RdLGhbZF0scyk7Zm9yKHZhciBmPTA7ZjwoYz9jLmxlbmd0aDowKTtmKyspZm9yKHZhciBkPTA7ZDxjW2ZdLmxlbmd0aDtkKyspYWUoY1tmXVtkXSxjW2ZdW2RdLHMpfXI9dGhpcy5fcmVjdCxyLmNvcHkobyksdGhpcy5jZW50ZXI9W3IueCtyLndpZHRoLzIsci55K3IuaGVpZ2h0LzJdfX07dmFyIER5PWZ1bmN0aW9uKHQpe3JldHVybiBYdSh0KSxwKHYodC5mZWF0dXJlcyxmdW5jdGlvbih0KXtyZXR1cm4gdC5nZW9tZXRyeSYmdC5wcm9wZXJ0aWVzJiZ0Lmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aD4wfSksZnVuY3Rpb24odCl7dmFyIGU9dC5wcm9wZXJ0aWVzLG49dC5nZW9tZXRyeSxpPW4uY29vcmRpbmF0ZXMscj1bXTtcIlBvbHlnb25cIj09PW4udHlwZSYmci5wdXNoKHt0eXBlOlwicG9seWdvblwiLGV4dGVyaW9yOmlbMF0saW50ZXJpb3JzOmkuc2xpY2UoMSl9KSxcIk11bHRpUG9seWdvblwiPT09bi50eXBlJiZmKGksZnVuY3Rpb24odCl7dFswXSYmci5wdXNoKHt0eXBlOlwicG9seWdvblwiLGV4dGVyaW9yOnRbMF0saW50ZXJpb3JzOnQuc2xpY2UoMSl9KX0pO3ZhciBhPW5ldyBVdShlLm5hbWUscixlLmNwKTtyZXR1cm4gYS5wcm9wZXJ0aWVzPWUsYX0pfSxBeT1WaSgpLFB5PVswLDFdLEx5PWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmRpbT10LHRoaXMuc2NhbGU9ZSx0aGlzLl9leHRlbnQ9bnx8WzAsMF0sdGhpcy5pbnZlcnNlPSExLHRoaXMub25CYW5kPSExfTtMeS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkx5LGNvbnRhaW46ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZXh0ZW50LG49TWF0aC5taW4oZVswXSxlWzFdKSxpPU1hdGgubWF4KGVbMF0sZVsxXSk7cmV0dXJuIHQ+PW4mJmk+PXR9LGNvbnRhaW5EYXRhOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNvbnRhaW4odGhpcy5kYXRhVG9Db29yZCh0KSl9LGdldEV4dGVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9leHRlbnQuc2xpY2UoKX0sZ2V0UGl4ZWxQcmVjaXNpb246ZnVuY3Rpb24odCl7cmV0dXJuIFdhKHR8fHRoaXMuc2NhbGUuZ2V0RXh0ZW50KCksdGhpcy5fZXh0ZW50KX0sc2V0RXh0ZW50OmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fZXh0ZW50O25bMF09dCxuWzFdPWV9LGRhdGFUb0Nvb3JkOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fZXh0ZW50LGk9dGhpcy5zY2FsZTtyZXR1cm4gdD1pLm5vcm1hbGl6ZSh0KSx0aGlzLm9uQmFuZCYmXCJvcmRpbmFsXCI9PT1pLnR5cGUmJihuPW4uc2xpY2UoKSxoaChuLGkuY291bnQoKSkpLHphKHQsUHksbixlKX0sY29vcmRUb0RhdGE6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9leHRlbnQsaT10aGlzLnNjYWxlO3RoaXMub25CYW5kJiZcIm9yZGluYWxcIj09PWkudHlwZSYmKG49bi5zbGljZSgpLGhoKG4saS5jb3VudCgpKSk7dmFyIHI9emEodCxuLFB5LGUpO3JldHVybiB0aGlzLnNjYWxlLnNjYWxlKHIpfSxwb2ludFRvRGF0YTpmdW5jdGlvbigpe30sZ2V0VGlja3NDb29yZHM6ZnVuY3Rpb24odCl7dD10fHx7fTt2YXIgZT10LnRpY2tNb2RlbHx8dGhpcy5nZXRUaWNrTW9kZWwoKSxuPSR1KHRoaXMsZSksaT1uLnRpY2tzLHI9cChpLGZ1bmN0aW9uKHQpe3JldHVybntjb29yZDp0aGlzLmRhdGFUb0Nvb3JkKHQpLHRpY2tWYWx1ZTp0fX0sdGhpcyksYT1lLmdldChcImFsaWduV2l0aExhYmVsXCIpO3JldHVybiBjaCh0aGlzLHIsbi50aWNrQ2F0ZWdvcnlJbnRlcnZhbCxhLHQuY2xhbXApLHJ9LGdldFZpZXdMYWJlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gWnUodGhpcykubGFiZWxzfSxnZXRMYWJlbE1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9kZWwuZ2V0TW9kZWwoXCJheGlzTGFiZWxcIil9LGdldFRpY2tNb2RlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1vZGVsLmdldE1vZGVsKFwiYXhpc1RpY2tcIil9LGdldEJhbmRXaWR0aDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2V4dGVudCxlPXRoaXMuc2NhbGUuZ2V0RXh0ZW50KCksbj1lWzFdLWVbMF0rKHRoaXMub25CYW5kPzE6MCk7MD09PW4mJihuPTEpO3ZhciBpPU1hdGguYWJzKHRbMV0tdFswXSk7cmV0dXJuIE1hdGguYWJzKGkpL259LGlzSG9yaXpvbnRhbDpudWxsLGdldFJvdGF0ZTpudWxsLGNhbGN1bGF0ZUNhdGVnb3J5SW50ZXJ2YWw6ZnVuY3Rpb24oKXtyZXR1cm4gYWgodGhpcyl9fTt2YXIgT3k9RHksUnk9e307ZihbXCJtYXBcIixcImVhY2hcIixcImZpbHRlclwiLFwiaW5kZXhPZlwiLFwiaW5oZXJpdHNcIixcInJlZHVjZVwiLFwiZmlsdGVyXCIsXCJiaW5kXCIsXCJjdXJyeVwiLFwiaXNBcnJheVwiLFwiaXNTdHJpbmdcIixcImlzT2JqZWN0XCIsXCJpc0Z1bmN0aW9uXCIsXCJleHRlbmRcIixcImRlZmF1bHRzXCIsXCJjbG9uZVwiLFwibWVyZ2VcIl0sZnVuY3Rpb24odCl7UnlbdF09QmNbdF19KSx3di5leHRlbmQoe3R5cGU6XCJzZXJpZXMubGluZVwiLGRlcGVuZGVuY2llczpbXCJncmlkXCIsXCJwb2xhclwiXSxnZXRJbml0aWFsRGF0YTpmdW5jdGlvbigpe3JldHVybiBsdSh0aGlzLmdldFNvdXJjZSgpLHRoaXMpfSxkZWZhdWx0T3B0aW9uOnt6bGV2ZWw6MCx6OjIsY29vcmRpbmF0ZVN5c3RlbTpcImNhcnRlc2lhbjJkXCIsbGVnZW5kSG92ZXJMaW5rOiEwLGhvdmVyQW5pbWF0aW9uOiEwLGNsaXBPdmVyZmxvdzohMCxsYWJlbDp7cG9zaXRpb246XCJ0b3BcIn0sbGluZVN0eWxlOnt3aWR0aDoyLHR5cGU6XCJzb2xpZFwifSxzdGVwOiExLHNtb290aDohMSxzbW9vdGhNb25vdG9uZTpudWxsLHN5bWJvbDpcImVtcHR5Q2lyY2xlXCIsc3ltYm9sU2l6ZTo0LHN5bWJvbFJvdGF0ZTpudWxsLHNob3dTeW1ib2w6ITAsc2hvd0FsbFN5bWJvbDpcImF1dG9cIixjb25uZWN0TnVsbHM6ITEsc2FtcGxpbmc6XCJub25lXCIsYW5pbWF0aW9uRWFzaW5nOlwibGluZWFyXCIscHJvZ3Jlc3NpdmU6MCxob3ZlckxheWVyVGhyZXNob2xkOjEvMH19KTt2YXIgRXk9ZmgucHJvdG90eXBlLEJ5PWZoLmdldFN5bWJvbFNpemU9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldEl0ZW1WaXN1YWwoZSxcInN5bWJvbFNpemVcIik7cmV0dXJuIG4gaW5zdGFuY2VvZiBBcnJheT9uLnNsaWNlKCk6WytuLCtuXX07RXkuX2NyZWF0ZVN5bWJvbD1mdW5jdGlvbih0LGUsbixpLHIpe3RoaXMucmVtb3ZlQWxsKCk7dmFyIGE9ZS5nZXRJdGVtVmlzdWFsKG4sXCJjb2xvclwiKSxvPVZ1KHQsLTEsLTEsMiwyLGEscik7by5hdHRyKHt6MjoxMDAsY3VsbGluZzohMCxzY2FsZTpwaChpKX0pLG8uZHJpZnQ9Z2gsdGhpcy5fc3ltYm9sVHlwZT10LHRoaXMuYWRkKG8pfSxFeS5zdG9wU3ltYm9sQW5pbWF0aW9uPWZ1bmN0aW9uKHQpe3RoaXMuY2hpbGRBdCgwKS5zdG9wQW5pbWF0aW9uKHQpfSxFeS5nZXRTeW1ib2xQYXRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGRBdCgwKX0sRXkuZ2V0U2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGlsZEF0KDApLnNjYWxlfSxFeS5oaWdobGlnaHQ9ZnVuY3Rpb24oKXt0aGlzLmNoaWxkQXQoMCkudHJpZ2dlcihcImVtcGhhc2lzXCIpfSxFeS5kb3ducGxheT1mdW5jdGlvbigpe3RoaXMuY2hpbGRBdCgwKS50cmlnZ2VyKFwibm9ybWFsXCIpfSxFeS5zZXRaPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5jaGlsZEF0KDApO24uemxldmVsPXQsbi56PWV9LEV5LnNldERyYWdnYWJsZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmNoaWxkQXQoMCk7ZS5kcmFnZ2FibGU9dCxlLmN1cnNvcj10P1wibW92ZVwiOlwicG9pbnRlclwifSxFeS51cGRhdGVEYXRhPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnNpbGVudD0hMTt2YXIgaT10LmdldEl0ZW1WaXN1YWwoZSxcInN5bWJvbFwiKXx8XCJjaXJjbGVcIixyPXQuaG9zdE1vZGVsLGE9QnkodCxlKSxvPWkhPT10aGlzLl9zeW1ib2xUeXBlO2lmKG8pe3ZhciBzPXQuZ2V0SXRlbVZpc3VhbChlLFwic3ltYm9sS2VlcEFzcGVjdFwiKTt0aGlzLl9jcmVhdGVTeW1ib2woaSx0LGUsYSxzKX1lbHNle3ZhciBsPXRoaXMuY2hpbGRBdCgwKTtsLnNpbGVudD0hMSx3YShsLHtzY2FsZTpwaChhKX0scixlKX1pZih0aGlzLl91cGRhdGVDb21tb24odCxlLGEsbiksbyl7dmFyIGw9dGhpcy5jaGlsZEF0KDApLHU9biYmbi5mYWRlSW4saD17c2NhbGU6bC5zY2FsZS5zbGljZSgpfTt1JiYoaC5zdHlsZT17b3BhY2l0eTpsLnN0eWxlLm9wYWNpdHl9KSxsLnNjYWxlPVswLDBdLHUmJihsLnN0eWxlLm9wYWNpdHk9MCksYmEobCxoLHIsZSl9dGhpcy5fc2VyaWVzTW9kZWw9cn07dmFyIHp5PVtcIml0ZW1TdHlsZVwiXSxOeT1bXCJlbXBoYXNpc1wiLFwiaXRlbVN0eWxlXCJdLEZ5PVtcImxhYmVsXCJdLFZ5PVtcImVtcGhhc2lzXCIsXCJsYWJlbFwiXTtFeS5fdXBkYXRlQ29tbW9uPWZ1bmN0aW9uKHQsZSxuLGkpe2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGI/dC5nZXROYW1lKGUpOmRoKHQsZSl9dmFyIGE9dGhpcy5jaGlsZEF0KDApLHM9dC5ob3N0TW9kZWwsbD10LmdldEl0ZW1WaXN1YWwoZSxcImNvbG9yXCIpO1wiaW1hZ2VcIiE9PWEudHlwZSYmYS51c2VTdHlsZSh7c3Ryb2tlTm9TY2FsZTohMH0pO1xudmFyIHU9aSYmaS5pdGVtU3R5bGUsaD1pJiZpLmhvdmVySXRlbVN0eWxlLGM9aSYmaS5zeW1ib2xSb3RhdGUsZD1pJiZpLnN5bWJvbE9mZnNldCxmPWkmJmkubGFiZWxNb2RlbCxwPWkmJmkuaG92ZXJMYWJlbE1vZGVsLGc9aSYmaS5ob3ZlckFuaW1hdGlvbix2PWkmJmkuY3Vyc29yU3R5bGU7aWYoIWl8fHQuaGFzSXRlbU9wdGlvbil7dmFyIG09aSYmaS5pdGVtTW9kZWw/aS5pdGVtTW9kZWw6dC5nZXRJdGVtTW9kZWwoZSk7dT1tLmdldE1vZGVsKHp5KS5nZXRJdGVtU3R5bGUoW1wiY29sb3JcIl0pLGg9bS5nZXRNb2RlbChOeSkuZ2V0SXRlbVN0eWxlKCksYz1tLmdldFNoYWxsb3coXCJzeW1ib2xSb3RhdGVcIiksZD1tLmdldFNoYWxsb3coXCJzeW1ib2xPZmZzZXRcIiksZj1tLmdldE1vZGVsKEZ5KSxwPW0uZ2V0TW9kZWwoVnkpLGc9bS5nZXRTaGFsbG93KFwiaG92ZXJBbmltYXRpb25cIiksdj1tLmdldFNoYWxsb3coXCJjdXJzb3JcIil9ZWxzZSBoPW8oe30saCk7dmFyIHk9YS5zdHlsZTthLmF0dHIoXCJyb3RhdGlvblwiLChjfHwwKSpNYXRoLlBJLzE4MHx8MCksZCYmYS5hdHRyKFwicG9zaXRpb25cIixbTmEoZFswXSxuWzBdKSxOYShkWzFdLG5bMV0pXSksdiYmYS5hdHRyKFwiY3Vyc29yXCIsdiksYS5zZXRDb2xvcihsLGkmJmkuc3ltYm9sSW5uZXJDb2xvciksYS5zZXRTdHlsZSh1KTt2YXIgXz10LmdldEl0ZW1WaXN1YWwoZSxcIm9wYWNpdHlcIik7bnVsbCE9XyYmKHkub3BhY2l0eT1fKTt2YXIgeD10LmdldEl0ZW1WaXN1YWwoZSxcImxpZnRaXCIpLHc9YS5fX3oyT3JpZ2luO251bGwhPXg/bnVsbD09dyYmKGEuX196Mk9yaWdpbj1hLnoyLGEuejIrPXgpOm51bGwhPXcmJihhLnoyPXcsYS5fX3oyT3JpZ2luPW51bGwpO3ZhciBiPWkmJmkudXNlTmFtZUxhYmVsO2hhKHksaCxmLHAse2xhYmVsRmV0Y2hlcjpzLGxhYmVsRGF0YUluZGV4OmUsZGVmYXVsdFRleHQ6cixpc1JlY3RUZXh0OiEwLGF1dG9Db2xvcjpsfSksYS5vZmYoXCJtb3VzZW92ZXJcIikub2ZmKFwibW91c2VvdXRcIikub2ZmKFwiZW1waGFzaXNcIikub2ZmKFwibm9ybWFsXCIpLGEuaG92ZXJTdHlsZT1oLHVhKGEpO3ZhciBNPXBoKG4pO2lmKGcmJnMuaXNBbmltYXRpb25FbmFibGVkKCkpe3ZhciBTPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaW5jcmVtZW50YWwpe3ZhciB0PU1bMV0vTVswXTt0aGlzLmFuaW1hdGVUbyh7c2NhbGU6W01hdGgubWF4KDEuMSpNWzBdLE1bMF0rMyksTWF0aC5tYXgoMS4xKk1bMV0sTVsxXSszKnQpXX0sNDAwLFwiZWxhc3RpY091dFwiKX19LEM9ZnVuY3Rpb24oKXt0aGlzLmluY3JlbWVudGFsfHx0aGlzLmFuaW1hdGVUbyh7c2NhbGU6TX0sNDAwLFwiZWxhc3RpY091dFwiKX07YS5vbihcIm1vdXNlb3ZlclwiLFMpLm9uKFwibW91c2VvdXRcIixDKS5vbihcImVtcGhhc2lzXCIsUykub24oXCJub3JtYWxcIixDKX19LEV5LmZhZGVPdXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNoaWxkQXQoMCk7dGhpcy5zaWxlbnQ9bi5zaWxlbnQ9ITAsIShlJiZlLmtlZXBMYWJlbCkmJihuLnN0eWxlLnRleHQ9bnVsbCksd2Eobix7c3R5bGU6e29wYWNpdHk6MH0sc2NhbGU6WzAsMF19LHRoaXMuX3Nlcmllc01vZGVsLHRoaXMuZGF0YUluZGV4LHQpfSxoKGZoLENkKTt2YXIgR3k9dmgucHJvdG90eXBlO0d5LnVwZGF0ZURhdGE9ZnVuY3Rpb24odCxlKXtlPXloKGUpO3ZhciBuPXRoaXMuZ3JvdXAsaT10Lmhvc3RNb2RlbCxyPXRoaXMuX2RhdGEsYT10aGlzLl9zeW1ib2xDdG9yLG89X2godCk7cnx8bi5yZW1vdmVBbGwoKSx0LmRpZmYocikuYWRkKGZ1bmN0aW9uKGkpe3ZhciByPXQuZ2V0SXRlbUxheW91dChpKTtpZihtaCh0LHIsaSxlKSl7dmFyIHM9bmV3IGEodCxpLG8pO3MuYXR0cihcInBvc2l0aW9uXCIsciksdC5zZXRJdGVtR3JhcGhpY0VsKGkscyksbi5hZGQocyl9fSkudXBkYXRlKGZ1bmN0aW9uKHMsbCl7dmFyIHU9ci5nZXRJdGVtR3JhcGhpY0VsKGwpLGg9dC5nZXRJdGVtTGF5b3V0KHMpO3JldHVybiBtaCh0LGgscyxlKT8odT8odS51cGRhdGVEYXRhKHQscyxvKSx3YSh1LHtwb3NpdGlvbjpofSxpKSk6KHU9bmV3IGEodCxzKSx1LmF0dHIoXCJwb3NpdGlvblwiLGgpKSxuLmFkZCh1KSx2b2lkIHQuc2V0SXRlbUdyYXBoaWNFbChzLHUpKTp2b2lkIG4ucmVtb3ZlKHUpfSkucmVtb3ZlKGZ1bmN0aW9uKHQpe3ZhciBlPXIuZ2V0SXRlbUdyYXBoaWNFbCh0KTtlJiZlLmZhZGVPdXQoZnVuY3Rpb24oKXtuLnJlbW92ZShlKX0pfSkuZXhlY3V0ZSgpLHRoaXMuX2RhdGE9dH0sR3kuaXNQZXJzaXN0ZW50PWZ1bmN0aW9uKCl7cmV0dXJuITB9LEd5LnVwZGF0ZUxheW91dD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RhdGE7dCYmdC5lYWNoSXRlbUdyYXBoaWNFbChmdW5jdGlvbihlLG4pe3ZhciBpPXQuZ2V0SXRlbUxheW91dChuKTtlLmF0dHIoXCJwb3NpdGlvblwiLGkpfSl9LEd5LmluY3JlbWVudGFsUHJlcGFyZVVwZGF0ZT1mdW5jdGlvbih0KXt0aGlzLl9zZXJpZXNTY29wZT1faCh0KSx0aGlzLl9kYXRhPW51bGwsdGhpcy5ncm91cC5yZW1vdmVBbGwoKX0sR3kuaW5jcmVtZW50YWxVcGRhdGU9ZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7dC5pc0dyb3VwfHwodC5pbmNyZW1lbnRhbD10LnVzZUhvdmVyTGF5ZXI9ITApfW49eWgobik7Zm9yKHZhciByPXQuc3RhcnQ7cjx0LmVuZDtyKyspe3ZhciBhPWUuZ2V0SXRlbUxheW91dChyKTtpZihtaChlLGEscixuKSl7dmFyIG89bmV3IHRoaXMuX3N5bWJvbEN0b3IoZSxyLHRoaXMuX3Nlcmllc1Njb3BlKTtvLnRyYXZlcnNlKGkpLG8uYXR0cihcInBvc2l0aW9uXCIsYSksdGhpcy5ncm91cC5hZGQobyksZS5zZXRJdGVtR3JhcGhpY0VsKHIsbyl9fX0sR3kucmVtb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ3JvdXAsbj10aGlzLl9kYXRhO24mJnQ/bi5lYWNoSXRlbUdyYXBoaWNFbChmdW5jdGlvbih0KXt0LmZhZGVPdXQoZnVuY3Rpb24oKXtlLnJlbW92ZSh0KX0pfSk6ZS5yZW1vdmVBbGwoKX07dmFyIEh5PWZ1bmN0aW9uKHQsZSxuLGkscixhLG8scyl7Zm9yKHZhciBsPU1oKHQsZSksdT1bXSxoPVtdLGM9W10sZD1bXSxmPVtdLHA9W10sZz1bXSx2PXhoKHIsZSxvKSxtPXhoKGEsdCxzKSx5PTA7eTxsLmxlbmd0aDt5Kyspe3ZhciBfPWxbeV0seD0hMDtzd2l0Y2goXy5jbWQpe2Nhc2VcIj1cIjp2YXIgdz10LmdldEl0ZW1MYXlvdXQoXy5pZHgpLGI9ZS5nZXRJdGVtTGF5b3V0KF8uaWR4MSk7KGlzTmFOKHdbMF0pfHxpc05hTih3WzFdKSkmJih3PWIuc2xpY2UoKSksdS5wdXNoKHcpLGgucHVzaChiKSxjLnB1c2gobltfLmlkeF0pLGQucHVzaChpW18uaWR4MV0pLGcucHVzaChlLmdldFJhd0luZGV4KF8uaWR4MSkpO2JyZWFrO2Nhc2VcIitcIjp2YXIgTT1fLmlkeDt1LnB1c2goci5kYXRhVG9Qb2ludChbZS5nZXQodi5kYXRhRGltc0ZvclBvaW50WzBdLE0pLGUuZ2V0KHYuZGF0YURpbXNGb3JQb2ludFsxXSxNKV0pKSxoLnB1c2goZS5nZXRJdGVtTGF5b3V0KE0pLnNsaWNlKCkpLGMucHVzaChiaCh2LHIsZSxNKSksZC5wdXNoKGlbTV0pLGcucHVzaChlLmdldFJhd0luZGV4KE0pKTticmVhaztjYXNlXCItXCI6dmFyIE09Xy5pZHgsUz10LmdldFJhd0luZGV4KE0pO1MhPT1NPyh1LnB1c2godC5nZXRJdGVtTGF5b3V0KE0pKSxoLnB1c2goYS5kYXRhVG9Qb2ludChbdC5nZXQobS5kYXRhRGltc0ZvclBvaW50WzBdLE0pLHQuZ2V0KG0uZGF0YURpbXNGb3JQb2ludFsxXSxNKV0pKSxjLnB1c2gobltNXSksZC5wdXNoKGJoKG0sYSx0LE0pKSxnLnB1c2goUykpOng9ITF9eCYmKGYucHVzaChfKSxwLnB1c2gocC5sZW5ndGgpKX1wLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gZ1t0XS1nW2VdfSk7Zm9yKHZhciBDPVtdLEk9W10sVD1bXSxrPVtdLEQ9W10seT0wO3k8cC5sZW5ndGg7eSsrKXt2YXIgTT1wW3ldO0NbeV09dVtNXSxJW3ldPWhbTV0sVFt5XT1jW01dLGtbeV09ZFtNXSxEW3ldPWZbTV19cmV0dXJue2N1cnJlbnQ6QyxuZXh0Okksc3RhY2tlZE9uQ3VycmVudDpULHN0YWNrZWRPbk5leHQ6ayxzdGF0dXM6RH19LFd5PW9lLGp5PXNlLHF5PVUsVXk9SCxYeT1bXSxZeT1bXSxaeT1bXSwkeT1Qci5leHRlbmQoe3R5cGU6XCJlYy1wb2x5bGluZVwiLHNoYXBlOntwb2ludHM6W10sc21vb3RoOjAsc21vb3RoQ29uc3RyYWludDohMCxzbW9vdGhNb25vdG9uZTpudWxsLGNvbm5lY3ROdWxsczohMX0sc3R5bGU6e2ZpbGw6bnVsbCxzdHJva2U6XCIjMDAwXCJ9LGJydXNoOlZwKFByLnByb3RvdHlwZS5icnVzaCksYnVpbGRQYXRoOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5wb2ludHMsaT0wLHI9bi5sZW5ndGgsYT1raChuLGUuc21vb3RoQ29uc3RyYWludCk7aWYoZS5jb25uZWN0TnVsbHMpe2Zvcig7cj4wJiZTaChuW3ItMV0pO3ItLSk7Zm9yKDtyPmkmJlNoKG5baV0pO2krKyk7fWZvcig7cj5pOylpKz1DaCh0LG4saSxyLHIsMSxhLm1pbixhLm1heCxlLnNtb290aCxlLnNtb290aE1vbm90b25lLGUuY29ubmVjdE51bGxzKSsxfX0pLEt5PVByLmV4dGVuZCh7dHlwZTpcImVjLXBvbHlnb25cIixzaGFwZTp7cG9pbnRzOltdLHN0YWNrZWRPblBvaW50czpbXSxzbW9vdGg6MCxzdGFja2VkT25TbW9vdGg6MCxzbW9vdGhDb25zdHJhaW50OiEwLHNtb290aE1vbm90b25lOm51bGwsY29ubmVjdE51bGxzOiExfSxicnVzaDpWcChQci5wcm90b3R5cGUuYnJ1c2gpLGJ1aWxkUGF0aDpmdW5jdGlvbih0LGUpe3ZhciBuPWUucG9pbnRzLGk9ZS5zdGFja2VkT25Qb2ludHMscj0wLGE9bi5sZW5ndGgsbz1lLnNtb290aE1vbm90b25lLHM9a2gobixlLnNtb290aENvbnN0cmFpbnQpLGw9a2goaSxlLnNtb290aENvbnN0cmFpbnQpO2lmKGUuY29ubmVjdE51bGxzKXtmb3IoO2E+MCYmU2goblthLTFdKTthLS0pO2Zvcig7YT5yJiZTaChuW3JdKTtyKyspO31mb3IoO2E+cjspe3ZhciB1PUNoKHQsbixyLGEsYSwxLHMubWluLHMubWF4LGUuc21vb3RoLG8sZS5jb25uZWN0TnVsbHMpO0NoKHQsaSxyK3UtMSx1LGEsLTEsbC5taW4sbC5tYXgsZS5zdGFja2VkT25TbW9vdGgsbyxlLmNvbm5lY3ROdWxscykscis9dSsxLHQuY2xvc2VQYXRoKCl9fX0pO0NzLmV4dGVuZCh7dHlwZTpcImxpbmVcIixpbml0OmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IENkLGU9bmV3IHZoO3RoaXMuZ3JvdXAuYWRkKGUuZ3JvdXApLHRoaXMuX3N5bWJvbERyYXc9ZSx0aGlzLl9saW5lR3JvdXA9dH0scmVuZGVyOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmNvb3JkaW5hdGVTeXN0ZW0scj10aGlzLmdyb3VwLGE9dC5nZXREYXRhKCksbz10LmdldE1vZGVsKFwibGluZVN0eWxlXCIpLGw9dC5nZXRNb2RlbChcImFyZWFTdHlsZVwiKSx1PWEubWFwQXJyYXkoYS5nZXRJdGVtTGF5b3V0KSxoPVwicG9sYXJcIj09PWkudHlwZSxjPXRoaXMuX2Nvb3JkU3lzLGQ9dGhpcy5fc3ltYm9sRHJhdyxmPXRoaXMuX3BvbHlsaW5lLHA9dGhpcy5fcG9seWdvbixnPXRoaXMuX2xpbmVHcm91cCx2PXQuZ2V0KFwiYW5pbWF0aW9uXCIpLG09IWwuaXNFbXB0eSgpLHk9bC5nZXQoXCJvcmlnaW5cIiksXz14aChpLGEseSkseD1MaChpLGEsXyksdz10LmdldChcInNob3dTeW1ib2xcIiksYj13JiYhaCYmTmgodCxhLGkpLE09dGhpcy5fZGF0YTtNJiZNLmVhY2hJdGVtR3JhcGhpY0VsKGZ1bmN0aW9uKHQsZSl7dC5fX3RlbXAmJihyLnJlbW92ZSh0KSxNLnNldEl0ZW1HcmFwaGljRWwoZSxudWxsKSl9KSx3fHxkLnJlbW92ZSgpLHIuYWRkKGcpO3ZhciBTPSFoJiZ0LmdldChcInN0ZXBcIik7ZiYmYy50eXBlPT09aS50eXBlJiZTPT09dGhpcy5fc3RlcD8obSYmIXA/cD10aGlzLl9uZXdQb2x5Z29uKHUseCxpLHYpOnAmJiFtJiYoZy5yZW1vdmUocCkscD10aGlzLl9wb2x5Z29uPW51bGwpLGcuc2V0Q2xpcFBhdGgoRWgoaSwhMSwhMSx0KSksdyYmZC51cGRhdGVEYXRhKGEse2lzSWdub3JlOmIsY2xpcFNoYXBlOkVoKGksITEsITAsdCl9KSxhLmVhY2hJdGVtR3JhcGhpY0VsKGZ1bmN0aW9uKHQpe3Quc3RvcEFuaW1hdGlvbighMCl9KSxEaCh0aGlzLl9zdGFja2VkT25Qb2ludHMseCkmJkRoKHRoaXMuX3BvaW50cyx1KXx8KHY/dGhpcy5fdXBkYXRlQW5pbWF0aW9uKGEseCxpLG4sUyx5KTooUyYmKHU9QmgodSxpLFMpLHg9QmgoeCxpLFMpKSxmLnNldFNoYXBlKHtwb2ludHM6dX0pLHAmJnAuc2V0U2hhcGUoe3BvaW50czp1LHN0YWNrZWRPblBvaW50czp4fSkpKSk6KHcmJmQudXBkYXRlRGF0YShhLHtpc0lnbm9yZTpiLGNsaXBTaGFwZTpFaChpLCExLCEwLHQpfSksUyYmKHU9QmgodSxpLFMpLHg9QmgoeCxpLFMpKSxmPXRoaXMuX25ld1BvbHlsaW5lKHUsaSx2KSxtJiYocD10aGlzLl9uZXdQb2x5Z29uKHUseCxpLHYpKSxnLnNldENsaXBQYXRoKEVoKGksITAsITEsdCkpKTt2YXIgQz16aChhLGkpfHxhLmdldFZpc3VhbChcImNvbG9yXCIpO2YudXNlU3R5bGUocyhvLmdldExpbmVTdHlsZSgpLHtmaWxsOlwibm9uZVwiLHN0cm9rZTpDLGxpbmVKb2luOlwiYmV2ZWxcIn0pKTt2YXIgST10LmdldChcInNtb290aFwiKTtpZihJPUFoKHQuZ2V0KFwic21vb3RoXCIpKSxmLnNldFNoYXBlKHtzbW9vdGg6SSxzbW9vdGhNb25vdG9uZTp0LmdldChcInNtb290aE1vbm90b25lXCIpLGNvbm5lY3ROdWxsczp0LmdldChcImNvbm5lY3ROdWxsc1wiKX0pLHApe3ZhciBUPWEuZ2V0Q2FsY3VsYXRpb25JbmZvKFwic3RhY2tlZE9uU2VyaWVzXCIpLGs9MDtwLnVzZVN0eWxlKHMobC5nZXRBcmVhU3R5bGUoKSx7ZmlsbDpDLG9wYWNpdHk6LjcsbGluZUpvaW46XCJiZXZlbFwifSkpLFQmJihrPUFoKFQuZ2V0KFwic21vb3RoXCIpKSkscC5zZXRTaGFwZSh7c21vb3RoOkksc3RhY2tlZE9uU21vb3RoOmssc21vb3RoTW9ub3RvbmU6dC5nZXQoXCJzbW9vdGhNb25vdG9uZVwiKSxjb25uZWN0TnVsbHM6dC5nZXQoXCJjb25uZWN0TnVsbHNcIil9KX10aGlzLl9kYXRhPWEsdGhpcy5fY29vcmRTeXM9aSx0aGlzLl9zdGFja2VkT25Qb2ludHM9eCx0aGlzLl9wb2ludHM9dSx0aGlzLl9zdGVwPVMsdGhpcy5fdmFsdWVPcmlnaW49eX0sZGlzcG9zZTpmdW5jdGlvbigpe30saGlnaGxpZ2h0OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQuZ2V0RGF0YSgpLGE9RmkocixpKTtpZighKGEgaW5zdGFuY2VvZiBBcnJheSkmJm51bGwhPWEmJmE+PTApe3ZhciBvPXIuZ2V0SXRlbUdyYXBoaWNFbChhKTtpZighbyl7dmFyIHM9ci5nZXRJdGVtTGF5b3V0KGEpO2lmKCFzKXJldHVybjtvPW5ldyBmaChyLGEpLG8ucG9zaXRpb249cyxvLnNldFoodC5nZXQoXCJ6bGV2ZWxcIiksdC5nZXQoXCJ6XCIpKSxvLmlnbm9yZT1pc05hTihzWzBdKXx8aXNOYU4oc1sxXSksby5fX3RlbXA9ITAsci5zZXRJdGVtR3JhcGhpY0VsKGEsbyksby5zdG9wU3ltYm9sQW5pbWF0aW9uKCEwKSx0aGlzLmdyb3VwLmFkZChvKX1vLmhpZ2hsaWdodCgpfWVsc2UgQ3MucHJvdG90eXBlLmhpZ2hsaWdodC5jYWxsKHRoaXMsdCxlLG4saSl9LGRvd25wbGF5OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQuZ2V0RGF0YSgpLGE9RmkocixpKTtpZihudWxsIT1hJiZhPj0wKXt2YXIgbz1yLmdldEl0ZW1HcmFwaGljRWwoYSk7byYmKG8uX190ZW1wPyhyLnNldEl0ZW1HcmFwaGljRWwoYSxudWxsKSx0aGlzLmdyb3VwLnJlbW92ZShvKSk6by5kb3ducGxheSgpKX1lbHNlIENzLnByb3RvdHlwZS5kb3ducGxheS5jYWxsKHRoaXMsdCxlLG4saSl9LF9uZXdQb2x5bGluZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9wb2x5bGluZTtyZXR1cm4gZSYmdGhpcy5fbGluZUdyb3VwLnJlbW92ZShlKSxlPW5ldyAkeSh7c2hhcGU6e3BvaW50czp0fSxzaWxlbnQ6ITAsejI6MTB9KSx0aGlzLl9saW5lR3JvdXAuYWRkKGUpLHRoaXMuX3BvbHlsaW5lPWUsZX0sX25ld1BvbHlnb246ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9wb2x5Z29uO3JldHVybiBuJiZ0aGlzLl9saW5lR3JvdXAucmVtb3ZlKG4pLG49bmV3IEt5KHtzaGFwZTp7cG9pbnRzOnQsc3RhY2tlZE9uUG9pbnRzOmV9LHNpbGVudDohMH0pLHRoaXMuX2xpbmVHcm91cC5hZGQobiksdGhpcy5fcG9seWdvbj1uLG59LF91cGRhdGVBbmltYXRpb246ZnVuY3Rpb24odCxlLG4saSxyLGEpe3ZhciBvPXRoaXMuX3BvbHlsaW5lLHM9dGhpcy5fcG9seWdvbixsPXQuaG9zdE1vZGVsLHU9SHkodGhpcy5fZGF0YSx0LHRoaXMuX3N0YWNrZWRPblBvaW50cyxlLHRoaXMuX2Nvb3JkU3lzLG4sdGhpcy5fdmFsdWVPcmlnaW4sYSksaD11LmN1cnJlbnQsYz11LnN0YWNrZWRPbkN1cnJlbnQsZD11Lm5leHQsZj11LnN0YWNrZWRPbk5leHQ7ciYmKGg9QmgodS5jdXJyZW50LG4sciksYz1CaCh1LnN0YWNrZWRPbkN1cnJlbnQsbixyKSxkPUJoKHUubmV4dCxuLHIpLGY9QmgodS5zdGFja2VkT25OZXh0LG4scikpLG8uc2hhcGUuX19wb2ludHM9dS5jdXJyZW50LG8uc2hhcGUucG9pbnRzPWgsd2Eobyx7c2hhcGU6e3BvaW50czpkfX0sbCkscyYmKHMuc2V0U2hhcGUoe3BvaW50czpoLHN0YWNrZWRPblBvaW50czpjfSksd2Eocyx7c2hhcGU6e3BvaW50czpkLHN0YWNrZWRPblBvaW50czpmfX0sbCkpO2Zvcih2YXIgcD1bXSxnPXUuc3RhdHVzLHY9MDt2PGcubGVuZ3RoO3YrKyl7dmFyIG09Z1t2XS5jbWQ7aWYoXCI9XCI9PT1tKXt2YXIgeT10LmdldEl0ZW1HcmFwaGljRWwoZ1t2XS5pZHgxKTt5JiZwLnB1c2goe2VsOnkscHRJZHg6dn0pfX1vLmFuaW1hdG9ycyYmby5hbmltYXRvcnMubGVuZ3RoJiZvLmFuaW1hdG9yc1swXS5kdXJpbmcoZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHAubGVuZ3RoO3QrKyl7dmFyIGU9cFt0XS5lbDtlLmF0dHIoXCJwb3NpdGlvblwiLG8uc2hhcGUuX19wb2ludHNbcFt0XS5wdElkeF0pfX0pfSxyZW1vdmU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdyb3VwLGU9dGhpcy5fZGF0YTt0aGlzLl9saW5lR3JvdXAucmVtb3ZlQWxsKCksdGhpcy5fc3ltYm9sRHJhdy5yZW1vdmUoITApLGUmJmUuZWFjaEl0ZW1HcmFwaGljRWwoZnVuY3Rpb24obixpKXtuLl9fdGVtcCYmKHQucmVtb3ZlKG4pLGUuc2V0SXRlbUdyYXBoaWNFbChpLG51bGwpKX0pLHRoaXMuX3BvbHlsaW5lPXRoaXMuX3BvbHlnb249dGhpcy5fY29vcmRTeXM9dGhpcy5fcG9pbnRzPXRoaXMuX3N0YWNrZWRPblBvaW50cz10aGlzLl9kYXRhPW51bGx9fSk7dmFyIFF5PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm57c2VyaWVzVHlwZTp0LHBlcmZvcm1SYXdTZXJpZXM6ITAscmVzZXQ6ZnVuY3Rpb24odCxpKXtmdW5jdGlvbiByKGUsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygcyl7dmFyIGk9dC5nZXRSYXdWYWx1ZShuKSxyPXQuZ2V0RGF0YVBhcmFtcyhuKTtlLnNldEl0ZW1WaXN1YWwobixcInN5bWJvbFNpemVcIixzKGkscikpfWlmKGUuaGFzSXRlbU9wdGlvbil7dmFyIGE9ZS5nZXRJdGVtTW9kZWwobiksbz1hLmdldFNoYWxsb3coXCJzeW1ib2xcIiwhMCksbD1hLmdldFNoYWxsb3coXCJzeW1ib2xTaXplXCIsITApLHU9YS5nZXRTaGFsbG93KFwic3ltYm9sS2VlcEFzcGVjdFwiLCEwKTtudWxsIT1vJiZlLnNldEl0ZW1WaXN1YWwobixcInN5bWJvbFwiLG8pLG51bGwhPWwmJmUuc2V0SXRlbVZpc3VhbChuLFwic3ltYm9sU2l6ZVwiLGwpLG51bGwhPXUmJmUuc2V0SXRlbVZpc3VhbChuLFwic3ltYm9sS2VlcEFzcGVjdFwiLHUpfX12YXIgYT10LmdldERhdGEoKSxvPXQuZ2V0KFwic3ltYm9sXCIpfHxlLHM9dC5nZXQoXCJzeW1ib2xTaXplXCIpLGw9dC5nZXQoXCJzeW1ib2xLZWVwQXNwZWN0XCIpO2lmKGEuc2V0VmlzdWFsKHtsZWdlbmRTeW1ib2w6bnx8byxzeW1ib2w6byxzeW1ib2xTaXplOnMsc3ltYm9sS2VlcEFzcGVjdDpsfSksIWkuaXNTZXJpZXNGaWx0ZXJlZCh0KSl7dmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcztyZXR1cm57ZGF0YUVhY2g6YS5oYXNJdGVtT3B0aW9ufHx1P3I6bnVsbH19fX19LEp5PWZ1bmN0aW9uKHQpe3JldHVybntzZXJpZXNUeXBlOnQscGxhbjpTdigpLHJlc2V0OmZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlKXtmb3IodmFyIG49dC5lbmQtdC5zdGFydCxyPWEmJm5ldyBGbG9hdDMyQXJyYXkobipzKSxsPXQuc3RhcnQsdT0wLGg9W10sYz1bXTtsPHQuZW5kO2wrKyl7dmFyIGQ7aWYoMT09PXMpe3ZhciBmPWUuZ2V0KG9bMF0sbCk7ZD0haXNOYU4oZikmJmkuZGF0YVRvUG9pbnQoZixudWxsLGMpfWVsc2V7dmFyIGY9aFswXT1lLmdldChvWzBdLGwpLHA9aFsxXT1lLmdldChvWzFdLGwpO2Q9IWlzTmFOKGYpJiYhaXNOYU4ocCkmJmkuZGF0YVRvUG9pbnQoaCxudWxsLGMpfWE/KHJbdSsrXT1kP2RbMF06MC8wLHJbdSsrXT1kP2RbMV06MC8wKTplLnNldEl0ZW1MYXlvdXQobCxkJiZkLnNsaWNlKCl8fFswLzAsMC8wXSl9YSYmZS5zZXRMYXlvdXQoXCJzeW1ib2xQb2ludHNcIixyKX12YXIgbj10LmdldERhdGEoKSxpPXQuY29vcmRpbmF0ZVN5c3RlbSxyPXQucGlwZWxpbmVDb250ZXh0LGE9ci5sYXJnZTtpZihpKXt2YXIgbz1wKGkuZGltZW5zaW9ucyxmdW5jdGlvbih0KXtyZXR1cm4gbi5tYXBEaW1lbnNpb24odCl9KS5zbGljZSgwLDIpLHM9by5sZW5ndGgsbD1uLmdldENhbGN1bGF0aW9uSW5mbyhcInN0YWNrUmVzdWx0RGltZW5zaW9uXCIpO3JldHVybiBvdShuLG9bMF0pJiYob1swXT1sKSxvdShuLG9bMV0pJiYob1sxXT1sKSxzJiZ7cHJvZ3Jlc3M6ZX19fX19LHRfPXthdmVyYWdlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49MCxpPTA7aTx0Lmxlbmd0aDtpKyspaXNOYU4odFtpXSl8fChlKz10W2ldLG4rKyk7cmV0dXJuIDA9PT1uPzAvMDplL259LHN1bTpmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPTA7bjx0Lmxlbmd0aDtuKyspZSs9dFtuXXx8MDtyZXR1cm4gZX0sbWF4OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0tMS8wLG49MDtuPHQubGVuZ3RoO24rKyl0W25dPmUmJihlPXRbbl0pO3JldHVybiBpc0Zpbml0ZShlKT9lOjAvMH0sbWluOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xLzAsbj0wO248dC5sZW5ndGg7bisrKXRbbl08ZSYmKGU9dFtuXSk7cmV0dXJuIGlzRmluaXRlKGUpP2U6MC8wfSxuZWFyZXN0OmZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfX0sZV89ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGgucm91bmQodC5sZW5ndGgvMil9LG5fPWZ1bmN0aW9uKHQpe3JldHVybntzZXJpZXNUeXBlOnQsbW9kaWZ5T3V0cHV0RW5kOiEwLHJlc2V0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0RGF0YSgpLG49dC5nZXQoXCJzYW1wbGluZ1wiKSxpPXQuY29vcmRpbmF0ZVN5c3RlbTtpZihcImNhcnRlc2lhbjJkXCI9PT1pLnR5cGUmJm4pe3ZhciByPWkuZ2V0QmFzZUF4aXMoKSxhPWkuZ2V0T3RoZXJBeGlzKHIpLG89ci5nZXRFeHRlbnQoKSxzPW9bMV0tb1swXSxsPU1hdGgucm91bmQoZS5jb3VudCgpL3MpO2lmKGw+MSl7dmFyIHU7XCJzdHJpbmdcIj09dHlwZW9mIG4/dT10X1tuXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYodT1uKSx1JiZ0LnNldERhdGEoZS5kb3duU2FtcGxlKGUubWFwRGltZW5zaW9uKGEuZGltKSwxL2wsdSxlXykpfX19fX0saV89ZnVuY3Rpb24odCl7dGhpcy5fYXhlcz17fSx0aGlzLl9kaW1MaXN0PVtdLHRoaXMubmFtZT10fHxcIlwifTtpXy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmlfLHR5cGU6XCJjYXJ0ZXNpYW5cIixnZXRBeGlzOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9heGVzW3RdfSxnZXRBeGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpcy5fZGltTGlzdCxWaCx0aGlzKX0sZ2V0QXhlc0J5U2NhbGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC50b0xvd2VyQ2FzZSgpLHYodGhpcy5nZXRBeGVzKCksZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2NhbGUudHlwZT09PXR9KX0sYWRkQXhpczpmdW5jdGlvbih0KXt2YXIgZT10LmRpbTt0aGlzLl9heGVzW2VdPXQsdGhpcy5fZGltTGlzdC5wdXNoKGUpfSxkYXRhVG9Db29yZDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fZGF0YUNvb3JkQ29udmVydCh0LFwiZGF0YVRvQ29vcmRcIil9LGNvb3JkVG9EYXRhOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9kYXRhQ29vcmRDb252ZXJ0KHQsXCJjb29yZFRvRGF0YVwiKX0sX2RhdGFDb29yZENvbnZlcnQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy5fZGltTGlzdCxpPXQgaW5zdGFuY2VvZiBBcnJheT9bXTp7fSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBhPW5bcl0sbz10aGlzLl9heGVzW2FdO2lbYV09b1tlXSh0W2FdKX1yZXR1cm4gaX19LEdoLnByb3RvdHlwZT17Y29uc3RydWN0b3I6R2gsdHlwZTpcImNhcnRlc2lhbjJkXCIsZGltZW5zaW9uczpbXCJ4XCIsXCJ5XCJdLGdldEJhc2VBeGlzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QXhlc0J5U2NhbGUoXCJvcmRpbmFsXCIpWzBdfHx0aGlzLmdldEF4ZXNCeVNjYWxlKFwidGltZVwiKVswXXx8dGhpcy5nZXRBeGlzKFwieFwiKX0sY29udGFpblBvaW50OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0QXhpcyhcInhcIiksbj10aGlzLmdldEF4aXMoXCJ5XCIpO3JldHVybiBlLmNvbnRhaW4oZS50b0xvY2FsQ29vcmQodFswXSkpJiZuLmNvbnRhaW4obi50b0xvY2FsQ29vcmQodFsxXSkpfSxjb250YWluRGF0YTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRBeGlzKFwieFwiKS5jb250YWluRGF0YSh0WzBdKSYmdGhpcy5nZXRBeGlzKFwieVwiKS5jb250YWluRGF0YSh0WzFdKX0sZGF0YVRvUG9pbnQ6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuZ2V0QXhpcyhcInhcIikscj10aGlzLmdldEF4aXMoXCJ5XCIpO3JldHVybiBuPW58fFtdLG5bMF09aS50b0dsb2JhbENvb3JkKGkuZGF0YVRvQ29vcmQodFswXSkpLG5bMV09ci50b0dsb2JhbENvb3JkKHIuZGF0YVRvQ29vcmQodFsxXSkpLG59LGNsYW1wRGF0YTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZ2V0QXhpcyhcInhcIikuc2NhbGUsaT10aGlzLmdldEF4aXMoXCJ5XCIpLnNjYWxlLHI9bi5nZXRFeHRlbnQoKSxhPWkuZ2V0RXh0ZW50KCksbz1uLnBhcnNlKHRbMF0pLHM9aS5wYXJzZSh0WzFdKTtyZXR1cm4gZT1lfHxbXSxlWzBdPU1hdGgubWluKE1hdGgubWF4KE1hdGgubWluKHJbMF0sclsxXSksbyksTWF0aC5tYXgoclswXSxyWzFdKSksZVsxXT1NYXRoLm1pbihNYXRoLm1heChNYXRoLm1pbihhWzBdLGFbMV0pLHMpLE1hdGgubWF4KGFbMF0sYVsxXSkpLGV9LHBvaW50VG9EYXRhOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXRBeGlzKFwieFwiKSxpPXRoaXMuZ2V0QXhpcyhcInlcIik7cmV0dXJuIGU9ZXx8W10sZVswXT1uLmNvb3JkVG9EYXRhKG4udG9Mb2NhbENvb3JkKHRbMF0pKSxlWzFdPWkuY29vcmRUb0RhdGEoaS50b0xvY2FsQ29vcmQodFsxXSkpLGV9LGdldE90aGVyQXhpczpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRBeGlzKFwieFwiPT09dC5kaW0/XCJ5XCI6XCJ4XCIpfX0saChHaCxpXyk7dmFyIHJfPWZ1bmN0aW9uKHQsZSxuLGkscil7THkuY2FsbCh0aGlzLHQsZSxuKSx0aGlzLnR5cGU9aXx8XCJ2YWx1ZVwiLHRoaXMucG9zaXRpb249cnx8XCJib3R0b21cIn07cl8ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpyXyxpbmRleDowLGdldEF4ZXNPblplcm9PZjpudWxsLG1vZGVsOm51bGwsaXNIb3Jpem9udGFsOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wb3NpdGlvbjtyZXR1cm5cInRvcFwiPT09dHx8XCJib3R0b21cIj09PXR9LGdldEdsb2JhbEV4dGVudDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEV4dGVudCgpO3JldHVybiBlWzBdPXRoaXMudG9HbG9iYWxDb29yZChlWzBdKSxlWzFdPXRoaXMudG9HbG9iYWxDb29yZChlWzFdKSx0JiZlWzBdPmVbMV0mJmUucmV2ZXJzZSgpLGV9LGdldE90aGVyQXhpczpmdW5jdGlvbigpe3RoaXMuZ3JpZC5nZXRPdGhlckF4aXMoKX0scG9pbnRUb0RhdGE6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jb29yZFRvRGF0YSh0aGlzLnRvTG9jYWxDb29yZCh0W1wieFwiPT09dGhpcy5kaW0/MDoxXSksZSl9LHRvTG9jYWxDb29yZDpudWxsLHRvR2xvYmFsQ29vcmQ6bnVsbH0saChyXyxMeSk7dmFyIGFfPXtzaG93OiEwLHpsZXZlbDowLHo6MCxpbnZlcnNlOiExLG5hbWU6XCJcIixuYW1lTG9jYXRpb246XCJlbmRcIixuYW1lUm90YXRlOm51bGwsbmFtZVRydW5jYXRlOnttYXhXaWR0aDpudWxsLGVsbGlwc2lzOlwiLi4uXCIscGxhY2Vob2xkZXI6XCIuXCJ9LG5hbWVUZXh0U3R5bGU6e30sbmFtZUdhcDoxNSxzaWxlbnQ6ITEsdHJpZ2dlckV2ZW50OiExLHRvb2x0aXA6e3Nob3c6ITF9LGF4aXNQb2ludGVyOnt9LGF4aXNMaW5lOntzaG93OiEwLG9uWmVybzohMCxvblplcm9BeGlzSW5kZXg6bnVsbCxsaW5lU3R5bGU6e2NvbG9yOlwiIzMzM1wiLHdpZHRoOjEsdHlwZTpcInNvbGlkXCJ9LHN5bWJvbDpbXCJub25lXCIsXCJub25lXCJdLHN5bWJvbFNpemU6WzEwLDE1XX0sYXhpc1RpY2s6e3Nob3c6ITAsaW5zaWRlOiExLGxlbmd0aDo1LGxpbmVTdHlsZTp7d2lkdGg6MX19LGF4aXNMYWJlbDp7c2hvdzohMCxpbnNpZGU6ITEscm90YXRlOjAsc2hvd01pbkxhYmVsOm51bGwsc2hvd01heExhYmVsOm51bGwsbWFyZ2luOjgsZm9udFNpemU6MTJ9LHNwbGl0TGluZTp7c2hvdzohMCxsaW5lU3R5bGU6e2NvbG9yOltcIiNjY2NcIl0sd2lkdGg6MSx0eXBlOlwic29saWRcIn19LHNwbGl0QXJlYTp7c2hvdzohMSxhcmVhU3R5bGU6e2NvbG9yOltcInJnYmEoMjUwLDI1MCwyNTAsMC4zKVwiLFwicmdiYSgyMDAsMjAwLDIwMCwwLjMpXCJdfX19LG9fPXt9O29fLmNhdGVnb3J5QXhpcz1yKHtib3VuZGFyeUdhcDohMCxkZWR1cGxpY2F0aW9uOm51bGwsc3BsaXRMaW5lOntzaG93OiExfSxheGlzVGljazp7YWxpZ25XaXRoTGFiZWw6ITEsaW50ZXJ2YWw6XCJhdXRvXCJ9LGF4aXNMYWJlbDp7aW50ZXJ2YWw6XCJhdXRvXCJ9fSxhXyksb18udmFsdWVBeGlzPXIoe2JvdW5kYXJ5R2FwOlswLDBdLHNwbGl0TnVtYmVyOjV9LGFfKSxvXy50aW1lQXhpcz1zKHtzY2FsZTohMCxtaW46XCJkYXRhTWluXCIsbWF4OlwiZGF0YU1heFwifSxvXy52YWx1ZUF4aXMpLG9fLmxvZ0F4aXM9cyh7c2NhbGU6ITAsbG9nQmFzZToxMH0sb18udmFsdWVBeGlzKTt2YXIgc189W1widmFsdWVcIixcImNhdGVnb3J5XCIsXCJ0aW1lXCIsXCJsb2dcIl0sbF89ZnVuY3Rpb24odCxlLG4saSl7ZihzXyxmdW5jdGlvbihvKXtlLmV4dGVuZCh7dHlwZTp0K1wiQXhpcy5cIitvLG1lcmdlRGVmYXVsdEFuZFRoZW1lOmZ1bmN0aW9uKGUsaSl7dmFyIGE9dGhpcy5sYXlvdXRNb2RlLHM9YT9mbyhlKTp7fSxsPWkuZ2V0VGhlbWUoKTtyKGUsbC5nZXQobytcIkF4aXNcIikpLHIoZSx0aGlzLmdldERlZmF1bHRPcHRpb24oKSksZS50eXBlPW4odCxlKSxhJiZjbyhlLHMsYSl9LG9wdGlvblVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbjtcImNhdGVnb3J5XCI9PT10LnR5cGUmJih0aGlzLl9fb3JkaW5hbE1ldGE9ZHUuY3JlYXRlQnlBeGlzTW9kZWwodGhpcykpfSxnZXRDYXRlZ29yaWVzOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9uO3JldHVyblwiY2F0ZWdvcnlcIj09PWUudHlwZT90P2UuZGF0YTp0aGlzLl9fb3JkaW5hbE1ldGEuY2F0ZWdvcmllczp2b2lkIDB9LGdldE9yZGluYWxNZXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19vcmRpbmFsTWV0YX0sZGVmYXVsdE9wdGlvbjphKFt7fSxvX1tvK1wiQXhpc1wiXSxpXSwhMCl9KX0pLFJnLnJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlcih0K1wiQXhpc1wiLF8obix0KSl9LHVfPVJnLmV4dGVuZCh7dHlwZTpcImNhcnRlc2lhbjJkQXhpc1wiLGF4aXM6bnVsbCxpbml0OmZ1bmN0aW9uKCl7dV8uc3VwZXJBcHBseSh0aGlzLFwiaW5pdFwiLGFyZ3VtZW50cyksdGhpcy5yZXNldFJhbmdlKCl9LG1lcmdlT3B0aW9uOmZ1bmN0aW9uKCl7dV8uc3VwZXJBcHBseSh0aGlzLFwibWVyZ2VPcHRpb25cIixhcmd1bWVudHMpLHRoaXMucmVzZXRSYW5nZSgpfSxyZXN0b3JlRGF0YTpmdW5jdGlvbigpe3VfLnN1cGVyQXBwbHkodGhpcyxcInJlc3RvcmVEYXRhXCIsYXJndW1lbnRzKSx0aGlzLnJlc2V0UmFuZ2UoKX0sZ2V0Q29vcmRTeXNNb2RlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVjTW9kZWwucXVlcnlDb21wb25lbnRzKHttYWluVHlwZTpcImdyaWRcIixpbmRleDp0aGlzLm9wdGlvbi5ncmlkSW5kZXgsaWQ6dGhpcy5vcHRpb24uZ3JpZElkfSlbMF19fSk7cih1Xy5wcm90b3R5cGUsbXkpO3ZhciBoXz17b2Zmc2V0OjB9O2xfKFwieFwiLHVfLEhoLGhfKSxsXyhcInlcIix1XyxIaCxoXyksUmcuZXh0ZW5kKHt0eXBlOlwiZ3JpZFwiLGRlcGVuZGVuY2llczpbXCJ4QXhpc1wiLFwieUF4aXNcIl0sbGF5b3V0TW9kZTpcImJveFwiLGNvb3JkaW5hdGVTeXN0ZW06bnVsbCxkZWZhdWx0T3B0aW9uOntzaG93OiExLHpsZXZlbDowLHo6MCxsZWZ0OlwiMTAlXCIsdG9wOjYwLHJpZ2h0OlwiMTAlXCIsYm90dG9tOjYwLGNvbnRhaW5MYWJlbDohMSxiYWNrZ3JvdW5kQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyV2lkdGg6MSxib3JkZXJDb2xvcjpcIiNjY2NcIn19KTt2YXIgY189amgucHJvdG90eXBlO2NfLnR5cGU9XCJncmlkXCIsY18uYXhpc1BvaW50ZXJFbmFibGVkPSEwLGNfLmdldFJlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVjdH0sY18udXBkYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fYXhlc01hcDt0aGlzLl91cGRhdGVTY2FsZSh0LHRoaXMubW9kZWwpLGYobi54LGZ1bmN0aW9uKHQpe0x1KHQuc2NhbGUsdC5tb2RlbCl9KSxmKG4ueSxmdW5jdGlvbih0KXtMdSh0LnNjYWxlLHQubW9kZWwpfSksZihuLngsZnVuY3Rpb24odCl7cWgobixcInlcIix0KX0pLGYobi55LGZ1bmN0aW9uKHQpe3FoKG4sXCJ4XCIsdCl9KSx0aGlzLnJlc2l6ZSh0aGlzLm1vZGVsLGUpfSxjXy5yZXNpemU9ZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkoKXtmKGEsZnVuY3Rpb24odCl7dmFyIGU9dC5pc0hvcml6b250YWwoKSxuPWU/WzAsci53aWR0aF06WzAsci5oZWlnaHRdLGk9dC5pbnZlcnNlPzE6MDt0LnNldEV4dGVudChuW2ldLG5bMS1pXSksWGgodCxlP3IueDpyLnkpfSl9dmFyIHI9aG8odC5nZXRCb3hMYXlvdXRQYXJhbXMoKSx7d2lkdGg6ZS5nZXRXaWR0aCgpLGhlaWdodDplLmdldEhlaWdodCgpfSk7dGhpcy5fcmVjdD1yO3ZhciBhPXRoaXMuX2F4ZXNMaXN0O2koKSwhbiYmdC5nZXQoXCJjb250YWluTGFiZWxcIikmJihmKGEsZnVuY3Rpb24odCl7aWYoIXQubW9kZWwuZ2V0KFwiYXhpc0xhYmVsLmluc2lkZVwiKSl7dmFyIGU9enUodCk7aWYoZSl7dmFyIG49dC5pc0hvcml6b250YWwoKT9cImhlaWdodFwiOlwid2lkdGhcIixpPXQubW9kZWwuZ2V0KFwiYXhpc0xhYmVsLm1hcmdpblwiKTtyW25dLT1lW25dK2ksXCJ0b3BcIj09PXQucG9zaXRpb24/ci55Kz1lLmhlaWdodCtpOlwibGVmdFwiPT09dC5wb3NpdGlvbiYmKHIueCs9ZS53aWR0aCtpKX19fSksaSgpKX0sY18uZ2V0QXhpcz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX2F4ZXNNYXBbdF07aWYobnVsbCE9bil7aWYobnVsbD09ZSlmb3IodmFyIGkgaW4gbilpZihuLmhhc093blByb3BlcnR5KGkpKXJldHVybiBuW2ldO3JldHVybiBuW2VdfX0sY18uZ2V0QXhlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9heGVzTGlzdC5zbGljZSgpfSxjXy5nZXRDYXJ0ZXNpYW49ZnVuY3Rpb24odCxlKXtpZihudWxsIT10JiZudWxsIT1lKXt2YXIgbj1cInhcIit0K1wieVwiK2U7cmV0dXJuIHRoaXMuX2Nvb3Jkc01hcFtuXX1NKHQpJiYoZT10LnlBeGlzSW5kZXgsdD10LnhBeGlzSW5kZXgpO2Zvcih2YXIgaT0wLHI9dGhpcy5fY29vcmRzTGlzdDtpPHIubGVuZ3RoO2krKylpZihyW2ldLmdldEF4aXMoXCJ4XCIpLmluZGV4PT09dHx8cltpXS5nZXRBeGlzKFwieVwiKS5pbmRleD09PWUpcmV0dXJuIHJbaV19LGNfLmdldENhcnRlc2lhbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29vcmRzTGlzdC5zbGljZSgpfSxjXy5jb252ZXJ0VG9QaXhlbD1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5fZmluZENvbnZlcnRUYXJnZXQodCxlKTtyZXR1cm4gaS5jYXJ0ZXNpYW4/aS5jYXJ0ZXNpYW4uZGF0YVRvUG9pbnQobik6aS5heGlzP2kuYXhpcy50b0dsb2JhbENvb3JkKGkuYXhpcy5kYXRhVG9Db29yZChuKSk6bnVsbH0sY18uY29udmVydEZyb21QaXhlbD1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5fZmluZENvbnZlcnRUYXJnZXQodCxlKTtyZXR1cm4gaS5jYXJ0ZXNpYW4/aS5jYXJ0ZXNpYW4ucG9pbnRUb0RhdGEobik6aS5heGlzP2kuYXhpcy5jb29yZFRvRGF0YShpLmF4aXMudG9Mb2NhbENvb3JkKG4pKTpudWxsfSxjXy5fZmluZENvbnZlcnRUYXJnZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixpLHI9ZS5zZXJpZXNNb2RlbCxhPWUueEF4aXNNb2RlbHx8ciYmci5nZXRSZWZlcnJpbmdDb21wb25lbnRzKFwieEF4aXNcIilbMF0sbz1lLnlBeGlzTW9kZWx8fHImJnIuZ2V0UmVmZXJyaW5nQ29tcG9uZW50cyhcInlBeGlzXCIpWzBdLHM9ZS5ncmlkTW9kZWwsbD10aGlzLl9jb29yZHNMaXN0O2lmKHIpbj1yLmNvb3JkaW5hdGVTeXN0ZW0sdShsLG4pPDAmJihuPW51bGwpO2Vsc2UgaWYoYSYmbyluPXRoaXMuZ2V0Q2FydGVzaWFuKGEuY29tcG9uZW50SW5kZXgsby5jb21wb25lbnRJbmRleCk7ZWxzZSBpZihhKWk9dGhpcy5nZXRBeGlzKFwieFwiLGEuY29tcG9uZW50SW5kZXgpO2Vsc2UgaWYobylpPXRoaXMuZ2V0QXhpcyhcInlcIixvLmNvbXBvbmVudEluZGV4KTtlbHNlIGlmKHMpe3ZhciBoPXMuY29vcmRpbmF0ZVN5c3RlbTtoPT09dGhpcyYmKG49dGhpcy5fY29vcmRzTGlzdFswXSl9cmV0dXJue2NhcnRlc2lhbjpuLGF4aXM6aX19LGNfLmNvbnRhaW5Qb2ludD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9jb29yZHNMaXN0WzBdO3JldHVybiBlP2UuY29udGFpblBvaW50KHQpOnZvaWQgMH0sY18uX2luaXRDYXJ0ZXNpYW49ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKG4pe3JldHVybiBmdW5jdGlvbihvLHMpe2lmKFdoKG8sdCxlKSl7dmFyIGw9by5nZXQoXCJwb3NpdGlvblwiKTtcInhcIj09PW4/XCJ0b3BcIiE9PWwmJlwiYm90dG9tXCIhPT1sJiYobD1cImJvdHRvbVwiLGlbbF0mJihsPVwidG9wXCI9PT1sP1wiYm90dG9tXCI6XCJ0b3BcIikpOlwibGVmdFwiIT09bCYmXCJyaWdodFwiIT09bCYmKGw9XCJsZWZ0XCIsaVtsXSYmKGw9XCJsZWZ0XCI9PT1sP1wicmlnaHRcIjpcImxlZnRcIikpLGlbbF09ITA7dmFyIHU9bmV3IHJfKG4sT3UobyksWzAsMF0sby5nZXQoXCJ0eXBlXCIpLGwpLGg9XCJjYXRlZ29yeVwiPT09dS50eXBlO3Uub25CYW5kPWgmJm8uZ2V0KFwiYm91bmRhcnlHYXBcIiksdS5pbnZlcnNlPW8uZ2V0KFwiaW52ZXJzZVwiKSxvLmF4aXM9dSx1Lm1vZGVsPW8sdS5ncmlkPXRoaXMsdS5pbmRleD1zLHRoaXMuX2F4ZXNMaXN0LnB1c2godSkscltuXVtzXT11LGFbbl0rK319fXZhciBpPXtsZWZ0OiExLHJpZ2h0OiExLHRvcDohMSxib3R0b206ITF9LHI9e3g6e30seTp7fX0sYT17eDowLHk6MH07cmV0dXJuIGUuZWFjaENvbXBvbmVudChcInhBeGlzXCIsbihcInhcIiksdGhpcyksZS5lYWNoQ29tcG9uZW50KFwieUF4aXNcIixuKFwieVwiKSx0aGlzKSxhLngmJmEueT8odGhpcy5fYXhlc01hcD1yLHZvaWQgZihyLngsZnVuY3Rpb24oZSxuKXtmKHIueSxmdW5jdGlvbihpLHIpe3ZhciBhPVwieFwiK24rXCJ5XCIrcixvPW5ldyBHaChhKTtvLmdyaWQ9dGhpcyxvLm1vZGVsPXQsdGhpcy5fY29vcmRzTWFwW2FdPW8sdGhpcy5fY29vcmRzTGlzdC5wdXNoKG8pLG8uYWRkQXhpcyhlKSxvLmFkZEF4aXMoaSl9LHRoaXMpfSx0aGlzKSk6KHRoaXMuX2F4ZXNNYXA9e30sdm9pZCh0aGlzLl9heGVzTGlzdD1bXSkpfSxjXy5fdXBkYXRlU2NhbGU9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7Zih0Lm1hcERpbWVuc2lvbihlLmRpbSwhMCksZnVuY3Rpb24obil7ZS5zY2FsZS51bmlvbkV4dGVudEZyb21EYXRhKHQsc3UodCxuKSl9KX1mKHRoaXMuX2F4ZXNMaXN0LGZ1bmN0aW9uKHQpe3Quc2NhbGUuc2V0RXh0ZW50KDEvMCwtMS8wKX0pLHQuZWFjaFNlcmllcyhmdW5jdGlvbihpKXtpZihaaChpKSl7dmFyIHI9WWgoaSx0KSxhPXJbMF0sbz1yWzFdO2lmKCFXaChhLGUsdCl8fCFXaChvLGUsdCkpcmV0dXJuO3ZhciBzPXRoaXMuZ2V0Q2FydGVzaWFuKGEuY29tcG9uZW50SW5kZXgsby5jb21wb25lbnRJbmRleCksbD1pLmdldERhdGEoKSx1PXMuZ2V0QXhpcyhcInhcIiksaD1zLmdldEF4aXMoXCJ5XCIpO1wibGlzdFwiPT09bC50eXBlJiYobihsLHUsaSksbihsLGgsaSkpfX0sdGhpcyl9LGNfLmdldFRvb2x0aXBBeGVzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49W107cmV0dXJuIGYodGhpcy5nZXRDYXJ0ZXNpYW5zKCksZnVuY3Rpb24oaSl7dmFyIHI9bnVsbCE9dCYmXCJhdXRvXCIhPT10P2kuZ2V0QXhpcyh0KTppLmdldEJhc2VBeGlzKCksYT1pLmdldE90aGVyQXhpcyhyKTt1KGUscik8MCYmZS5wdXNoKHIpLHUobixhKTwwJiZuLnB1c2goYSl9KSx7YmFzZUF4ZXM6ZSxvdGhlckF4ZXM6bn19O3ZhciBkXz1bXCJ4QXhpc1wiLFwieUF4aXNcIl07amguY3JlYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49W107cmV0dXJuIHQuZWFjaENvbXBvbmVudChcImdyaWRcIixmdW5jdGlvbihpLHIpe3ZhciBhPW5ldyBqaChpLHQsZSk7YS5uYW1lPVwiZ3JpZF9cIityLGEucmVzaXplKGksZSwhMCksaS5jb29yZGluYXRlU3lzdGVtPWEsbi5wdXNoKGEpfSksdC5lYWNoU2VyaWVzKGZ1bmN0aW9uKGUpe2lmKFpoKGUpKXt2YXIgbj1ZaChlLHQpLGk9blswXSxyPW5bMV0sYT1pLmdldENvb3JkU3lzTW9kZWwoKSxvPWEuY29vcmRpbmF0ZVN5c3RlbTtlLmNvb3JkaW5hdGVTeXN0ZW09by5nZXRDYXJ0ZXNpYW4oaS5jb21wb25lbnRJbmRleCxyLmNvbXBvbmVudEluZGV4KX19KSxufSxqaC5kaW1lbnNpb25zPWpoLnByb3RvdHlwZS5kaW1lbnNpb25zPUdoLnByb3RvdHlwZS5kaW1lbnNpb25zLFZvLnJlZ2lzdGVyKFwiY2FydGVzaWFuMmRcIixqaCk7dmFyIGZfPU1hdGguUEkscF89ZnVuY3Rpb24odCxlKXt0aGlzLm9wdD1lLHRoaXMuYXhpc01vZGVsPXQscyhlLHtsYWJlbE9mZnNldDowLG5hbWVEaXJlY3Rpb246MSx0aWNrRGlyZWN0aW9uOjEsbGFiZWxEaXJlY3Rpb246MSxzaWxlbnQ6ITB9KSx0aGlzLmdyb3VwPW5ldyBDZDt2YXIgbj1uZXcgQ2Qoe3Bvc2l0aW9uOmUucG9zaXRpb24uc2xpY2UoKSxyb3RhdGlvbjplLnJvdGF0aW9ufSk7bi51cGRhdGVUcmFuc2Zvcm0oKSx0aGlzLl90cmFuc2Zvcm09bi50cmFuc2Zvcm0sdGhpcy5fZHVtYkdyb3VwPW59O3BfLnByb3RvdHlwZT17Y29uc3RydWN0b3I6cF8saGFzQnVpbGRlcjpmdW5jdGlvbih0KXtyZXR1cm4hIWdfW3RdfSxhZGQ6ZnVuY3Rpb24odCl7Z19bdF0uY2FsbCh0aGlzKX0sZ2V0R3JvdXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ncm91cH19O3ZhciBnXz17YXhpc0xpbmU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdCxlPXRoaXMuYXhpc01vZGVsO2lmKGUuZ2V0KFwiYXhpc0xpbmUuc2hvd1wiKSl7dmFyIG49dGhpcy5heGlzTW9kZWwuYXhpcy5nZXRFeHRlbnQoKSxpPXRoaXMuX3RyYW5zZm9ybSxyPVtuWzBdLDBdLGE9W25bMV0sMF07aSYmKGFlKHIscixpKSxhZShhLGEsaSkpO3ZhciBzPW8oe2xpbmVDYXA6XCJyb3VuZFwifSxlLmdldE1vZGVsKFwiYXhpc0xpbmUubGluZVN0eWxlXCIpLmdldExpbmVTdHlsZSgpKTt0aGlzLmdyb3VwLmFkZChuZXcgWXAoWXIoe2FuaWQ6XCJsaW5lXCIsc2hhcGU6e3gxOnJbMF0seTE6clsxXSx4MjphWzBdLHkyOmFbMV19LHN0eWxlOnMsc3Ryb2tlQ29udGFpblRocmVzaG9sZDp0LnN0cm9rZUNvbnRhaW5UaHJlc2hvbGR8fDUsc2lsZW50OiEwLHoyOjF9KSkpO3ZhciBsPWUuZ2V0KFwiYXhpc0xpbmUuc3ltYm9sXCIpLHU9ZS5nZXQoXCJheGlzTGluZS5zeW1ib2xTaXplXCIpLGg9ZS5nZXQoXCJheGlzTGluZS5zeW1ib2xPZmZzZXRcIil8fDA7aWYoXCJudW1iZXJcIj09dHlwZW9mIGgmJihoPVtoLGhdKSxudWxsIT1sKXtcInN0cmluZ1wiPT10eXBlb2YgbCYmKGw9W2wsbF0pLChcInN0cmluZ1wiPT10eXBlb2YgdXx8XCJudW1iZXJcIj09dHlwZW9mIHUpJiYodT1bdSx1XSk7dmFyIGM9dVswXSxkPXVbMV07Zihbe3JvdGF0ZTp0LnJvdGF0aW9uK01hdGguUEkvMixvZmZzZXQ6aFswXSxyOjB9LHtyb3RhdGU6dC5yb3RhdGlvbi1NYXRoLlBJLzIsb2Zmc2V0OmhbMV0scjpNYXRoLnNxcnQoKHJbMF0tYVswXSkqKHJbMF0tYVswXSkrKHJbMV0tYVsxXSkqKHJbMV0tYVsxXSkpfV0sZnVuY3Rpb24oZSxuKXtpZihcIm5vbmVcIiE9PWxbbl0mJm51bGwhPWxbbl0pe3ZhciBpPVZ1KGxbbl0sLWMvMiwtZC8yLGMsZCxzLnN0cm9rZSwhMCksYT1lLnIrZS5vZmZzZXQsbz1bclswXSthKk1hdGguY29zKHQucm90YXRpb24pLHJbMV0tYSpNYXRoLnNpbih0LnJvdGF0aW9uKV07aS5hdHRyKHtyb3RhdGlvbjplLnJvdGF0ZSxwb3NpdGlvbjpvLHNpbGVudDohMH0pLHRoaXMuZ3JvdXAuYWRkKGkpfX0sdGhpcyl9fX0sYXhpc1RpY2tMYWJlbDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuYXhpc01vZGVsLGU9dGhpcy5vcHQsbj1pYyh0aGlzLHQsZSksaT1yYyh0aGlzLHQsZSk7SmgodCxpLG4pfSxheGlzTmFtZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0LGU9dGhpcy5heGlzTW9kZWwsbj1rKHQuYXhpc05hbWUsZS5nZXQoXCJuYW1lXCIpKTtpZihuKXt2YXIgaSxyPWUuZ2V0KFwibmFtZUxvY2F0aW9uXCIpLGE9dC5uYW1lRGlyZWN0aW9uLHM9ZS5nZXRNb2RlbChcIm5hbWVUZXh0U3R5bGVcIiksbD1lLmdldChcIm5hbWVHYXBcIil8fDAsdT10aGlzLmF4aXNNb2RlbC5heGlzLmdldEV4dGVudCgpLGg9dVswXT51WzFdPy0xOjEsYz1bXCJzdGFydFwiPT09cj91WzBdLWgqbDpcImVuZFwiPT09cj91WzFdK2gqbDoodVswXSt1WzFdKS8yLG5jKHIpP3QubGFiZWxPZmZzZXQrYSpsOjBdLGQ9ZS5nZXQoXCJuYW1lUm90YXRlXCIpO251bGwhPWQmJihkPWQqZl8vMTgwKTt2YXIgZjtuYyhyKT9pPXZfKHQucm90YXRpb24sbnVsbCE9ZD9kOnQucm90YXRpb24sYSk6KGk9S2godCxyLGR8fDAsdSksZj10LmF4aXNOYW1lQXZhaWxhYmxlV2lkdGgsbnVsbCE9ZiYmKGY9TWF0aC5hYnMoZi9NYXRoLnNpbihpLnJvdGF0aW9uKSksIWlzRmluaXRlKGYpJiYoZj1udWxsKSkpO3ZhciBwPXMuZ2V0Rm9udCgpLGc9ZS5nZXQoXCJuYW1lVHJ1bmNhdGVcIiwhMCl8fHt9LHY9Zy5lbGxpcHNpcyxtPWsodC5uYW1lVHJ1bmNhdGVNYXhXaWR0aCxnLm1heFdpZHRoLGYpLHk9bnVsbCE9diYmbnVsbCE9bT9DZyhuLG0scCx2LHttaW5DaGFyOjIscGxhY2Vob2xkZXI6Zy5wbGFjZWhvbGRlcn0pOm4sXz1lLmdldChcInRvb2x0aXBcIiwhMCkseD1lLm1haW5UeXBlLHc9e2NvbXBvbmVudFR5cGU6eCxuYW1lOm4sJHZhcnM6W1wibmFtZVwiXX07d1t4K1wiSW5kZXhcIl09ZS5jb21wb25lbnRJbmRleDt2YXIgYj1uZXcgenAoe2FuaWQ6XCJuYW1lXCIsX19mdWxsVGV4dDpuLF9fdHJ1bmNhdGVkVGV4dDp5LHBvc2l0aW9uOmMscm90YXRpb246aS5yb3RhdGlvbixzaWxlbnQ6UWgoZSksejI6MSx0b29sdGlwOl8mJl8uc2hvdz9vKHtjb250ZW50Om4sZm9ybWF0dGVyOmZ1bmN0aW9uKCl7cmV0dXJuIG59LGZvcm1hdHRlclBhcmFtczp3fSxfKTpudWxsfSk7Y2EoYi5zdHlsZSxzLHt0ZXh0OnksdGV4dEZvbnQ6cCx0ZXh0RmlsbDpzLmdldFRleHRDb2xvcigpfHxlLmdldChcImF4aXNMaW5lLmxpbmVTdHlsZS5jb2xvclwiKSx0ZXh0QWxpZ246aS50ZXh0QWxpZ24sdGV4dFZlcnRpY2FsQWxpZ246aS50ZXh0VmVydGljYWxBbGlnbn0pLGUuZ2V0KFwidHJpZ2dlckV2ZW50XCIpJiYoYi5ldmVudERhdGE9JGgoZSksYi5ldmVudERhdGEudGFyZ2V0VHlwZT1cImF4aXNOYW1lXCIsYi5ldmVudERhdGEubmFtZT1uKSx0aGlzLl9kdW1iR3JvdXAuYWRkKGIpLGIudXBkYXRlVHJhbnNmb3JtKCksdGhpcy5ncm91cC5hZGQoYiksYi5kZWNvbXBvc2VUcmFuc2Zvcm0oKX19fSx2Xz1wXy5pbm5lclRleHRMYXlvdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBpLHIsYT1xYShlLXQpO3JldHVybiBVYShhKT8ocj1uPjA/XCJ0b3BcIjpcImJvdHRvbVwiLGk9XCJjZW50ZXJcIik6VWEoYS1mXyk/KHI9bj4wP1wiYm90dG9tXCI6XCJ0b3BcIixpPVwiY2VudGVyXCIpOihyPVwibWlkZGxlXCIsaT1hPjAmJmZfPmE/bj4wP1wicmlnaHRcIjpcImxlZnRcIjpuPjA/XCJsZWZ0XCI6XCJyaWdodFwiKSx7cm90YXRpb246YSx0ZXh0QWxpZ246aSx0ZXh0VmVydGljYWxBbGlnbjpyfX0sbV89TGwoe3R5cGU6XCJheGlzXCIsX2F4aXNQb2ludGVyOm51bGwsYXhpc1BvaW50ZXJDbGFzczpudWxsLHJlbmRlcjpmdW5jdGlvbih0LGUsbixpKXt0aGlzLmF4aXNQb2ludGVyQ2xhc3MmJmFjKHQpLG1fLnN1cGVyQXBwbHkodGhpcyxcInJlbmRlclwiLGFyZ3VtZW50cyksaGModGhpcyx0LGUsbixpLCEwKX0sdXBkYXRlQXhpc1BvaW50ZXI6ZnVuY3Rpb24odCxlLG4saSl7aGModGhpcyx0LGUsbixpLCExKX0scmVtb3ZlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5fYXhpc1BvaW50ZXI7biYmbi5yZW1vdmUoZSksbV8uc3VwZXJBcHBseSh0aGlzLFwicmVtb3ZlXCIsYXJndW1lbnRzKX0sZGlzcG9zZTpmdW5jdGlvbih0LGUpe2NjKHRoaXMsZSksbV8uc3VwZXJBcHBseSh0aGlzLFwiZGlzcG9zZVwiLGFyZ3VtZW50cyl9fSkseV89W107bV8ucmVnaXN0ZXJBeGlzUG9pbnRlckNsYXNzPWZ1bmN0aW9uKHQsZSl7eV9bdF09ZX0sbV8uZ2V0QXhpc1BvaW50ZXJDbGFzcz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmeV9bdF19O3ZhciBfXz1bXCJheGlzTGluZVwiLFwiYXhpc1RpY2tMYWJlbFwiLFwiYXhpc05hbWVcIl0seF89W1wic3BsaXRBcmVhXCIsXCJzcGxpdExpbmVcIl0sd189bV8uZXh0ZW5kKHt0eXBlOlwiY2FydGVzaWFuQXhpc1wiLGF4aXNQb2ludGVyQ2xhc3M6XCJDYXJ0ZXNpYW5BeGlzUG9pbnRlclwiLHJlbmRlcjpmdW5jdGlvbih0LGUsbixpKXt0aGlzLmdyb3VwLnJlbW92ZUFsbCgpO3ZhciByPXRoaXMuX2F4aXNHcm91cDtpZih0aGlzLl9heGlzR3JvdXA9bmV3IENkLHRoaXMuZ3JvdXAuYWRkKHRoaXMuX2F4aXNHcm91cCksdC5nZXQoXCJzaG93XCIpKXt2YXIgYT10LmdldENvb3JkU3lzTW9kZWwoKSxvPWRjKGEsdCkscz1uZXcgcF8odCxvKTtmKF9fLHMuYWRkLHMpLHRoaXMuX2F4aXNHcm91cC5hZGQocy5nZXRHcm91cCgpKSxmKHhfLGZ1bmN0aW9uKGUpe3QuZ2V0KGUrXCIuc2hvd1wiKSYmdGhpc1tcIl9cIitlXSh0LGEpfSx0aGlzKSxJYShyLHRoaXMuX2F4aXNHcm91cCx0KSx3Xy5zdXBlckNhbGwodGhpcyxcInJlbmRlclwiLHQsZSxuLGkpfX0scmVtb3ZlOmZ1bmN0aW9uKCl7dGhpcy5fc3BsaXRBcmVhQ29sb3JzPW51bGx9LF9zcGxpdExpbmU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmF4aXM7aWYoIW4uc2NhbGUuaXNCbGFuaygpKXt2YXIgaT10LmdldE1vZGVsKFwic3BsaXRMaW5lXCIpLHI9aS5nZXRNb2RlbChcImxpbmVTdHlsZVwiKSxhPXIuZ2V0KFwiY29sb3JcIik7YT14KGEpP2E6W2FdO2Zvcih2YXIgbz1lLmNvb3JkaW5hdGVTeXN0ZW0uZ2V0UmVjdCgpLGw9bi5pc0hvcml6b250YWwoKSx1PTAsaD1uLmdldFRpY2tzQ29vcmRzKHt0aWNrTW9kZWw6aX0pLGM9W10sZD1bXSxmPXIuZ2V0TGluZVN0eWxlKCkscD0wO3A8aC5sZW5ndGg7cCsrKXt2YXIgZz1uLnRvR2xvYmFsQ29vcmQoaFtwXS5jb29yZCk7bD8oY1swXT1nLGNbMV09by55LGRbMF09ZyxkWzFdPW8ueStvLmhlaWdodCk6KGNbMF09by54LGNbMV09ZyxkWzBdPW8ueCtvLndpZHRoLGRbMV09Zyk7dmFyIHY9dSsrJWEubGVuZ3RoLG09aFtwXS50aWNrVmFsdWU7dGhpcy5fYXhpc0dyb3VwLmFkZChuZXcgWXAoWXIoe2FuaWQ6bnVsbCE9bT9cImxpbmVfXCIraFtwXS50aWNrVmFsdWU6bnVsbCxzaGFwZTp7eDE6Y1swXSx5MTpjWzFdLHgyOmRbMF0seTI6ZFsxXX0sc3R5bGU6cyh7c3Ryb2tlOmFbdl19LGYpLHNpbGVudDohMH0pKSl9fX0sX3NwbGl0QXJlYTpmdW5jdGlvbih0LGUpe3ZhciBuPXQuYXhpcztpZighbi5zY2FsZS5pc0JsYW5rKCkpe3ZhciBpPXQuZ2V0TW9kZWwoXCJzcGxpdEFyZWFcIikscj1pLmdldE1vZGVsKFwiYXJlYVN0eWxlXCIpLGE9ci5nZXQoXCJjb2xvclwiKSxvPWUuY29vcmRpbmF0ZVN5c3RlbS5nZXRSZWN0KCksbD1uLmdldFRpY2tzQ29vcmRzKHt0aWNrTW9kZWw6aSxjbGFtcDohMH0pO2lmKGwubGVuZ3RoKXt2YXIgdT1hLmxlbmd0aCxoPXRoaXMuX3NwbGl0QXJlYUNvbG9ycyxjPU4oKSxkPTA7aWYoaClmb3IodmFyIGY9MDtmPGwubGVuZ3RoO2YrKyl7dmFyIHA9aC5nZXQobFtmXS50aWNrVmFsdWUpO2lmKG51bGwhPXApe2Q9KHArKHUtMSkqZikldTticmVha319dmFyIGc9bi50b0dsb2JhbENvb3JkKGxbMF0uY29vcmQpLHY9ci5nZXRBcmVhU3R5bGUoKTthPXgoYSk/YTpbYV07Zm9yKHZhciBmPTE7ZjxsLmxlbmd0aDtmKyspe3ZhciBtLHksXyx3LGI9bi50b0dsb2JhbENvb3JkKGxbZl0uY29vcmQpO24uaXNIb3Jpem9udGFsKCk/KG09Zyx5PW8ueSxfPWItbSx3PW8uaGVpZ2h0LGc9bStfKToobT1vLngseT1nLF89by53aWR0aCx3PWIteSxnPXkrdyk7dmFyIE09bFtmLTFdLnRpY2tWYWx1ZTtudWxsIT1NJiZjLnNldChNLGQpLHRoaXMuX2F4aXNHcm91cC5hZGQobmV3IFhwKHthbmlkOm51bGwhPU0/XCJhcmVhX1wiK006bnVsbCxzaGFwZTp7eDptLHk6eSx3aWR0aDpfLGhlaWdodDp3fSxzdHlsZTpzKHtmaWxsOmFbZF19LHYpLHNpbGVudDohMH0pKSxkPShkKzEpJXV9dGhpcy5fc3BsaXRBcmVhQ29sb3JzPWN9fX19KTt3Xy5leHRlbmQoe3R5cGU6XCJ4QXhpc1wifSksd18uZXh0ZW5kKHt0eXBlOlwieUF4aXNcIn0pLExsKHt0eXBlOlwiZ3JpZFwiLHJlbmRlcjpmdW5jdGlvbih0KXt0aGlzLmdyb3VwLnJlbW92ZUFsbCgpLHQuZ2V0KFwic2hvd1wiKSYmdGhpcy5ncm91cC5hZGQobmV3IFhwKHtzaGFwZTp0LmNvb3JkaW5hdGVTeXN0ZW0uZ2V0UmVjdCgpLHN0eWxlOnMoe2ZpbGw6dC5nZXQoXCJiYWNrZ3JvdW5kQ29sb3JcIil9LHQuZ2V0SXRlbVN0eWxlKCkpLHNpbGVudDohMCx6MjotMX0pKX19KSx3bChmdW5jdGlvbih0KXt0LnhBeGlzJiZ0LnlBeGlzJiYhdC5ncmlkJiYodC5ncmlkPXt9KX0pLGtsKFF5KFwibGluZVwiLFwiY2lyY2xlXCIsXCJsaW5lXCIpKSxUbChKeShcImxpbmVcIikpLGJsKHNtLlBST0NFU1NPUi5TVEFUSVNUSUMsbl8oXCJsaW5lXCIpKSxQbCh7dHlwZTpcInRpdGxlXCIsbGF5b3V0TW9kZTp7dHlwZTpcImJveFwiLGlnbm9yZVNpemU6ITB9LGRlZmF1bHRPcHRpb246e3psZXZlbDowLHo6NixzaG93OiEwLHRleHQ6XCJcIix0YXJnZXQ6XCJibGFua1wiLHN1YnRleHQ6XCJcIixzdWJ0YXJnZXQ6XCJibGFua1wiLGxlZnQ6MCx0b3A6MCxiYWNrZ3JvdW5kQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyQ29sb3I6XCIjY2NjXCIsYm9yZGVyV2lkdGg6MCxwYWRkaW5nOjUsaXRlbUdhcDoxMCx0ZXh0U3R5bGU6e2ZvbnRTaXplOjE4LGZvbnRXZWlnaHQ6XCJib2xkZXJcIixjb2xvcjpcIiMzMzNcIn0sc3VidGV4dFN0eWxlOntjb2xvcjpcIiNhYWFcIn19fSksTGwoe3R5cGU6XCJ0aXRsZVwiLHJlbmRlcjpmdW5jdGlvbih0LGUsbil7aWYodGhpcy5ncm91cC5yZW1vdmVBbGwoKSx0LmdldChcInNob3dcIikpe3ZhciBpPXRoaXMuZ3JvdXAscj10LmdldE1vZGVsKFwidGV4dFN0eWxlXCIpLGE9dC5nZXRNb2RlbChcInN1YnRleHRTdHlsZVwiKSxvPXQuZ2V0KFwidGV4dEFsaWduXCIpLHM9dC5nZXQoXCJ0ZXh0QmFzZWxpbmVcIiksbD1uZXcgenAoe3N0eWxlOmNhKHt9LHIse3RleHQ6dC5nZXQoXCJ0ZXh0XCIpLHRleHRGaWxsOnIuZ2V0VGV4dENvbG9yKCl9LHtkaXNhYmxlQm94OiEwfSksejI6MTB9KSx1PWwuZ2V0Qm91bmRpbmdSZWN0KCksaD10LmdldChcInN1YnRleHRcIiksYz1uZXcgenAoe3N0eWxlOmNhKHt9LGEse3RleHQ6aCx0ZXh0RmlsbDphLmdldFRleHRDb2xvcigpLHk6dS5oZWlnaHQrdC5nZXQoXCJpdGVtR2FwXCIpLHRleHRWZXJ0aWNhbEFsaWduOlwidG9wXCJ9LHtkaXNhYmxlQm94OiEwfSksejI6MTB9KSxkPXQuZ2V0KFwibGlua1wiKSxmPXQuZ2V0KFwic3VibGlua1wiKTtsLnNpbGVudD0hZCxjLnNpbGVudD0hZixkJiZsLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe3dpbmRvdy5vcGVuKGQsXCJfXCIrdC5nZXQoXCJ0YXJnZXRcIikpfSksZiYmYy5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXt3aW5kb3cub3BlbihmLFwiX1wiK3QuZ2V0KFwic3VidGFyZ2V0XCIpKX0pLGkuYWRkKGwpLGgmJmkuYWRkKGMpO3ZhciBwPWkuZ2V0Qm91bmRpbmdSZWN0KCksZz10LmdldEJveExheW91dFBhcmFtcygpO2cud2lkdGg9cC53aWR0aCxnLmhlaWdodD1wLmhlaWdodDt2YXIgdj1obyhnLHt3aWR0aDpuLmdldFdpZHRoKCksaGVpZ2h0Om4uZ2V0SGVpZ2h0KCl9LHQuZ2V0KFwicGFkZGluZ1wiKSk7b3x8KG89dC5nZXQoXCJsZWZ0XCIpfHx0LmdldChcInJpZ2h0XCIpLFwibWlkZGxlXCI9PT1vJiYobz1cImNlbnRlclwiKSxcInJpZ2h0XCI9PT1vP3YueCs9di53aWR0aDpcImNlbnRlclwiPT09byYmKHYueCs9di53aWR0aC8yKSksc3x8KHM9dC5nZXQoXCJ0b3BcIil8fHQuZ2V0KFwiYm90dG9tXCIpLFwiY2VudGVyXCI9PT1zJiYocz1cIm1pZGRsZVwiKSxcImJvdHRvbVwiPT09cz92LnkrPXYuaGVpZ2h0OlwibWlkZGxlXCI9PT1zJiYodi55Kz12LmhlaWdodC8yKSxzPXN8fFwidG9wXCIpLGkuYXR0cihcInBvc2l0aW9uXCIsW3YueCx2LnldKTt2YXIgbT17dGV4dEFsaWduOm8sdGV4dFZlcnRpY2FsQWxpZ246c307bC5zZXRTdHlsZShtKSxjLnNldFN0eWxlKG0pLHA9aS5nZXRCb3VuZGluZ1JlY3QoKTt2YXIgeT12Lm1hcmdpbixfPXQuZ2V0SXRlbVN0eWxlKFtcImNvbG9yXCIsXCJvcGFjaXR5XCJdKTtfLmZpbGw9dC5nZXQoXCJiYWNrZ3JvdW5kQ29sb3JcIik7dmFyIHg9bmV3IFhwKHtzaGFwZTp7eDpwLngteVszXSx5OnAueS15WzBdLHdpZHRoOnAud2lkdGgreVsxXSt5WzNdLGhlaWdodDpwLmhlaWdodCt5WzBdK3lbMl0scjp0LmdldChcImJvcmRlclJhZGl1c1wiKX0sc3R5bGU6XyxzaWxlbnQ6ITB9KTtacih4KSxpLmFkZCh4KX19fSk7dmFyIGJfPVBsKHt0eXBlOlwibGVnZW5kLnBsYWluXCIsZGVwZW5kZW5jaWVzOltcInNlcmllc1wiXSxsYXlvdXRNb2RlOnt0eXBlOlwiYm94XCIsaWdub3JlU2l6ZTohMH0saW5pdDpmdW5jdGlvbih0LGUsbil7dGhpcy5tZXJnZURlZmF1bHRBbmRUaGVtZSh0LG4pLHQuc2VsZWN0ZWQ9dC5zZWxlY3RlZHx8e319LG1lcmdlT3B0aW9uOmZ1bmN0aW9uKHQpe2JfLnN1cGVyQ2FsbCh0aGlzLFwibWVyZ2VPcHRpb25cIix0KX0sb3B0aW9uVXBkYXRlZDpmdW5jdGlvbigpe3RoaXMuX3VwZGF0ZURhdGEodGhpcy5lY01vZGVsKTt2YXIgdD10aGlzLl9kYXRhO2lmKHRbMF0mJlwic2luZ2xlXCI9PT10aGlzLmdldChcInNlbGVjdGVkTW9kZVwiKSl7Zm9yKHZhciBlPSExLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIGk9dFtuXS5nZXQoXCJuYW1lXCIpO2lmKHRoaXMuaXNTZWxlY3RlZChpKSl7dGhpcy5zZWxlY3QoaSksZT0hMDticmVha319IWUmJnRoaXMuc2VsZWN0KHRbMF0uZ2V0KFwibmFtZVwiKSl9fSxfdXBkYXRlRGF0YTpmdW5jdGlvbih0KXt2YXIgZT1bXSxuPVtdO3QuZWFjaFJhd1NlcmllcyhmdW5jdGlvbihpKXt2YXIgcj1pLm5hbWU7bi5wdXNoKHIpO3ZhciBhO2lmKGkubGVnZW5kRGF0YVByb3ZpZGVyKXt2YXIgbz1pLmxlZ2VuZERhdGFQcm92aWRlcigpLHM9by5tYXBBcnJheShvLmdldE5hbWUpO3QuaXNTZXJpZXNGaWx0ZXJlZChpKXx8KG49bi5jb25jYXQocykpLHMubGVuZ3RoP2U9ZS5jb25jYXQocyk6YT0hMH1lbHNlIGE9ITA7YSYmemkoaSkmJmUucHVzaChpLm5hbWUpfSksdGhpcy5fYXZhaWxhYmxlTmFtZXM9bjt2YXIgaT10aGlzLmdldChcImRhdGFcIil8fGUscj1wKGksZnVuY3Rpb24odCl7cmV0dXJuKFwic3RyaW5nXCI9PXR5cGVvZiB0fHxcIm51bWJlclwiPT10eXBlb2YgdCkmJih0PXtuYW1lOnR9KSxuZXcgQWEodCx0aGlzLHRoaXMuZWNNb2RlbCl9LHRoaXMpO3RoaXMuX2RhdGE9cn0sZ2V0RGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfSxzZWxlY3Q6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcHRpb24uc2VsZWN0ZWQsbj10aGlzLmdldChcInNlbGVjdGVkTW9kZVwiKTtpZihcInNpbmdsZVwiPT09bil7dmFyIGk9dGhpcy5fZGF0YTtmKGksZnVuY3Rpb24odCl7ZVt0LmdldChcIm5hbWVcIildPSExfSl9ZVt0XT0hMH0sdW5TZWxlY3Q6ZnVuY3Rpb24odCl7XCJzaW5nbGVcIiE9PXRoaXMuZ2V0KFwic2VsZWN0ZWRNb2RlXCIpJiYodGhpcy5vcHRpb24uc2VsZWN0ZWRbdF09ITEpfSx0b2dnbGVTZWxlY3RlZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9wdGlvbi5zZWxlY3RlZDtlLmhhc093blByb3BlcnR5KHQpfHwoZVt0XT0hMCksdGhpc1tlW3RdP1widW5TZWxlY3RcIjpcInNlbGVjdFwiXSh0KX0saXNTZWxlY3RlZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9wdGlvbi5zZWxlY3RlZDtyZXR1cm4hKGUuaGFzT3duUHJvcGVydHkodCkmJiFlW3RdKSYmdSh0aGlzLl9hdmFpbGFibGVOYW1lcyx0KT49MH0sZGVmYXVsdE9wdGlvbjp7emxldmVsOjAsejo0LHNob3c6ITAsb3JpZW50OlwiaG9yaXpvbnRhbFwiLGxlZnQ6XCJjZW50ZXJcIix0b3A6MCxhbGlnbjpcImF1dG9cIixiYWNrZ3JvdW5kQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyQ29sb3I6XCIjY2NjXCIsYm9yZGVyUmFkaXVzOjAsYm9yZGVyV2lkdGg6MCxwYWRkaW5nOjUsaXRlbUdhcDoxMCxpdGVtV2lkdGg6MjUsaXRlbUhlaWdodDoxNCxpbmFjdGl2ZUNvbG9yOlwiI2NjY1wiLHRleHRTdHlsZTp7Y29sb3I6XCIjMzMzXCJ9LHNlbGVjdGVkTW9kZTohMCx0b29sdGlwOntzaG93OiExfX19KTtTbChcImxlZ2VuZFRvZ2dsZVNlbGVjdFwiLFwibGVnZW5kc2VsZWN0Y2hhbmdlZFwiLF8oZmMsXCJ0b2dnbGVTZWxlY3RlZFwiKSksU2woXCJsZWdlbmRTZWxlY3RcIixcImxlZ2VuZHNlbGVjdGVkXCIsXyhmYyxcInNlbGVjdFwiKSksU2woXCJsZWdlbmRVblNlbGVjdFwiLFwibGVnZW5kdW5zZWxlY3RlZFwiLF8oZmMsXCJ1blNlbGVjdFwiKSk7dmFyIE1fPV8sU189ZixDXz1DZCxJXz1MbCh7dHlwZTpcImxlZ2VuZC5wbGFpblwiLG5ld2xpbmVEaXNhYmxlZDohMSxpbml0OmZ1bmN0aW9uKCl7dGhpcy5ncm91cC5hZGQodGhpcy5fY29udGVudEdyb3VwPW5ldyBDXyksdGhpcy5fYmFja2dyb3VuZEVsfSxnZXRDb250ZW50R3JvdXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29udGVudEdyb3VwfSxyZW5kZXI6ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMucmVzZXRJbm5lcigpLHQuZ2V0KFwic2hvd1wiLCEwKSl7dmFyIGk9dC5nZXQoXCJhbGlnblwiKTtpJiZcImF1dG9cIiE9PWl8fChpPVwicmlnaHRcIj09PXQuZ2V0KFwibGVmdFwiKSYmXCJ2ZXJ0aWNhbFwiPT09dC5nZXQoXCJvcmllbnRcIik/XCJyaWdodFwiOlwibGVmdFwiKSx0aGlzLnJlbmRlcklubmVyKGksdCxlLG4pO3ZhciByPXQuZ2V0Qm94TGF5b3V0UGFyYW1zKCksYT17d2lkdGg6bi5nZXRXaWR0aCgpLGhlaWdodDpuLmdldEhlaWdodCgpfSxvPXQuZ2V0KFwicGFkZGluZ1wiKSxsPWhvKHIsYSxvKSx1PXRoaXMubGF5b3V0SW5uZXIodCxpLGwpLGg9aG8ocyh7d2lkdGg6dS53aWR0aCxoZWlnaHQ6dS5oZWlnaHR9LHIpLGEsbyk7dGhpcy5ncm91cC5hdHRyKFwicG9zaXRpb25cIixbaC54LXUueCxoLnktdS55XSksdGhpcy5ncm91cC5hZGQodGhpcy5fYmFja2dyb3VuZEVsPXBjKHUsdCkpfX0scmVzZXRJbm5lcjpmdW5jdGlvbigpe3RoaXMuZ2V0Q29udGVudEdyb3VwKCkucmVtb3ZlQWxsKCksdGhpcy5fYmFja2dyb3VuZEVsJiZ0aGlzLmdyb3VwLnJlbW92ZSh0aGlzLl9iYWNrZ3JvdW5kRWwpfSxyZW5kZXJJbm5lcjpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10aGlzLmdldENvbnRlbnRHcm91cCgpLGE9TigpLG89ZS5nZXQoXCJzZWxlY3RlZE1vZGVcIikscz1bXTtuLmVhY2hSYXdTZXJpZXMoZnVuY3Rpb24odCl7IXQuZ2V0KFwibGVnZW5kSG92ZXJMaW5rXCIpJiZzLnB1c2godC5pZCl9KSxTXyhlLmdldERhdGEoKSxmdW5jdGlvbihsLHUpe3ZhciBoPWwuZ2V0KFwibmFtZVwiKTtpZighdGhpcy5uZXdsaW5lRGlzYWJsZWQmJihcIlwiPT09aHx8XCJcXG5cIj09PWgpKXJldHVybiB2b2lkIHIuYWRkKG5ldyBDXyh7bmV3bGluZTohMH0pKTt2YXIgYz1uLmdldFNlcmllc0J5TmFtZShoKVswXTtpZighYS5nZXQoaCkpaWYoYyl7dmFyIGQ9Yy5nZXREYXRhKCksZj1kLmdldFZpc3VhbChcImNvbG9yXCIpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGYmJihmPWYoYy5nZXREYXRhUGFyYW1zKDApKSk7dmFyIHA9ZC5nZXRWaXN1YWwoXCJsZWdlbmRTeW1ib2xcIil8fFwicm91bmRSZWN0XCIsZz1kLmdldFZpc3VhbChcInN5bWJvbFwiKSx2PXRoaXMuX2NyZWF0ZUl0ZW0oaCx1LGwsZSxwLGcsdCxmLG8pO3Yub24oXCJjbGlja1wiLE1fKGdjLGgsaSkpLm9uKFwibW91c2VvdmVyXCIsTV8odmMsYyxudWxsLGkscykpLm9uKFwibW91c2VvdXRcIixNXyhtYyxjLG51bGwsaSxzKSksYS5zZXQoaCwhMCl9ZWxzZSBuLmVhY2hSYXdTZXJpZXMoZnVuY3Rpb24obil7aWYoIWEuZ2V0KGgpJiZuLmxlZ2VuZERhdGFQcm92aWRlcil7dmFyIHI9bi5sZWdlbmREYXRhUHJvdmlkZXIoKSxjPXIuaW5kZXhPZk5hbWUoaCk7aWYoMD5jKXJldHVybjt2YXIgZD1yLmdldEl0ZW1WaXN1YWwoYyxcImNvbG9yXCIpLGY9XCJyb3VuZFJlY3RcIixwPXRoaXMuX2NyZWF0ZUl0ZW0oaCx1LGwsZSxmLG51bGwsdCxkLG8pO3Aub24oXCJjbGlja1wiLE1fKGdjLGgsaSkpLm9uKFwibW91c2VvdmVyXCIsTV8odmMsbixoLGkscykpLm9uKFwibW91c2VvdXRcIixNXyhtYyxuLGgsaSxzKSksYS5zZXQoaCwhMCl9fSx0aGlzKX0sdGhpcyl9LF9jcmVhdGVJdGVtOmZ1bmN0aW9uKHQsZSxuLGkscixhLHMsbCx1KXt2YXIgaD1pLmdldChcIml0ZW1XaWR0aFwiKSxjPWkuZ2V0KFwiaXRlbUhlaWdodFwiKSxkPWkuZ2V0KFwiaW5hY3RpdmVDb2xvclwiKSxmPWkuZ2V0KFwic3ltYm9sS2VlcEFzcGVjdFwiKSxwPWkuaXNTZWxlY3RlZCh0KSxnPW5ldyBDXyx2PW4uZ2V0TW9kZWwoXCJ0ZXh0U3R5bGVcIiksbT1uLmdldChcImljb25cIikseT1uLmdldE1vZGVsKFwidG9vbHRpcFwiKSxfPXkucGFyZW50TW9kZWw7XG5pZihyPW18fHIsZy5hZGQoVnUociwwLDAsaCxjLHA/bDpkLG51bGw9PWY/ITA6ZikpLCFtJiZhJiYoYSE9PXJ8fFwibm9uZVwiPT1hKSl7dmFyIHg9LjgqYztcIm5vbmVcIj09PWEmJihhPVwiY2lyY2xlXCIpLGcuYWRkKFZ1KGEsKGgteCkvMiwoYy14KS8yLHgseCxwP2w6ZCxudWxsPT1mPyEwOmYpKX12YXIgdz1cImxlZnRcIj09PXM/aCs1Oi01LGI9cyxNPWkuZ2V0KFwiZm9ybWF0dGVyXCIpLFM9dDtcInN0cmluZ1wiPT10eXBlb2YgTSYmTT9TPU0ucmVwbGFjZShcIntuYW1lfVwiLG51bGwhPXQ/dDpcIlwiKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBNJiYoUz1NKHQpKSxnLmFkZChuZXcgenAoe3N0eWxlOmNhKHt9LHYse3RleHQ6Uyx4OncseTpjLzIsdGV4dEZpbGw6cD92LmdldFRleHRDb2xvcigpOmQsdGV4dEFsaWduOmIsdGV4dFZlcnRpY2FsQWxpZ246XCJtaWRkbGVcIn0pfSkpO3ZhciBDPW5ldyBYcCh7c2hhcGU6Zy5nZXRCb3VuZGluZ1JlY3QoKSxpbnZpc2libGU6ITAsdG9vbHRpcDp5LmdldChcInNob3dcIik/byh7Y29udGVudDp0LGZvcm1hdHRlcjpfLmdldChcImZvcm1hdHRlclwiLCEwKXx8ZnVuY3Rpb24oKXtyZXR1cm4gdH0sZm9ybWF0dGVyUGFyYW1zOntjb21wb25lbnRUeXBlOlwibGVnZW5kXCIsbGVnZW5kSW5kZXg6aS5jb21wb25lbnRJbmRleCxuYW1lOnQsJHZhcnM6W1wibmFtZVwiXX19LHkub3B0aW9uKTpudWxsfSk7cmV0dXJuIGcuYWRkKEMpLGcuZWFjaENoaWxkKGZ1bmN0aW9uKHQpe3Quc2lsZW50PSEwfSksQy5zaWxlbnQ9IXUsdGhpcy5nZXRDb250ZW50R3JvdXAoKS5hZGQoZyksdWEoZyksZy5fX2xlZ2VuZERhdGFJbmRleD1lLGd9LGxheW91dElubmVyOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLmdldENvbnRlbnRHcm91cCgpO1BnKHQuZ2V0KFwib3JpZW50XCIpLGksdC5nZXQoXCJpdGVtR2FwXCIpLG4ud2lkdGgsbi5oZWlnaHQpO3ZhciByPWkuZ2V0Qm91bmRpbmdSZWN0KCk7cmV0dXJuIGkuYXR0cihcInBvc2l0aW9uXCIsWy1yLngsLXIueV0pLHRoaXMuZ3JvdXAuZ2V0Qm91bmRpbmdSZWN0KCl9fSksVF89ZnVuY3Rpb24odCl7dmFyIGU9dC5maW5kQ29tcG9uZW50cyh7bWFpblR5cGU6XCJsZWdlbmRcIn0pO2UmJmUubGVuZ3RoJiZ0LmZpbHRlclNlcmllcyhmdW5jdGlvbih0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylpZighZVtuXS5pc1NlbGVjdGVkKHQubmFtZSkpcmV0dXJuITE7cmV0dXJuITB9KX07YmwoVF8pLFJnLnJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlcihcImxlZ2VuZFwiLGZ1bmN0aW9uKCl7cmV0dXJuXCJwbGFpblwifSk7dmFyIGtfPWJfLmV4dGVuZCh7dHlwZTpcImxlZ2VuZC5zY3JvbGxcIixzZXRTY3JvbGxEYXRhSW5kZXg6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb24uc2Nyb2xsRGF0YUluZGV4PXR9LGRlZmF1bHRPcHRpb246e3Njcm9sbERhdGFJbmRleDowLHBhZ2VCdXR0b25JdGVtR2FwOjUscGFnZUJ1dHRvbkdhcDpudWxsLHBhZ2VCdXR0b25Qb3NpdGlvbjpcImVuZFwiLHBhZ2VGb3JtYXR0ZXI6XCJ7Y3VycmVudH0ve3RvdGFsfVwiLHBhZ2VJY29uczp7aG9yaXpvbnRhbDpbXCJNMCwwTDEyLC0xMEwxMiwxMHpcIixcIk0wLDBMLTEyLC0xMEwtMTIsMTB6XCJdLHZlcnRpY2FsOltcIk0wLDBMMjAsMEwxMCwtMjB6XCIsXCJNMCwwTDIwLDBMMTAsMjB6XCJdfSxwYWdlSWNvbkNvbG9yOlwiIzJmNDU1NFwiLHBhZ2VJY29uSW5hY3RpdmVDb2xvcjpcIiNhYWFcIixwYWdlSWNvblNpemU6MTUscGFnZVRleHRTdHlsZTp7Y29sb3I6XCIjMzMzXCJ9LGFuaW1hdGlvbkR1cmF0aW9uVXBkYXRlOjgwMH0saW5pdDpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1mbyh0KTtrXy5zdXBlckNhbGwodGhpcyxcImluaXRcIix0LGUsbixpKSx5Yyh0aGlzLHQscil9LG1lcmdlT3B0aW9uOmZ1bmN0aW9uKHQsZSl7a18uc3VwZXJDYWxsKHRoaXMsXCJtZXJnZU9wdGlvblwiLHQsZSkseWModGhpcyx0aGlzLm9wdGlvbix0KX0sZ2V0T3JpZW50OmZ1bmN0aW9uKCl7cmV0dXJuXCJ2ZXJ0aWNhbFwiPT09dGhpcy5nZXQoXCJvcmllbnRcIik/e2luZGV4OjEsbmFtZTpcInZlcnRpY2FsXCJ9OntpbmRleDowLG5hbWU6XCJob3Jpem9udGFsXCJ9fX0pLERfPUNkLEFfPVtcIndpZHRoXCIsXCJoZWlnaHRcIl0sUF89W1wieFwiLFwieVwiXSxMXz1JXy5leHRlbmQoe3R5cGU6XCJsZWdlbmQuc2Nyb2xsXCIsbmV3bGluZURpc2FibGVkOiEwLGluaXQ6ZnVuY3Rpb24oKXtMXy5zdXBlckNhbGwodGhpcyxcImluaXRcIiksdGhpcy5fY3VycmVudEluZGV4PTAsdGhpcy5ncm91cC5hZGQodGhpcy5fY29udGFpbmVyR3JvdXA9bmV3IERfKSx0aGlzLl9jb250YWluZXJHcm91cC5hZGQodGhpcy5nZXRDb250ZW50R3JvdXAoKSksdGhpcy5ncm91cC5hZGQodGhpcy5fY29udHJvbGxlckdyb3VwPW5ldyBEXyksdGhpcy5fc2hvd0NvbnRyb2xsZXJ9LHJlc2V0SW5uZXI6ZnVuY3Rpb24oKXtMXy5zdXBlckNhbGwodGhpcyxcInJlc2V0SW5uZXJcIiksdGhpcy5fY29udHJvbGxlckdyb3VwLnJlbW92ZUFsbCgpLHRoaXMuX2NvbnRhaW5lckdyb3VwLnJlbW92ZUNsaXBQYXRoKCksdGhpcy5fY29udGFpbmVyR3JvdXAuX19yZWN0U2l6ZT1udWxsfSxyZW5kZXJJbm5lcjpmdW5jdGlvbih0LGUsbixpKXtmdW5jdGlvbiByKHQsbil7dmFyIHI9dCtcIkRhdGFJbmRleFwiLGw9RGEoZS5nZXQoXCJwYWdlSWNvbnNcIiwhMClbZS5nZXRPcmllbnQoKS5uYW1lXVtuXSx7b25jbGljazp5KGEuX3BhZ2VHbyxhLHIsZSxpKX0se3g6LXNbMF0vMix5Oi1zWzFdLzIsd2lkdGg6c1swXSxoZWlnaHQ6c1sxXX0pO2wubmFtZT10LG8uYWRkKGwpfXZhciBhPXRoaXM7TF8uc3VwZXJDYWxsKHRoaXMsXCJyZW5kZXJJbm5lclwiLHQsZSxuLGkpO3ZhciBvPXRoaXMuX2NvbnRyb2xsZXJHcm91cCxzPWUuZ2V0KFwicGFnZUljb25TaXplXCIsITApO3gocyl8fChzPVtzLHNdKSxyKFwicGFnZVByZXZcIiwwKTt2YXIgbD1lLmdldE1vZGVsKFwicGFnZVRleHRTdHlsZVwiKTtvLmFkZChuZXcgenAoe25hbWU6XCJwYWdlVGV4dFwiLHN0eWxlOnt0ZXh0RmlsbDpsLmdldFRleHRDb2xvcigpLGZvbnQ6bC5nZXRGb250KCksdGV4dFZlcnRpY2FsQWxpZ246XCJtaWRkbGVcIix0ZXh0QWxpZ246XCJjZW50ZXJcIn0sc2lsZW50OiEwfSkpLHIoXCJwYWdlTmV4dFwiLDEpfSxsYXlvdXRJbm5lcjpmdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5nZXRDb250ZW50R3JvdXAoKSxyPXRoaXMuX2NvbnRhaW5lckdyb3VwLGE9dGhpcy5fY29udHJvbGxlckdyb3VwLG89dC5nZXRPcmllbnQoKS5pbmRleCxzPUFfW29dLGw9QV9bMS1vXSx1PVBfWzEtb107UGcodC5nZXQoXCJvcmllbnRcIiksaSx0LmdldChcIml0ZW1HYXBcIiksbz9uLndpZHRoOm51bGwsbz9udWxsOm4uaGVpZ2h0KSxQZyhcImhvcml6b250YWxcIixhLHQuZ2V0KFwicGFnZUJ1dHRvbkl0ZW1HYXBcIiwhMCkpO3ZhciBoPWkuZ2V0Qm91bmRpbmdSZWN0KCksYz1hLmdldEJvdW5kaW5nUmVjdCgpLGQ9dGhpcy5fc2hvd0NvbnRyb2xsZXI9aFtzXT5uW3NdLGY9Wy1oLngsLWgueV07ZltvXT1pLnBvc2l0aW9uW29dO3ZhciBwPVswLDBdLGc9Wy1jLngsLWMueV0sdj1EKHQuZ2V0KFwicGFnZUJ1dHRvbkdhcFwiLCEwKSx0LmdldChcIml0ZW1HYXBcIiwhMCkpO2lmKGQpe3ZhciBtPXQuZ2V0KFwicGFnZUJ1dHRvblBvc2l0aW9uXCIsITApO1wiZW5kXCI9PT1tP2dbb10rPW5bc10tY1tzXTpwW29dKz1jW3NdK3Z9Z1sxLW9dKz1oW2xdLzItY1tsXS8yLGkuYXR0cihcInBvc2l0aW9uXCIsZiksci5hdHRyKFwicG9zaXRpb25cIixwKSxhLmF0dHIoXCJwb3NpdGlvblwiLGcpO3ZhciB5PXRoaXMuZ3JvdXAuZ2V0Qm91bmRpbmdSZWN0KCkseT17eDowLHk6MH07aWYoeVtzXT1kP25bc106aFtzXSx5W2xdPU1hdGgubWF4KGhbbF0sY1tsXSkseVt1XT1NYXRoLm1pbigwLGNbdV0rZ1sxLW9dKSxyLl9fcmVjdFNpemU9bltzXSxkKXt2YXIgXz17eDowLHk6MH07X1tzXT1NYXRoLm1heChuW3NdLWNbc10tdiwwKSxfW2xdPXlbbF0sci5zZXRDbGlwUGF0aChuZXcgWHAoe3NoYXBlOl99KSksci5fX3JlY3RTaXplPV9bc119ZWxzZSBhLmVhY2hDaGlsZChmdW5jdGlvbih0KXt0LmF0dHIoe2ludmlzaWJsZTohMCxzaWxlbnQ6ITB9KX0pO3ZhciB4PXRoaXMuX2dldFBhZ2VJbmZvKHQpO3JldHVybiBudWxsIT14LnBhZ2VJbmRleCYmd2EoaSx7cG9zaXRpb246eC5jb250ZW50UG9zaXRpb259LGQ/dDohMSksdGhpcy5fdXBkYXRlUGFnZUluZm9WaWV3KHQseCkseX0sX3BhZ2VHbzpmdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5fZ2V0UGFnZUluZm8oZSlbdF07bnVsbCE9aSYmbi5kaXNwYXRjaEFjdGlvbih7dHlwZTpcImxlZ2VuZFNjcm9sbFwiLHNjcm9sbERhdGFJbmRleDppLGxlZ2VuZElkOmUuaWR9KX0sX3VwZGF0ZVBhZ2VJbmZvVmlldzpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX2NvbnRyb2xsZXJHcm91cDtmKFtcInBhZ2VQcmV2XCIsXCJwYWdlTmV4dFwiXSxmdW5jdGlvbihpKXt2YXIgcj1udWxsIT1lW2krXCJEYXRhSW5kZXhcIl0sYT1uLmNoaWxkT2ZOYW1lKGkpO2EmJihhLnNldFN0eWxlKFwiZmlsbFwiLHI/dC5nZXQoXCJwYWdlSWNvbkNvbG9yXCIsITApOnQuZ2V0KFwicGFnZUljb25JbmFjdGl2ZUNvbG9yXCIsITApKSxhLmN1cnNvcj1yP1wicG9pbnRlclwiOlwiZGVmYXVsdFwiKX0pO3ZhciBpPW4uY2hpbGRPZk5hbWUoXCJwYWdlVGV4dFwiKSxyPXQuZ2V0KFwicGFnZUZvcm1hdHRlclwiKSxhPWUucGFnZUluZGV4LG89bnVsbCE9YT9hKzE6MCxzPWUucGFnZUNvdW50O2kmJnImJmkuc2V0U3R5bGUoXCJ0ZXh0XCIsYihyKT9yLnJlcGxhY2UoXCJ7Y3VycmVudH1cIixvKS5yZXBsYWNlKFwie3RvdGFsfVwiLHMpOnIoe2N1cnJlbnQ6byx0b3RhbDpzfSkpfSxfZ2V0UGFnZUluZm86ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXt2YXIgZT10LmdldEJvdW5kaW5nUmVjdCgpLmNsb25lKCk7cmV0dXJuIGVbZl0rPXQucG9zaXRpb25baF0sZX12YXIgbixpLHIsYSxvPXQuZ2V0KFwic2Nyb2xsRGF0YUluZGV4XCIsITApLHM9dGhpcy5nZXRDb250ZW50R3JvdXAoKSxsPXMuZ2V0Qm91bmRpbmdSZWN0KCksdT10aGlzLl9jb250YWluZXJHcm91cC5fX3JlY3RTaXplLGg9dC5nZXRPcmllbnQoKS5pbmRleCxjPUFfW2hdLGQ9QV9bMS1oXSxmPVBfW2hdLHA9cy5wb3NpdGlvbi5zbGljZSgpO3RoaXMuX3Nob3dDb250cm9sbGVyP3MuZWFjaENoaWxkKGZ1bmN0aW9uKHQpe3QuX19sZWdlbmREYXRhSW5kZXg9PT1vJiYoYT10KX0pOmE9cy5jaGlsZEF0KDApO3ZhciBnPXU/TWF0aC5jZWlsKGxbY10vdSk6MDtpZihhKXt2YXIgdj1hLmdldEJvdW5kaW5nUmVjdCgpLG09YS5wb3NpdGlvbltoXSt2W2ZdO3BbaF09LW0tbFtmXSxuPU1hdGguZmxvb3IoZyoobSt2W2ZdK3UvMikvbFtjXSksbj1sW2NdJiZnP01hdGgubWF4KDAsTWF0aC5taW4oZy0xLG4pKTotMTt2YXIgeT17eDowLHk6MH07eVtjXT11LHlbZF09bFtkXSx5W2ZdPS1wW2hdLWxbZl07dmFyIF8seD1zLmNoaWxkcmVuKCk7aWYocy5lYWNoQ2hpbGQoZnVuY3Rpb24odCxuKXt2YXIgaT1lKHQpO2kuaW50ZXJzZWN0KHkpJiYobnVsbD09XyYmKF89bikscj10Ll9fbGVnZW5kRGF0YUluZGV4KSxuPT09eC5sZW5ndGgtMSYmaVtmXStpW2NdPD15W2ZdK3lbY10mJihyPW51bGwpfSksbnVsbCE9Xyl7dmFyIHc9eFtfXSxiPWUodyk7aWYoeVtmXT1iW2ZdK2JbY10teVtjXSwwPj1fJiZiW2ZdPj15W2ZdKWk9bnVsbDtlbHNle2Zvcig7Xz4wJiZlKHhbXy0xXSkuaW50ZXJzZWN0KHkpOylfLS07aT14W19dLl9fbGVnZW5kRGF0YUluZGV4fX19cmV0dXJue2NvbnRlbnRQb3NpdGlvbjpwLHBhZ2VJbmRleDpuLHBhZ2VDb3VudDpnLHBhZ2VQcmV2RGF0YUluZGV4OmkscGFnZU5leHREYXRhSW5kZXg6cn19fSk7U2woXCJsZWdlbmRTY3JvbGxcIixcImxlZ2VuZHNjcm9sbFwiLGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5zY3JvbGxEYXRhSW5kZXg7bnVsbCE9biYmZS5lYWNoQ29tcG9uZW50KHttYWluVHlwZTpcImxlZ2VuZFwiLHN1YlR5cGU6XCJzY3JvbGxcIixxdWVyeTp0fSxmdW5jdGlvbih0KXt0LnNldFNjcm9sbERhdGFJbmRleChuKX0pfSksdC52ZXJzaW9uPUt2LHQuZGVwZW5kZW5jaWVzPVF2LHQuUFJJT1JJVFk9c20sdC5pbml0PXBsLHQuY29ubmVjdD1nbCx0LmRpc0Nvbm5lY3Q9dmwsdC5kaXNjb25uZWN0PWttLHQuZGlzcG9zZT1tbCx0LmdldEluc3RhbmNlQnlEb209eWwsdC5nZXRJbnN0YW5jZUJ5SWQ9X2wsdC5yZWdpc3RlclRoZW1lPXhsLHQucmVnaXN0ZXJQcmVwcm9jZXNzb3I9d2wsdC5yZWdpc3RlclByb2Nlc3Nvcj1ibCx0LnJlZ2lzdGVyUG9zdFVwZGF0ZT1NbCx0LnJlZ2lzdGVyQWN0aW9uPVNsLHQucmVnaXN0ZXJDb29yZGluYXRlU3lzdGVtPUNsLHQuZ2V0Q29vcmRpbmF0ZVN5c3RlbURpbWVuc2lvbnM9SWwsdC5yZWdpc3RlckxheW91dD1UbCx0LnJlZ2lzdGVyVmlzdWFsPWtsLHQucmVnaXN0ZXJMb2FkaW5nPUFsLHQuZXh0ZW5kQ29tcG9uZW50TW9kZWw9UGwsdC5leHRlbmRDb21wb25lbnRWaWV3PUxsLHQuZXh0ZW5kU2VyaWVzTW9kZWw9T2wsdC5leHRlbmRDaGFydFZpZXc9UmwsdC5zZXRDYW52YXNDcmVhdG9yPUVsLHQucmVnaXN0ZXJNYXA9QmwsdC5nZXRNYXA9emwsdC5kYXRhVG9vbD1EbSx0LnpyZW5kZXI9d2YsdC5ncmFwaGljPWxnLHQubnVtYmVyPV9nLHQuZm9ybWF0PVRnLHQudGhyb3R0bGU9QXMsdC5oZWxwZXI9VHksdC5tYXRyaXg9WmMsdC52ZWN0b3I9SGMsdC5jb2xvcj1kZCx0LnBhcnNlR2VvSlNPTj1EeSx0LnBhcnNlR2VvSnNvbj1PeSx0LnV0aWw9UnksdC5MaXN0PUZtLHQuTW9kZWw9QWEsdC5BeGlzPUx5LHQuZW52PWJjfSk7Il19